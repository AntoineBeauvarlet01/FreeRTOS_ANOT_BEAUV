
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08014df0  08014df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f1c  08014f1c  000161cc  2**0
                  CONTENTS
  4 .ARM          00000008  08014f1c  08014f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f24  08014f24  000161cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014f24  08014f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014f28  08014f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08014f2c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08014fb8  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08015058  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000095dc  200001cc  080150f8  000161cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200097a8  080150f8  000167a8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040e82  00000000  00000000  000161fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a30f  00000000  00000000  0005707e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003448  00000000  00000000  00061390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002809  00000000  00000000  000647d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ad5f  00000000  00000000  00066fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f330  00000000  00000000  000a1d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012a91e  00000000  00000000  000f1070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021b98e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000df28  00000000  00000000  0021b9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  002298fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014dd8 	.word	0x08014dd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08014dd8 	.word	0x08014dd8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC3_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC3_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC3_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC3_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC3_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC3_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC3_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000562:	f002 fd49 	bl	8002ff8 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800056c:	f001 fa2e 	bl	80019cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000570:	2304      	movs	r3, #4
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000582:	f002 fd7d 	bl	8003080 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800058c:	f001 fa1e 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001e8 	.word	0x200001e8
 800059c:	40012200 	.word	0x40012200
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x74>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d124      	bne.n	8000610 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80005f6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80005fa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <HAL_ADC_MspInit+0x7c>)
 800060c:	f004 f83c 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40012200 	.word	0x40012200
 800061c:	40023800 	.word	0x40023800
 8000620:	40021400 	.word	0x40021400

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f003 f849 	bl	80036e4 <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f001 f9b8 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000230 	.word	0x20000230
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_DCMI_Init+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f6:	f003 f8e7 	bl	80038c8 <HAL_DCMI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000700:	f001 f964 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000254 	.word	0x20000254
 800070c:	50050000 	.word	0x50050000

08000710 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	@ 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a50      	ldr	r2, [pc, #320]	@ (8000870 <HAL_DCMI_MspInit+0x160>)
 800072e:	4293      	cmp	r3, r2
 8000730:	f040 809a 	bne.w	8000868 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000734:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000738:	4a4e      	ldr	r2, [pc, #312]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000740:	4b4c      	ldr	r3, [pc, #304]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a48      	ldr	r2, [pc, #288]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
 8000758:	4b46      	ldr	r3, [pc, #280]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000770:	4b40      	ldr	r3, [pc, #256]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
 8000788:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800079a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a0:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d4:	230d      	movs	r3, #13
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	@ (8000878 <HAL_DCMI_MspInit+0x168>)
 80007e0:	f003 ff52 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80007e4:	2308      	movs	r3, #8
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f4:	230d      	movs	r3, #13
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	@ (800087c <HAL_DCMI_MspInit+0x16c>)
 8000800:	f003 ff42 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000816:	230d      	movs	r3, #13
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <HAL_DCMI_MspInit+0x170>)
 8000822:	f003 ff31 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000826:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <HAL_DCMI_MspInit+0x174>)
 8000844:	f003 ff20 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000848:	2350      	movs	r3, #80	@ 0x50
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000858:	230d      	movs	r3, #13
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_DCMI_MspInit+0x178>)
 8000864:	f003 ff10 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3738      	adds	r7, #56	@ 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	50050000 	.word	0x50050000
 8000874:	40023800 	.word	0x40023800
 8000878:	40021000 	.word	0x40021000
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021800 	.word	0x40021800
 8000884:	40021c00 	.word	0x40021c00
 8000888:	40020000 	.word	0x40020000

0800088c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <MX_DMA2D_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008c2:	f003 f9a7 	bl	8003c14 <HAL_DMA2D_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008cc:	f001 f87e 	bl	80019cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d0:	2101      	movs	r1, #1
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008d4:	f003 faf8 	bl	8003ec8 <HAL_DMA2D_ConfigLayer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008de:	f001 f875 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200002a4 	.word	0x200002a4
 80008ec:	4002b000 	.word	0x4002b000

080008f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_DMA2D_MspInit+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	205a      	movs	r0, #90	@ 0x5a
 8000920:	f002 feb6 	bl	8003690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000924:	205a      	movs	r0, #90	@ 0x5a
 8000926:	f002 fecf 	bl	80036c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	4002b000 	.word	0x4002b000
 8000938:	40023800 	.word	0x40023800

0800093c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <MX_ETH_Init+0x88>)
 8000944:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000954:	22e1      	movs	r2, #225	@ 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_ETH_Init+0x84>)
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800096e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000976:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_ETH_Init+0x84>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_ETH_Init+0x90>)
 800097c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <MX_ETH_Init+0x94>)
 8000982:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000986:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800098a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x84>)
 800098e:	f003 fb2d 	bl	8003fec <HAL_ETH_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000998:	f001 f818 	bl	80019cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a2:	f014 f805 	bl	80149b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a8:	2221      	movs	r2, #33	@ 0x21
 80009aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000031c 	.word	0x2000031c
 80009c4:	40028000 	.word	0x40028000
 80009c8:	200003cc 	.word	0x200003cc
 80009cc:	2000012c 	.word	0x2000012c
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	200002e4 	.word	0x200002e4

080009d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <HAL_ETH_MspInit+0x11c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d178      	bne.n	8000aec <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009fa:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3e      	ldr	r2, [pc, #248]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a8a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <HAL_ETH_MspInit+0x124>)
 8000aa8:	f003 fdee 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aac:	2332      	movs	r3, #50	@ 0x32
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <HAL_ETH_MspInit+0x128>)
 8000ac8:	f003 fdde 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000acc:	2386      	movs	r3, #134	@ 0x86
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_ETH_MspInit+0x12c>)
 8000ae8:	f003 fdce 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40028000 	.word	0x40028000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <MX_FMC_Init+0x9c>)
 8000b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b8a:	f009 fe66 	bl	800a85a <HAL_SDRAM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b94:	f000 ff1a 	bl	80019cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003d4 	.word	0x200003d4
 8000ba4:	a0000140 	.word	0xa0000140

08000ba8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d16d      	bne.n	8000ca0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bce:	4a37      	ldr	r2, [pc, #220]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000be2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000be6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482c      	ldr	r0, [pc, #176]	@ (8000cb0 <HAL_FMC_MspInit+0x108>)
 8000bfe:	f003 fd43 	bl	8004688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <HAL_FMC_MspInit+0x10c>)
 8000c1e:	f003 fd33 	bl	8004688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <HAL_FMC_MspInit+0x110>)
 8000c3e:	f003 fd23 	bl	8004688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_FMC_MspInit+0x114>)
 8000c5e:	f003 fd13 	bl	8004688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	@ 0x28
 8000c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_FMC_MspInit+0x118>)
 8000c7c:	f003 fd04 	bl	8004688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c80:	2308      	movs	r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c90:	230c      	movs	r3, #12
 8000c92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <HAL_FMC_MspInit+0x11c>)
 8000c9a:	f003 fcf5 	bl	8004688 <HAL_GPIO_Init>
 8000c9e:	e000      	b.n	8000ca2 <HAL_FMC_MspInit+0xfa>
    return;
 8000ca0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000408 	.word	0x20000408
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021400 	.word	0x40021400
 8000cc0:	40021c00 	.word	0x40021c00
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cd0:	f7ff ff6a 	bl	8000ba8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <vApplicationGetIdleTaskMemory+0x30>)
 8000d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000410 	.word	0x20000410
 8000d40:	20000468 	.word	0x20000468

08000d44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_FREERTOS_Init+0x30>)
 8000d4c:	1d3c      	adds	r4, r7, #4
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f010 fc9f 	bl	80116a4 <osThreadCreate>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <MX_FREERTOS_Init+0x34>)
 8000d6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	08014dfc 	.word	0x08014dfc
 8000d78:	2000040c 	.word	0x2000040c

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d84:	f013 f866 	bl	8013e54 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f010 fcd7 	bl	801173c <osDelay>
 8000d8e:	e7fb      	b.n	8000d88 <StartDefaultTask+0xc>

08000d90 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	@ 0x40
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4aaf      	ldr	r2, [pc, #700]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4bad      	ldr	r3, [pc, #692]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	4baa      	ldr	r3, [pc, #680]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4aa9      	ldr	r2, [pc, #676]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4ba7      	ldr	r3, [pc, #668]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4aa3      	ldr	r2, [pc, #652]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4ba1      	ldr	r3, [pc, #644]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b9e      	ldr	r3, [pc, #632]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a9d      	ldr	r2, [pc, #628]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b98      	ldr	r3, [pc, #608]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a97      	ldr	r2, [pc, #604]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b95      	ldr	r3, [pc, #596]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b92      	ldr	r3, [pc, #584]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e36:	4b8c      	ldr	r3, [pc, #560]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4e:	4b86      	ldr	r3, [pc, #536]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a85      	ldr	r2, [pc, #532]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b83      	ldr	r3, [pc, #524]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e66:	4b80      	ldr	r3, [pc, #512]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b7d      	ldr	r3, [pc, #500]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a79      	ldr	r2, [pc, #484]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b77      	ldr	r3, [pc, #476]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a73      	ldr	r2, [pc, #460]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b71      	ldr	r3, [pc, #452]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	486e      	ldr	r0, [pc, #440]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000eb4:	f003 fdac 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	210e      	movs	r1, #14
 8000ebc:	486c      	ldr	r0, [pc, #432]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ebe:	f003 fda7 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	486b      	ldr	r0, [pc, #428]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000ec8:	f003 fda2 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed2:	4867      	ldr	r0, [pc, #412]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ed4:	f003 fd9c 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ede:	4866      	ldr	r0, [pc, #408]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ee0:	f003 fd96 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21c8      	movs	r1, #200	@ 0xc8
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <MX_GPIO_Init+0x2ec>)
 8000eea:	f003 fd91 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	485f      	ldr	r0, [pc, #380]	@ (8001080 <MX_GPIO_Init+0x2f0>)
 8000f02:	f003 fbc1 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f06:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4858      	ldr	r0, [pc, #352]	@ (8001084 <MX_GPIO_Init+0x2f4>)
 8000f24:	f003 fbb0 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4852      	ldr	r0, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x2f8>)
 8000f3e:	f003 fba3 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f58:	f003 fb96 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	483e      	ldr	r0, [pc, #248]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f74:	f003 fb88 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000f78:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000f92:	f003 fb79 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4838      	ldr	r0, [pc, #224]	@ (800108c <MX_GPIO_Init+0x2fc>)
 8000fac:	f003 fb6c 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482b      	ldr	r0, [pc, #172]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f003 fb5e 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4823      	ldr	r0, [pc, #140]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000fe0:	f003 fb52 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f003 fb45 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8001018:	f003 fb36 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8001032:	f003 fb29 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800103c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 800104e:	f003 fb1b 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x300>
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40022000 	.word	0x40022000
 8001074:	40022800 	.word	0x40022800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40021800 	.word	0x40021800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020400 	.word	0x40020400
 8001088:	40022400 	.word	0x40022400
 800108c:	40020800 	.word	0x40020800
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <MX_GPIO_Init+0x3ac>)
 800109a:	f003 faf5 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800109e:	23c8      	movs	r3, #200	@ 0xc8
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4822      	ldr	r0, [pc, #136]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010b6:	f003 fae7 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010ba:	2305      	movs	r3, #5
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ca:	230a      	movs	r3, #10
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <MX_GPIO_Init+0x3b4>)
 80010d6:	f003 fad7 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010ee:	f003 facb 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010f2:	2328      	movs	r3, #40	@ 0x28
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001102:	230a      	movs	r3, #10
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_GPIO_Init+0x3b8>)
 800110e:	f003 fabb 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001112:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001124:	2305      	movs	r3, #5
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_GPIO_Init+0x3bc>)
 8001130:	f003 faaa 	bl	8004688 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	@ 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40021800 	.word	0x40021800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C1_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f005 fd8e 	bl	8006cac <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fc19 	bl	80019cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f005 fe21 	bl	8006de4 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fc10 	bl	80019cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f005 fe63 	bl	8006e7a <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fc07 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000668 	.word	0x20000668
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_I2C3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <MX_I2C3_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_I2C3_Init+0x74>)
 800120c:	f005 fd4e 	bl	8006cac <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fbd9 	bl	80019cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <MX_I2C3_Init+0x74>)
 800121e:	f005 fde1 	bl	8006de4 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 fbd0 	bl	80019cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001230:	f005 fe23 	bl	8006e7a <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fbc7 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200006bc 	.word	0x200006bc
 8001248:	40005c00 	.word	0x40005c00
 800124c:	00c0eaff 	.word	0x00c0eaff

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	@ 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f013 fb9d 	bl	80149b0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a44      	ldr	r2, [pc, #272]	@ (800138c <HAL_I2C_MspInit+0x13c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13d      	bne.n	80012fc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f006 ff88 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129a:	f000 fb97 	bl	80019cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80012b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012da:	4619      	mov	r1, r3
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <HAL_I2C_MspInit+0x144>)
 80012de:	f003 f9d3 	bl	8004688 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012fa:	e042      	b.n	8001382 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_I2C_MspInit+0x148>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d13d      	bne.n	8001382 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f006 ff44 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001322:	f000 fb53 	bl	80019cc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800133e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <HAL_I2C_MspInit+0x14c>)
 8001366:	f003 f98f 	bl	8004688 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	@ 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40005c00 	.word	0x40005c00
 800139c:	40021c00 	.word	0x40021c00

080013a0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2234      	movs	r2, #52	@ 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f013 faff 	bl	80149b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013b4:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <MX_LTDC_Init+0x100>)
 80013b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013b8:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d2:	2228      	movs	r2, #40	@ 0x28
 80013d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d8:	2209      	movs	r2, #9
 80013da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013de:	2235      	movs	r2, #53	@ 0x35
 80013e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ea:	f240 2215 	movw	r2, #533	@ 0x215
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013f2:	f240 121b 	movw	r2, #283	@ 0x11b
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013fa:	f240 2235 	movw	r2, #565	@ 0x235
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001402:	f240 121d 	movw	r2, #285	@ 0x11d
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_LTDC_Init+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_LTDC_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001420:	481e      	ldr	r0, [pc, #120]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001422:	f005 fd77 	bl	8006f14 <HAL_LTDC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 face 	bl	80019cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001434:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001438:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800143e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001442:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001448:	23ff      	movs	r3, #255	@ 0xff
 800144a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001450:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001454:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800145a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001460:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001466:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001486:	f005 fed7 	bl	8007238 <HAL_LTDC_ConfigLayer>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001490:	f000 fa9c 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000710 	.word	0x20000710
 80014a0:	40016800 	.word	0x40016800

080014a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <HAL_LTDC_MspInit+0x174>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 80a3 	bne.w	800160e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c8:	4b54      	ldr	r3, [pc, #336]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	4a53      	ldr	r2, [pc, #332]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001510:	4b42      	ldr	r3, [pc, #264]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a41      	ldr	r2, [pc, #260]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	6313      	str	r3, [r2, #48]	@ 0x30
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a35      	ldr	r2, [pc, #212]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b33      	ldr	r3, [pc, #204]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001558:	2310      	movs	r3, #16
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001568:	230e      	movs	r3, #14
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <HAL_LTDC_MspInit+0x17c>)
 8001574:	f003 f888 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001578:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800158a:	230e      	movs	r3, #14
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <HAL_LTDC_MspInit+0x180>)
 8001596:	f003 f877 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800159a:	23f7      	movs	r3, #247	@ 0xf7
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015aa:	230e      	movs	r3, #14
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	@ (8001628 <HAL_LTDC_MspInit+0x184>)
 80015b6:	f003 f867 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015cc:	2309      	movs	r3, #9
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <HAL_LTDC_MspInit+0x188>)
 80015d8:	f003 f856 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015dc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ee:	230e      	movs	r3, #14
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <HAL_LTDC_MspInit+0x18c>)
 80015fa:	f003 f845 	bl	8004688 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2058      	movs	r0, #88	@ 0x58
 8001604:	f002 f844 	bl	8003690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001608:	2058      	movs	r0, #88	@ 0x58
 800160a:	f002 f85d 	bl	80036c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	@ 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40016800 	.word	0x40016800
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40022400 	.word	0x40022400
 8001628:	40022800 	.word	0x40022800
 800162c:	40021800 	.word	0x40021800
 8001630:	40022000 	.word	0x40022000

08001634 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001638:	f3bf 8f4f 	dsb	sy
}
 800163c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <__NVIC_SystemReset+0x24>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001646:	4904      	ldr	r1, [pc, #16]	@ (8001658 <__NVIC_SystemReset+0x24>)
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_SystemReset+0x28>)
 800164a:	4313      	orrs	r3, r2
 800164c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800164e:	f3bf 8f4f 	dsb	sy
}
 8001652:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <__NVIC_SystemReset+0x20>
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0004 	.word	0x05fa0004

08001660 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001668:	1d39      	adds	r1, r7, #4
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	2201      	movs	r2, #1
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <__io_putchar+0x20>)
 8001672:	f00a fad3 	bl	800bc1c <HAL_UART_Transmit>
	return ch;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000c1c 	.word	0x20000c1c

08001684 <task_led_bouton>:


void task_led_bouton(void *unused)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 800168c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <task_led_bouton+0x3c>)
 8001692:	f003 f9a5 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]

		if (buttonState == GPIO_PIN_SET) // Bouton appuyé (niveau haut)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <task_led_bouton+0x28>
		{
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET); // LED ON
 80016a0:	2201      	movs	r2, #1
 80016a2:	2102      	movs	r1, #2
 80016a4:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <task_led_bouton+0x3c>)
 80016a6:	f003 f9b3 	bl	8004a10 <HAL_GPIO_WritePin>
 80016aa:	e004      	b.n	80016b6 <task_led_bouton+0x32>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET); // LED OFF
 80016ac:	2200      	movs	r2, #0
 80016ae:	2102      	movs	r1, #2
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <task_led_bouton+0x3c>)
 80016b2:	f003 f9ad 	bl	8004a10 <HAL_GPIO_WritePin>
		}
		vTaskDelay(50);
 80016b6:	2032      	movs	r0, #50	@ 0x32
 80016b8:	f011 f912 	bl	80128e0 <vTaskDelay>
	{
 80016bc:	e7e6      	b.n	800168c <task_led_bouton+0x8>
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <task_led>:
	}
}


void task_led(void *unused)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80016cc:	2102      	movs	r1, #2
 80016ce:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <task_led+0x1c>)
 80016d0:	f003 f9b7 	bl	8004a42 <HAL_GPIO_TogglePin>
		//printf("La LED change d'etat\r\n");
		vTaskDelay(100);
 80016d4:	2064      	movs	r0, #100	@ 0x64
 80016d6:	f011 f903 	bl	80128e0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80016da:	bf00      	nop
 80016dc:	e7f6      	b.n	80016cc <task_led+0x8>
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000

080016e4 <task_give>:
 */
#endif

#ifdef NOTIFICATION
void task_give(void *unused)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	BaseType_t HigherPriorityTaskWoken;
	for(;;)
	{
		printf("AVANT GIVE\r\n");
 80016ec:	4809      	ldr	r0, [pc, #36]	@ (8001714 <task_give+0x30>)
 80016ee:	f013 f87f 	bl	80147f0 <puts>
		vTaskNotifyGiveFromISR(task_uart1_handle, &HigherPriorityTaskWoken);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <task_give+0x34>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f107 020c 	add.w	r2, r7, #12
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f011 fe81 	bl	8013404 <vTaskNotifyGiveFromISR>
		vTaskDelay(200);
 8001702:	20c8      	movs	r0, #200	@ 0xc8
 8001704:	f011 f8ec 	bl	80128e0 <vTaskDelay>
		printf("APRES GIVE\r\n");
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <task_give+0x38>)
 800170a:	f013 f871 	bl	80147f0 <puts>
		printf("AVANT GIVE\r\n");
 800170e:	bf00      	nop
 8001710:	e7ec      	b.n	80016ec <task_give+0x8>
 8001712:	bf00      	nop
 8001714:	08014e18 	.word	0x08014e18
 8001718:	200007b8 	.word	0x200007b8
 800171c:	08014e24 	.word	0x08014e24

08001720 <task_take>:
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
}


void task_take(void *unused)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("AVANT TAKE\r\n");
 8001728:	4808      	ldr	r0, [pc, #32]	@ (800174c <task_take+0x2c>)
 800172a:	f013 f861 	bl	80147f0 <puts>
		if (ulTaskNotifyTake(pdTRUE, 1000) == pdFALSE)
 800172e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001732:	2001      	movs	r0, #1
 8001734:	f011 fe1e 	bl	8013374 <ulTaskNotifyTake>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <task_take+0x22>
		{
			NVIC_SystemReset(); // RESET
 800173e:	f7ff ff79 	bl	8001634 <__NVIC_SystemReset>
		}
		printf("APRES TAKE\r\n");
 8001742:	4803      	ldr	r0, [pc, #12]	@ (8001750 <task_take+0x30>)
 8001744:	f013 f854 	bl	80147f0 <puts>
		printf("AVANT TAKE\r\n");
 8001748:	e7ee      	b.n	8001728 <task_take+0x8>
 800174a:	bf00      	nop
 800174c:	08014e30 	.word	0x08014e30
 8001750:	08014e3c 	.word	0x08014e3c

08001754 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800175a:	f001 fbfc 	bl	8002f56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800175e:	f000 f87f 	bl	8001860 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001762:	f000 f8ef 	bl	8001944 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001766:	f7ff fb13 	bl	8000d90 <MX_GPIO_Init>
	MX_ADC3_Init();
 800176a:	f7fe fec9 	bl	8000500 <MX_ADC3_Init>
	MX_CRC_Init();
 800176e:	f7fe ff59 	bl	8000624 <MX_CRC_Init>
	MX_DCMI_Init();
 8001772:	f7fe ff99 	bl	80006a8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001776:	f7ff f889 	bl	800088c <MX_DMA2D_Init>
	MX_ETH_Init();
 800177a:	f7ff f8df 	bl	800093c <MX_ETH_Init>
	MX_FMC_Init();
 800177e:	f7ff f9c3 	bl	8000b08 <MX_FMC_Init>
	MX_I2C1_Init();
 8001782:	f7ff fce5 	bl	8001150 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001786:	f7ff fd23 	bl	80011d0 <MX_I2C3_Init>
	MX_LTDC_Init();
 800178a:	f7ff fe09 	bl	80013a0 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800178e:	f000 f923 	bl	80019d8 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001792:	f000 f9dd 	bl	8001b50 <MX_RTC_Init>
	MX_SAI2_Init();
 8001796:	f000 faad 	bl	8001cf4 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 800179a:	f000 fbbd 	bl	8001f18 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 800179e:	f000 fc3f 	bl	8002020 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80017a2:	f000 fe77 	bl	8002494 <MX_TIM1_Init>
	MX_TIM2_Init();
 80017a6:	f000 ff21 	bl	80025ec <MX_TIM2_Init>
	MX_TIM3_Init();
 80017aa:	f000 ff95 	bl	80026d8 <MX_TIM3_Init>
	MX_TIM5_Init();
 80017ae:	f001 f80b 	bl	80027c8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80017b2:	f001 f881 	bl	80028b8 <MX_TIM8_Init>
	MX_TIM12_Init();
 80017b6:	f001 f8d3 	bl	8002960 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80017ba:	f001 fa73 	bl	8002ca4 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80017be:	f001 faa1 	bl	8002d04 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80017c2:	f00d f999 	bl	800eaf8 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	xTaskCreate(task_give, "Task GIVE", TASK_GIVE_STACK_DEPTH, NULL, TASK_GIVE_PRIORITY, NULL);
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2302      	movs	r3, #2
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	22fa      	movs	r2, #250	@ 0xfa
 80017d2:	4919      	ldr	r1, [pc, #100]	@ (8001838 <main+0xe4>)
 80017d4:	4819      	ldr	r0, [pc, #100]	@ (800183c <main+0xe8>)
 80017d6:	f010 ff3f 	bl	8012658 <xTaskCreate>
	xTaskCreate(task_take, "Task TAKE", TASK_TAKE_STACK_DEPTH, NULL, TASK_TAKE_PRIORITY, &task_uart1_handle);
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <main+0xec>)
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2301      	movs	r3, #1
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	22fa      	movs	r2, #250	@ 0xfa
 80017e6:	4917      	ldr	r1, [pc, #92]	@ (8001844 <main+0xf0>)
 80017e8:	4817      	ldr	r0, [pc, #92]	@ (8001848 <main+0xf4>)
 80017ea:	f010 ff35 	bl	8012658 <xTaskCreate>

	BaseType_t returned_value;

	returned_value = xTaskCreate(task_led,
 80017ee:	2300      	movs	r3, #0
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2304      	movs	r3, #4
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	22fa      	movs	r2, #250	@ 0xfa
 80017fa:	4914      	ldr	r1, [pc, #80]	@ (800184c <main+0xf8>)
 80017fc:	4814      	ldr	r0, [pc, #80]	@ (8001850 <main+0xfc>)
 80017fe:	f010 ff2b 	bl	8012658 <xTaskCreate>
 8001802:	6078      	str	r0, [r7, #4]
			"Task LED",
			TASK_LED_STACK_DEPTH, /*taille de la pile*/
			NULL, /*Paramètre qu'on donne à la fonction task_led -> on a dit qu'on ne s'en servait pas*/
			TASK_LED_PRIORITY,
			NULL);
	if (returned_value != pdPASS) // pas assez de mémoire pour allouer la tâche
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d004      	beq.n	8001814 <main+0xc0>
	{
		printf("Could not allocate Task LED\r\n");
 800180a:	4812      	ldr	r0, [pc, #72]	@ (8001854 <main+0x100>)
 800180c:	f012 fff0 	bl	80147f0 <puts>
		Error_Handler();
 8001810:	f000 f8dc 	bl	80019cc <Error_Handler>
	}

	xTaskCreate(task_led_bouton, "Task LED Bouton", TASK_LED_BOUTON_STACK_DEPTH, NULL, TASK_LED_BOUTON_PRIORITY, NULL);
 8001814:	2300      	movs	r3, #0
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	2303      	movs	r3, #3
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2300      	movs	r3, #0
 800181e:	22fa      	movs	r2, #250	@ 0xfa
 8001820:	490d      	ldr	r1, [pc, #52]	@ (8001858 <main+0x104>)
 8001822:	480e      	ldr	r0, [pc, #56]	@ (800185c <main+0x108>)
 8001824:	f010 ff18 	bl	8012658 <xTaskCreate>

	vTaskStartScheduler(); // Appelle l'OS (avec une fonction freertos)
 8001828:	f011 f892 	bl	8012950 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800182c:	f7ff fa8a 	bl	8000d44 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001830:	f00f ff15 	bl	801165e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <main+0xe0>
 8001838:	08014e48 	.word	0x08014e48
 800183c:	080016e5 	.word	0x080016e5
 8001840:	200007b8 	.word	0x200007b8
 8001844:	08014e54 	.word	0x08014e54
 8001848:	08001721 	.word	0x08001721
 800184c:	08014e60 	.word	0x08014e60
 8001850:	080016c5 	.word	0x080016c5
 8001854:	08014e6c 	.word	0x08014e6c
 8001858:	08014e8c 	.word	0x08014e8c
 800185c:	08001685 	.word	0x08001685

08001860 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	@ 0x50
 8001864:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2230      	movs	r2, #48	@ 0x30
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f013 f89e 	bl	80149b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001884:	f005 feb0 	bl	80075e8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <SystemClock_Config+0xdc>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a2b      	ldr	r2, [pc, #172]	@ (800193c <SystemClock_Config+0xdc>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b29      	ldr	r3, [pc, #164]	@ (800193c <SystemClock_Config+0xdc>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <SystemClock_Config+0xe0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a26      	ldr	r2, [pc, #152]	@ (8001940 <SystemClock_Config+0xe0>)
 80018a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <SystemClock_Config+0xe0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018b8:	2309      	movs	r3, #9
 80018ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018c2:	2301      	movs	r3, #1
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80018d0:	2319      	movs	r3, #25
 80018d2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 80018d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018da:	2302      	movs	r3, #2
 80018dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80018de:	2309      	movs	r3, #9
 80018e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 ffa0 	bl	800782c <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80018f2:	f000 f86b 	bl	80019cc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018f6:	f005 fe87 	bl	8007608 <HAL_PWREx_EnableOverDrive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001900:	f000 f864 	bl	80019cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001910:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001914:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2106      	movs	r1, #6
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fa26 	bl	8007d74 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800192e:	f000 f84d 	bl	80019cc <Error_Handler>
	}
}
 8001932:	bf00      	nop
 8001934:	3750      	adds	r7, #80	@ 0x50
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0a2      	sub	sp, #136	@ 0x88
 8001948:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2284      	movs	r2, #132	@ 0x84
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f013 f82d 	bl	80149b0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <PeriphCommonClock_Config+0x60>)
 8001958:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800195a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800195e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001960:	2305      	movs	r3, #5
 8001962:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001968:	2303      	movs	r3, #3
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001970:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001974:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001976:	2300      	movs	r3, #0
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800197a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fc0a 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 8001996:	f000 f819 	bl	80019cc <Error_Handler>
	}
}
 800199a:	bf00      	nop
 800199c:	3788      	adds	r7, #136	@ 0x88
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	00b00008 	.word	0x00b00008

080019a8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80019ba:	f001 fad9 	bl	8002f70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40001000 	.word	0x40001000

080019cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <Error_Handler+0x8>

080019d8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <MX_QUADSPI_Init+0x54>)
 80019e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019f0:	2210      	movs	r2, #16
 80019f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019f6:	2218      	movs	r2, #24
 80019f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 80019fc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001a00:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <MX_QUADSPI_Init+0x50>)
 8001a16:	f005 fe47 	bl	80076a8 <HAL_QSPI_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001a20:	f7ff ffd4 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200007bc 	.word	0x200007bc
 8001a2c:	a0001000 	.word	0xa0001000

08001a30 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b3c <HAL_QSPI_MspInit+0x10c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d170      	bne.n	8001b34 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a56:	4a3a      	ldr	r2, [pc, #232]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a2e      	ldr	r2, [pc, #184]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_QSPI_MspInit+0x110>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	481d      	ldr	r0, [pc, #116]	@ (8001b44 <HAL_QSPI_MspInit+0x114>)
 8001ace:	f002 fddb 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001ad2:	2340      	movs	r3, #64	@ 0x40
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	4816      	ldr	r0, [pc, #88]	@ (8001b48 <HAL_QSPI_MspInit+0x118>)
 8001aee:	f002 fdcb 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af2:	2304      	movs	r3, #4
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b02:	2309      	movs	r3, #9
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <HAL_QSPI_MspInit+0x118>)
 8001b0e:	f002 fdbb 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001b12:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b24:	2309      	movs	r3, #9
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <HAL_QSPI_MspInit+0x11c>)
 8001b30:	f002 fdaa 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	a0001000 	.word	0xa0001000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020c00 	.word	0x40020c00

08001b50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b090      	sub	sp, #64	@ 0x40
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2228      	movs	r2, #40	@ 0x28
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f012 ff1d 	bl	80149b0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b78:	4a46      	ldr	r2, [pc, #280]	@ (8001c94 <MX_RTC_Init+0x144>)
 8001b7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b7c:	4b44      	ldr	r3, [pc, #272]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b82:	4b43      	ldr	r3, [pc, #268]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b84:	227f      	movs	r2, #127	@ 0x7f
 8001b86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b8e:	4b40      	ldr	r3, [pc, #256]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ba0:	483b      	ldr	r0, [pc, #236]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001ba2:	f007 f82f 	bl	8008c04 <HAL_RTC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001bac:	f7ff ff0e 	bl	80019cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482f      	ldr	r0, [pc, #188]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001bd4:	f007 f89a 	bl	8008d0c <HAL_RTC_SetTime>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001bde:	f7ff fef5 	bl	80019cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4619      	mov	r1, r3
 8001c02:	4823      	ldr	r0, [pc, #140]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001c04:	f007 f91c 	bl	8008e40 <HAL_RTC_SetDate>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c0e:	f7ff fedd 	bl	80019cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	2201      	movs	r2, #1
 8001c46:	4619      	mov	r1, r3
 8001c48:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001c4a:	f007 f97d 	bl	8008f48 <HAL_RTC_SetAlarm>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001c54:	f7ff feba 	bl	80019cc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2201      	movs	r2, #1
 8001c62:	4619      	mov	r1, r3
 8001c64:	480a      	ldr	r0, [pc, #40]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001c66:	f007 f96f 	bl	8008f48 <HAL_RTC_SetAlarm>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001c70:	f7ff feac 	bl	80019cc <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c74:	2202      	movs	r2, #2
 8001c76:	2100      	movs	r1, #0
 8001c78:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_RTC_Init+0x140>)
 8001c7a:	f007 fb2f 	bl	80092dc <HAL_RTCEx_SetTimeStamp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001c84:	f7ff fea2 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3740      	adds	r7, #64	@ 0x40
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000808 	.word	0x20000808
 8001c94:	40002800 	.word	0x40002800

08001c98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a4      	sub	sp, #144	@ 0x90
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2284      	movs	r2, #132	@ 0x84
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f012 fe81 	bl	80149b0 <memset>
  if(rtcHandle->Instance==RTC)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cec <HAL_RTC_MspInit+0x54>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d114      	bne.n	8001ce2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 fa6c 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001cd2:	f7ff fe7b 	bl	80019cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_RTC_MspInit+0x58>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <HAL_RTC_MspInit+0x58>)
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3790      	adds	r7, #144	@ 0x90
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40002800 	.word	0x40002800
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8001e34 <MX_SAI2_Init+0x140>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d0a:	4b49      	ldr	r3, [pc, #292]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d0c:	2240      	movs	r2, #64	@ 0x40
 8001d0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d16:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d22:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d28:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d2e:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d36:	4a40      	ldr	r2, [pc, #256]	@ (8001e38 <MX_SAI2_Init+0x144>)
 8001d38:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d40:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d46:	4b3a      	ldr	r3, [pc, #232]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d4c:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d58:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d5e:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d64:	4b32      	ldr	r3, [pc, #200]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d6a:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d70:	4b2f      	ldr	r3, [pc, #188]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d76:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001d88:	4829      	ldr	r0, [pc, #164]	@ (8001e30 <MX_SAI2_Init+0x13c>)
 8001d8a:	f007 fb0f 	bl	80093ac <HAL_SAI_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001d94:	f7ff fe1a 	bl	80019cc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001d98:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001d9a:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <MX_SAI2_Init+0x14c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001da6:	2203      	movs	r2, #3
 8001da8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dac:	2240      	movs	r2, #64	@ 0x40
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001de8:	2208      	movs	r2, #8
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001df2:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <MX_SAI2_Init+0x148>)
 8001e1e:	f007 fac5 	bl	80093ac <HAL_SAI_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001e28:	f7ff fdd0 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000828 	.word	0x20000828
 8001e34:	40015c04 	.word	0x40015c04
 8001e38:	0002ee00 	.word	0x0002ee00
 8001e3c:	200008ac 	.word	0x200008ac
 8001e40:	40015c24 	.word	0x40015c24

08001e44 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2b      	ldr	r2, [pc, #172]	@ (8001f00 <HAL_SAI_MspInit+0xbc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d124      	bne.n	8001ea0 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e56:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6a:	4b27      	ldr	r3, [pc, #156]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001e7e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e80:	23f0      	movs	r3, #240	@ 0xf0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e90:	230a      	movs	r3, #10
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481c      	ldr	r0, [pc, #112]	@ (8001f0c <HAL_SAI_MspInit+0xc8>)
 8001e9c:	f002 fbf4 	bl	8004688 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f10 <HAL_SAI_MspInit+0xcc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d125      	bne.n	8001ef6 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001eb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_SAI_MspInit+0xc4>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f04 <HAL_SAI_MspInit+0xc0>)
 8001ed2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <HAL_SAI_MspInit+0xd0>)
 8001ef2:	f002 fbc9 	bl	8004688 <HAL_GPIO_Init>

    }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	@ 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40015c04 	.word	0x40015c04
 8001f04:	20000930 	.word	0x20000930
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40015c24 	.word	0x40015c24
 8001f14:	40021800 	.word	0x40021800

08001f18 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <MX_SDMMC1_SD_Init+0x40>)
 8001f20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f3a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f42:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <MX_SDMMC1_SD_Init+0x3c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000934 	.word	0x20000934
 8001f58:	40012c00 	.word	0x40012c00

08001f5c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	@ (8002010 <HAL_SD_MspInit+0xb4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d144      	bne.n	8002008 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001f84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_SD_MspInit+0xb8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001fc6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fd8:	230c      	movs	r3, #12
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <HAL_SD_MspInit+0xbc>)
 8001fe4:	f002 fb50 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <HAL_SD_MspInit+0xc0>)
 8002004:	f002 fb40 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	@ 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40023800 	.word	0x40023800
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00

08002020 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002026:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800202a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002038:	4b10      	ldr	r3, [pc, #64]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800203e:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800205c:	4b07      	ldr	r3, [pc, #28]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_SPDIFRX_Init+0x5c>)
 800206a:	f008 fc2b 	bl	800a8c4 <HAL_SPDIFRX_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002074:	f7ff fcaa 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200009b8 	.word	0x200009b8

08002080 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0aa      	sub	sp, #168	@ 0xa8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2284      	movs	r2, #132	@ 0x84
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f012 fc85 	bl	80149b0 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80020ae:	d143      	bne.n	8002138 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80020b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80020b6:	2364      	movs	r3, #100	@ 0x64
 80020b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4618      	mov	r0, r3
 80020d0:	f006 f868 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80020da:	f7ff fc77 	bl	80019cc <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <HAL_SPDIFRX_MspInit+0xc0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002126:	2308      	movs	r3, #8
 8002128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002130:	4619      	mov	r1, r3
 8002132:	4804      	ldr	r0, [pc, #16]	@ (8002144 <HAL_SPDIFRX_MspInit+0xc4>)
 8002134:	f002 faa8 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8002138:	bf00      	nop
 800213a:	37a8      	adds	r7, #168	@ 0xa8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	40020c00 	.word	0x40020c00

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a10      	ldr	r2, [pc, #64]	@ (8002194 <HAL_MspInit+0x4c>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	210f      	movs	r1, #15
 8002182:	f06f 0001 	mvn.w	r0, #1
 8002186:	f001 fa83 	bl	8003690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08e      	sub	sp, #56	@ 0x38
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_InitTick+0xe0>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_InitTick+0xe0>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <HAL_InitTick+0xe0>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c0:	f107 0210 	add.w	r2, r7, #16
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f005 ffb8 	bl	8008140 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021da:	f005 ff89 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 80021de:	6378      	str	r0, [r7, #52]	@ 0x34
 80021e0:	e004      	b.n	80021ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021e2:	f005 ff85 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_InitTick+0xe4>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	3b01      	subs	r3, #1
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_InitTick+0xe8>)
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_InitTick+0xec>)
 80021fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_InitTick+0xe8>)
 8002202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002206:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_InitTick+0xe8>)
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_InitTick+0xe8>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_InitTick+0xe8>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_InitTick+0xe8>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002220:	4817      	ldr	r0, [pc, #92]	@ (8002280 <HAL_InitTick+0xe8>)
 8002222:	f008 fbab 	bl	800a97c <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800222c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11b      	bne.n	800226c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002234:	4812      	ldr	r0, [pc, #72]	@ (8002280 <HAL_InitTick+0xe8>)
 8002236:	f008 fbf9 	bl	800aa2c <HAL_TIM_Base_Start_IT>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002240:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002248:	2036      	movs	r0, #54	@ 0x36
 800224a:	f001 fa3d 	bl	80036c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d808      	bhi.n	8002266 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	2036      	movs	r0, #54	@ 0x36
 800225a:	f001 fa19 	bl	8003690 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_InitTick+0xf0>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e002      	b.n	800226c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800226c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002270:	4618      	mov	r0, r3
 8002272:	3738      	adds	r7, #56	@ 0x38
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	431bde83 	.word	0x431bde83
 8002280:	20000a04 	.word	0x20000a04
 8002284:	40001000 	.word	0x40001000
 8002288:	20000004 	.word	0x20000004

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <USART1_IRQHandler+0x10>)
 80022ca:	f009 fd31 	bl	800bd30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000c1c 	.word	0x20000c1c

080022d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM6_DAC_IRQHandler+0x10>)
 80022de:	f008 fc74 	bl	800abca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000a04 	.word	0x20000a04

080022ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <OTG_FS_IRQHandler+0x10>)
 80022f2:	f002 fea1 	bl	8005038 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000927c 	.word	0x2000927c

08002300 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <LTDC_IRQHandler+0x10>)
 8002306:	f004 fed5 	bl	80070b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000710 	.word	0x20000710

08002314 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <DMA2D_IRQHandler+0x10>)
 800231a:	f001 fcc5 	bl	8003ca8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200002a4 	.word	0x200002a4

08002328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e00a      	b.n	8002350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233a:	f3af 8000 	nop.w
 800233e:	4601      	mov	r1, r0
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	b2ca      	uxtb	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf0      	blt.n	800233a <_read+0x12>
  }

  return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e009      	b.n	8002388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	60ba      	str	r2, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff f96f 	bl	8001660 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf1      	blt.n	8002374 <_write+0x12>
  }
  return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_close>:

int _close(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c2:	605a      	str	r2, [r3, #4]
  return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_isatty>:

int _isatty(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	@ (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f012 fb1a 	bl	8014a6c <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20050000 	.word	0x20050000
 8002464:	00000400 	.word	0x00000400
 8002468:	20000a50 	.word	0x20000a50
 800246c:	200097a8 	.word	0x200097a8

08002470 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <SystemInit+0x20>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <SystemInit+0x20>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b09a      	sub	sp, #104	@ 0x68
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	222c      	movs	r2, #44	@ 0x2c
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f012 fa6e 	bl	80149b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024d4:	4b43      	ldr	r3, [pc, #268]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024d6:	4a44      	ldr	r2, [pc, #272]	@ (80025e8 <MX_TIM1_Init+0x154>)
 80024d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024da:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024dc:	2200      	movs	r2, #0
 80024de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b40      	ldr	r3, [pc, #256]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024e6:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ee:	4b3d      	ldr	r3, [pc, #244]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f4:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fa:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002500:	4838      	ldr	r0, [pc, #224]	@ (80025e4 <MX_TIM1_Init+0x150>)
 8002502:	f008 fa3b 	bl	800a97c <HAL_TIM_Base_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800250c:	f7ff fa5e 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002514:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002516:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800251a:	4619      	mov	r1, r3
 800251c:	4831      	ldr	r0, [pc, #196]	@ (80025e4 <MX_TIM1_Init+0x150>)
 800251e:	f008 fd6f 	bl	800b000 <HAL_TIM_ConfigClockSource>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002528:	f7ff fa50 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800252c:	482d      	ldr	r0, [pc, #180]	@ (80025e4 <MX_TIM1_Init+0x150>)
 800252e:	f008 faf5 	bl	800ab1c <HAL_TIM_PWM_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002538:	f7ff fa48 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002548:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800254c:	4619      	mov	r1, r3
 800254e:	4825      	ldr	r0, [pc, #148]	@ (80025e4 <MX_TIM1_Init+0x150>)
 8002550:	f009 f9ec 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800255a:	f7ff fa37 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255e:	2360      	movs	r3, #96	@ 0x60
 8002560:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002566:	2300      	movs	r3, #0
 8002568:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800256a:	2300      	movs	r3, #0
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	4619      	mov	r1, r3
 8002582:	4818      	ldr	r0, [pc, #96]	@ (80025e4 <MX_TIM1_Init+0x150>)
 8002584:	f008 fc28 	bl	800add8 <HAL_TIM_PWM_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800258e:	f7ff fa1d 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80025c8:	f009 fa3e 	bl	800ba48 <HAL_TIMEx_ConfigBreakDeadTime>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80025d2:	f7ff f9fb 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <MX_TIM1_Init+0x150>)
 80025d8:	f000 fa96 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80025dc:	bf00      	nop
 80025de:	3768      	adds	r7, #104	@ 0x68
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000a54 	.word	0x20000a54
 80025e8:	40010000 	.word	0x40010000

080025ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	@ 0x38
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260c:	463b      	mov	r3, r7
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	611a      	str	r2, [r3, #16]
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800261e:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002620:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002624:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002626:	4b2b      	ldr	r3, [pc, #172]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b26      	ldr	r3, [pc, #152]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002646:	4823      	ldr	r0, [pc, #140]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002648:	f008 f998 	bl	800a97c <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002652:	f7ff f9bb 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800265c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002660:	4619      	mov	r1, r3
 8002662:	481c      	ldr	r0, [pc, #112]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002664:	f008 fccc 	bl	800b000 <HAL_TIM_ConfigClockSource>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800266e:	f7ff f9ad 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002672:	4818      	ldr	r0, [pc, #96]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002674:	f008 fa52 	bl	800ab1c <HAL_TIM_PWM_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800267e:	f7ff f9a5 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	4810      	ldr	r0, [pc, #64]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 8002692:	f009 f94b 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800269c:	f7ff f996 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	2360      	movs	r3, #96	@ 0x60
 80026a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b0:	463b      	mov	r3, r7
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	4807      	ldr	r0, [pc, #28]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 80026b8:	f008 fb8e 	bl	800add8 <HAL_TIM_PWM_ConfigChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026c2:	f7ff f983 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026c6:	4803      	ldr	r0, [pc, #12]	@ (80026d4 <MX_TIM2_Init+0xe8>)
 80026c8:	f000 fa1e 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80026cc:	bf00      	nop
 80026ce:	3738      	adds	r7, #56	@ 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000aa0 	.word	0x20000aa0

080026d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800270a:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800270c:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <MX_TIM3_Init+0xec>)
 800270e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b2a      	ldr	r3, [pc, #168]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800271c:	4b28      	ldr	r3, [pc, #160]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800271e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002730:	4823      	ldr	r0, [pc, #140]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 8002732:	f008 f923 	bl	800a97c <HAL_TIM_Base_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800273c:	f7ff f946 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002744:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800274a:	4619      	mov	r1, r3
 800274c:	481c      	ldr	r0, [pc, #112]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800274e:	f008 fc57 	bl	800b000 <HAL_TIM_ConfigClockSource>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002758:	f7ff f938 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800275c:	4818      	ldr	r0, [pc, #96]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800275e:	f008 f9dd 	bl	800ab1c <HAL_TIM_PWM_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002768:	f7ff f930 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4811      	ldr	r0, [pc, #68]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 800277c:	f009 f8d6 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002786:	f7ff f921 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800278a:	2360      	movs	r3, #96	@ 0x60
 800278c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 80027a2:	f008 fb19 	bl	800add8 <HAL_TIM_PWM_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027ac:	f7ff f90e 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027b0:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <MX_TIM3_Init+0xe8>)
 80027b2:	f000 f9a9 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80027b6:	bf00      	nop
 80027b8:	3738      	adds	r7, #56	@ 0x38
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000aec 	.word	0x20000aec
 80027c4:	40000400 	.word	0x40000400

080027c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	@ 0x38
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027fa:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 80027fc:	4a2d      	ldr	r2, [pc, #180]	@ (80028b4 <MX_TIM5_Init+0xec>)
 80027fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002800:	4b2b      	ldr	r3, [pc, #172]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002806:	4b2a      	ldr	r3, [pc, #168]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800280c:	4b28      	ldr	r3, [pc, #160]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 800280e:	f04f 32ff 	mov.w	r2, #4294967295
 8002812:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002814:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281a:	4b25      	ldr	r3, [pc, #148]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002820:	4823      	ldr	r0, [pc, #140]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 8002822:	f008 f8ab 	bl	800a97c <HAL_TIM_Base_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800282c:	f7ff f8ce 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800283a:	4619      	mov	r1, r3
 800283c:	481c      	ldr	r0, [pc, #112]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 800283e:	f008 fbdf 	bl	800b000 <HAL_TIM_ConfigClockSource>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002848:	f7ff f8c0 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800284c:	4818      	ldr	r0, [pc, #96]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 800284e:	f008 f965 	bl	800ab1c <HAL_TIM_PWM_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002858:	f7ff f8b8 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	4619      	mov	r1, r3
 800286a:	4811      	ldr	r0, [pc, #68]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 800286c:	f009 f85e 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002876:	f7ff f8a9 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287a:	2360      	movs	r3, #96	@ 0x60
 800287c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800288a:	463b      	mov	r3, r7
 800288c:	220c      	movs	r2, #12
 800288e:	4619      	mov	r1, r3
 8002890:	4807      	ldr	r0, [pc, #28]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 8002892:	f008 faa1 	bl	800add8 <HAL_TIM_PWM_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800289c:	f7ff f896 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <MX_TIM5_Init+0xe8>)
 80028a2:	f000 f931 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80028a6:	bf00      	nop
 80028a8:	3738      	adds	r7, #56	@ 0x38
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000b38 	.word	0x20000b38
 80028b4:	40000c00 	.word	0x40000c00

080028b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028d8:	4a20      	ldr	r2, [pc, #128]	@ (800295c <MX_TIM8_Init+0xa4>)
 80028da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <MX_TIM8_Init+0xa0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002902:	4815      	ldr	r0, [pc, #84]	@ (8002958 <MX_TIM8_Init+0xa0>)
 8002904:	f008 f83a 	bl	800a97c <HAL_TIM_Base_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800290e:	f7ff f85d 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	480e      	ldr	r0, [pc, #56]	@ (8002958 <MX_TIM8_Init+0xa0>)
 8002920:	f008 fb6e 	bl	800b000 <HAL_TIM_ConfigClockSource>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800292a:	f7ff f84f 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4806      	ldr	r0, [pc, #24]	@ (8002958 <MX_TIM8_Init+0xa0>)
 8002940:	f008 fff4 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800294a:	f7ff f83f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000b84 	.word	0x20000b84
 800295c:	40010400 	.word	0x40010400

08002960 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	615a      	str	r2, [r3, #20]
 8002976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002978:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <MX_TIM12_Init+0x84>)
 800297a:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <MX_TIM12_Init+0x88>)
 800297c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800297e:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <MX_TIM12_Init+0x84>)
 8002980:	2200      	movs	r2, #0
 8002982:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002984:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <MX_TIM12_Init+0x84>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800298a:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <MX_TIM12_Init+0x84>)
 800298c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002990:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002992:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <MX_TIM12_Init+0x84>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <MX_TIM12_Init+0x84>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800299e:	4811      	ldr	r0, [pc, #68]	@ (80029e4 <MX_TIM12_Init+0x84>)
 80029a0:	f008 f8bc 	bl	800ab1c <HAL_TIM_PWM_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80029aa:	f7ff f80f 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ae:	2360      	movs	r3, #96	@ 0x60
 80029b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4807      	ldr	r0, [pc, #28]	@ (80029e4 <MX_TIM12_Init+0x84>)
 80029c6:	f008 fa07 	bl	800add8 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80029d0:	f7fe fffc 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80029d4:	4803      	ldr	r0, [pc, #12]	@ (80029e4 <MX_TIM12_Init+0x84>)
 80029d6:	f000 f897 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000bd0 	.word	0x20000bd0
 80029e8:	40001800 	.word	0x40001800

080029ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab4 <HAL_TIM_Base_MspInit+0xc8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10c      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029fe:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a16:	e046      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d10c      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a22:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]
}
 8002a3a:	e034      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	@ (8002abc <HAL_TIM_Base_MspInit+0xd0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10c      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a46:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a52:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
}
 8002a5e:	e022      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xd4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10c      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
}
 8002a82:	e010      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	bf00      	nop
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_TIM_PWM_MspInit+0x38>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10b      	bne.n	8002af2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40001800 	.word	0x40001800
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	@ 0x30
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a56      	ldr	r2, [pc, #344]	@ (8002c80 <HAL_TIM_MspPostInit+0x178>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d11d      	bne.n	8002b66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b56      	ldr	r3, [pc, #344]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4a55      	ldr	r2, [pc, #340]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b36:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	484a      	ldr	r0, [pc, #296]	@ (8002c88 <HAL_TIM_MspPostInit+0x180>)
 8002b60:	f001 fd92 	bl	8004688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b64:	e087      	b.n	8002c76 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6e:	d11d      	bne.n	8002bac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b44      	ldr	r3, [pc, #272]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	4a43      	ldr	r2, [pc, #268]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7c:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4838      	ldr	r0, [pc, #224]	@ (8002c88 <HAL_TIM_MspPostInit+0x180>)
 8002ba6:	f001 fd6f 	bl	8004688 <HAL_GPIO_Init>
}
 8002baa:	e064      	b.n	8002c76 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a36      	ldr	r2, [pc, #216]	@ (8002c8c <HAL_TIM_MspPostInit+0x184>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b30      	ldr	r3, [pc, #192]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002bce:	2310      	movs	r3, #16
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bde:	2302      	movs	r3, #2
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4829      	ldr	r0, [pc, #164]	@ (8002c90 <HAL_TIM_MspPostInit+0x188>)
 8002bea:	f001 fd4d 	bl	8004688 <HAL_GPIO_Init>
}
 8002bee:	e042      	b.n	8002c76 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a27      	ldr	r2, [pc, #156]	@ (8002c94 <HAL_TIM_MspPostInit+0x18c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11c      	bne.n	8002c34 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a21      	ldr	r2, [pc, #132]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c22:	2302      	movs	r3, #2
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	481a      	ldr	r0, [pc, #104]	@ (8002c98 <HAL_TIM_MspPostInit+0x190>)
 8002c2e:	f001 fd2b 	bl	8004688 <HAL_GPIO_Init>
}
 8002c32:	e020      	b.n	8002c76 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_TIM_MspPostInit+0x194>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d11b      	bne.n	8002c76 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_TIM_MspPostInit+0x17c>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002c56:	2340      	movs	r3, #64	@ 0x40
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c66:	2309      	movs	r3, #9
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480b      	ldr	r0, [pc, #44]	@ (8002ca0 <HAL_TIM_MspPostInit+0x198>)
 8002c72:	f001 fd09 	bl	8004688 <HAL_GPIO_Init>
}
 8002c76:	bf00      	nop
 8002c78:	3730      	adds	r7, #48	@ 0x30
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40001800 	.word	0x40001800
 8002ca0:	40021c00 	.word	0x40021c00

08002ca4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <MX_USART1_UART_Init+0x5c>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <MX_USART1_UART_Init+0x58>)
 8002ce8:	f008 ff4a 	bl	800bb80 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cf2:	f7fe fe6b 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000c1c 	.word	0x20000c1c
 8002d00:	40011000 	.word	0x40011000

08002d04 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <MX_USART6_UART_Init+0x5c>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d46:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <MX_USART6_UART_Init+0x58>)
 8002d48:	f008 ff1a 	bl	800bb80 <HAL_UART_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d52:	f7fe fe3b 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000ca4 	.word	0x20000ca4
 8002d60:	40011400 	.word	0x40011400

08002d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0ae      	sub	sp, #184	@ 0xb8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7c:	f107 0320 	add.w	r3, r7, #32
 8002d80:	2284      	movs	r2, #132	@ 0x84
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f011 fe13 	bl	80149b0 <memset>
  if(uartHandle->Instance==USART1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a57      	ldr	r2, [pc, #348]	@ (8002eec <HAL_UART_MspInit+0x188>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d165      	bne.n	8002e60 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d94:	2340      	movs	r3, #64	@ 0x40
 8002d96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 f9ff 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dac:	f7fe fe0e 	bl	80019cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc8:	4b49      	ldr	r3, [pc, #292]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd4:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dec:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e10:	2307      	movs	r3, #7
 8002e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4835      	ldr	r0, [pc, #212]	@ (8002ef4 <HAL_UART_MspInit+0x190>)
 8002e1e:	f001 fc33 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e46:	4619      	mov	r1, r3
 8002e48:	482b      	ldr	r0, [pc, #172]	@ (8002ef8 <HAL_UART_MspInit+0x194>)
 8002e4a:	f001 fc1d 	bl	8004688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2105      	movs	r1, #5
 8002e52:	2025      	movs	r0, #37	@ 0x25
 8002e54:	f000 fc1c 	bl	8003690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e58:	2025      	movs	r0, #37	@ 0x25
 8002e5a:	f000 fc35 	bl	80036c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002e5e:	e040      	b.n	8002ee2 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a25      	ldr	r2, [pc, #148]	@ (8002efc <HAL_UART_MspInit+0x198>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d13b      	bne.n	8002ee2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002e6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002e70:	2300      	movs	r3, #0
 8002e72:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e74:	f107 0320 	add.w	r3, r7, #32
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 f993 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002e84:	f7fe fda2 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_UART_MspInit+0x18c>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002eb8:	23c0      	movs	r3, #192	@ 0xc0
 8002eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4808      	ldr	r0, [pc, #32]	@ (8002f00 <HAL_UART_MspInit+0x19c>)
 8002ede:	f001 fbd3 	bl	8004688 <HAL_GPIO_Init>
}
 8002ee2:	bf00      	nop
 8002ee4:	37b8      	adds	r7, #184	@ 0xb8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40011000 	.word	0x40011000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40011400 	.word	0x40011400
 8002f00:	40020800 	.word	0x40020800

08002f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f08:	f7ff fab2 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f0c:	480c      	ldr	r0, [pc, #48]	@ (8002f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f0e:	490d      	ldr	r1, [pc, #52]	@ (8002f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f10:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f24:	4c0a      	ldr	r4, [pc, #40]	@ (8002f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f32:	f011 fda1 	bl	8014a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f36:	f7fe fc0d 	bl	8001754 <main>
  bx  lr    
 8002f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002f48:	08014f2c 	.word	0x08014f2c
  ldr r2, =_sbss
 8002f4c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002f50:	200097a8 	.word	0x200097a8

08002f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC_IRQHandler>

08002f56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	f000 fb8d 	bl	800367a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f60:	200f      	movs	r0, #15
 8002f62:	f7ff f919 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f66:	f7ff f8ef 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000d2c 	.word	0x20000d2c

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000d2c 	.word	0x20000d2c

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff ffee 	bl	8002f98 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000008 	.word	0x20000008

08002ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e031      	b.n	8003072 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fac4 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_ADC_Init+0x84>)
 800303c:	4013      	ands	r3, r2
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f970 	bl	800332c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
 8003062:	e001      	b.n	8003068 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	ffffeefd 	.word	0xffffeefd

08003080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e136      	b.n	800330a <HAL_ADC_ConfigChannel+0x28a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d93a      	bls.n	8003122 <HAL_ADC_ConfigChannel+0xa2>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b4:	d035      	beq.n	8003122 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	2207      	movs	r2, #7
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	400a      	ands	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003318 <HAL_ADC_ConfigChannel+0x298>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68d9      	ldr	r1, [r3, #12]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	061a      	lsls	r2, r3, #24
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fa:	e035      	b.n	8003168 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68d9      	ldr	r1, [r3, #12]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	4603      	mov	r3, r0
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4403      	add	r3, r0
 8003114:	3b1e      	subs	r3, #30
 8003116:	409a      	lsls	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003120:	e022      	b.n	8003168 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6919      	ldr	r1, [r3, #16]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	2207      	movs	r2, #7
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	4603      	mov	r3, r0
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4403      	add	r3, r0
 800315e:	409a      	lsls	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d824      	bhi.n	80031ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b05      	subs	r3, #5
 8003182:	221f      	movs	r2, #31
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43da      	mvns	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	400a      	ands	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b05      	subs	r3, #5
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80031b8:	e04c      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d824      	bhi.n	800320c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b23      	subs	r3, #35	@ 0x23
 80031d4:	221f      	movs	r2, #31
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	400a      	ands	r2, r1
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b23      	subs	r3, #35	@ 0x23
 80031fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
 800320a:	e023      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b41      	subs	r3, #65	@ 0x41
 800321e:	221f      	movs	r2, #31
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b41      	subs	r3, #65	@ 0x41
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a30      	ldr	r2, [pc, #192]	@ (800331c <HAL_ADC_ConfigChannel+0x29c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10a      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1f4>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003266:	d105      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003268:	4b2d      	ldr	r3, [pc, #180]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a2c      	ldr	r2, [pc, #176]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 800326e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003272:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a28      	ldr	r2, [pc, #160]	@ (800331c <HAL_ADC_ConfigChannel+0x29c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10f      	bne.n	800329e <HAL_ADC_ConfigChannel+0x21e>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b12      	cmp	r3, #18
 8003284:	d10b      	bne.n	800329e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003286:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a25      	ldr	r2, [pc, #148]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 800328c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003290:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003292:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a22      	ldr	r2, [pc, #136]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800329c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1e      	ldr	r2, [pc, #120]	@ (800331c <HAL_ADC_ConfigChannel+0x29c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d12b      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x280>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_ADC_ConfigChannel+0x298>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b11      	cmp	r3, #17
 80032b8:	d122      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80032ba:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 80032c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80032c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032c6:	4b16      	ldr	r3, [pc, #88]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <HAL_ADC_ConfigChannel+0x2a0>)
 80032cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <HAL_ADC_ConfigChannel+0x298>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_ADC_ConfigChannel+0x2a4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_ADC_ConfigChannel+0x2a8>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0c9a      	lsrs	r2, r3, #18
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032f2:	e002      	b.n	80032fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	10000012 	.word	0x10000012
 800331c:	40012000 	.word	0x40012000
 8003320:	40012300 	.word	0x40012300
 8003324:	20000000 	.word	0x20000000
 8003328:	431bde83 	.word	0x431bde83

0800332c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003334:	4b78      	ldr	r3, [pc, #480]	@ (8003518 <ADC_Init+0x1ec>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a77      	ldr	r2, [pc, #476]	@ (8003518 <ADC_Init+0x1ec>)
 800333a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800333e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003340:	4b75      	ldr	r3, [pc, #468]	@ (8003518 <ADC_Init+0x1ec>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4973      	ldr	r1, [pc, #460]	@ (8003518 <ADC_Init+0x1ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800335c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ba:	4a58      	ldr	r2, [pc, #352]	@ (800351c <ADC_Init+0x1f0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e00f      	b.n	8003426 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0202 	bic.w	r2, r2, #2
 8003434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	3b01      	subs	r3, #1
 8003480:	035a      	lsls	r2, r3, #13
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e007      	b.n	800349c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	051a      	lsls	r2, r3, #20
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034de:	025a      	lsls	r2, r3, #9
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6899      	ldr	r1, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40012300 	.word	0x40012300
 800351c:	0f000001 	.word	0x0f000001

08003520 <__NVIC_SetPriorityGrouping>:
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <__NVIC_SetPriorityGrouping+0x40>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800353c:	4013      	ands	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	4313      	orrs	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354e:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <__NVIC_SetPriorityGrouping+0x40>)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	60d3      	str	r3, [r2, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000ed00 	.word	0xe000ed00
 8003564:	05fa0000 	.word	0x05fa0000

08003568 <__NVIC_GetPriorityGrouping>:
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800356c:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <__NVIC_GetPriorityGrouping+0x18>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 0307 	and.w	r3, r3, #7
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_EnableIRQ>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	2b00      	cmp	r3, #0
 8003594:	db0b      	blt.n	80035ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	f003 021f 	and.w	r2, r3, #31
 800359c:	4907      	ldr	r1, [pc, #28]	@ (80035bc <__NVIC_EnableIRQ+0x38>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2001      	movs	r0, #1
 80035a6:	fa00 f202 	lsl.w	r2, r0, r2
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000e100 	.word	0xe000e100

080035c0 <__NVIC_SetPriority>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	db0a      	blt.n	80035ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	490c      	ldr	r1, [pc, #48]	@ (800360c <__NVIC_SetPriority+0x4c>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	440b      	add	r3, r1
 80035e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035e8:	e00a      	b.n	8003600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4908      	ldr	r1, [pc, #32]	@ (8003610 <__NVIC_SetPriority+0x50>)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	3b04      	subs	r3, #4
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	440b      	add	r3, r1
 80035fe:	761a      	strb	r2, [r3, #24]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000e100 	.word	0xe000e100
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <NVIC_EncodePriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	@ 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f1c3 0307 	rsb	r3, r3, #7
 800362e:	2b04      	cmp	r3, #4
 8003630:	bf28      	it	cs
 8003632:	2304      	movcs	r3, #4
 8003634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3304      	adds	r3, #4
 800363a:	2b06      	cmp	r3, #6
 800363c:	d902      	bls.n	8003644 <NVIC_EncodePriority+0x30>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3b03      	subs	r3, #3
 8003642:	e000      	b.n	8003646 <NVIC_EncodePriority+0x32>
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	401a      	ands	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800365c:	f04f 31ff 	mov.w	r1, #4294967295
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43d9      	mvns	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	4313      	orrs	r3, r2
}
 800366e:	4618      	mov	r0, r3
 8003670:	3724      	adds	r7, #36	@ 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ff4c 	bl	8003520 <__NVIC_SetPriorityGrouping>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a2:	f7ff ff61 	bl	8003568 <__NVIC_GetPriorityGrouping>
 80036a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	6978      	ldr	r0, [r7, #20]
 80036ae:	f7ff ffb1 	bl	8003614 <NVIC_EncodePriority>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff80 	bl	80035c0 <__NVIC_SetPriority>
}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff54 	bl	8003584 <__NVIC_EnableIRQ>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e054      	b.n	80037a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7f5b      	ldrb	r3, [r3, #29]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fc ffae 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <HAL_CRC_Init+0xc4>)
 8003720:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0218 	bic.w	r2, r2, #24
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	e00c      	b.n	800374e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f834 	bl	80037ac <HAL_CRCEx_Polynomial_Set>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e028      	b.n	80037a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	795b      	ldrb	r3, [r3, #5]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	611a      	str	r2, [r3, #16]
 8003760:	e004      	b.n	800376c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6912      	ldr	r2, [r2, #16]
 800376a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	04c11db7 	.word	0x04c11db7

080037ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80037bc:	231f      	movs	r3, #31
 80037be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
 80037ce:	e063      	b.n	8003898 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80037d0:	bf00      	nop
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	613a      	str	r2, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	d846      	bhi.n	8003884 <HAL_CRCEx_Polynomial_Set+0xd8>
 80037f6:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	0800388b 	.word	0x0800388b
 8003800:	08003885 	.word	0x08003885
 8003804:	08003885 	.word	0x08003885
 8003808:	08003885 	.word	0x08003885
 800380c:	08003885 	.word	0x08003885
 8003810:	08003885 	.word	0x08003885
 8003814:	08003885 	.word	0x08003885
 8003818:	08003885 	.word	0x08003885
 800381c:	08003879 	.word	0x08003879
 8003820:	08003885 	.word	0x08003885
 8003824:	08003885 	.word	0x08003885
 8003828:	08003885 	.word	0x08003885
 800382c:	08003885 	.word	0x08003885
 8003830:	08003885 	.word	0x08003885
 8003834:	08003885 	.word	0x08003885
 8003838:	08003885 	.word	0x08003885
 800383c:	0800386d 	.word	0x0800386d
 8003840:	08003885 	.word	0x08003885
 8003844:	08003885 	.word	0x08003885
 8003848:	08003885 	.word	0x08003885
 800384c:	08003885 	.word	0x08003885
 8003850:	08003885 	.word	0x08003885
 8003854:	08003885 	.word	0x08003885
 8003858:	08003885 	.word	0x08003885
 800385c:	08003861 	.word	0x08003861
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d913      	bls.n	800388e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800386a:	e010      	b.n	800388e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b07      	cmp	r3, #7
 8003870:	d90f      	bls.n	8003892 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003876:	e00c      	b.n	8003892 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	d90b      	bls.n	8003896 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003882:	e008      	b.n	8003896 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]
        break;
 8003888:	e006      	b.n	8003898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003896:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 0118 	bic.w	r1, r3, #24
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e069      	b.n	80039ae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fc ff12 	bl	8000710 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_DCMI_Init+0xf0>)
 800390e:	400b      	ands	r3, r1
 8003910:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003926:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003932:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800393e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800394a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003956:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b10      	cmp	r3, #16
 8003966:	d112      	bne.n	800398e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7f1b      	ldrb	r3, [r3, #28]
 800396c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7f5b      	ldrb	r3, [r3, #29]
 8003972:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003974:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7f9b      	ldrb	r3, [r3, #30]
 800397a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800397c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7fdb      	ldrb	r3, [r3, #31]
 8003984:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800398a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800398c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 021e 	orr.w	r2, r2, #30
 800399c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	ffe0f007 	.word	0xffe0f007

080039bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_Start_IT+0x26>
 80039de:	2302      	movs	r3, #2
 80039e0:	e048      	b.n	8003a74 <HAL_DMA_Start_IT+0xb8>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d137      	bne.n	8003a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8d4 	bl	8003bb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a14:	223f      	movs	r2, #63	@ 0x3f
 8003a16:	409a      	lsls	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0216 	orr.w	r2, r2, #22
 8003a2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0208 	orr.w	r2, r2, #8
 8003a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e005      	b.n	8003a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a8a:	f7ff fa85 	bl	8002f98 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d008      	beq.n	8003aae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e052      	b.n	8003b54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0216 	bic.w	r2, r2, #22
 8003abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003acc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_DMA_Abort+0x62>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0208 	bic.w	r2, r2, #8
 8003aec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afe:	e013      	b.n	8003b28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b00:	f7ff fa4a 	bl	8002f98 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d90c      	bls.n	8003b28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e015      	b.n	8003b54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e4      	bne.n	8003b00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3a:	223f      	movs	r2, #63	@ 0x3f
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2280      	movs	r2, #128	@ 0x80
 8003b74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00c      	b.n	8003b94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d108      	bne.n	8003bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bf6:	e007      	b.n	8003c08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e039      	b.n	8003c9a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fc fe58 	bl	80008f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	f023 0107 	bic.w	r1, r3, #7
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_DMA2D_Init+0x90>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68d1      	ldr	r1, [r2, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	ffffc000 	.word	0xffffc000

08003ca8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d026      	beq.n	8003d18 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d021      	beq.n	8003d18 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	f043 0201 	orr.w	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d026      	beq.n	8003d70 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d021      	beq.n	8003d70 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	f043 0202 	orr.w	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2204      	movs	r2, #4
 8003d54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d026      	beq.n	8003dc8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d021      	beq.n	8003dc8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d92:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d013      	beq.n	8003dfa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f853 	bl	8003ea0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d024      	beq.n	8003e4e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2202      	movs	r2, #2
 8003e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01f      	beq.n	8003e98 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01a      	beq.n	8003e98 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f80e 	bl	8003eb4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DMA2D_ConfigLayer+0x20>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e079      	b.n	8003fdc <HAL_DMA2D_ConfigLayer+0x114>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	3318      	adds	r3, #24
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003f12:	4b35      	ldr	r3, [pc, #212]	@ (8003fe8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003f14:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b0a      	cmp	r3, #10
 8003f1c:	d003      	beq.n	8003f26 <HAL_DMA2D_ConfigLayer+0x5e>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	d107      	bne.n	8003f36 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e005      	b.n	8003f42 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d120      	bne.n	8003f8a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	ea02 0103 	and.w	r1, r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b0a      	cmp	r3, #10
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA2D_ConfigLayer+0xb2>
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d127      	bne.n	8003fca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003f86:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f88:	e01f      	b.n	8003fca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	ea02 0103 	and.w	r1, r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b0a      	cmp	r3, #10
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA2D_ConfigLayer+0xf4>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d106      	bne.n	8003fca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003fc8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	ff03000f 	.word	0xff03000f

08003fec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e086      	b.n	800410c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2223      	movs	r2, #35	@ 0x23
 800400c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fc fce1 	bl	80009d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004016:	4b3f      	ldr	r3, [pc, #252]	@ (8004114 <HAL_ETH_Init+0x128>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	4a3e      	ldr	r2, [pc, #248]	@ (8004114 <HAL_ETH_Init+0x128>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004020:	6453      	str	r3, [r2, #68]	@ 0x44
 8004022:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <HAL_ETH_Init+0x128>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800402e:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_ETH_Init+0x12c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a39      	ldr	r2, [pc, #228]	@ (8004118 <HAL_ETH_Init+0x12c>)
 8004034:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004038:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800403a:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_ETH_Init+0x12c>)
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4935      	ldr	r1, [pc, #212]	@ (8004118 <HAL_ETH_Init+0x12c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004048:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <HAL_ETH_Init+0x12c>)
 800404a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004062:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004064:	f7fe ff98 	bl	8002f98 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800406a:	e011      	b.n	8004090 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800406c:	f7fe ff94 	bl	8002f98 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800407a:	d909      	bls.n	8004090 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	22e0      	movs	r2, #224	@ 0xe0
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e03d      	b.n	800410c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e4      	bne.n	800406c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f97a 	bl	800439c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fa25 	bl	80044f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa7b 	bl	80045aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	461a      	mov	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f9e3 	bl	8004488 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80040d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <HAL_ETH_Init+0x130>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80040f6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2210      	movs	r2, #16
 8004106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	40013800 	.word	0x40013800
 800411c:	00020060 	.word	0x00020060

08004120 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4b53      	ldr	r3, [pc, #332]	@ (8004284 <ETH_SetMACConfig+0x164>)
 8004136:	4013      	ands	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7b9b      	ldrb	r3, [r3, #14]
 800413e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	7c12      	ldrb	r2, [r2, #16]
 8004144:	2a00      	cmp	r2, #0
 8004146:	d102      	bne.n	800414e <ETH_SetMACConfig+0x2e>
 8004148:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800414c:	e000      	b.n	8004150 <ETH_SetMACConfig+0x30>
 800414e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004150:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	7c52      	ldrb	r2, [r2, #17]
 8004156:	2a00      	cmp	r2, #0
 8004158:	d102      	bne.n	8004160 <ETH_SetMACConfig+0x40>
 800415a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800415e:	e000      	b.n	8004162 <ETH_SetMACConfig+0x42>
 8004160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004162:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004168:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	7fdb      	ldrb	r3, [r3, #31]
 800416e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004170:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004176:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	7f92      	ldrb	r2, [r2, #30]
 800417c:	2a00      	cmp	r2, #0
 800417e:	d102      	bne.n	8004186 <ETH_SetMACConfig+0x66>
 8004180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004184:	e000      	b.n	8004188 <ETH_SetMACConfig+0x68>
 8004186:	2200      	movs	r2, #0
                        macconf->Speed |
 8004188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7f1b      	ldrb	r3, [r3, #28]
 800418e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004190:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004196:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	791b      	ldrb	r3, [r3, #4]
 800419c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800419e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80041a6:	2a00      	cmp	r2, #0
 80041a8:	d102      	bne.n	80041b0 <ETH_SetMACConfig+0x90>
 80041aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ae:	e000      	b.n	80041b2 <ETH_SetMACConfig+0x92>
 80041b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	7bdb      	ldrb	r3, [r3, #15]
 80041b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80041ca:	4313      	orrs	r3, r2
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7fe fee4 	bl	8002fb0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80041fe:	4013      	ands	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800420e:	2a00      	cmp	r2, #0
 8004210:	d101      	bne.n	8004216 <ETH_SetMACConfig+0xf6>
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	e000      	b.n	8004218 <ETH_SetMACConfig+0xf8>
 8004216:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004218:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800421e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004226:	2a01      	cmp	r2, #1
 8004228:	d101      	bne.n	800422e <ETH_SetMACConfig+0x10e>
 800422a:	2208      	movs	r2, #8
 800422c:	e000      	b.n	8004230 <ETH_SetMACConfig+0x110>
 800422e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004230:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004238:	2a01      	cmp	r2, #1
 800423a:	d101      	bne.n	8004240 <ETH_SetMACConfig+0x120>
 800423c:	2204      	movs	r2, #4
 800423e:	e000      	b.n	8004242 <ETH_SetMACConfig+0x122>
 8004240:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800424a:	2a01      	cmp	r2, #1
 800424c:	d101      	bne.n	8004252 <ETH_SetMACConfig+0x132>
 800424e:	2202      	movs	r2, #2
 8004250:	e000      	b.n	8004254 <ETH_SetMACConfig+0x134>
 8004252:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004254:	4313      	orrs	r3, r2
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800426c:	2001      	movs	r0, #1
 800426e:	f7fe fe9f 	bl	8002fb0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	fd20810f 	.word	0xfd20810f

08004288 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <ETH_SetDMAConfig+0x110>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7b1b      	ldrb	r3, [r3, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <ETH_SetDMAConfig+0x2c>
 80042ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042b2:	e000      	b.n	80042b6 <ETH_SetDMAConfig+0x2e>
 80042b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	7b5b      	ldrb	r3, [r3, #13]
 80042ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	7f52      	ldrb	r2, [r2, #29]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d102      	bne.n	80042cc <ETH_SetDMAConfig+0x44>
 80042c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80042ca:	e000      	b.n	80042ce <ETH_SetDMAConfig+0x46>
 80042cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	7b9b      	ldrb	r3, [r3, #14]
 80042d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	7f1b      	ldrb	r3, [r3, #28]
 80042e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80042e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	7f9b      	ldrb	r3, [r3, #30]
 80042ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80042ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042fc:	4313      	orrs	r3, r2
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430c:	461a      	mov	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800431e:	2001      	movs	r0, #1
 8004320:	f7fe fe46 	bl	8002fb0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432c:	461a      	mov	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800433c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004342:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004348:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004350:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004352:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800435a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004360:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800436a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800436e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800437c:	2001      	movs	r0, #1
 800437e:	f7fe fe17 	bl	8002fb0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6013      	str	r3, [r2, #0]
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	f8de3f23 	.word	0xf8de3f23

0800439c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b0a6      	sub	sp, #152	@ 0x98
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043de:	2300      	movs	r3, #0
 80043e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004404:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800440a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800440e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004416:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fe7f 	bl	8004120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004422:	2301      	movs	r3, #1
 8004424:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004426:	2301      	movs	r3, #1
 8004428:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004430:	2301      	movs	r3, #1
 8004432:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800444e:	2301      	movs	r3, #1
 8004450:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004452:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004456:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004458:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800445c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800445e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004462:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800446a:	2300      	movs	r3, #0
 800446c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff05 	bl	8004288 <ETH_SetDMAConfig>
}
 800447e:	bf00      	nop
 8004480:	3798      	adds	r7, #152	@ 0x98
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3305      	adds	r3, #5
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	3204      	adds	r2, #4
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <ETH_MACAddressConfig+0x68>)
 80044aa:	4413      	add	r3, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3303      	adds	r3, #3
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	061a      	lsls	r2, r3, #24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3302      	adds	r3, #2
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3301      	adds	r3, #1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	4313      	orrs	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <ETH_MACAddressConfig+0x6c>)
 80044da:	4413      	add	r3, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6013      	str	r3, [r2, #0]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40028040 	.word	0x40028040
 80044f4:	40028044 	.word	0x40028044

080044f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e03e      	b.n	8004584 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	3206      	adds	r2, #6
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d80c      	bhi.n	8004568 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68d9      	ldr	r1, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e004      	b.n	8004572 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d9bd      	bls.n	8004506 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459c:	611a      	str	r2, [r3, #16]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e048      	b.n	800464a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6919      	ldr	r1, [r3, #16]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	440b      	add	r3, r1
 80045c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	3212      	adds	r2, #18
 8004616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d80c      	bhi.n	800463a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6919      	ldr	r1, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	e004      	b.n	8004644 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d9b3      	bls.n	80045b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467a:	60da      	str	r2, [r3, #12]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	@ 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e175      	b.n	8004994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 8164 	bne.w	800498e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d005      	beq.n	80046de <HAL_GPIO_Init+0x56>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d130      	bne.n	8004740 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 0201 	and.w	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d017      	beq.n	800477c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d123      	bne.n	80047d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3208      	adds	r2, #8
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80be 	beq.w	800498e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004812:	4b66      	ldr	r3, [pc, #408]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	4a65      	ldr	r2, [pc, #404]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800481c:	6453      	str	r3, [r2, #68]	@ 0x44
 800481e:	4b63      	ldr	r3, [pc, #396]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800482a:	4a61      	ldr	r2, [pc, #388]	@ (80049b0 <HAL_GPIO_Init+0x328>)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a58      	ldr	r2, [pc, #352]	@ (80049b4 <HAL_GPIO_Init+0x32c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d037      	beq.n	80048c6 <HAL_GPIO_Init+0x23e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a57      	ldr	r2, [pc, #348]	@ (80049b8 <HAL_GPIO_Init+0x330>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_GPIO_Init+0x23a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a56      	ldr	r2, [pc, #344]	@ (80049bc <HAL_GPIO_Init+0x334>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02b      	beq.n	80048be <HAL_GPIO_Init+0x236>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a55      	ldr	r2, [pc, #340]	@ (80049c0 <HAL_GPIO_Init+0x338>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d025      	beq.n	80048ba <HAL_GPIO_Init+0x232>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <HAL_GPIO_Init+0x33c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01f      	beq.n	80048b6 <HAL_GPIO_Init+0x22e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a53      	ldr	r2, [pc, #332]	@ (80049c8 <HAL_GPIO_Init+0x340>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d019      	beq.n	80048b2 <HAL_GPIO_Init+0x22a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_GPIO_Init+0x344>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_GPIO_Init+0x226>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a51      	ldr	r2, [pc, #324]	@ (80049d0 <HAL_GPIO_Init+0x348>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00d      	beq.n	80048aa <HAL_GPIO_Init+0x222>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a50      	ldr	r2, [pc, #320]	@ (80049d4 <HAL_GPIO_Init+0x34c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <HAL_GPIO_Init+0x21e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4f      	ldr	r2, [pc, #316]	@ (80049d8 <HAL_GPIO_Init+0x350>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_GPIO_Init+0x21a>
 800489e:	2309      	movs	r3, #9
 80048a0:	e012      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048a2:	230a      	movs	r3, #10
 80048a4:	e010      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048a6:	2308      	movs	r3, #8
 80048a8:	e00e      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e00c      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048ae:	2306      	movs	r3, #6
 80048b0:	e00a      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048c6:	2300      	movs	r3, #0
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048d8:	4935      	ldr	r1, [pc, #212]	@ (80049b0 <HAL_GPIO_Init+0x328>)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048e6:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_GPIO_Init+0x354>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800490a:	4a34      	ldr	r2, [pc, #208]	@ (80049dc <HAL_GPIO_Init+0x354>)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004910:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_GPIO_Init+0x354>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004934:	4a29      	ldr	r2, [pc, #164]	@ (80049dc <HAL_GPIO_Init+0x354>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800493a:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <HAL_GPIO_Init+0x354>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_GPIO_Init+0x354>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004964:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <HAL_GPIO_Init+0x354>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004988:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <HAL_GPIO_Init+0x354>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	f67f ae86 	bls.w	80046a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3724      	adds	r7, #36	@ 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40020000 	.word	0x40020000
 80049b8:	40020400 	.word	0x40020400
 80049bc:	40020800 	.word	0x40020800
 80049c0:	40020c00 	.word	0x40020c00
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40021400 	.word	0x40021400
 80049cc:	40021800 	.word	0x40021800
 80049d0:	40021c00 	.word	0x40021c00
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40022400 	.word	0x40022400
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a2c:	e003      	b.n	8004a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	041a      	lsls	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	619a      	str	r2, [r3, #24]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	041a      	lsls	r2, r3, #16
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43d9      	mvns	r1, r3
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	400b      	ands	r3, r1
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	619a      	str	r2, [r3, #24]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af02      	add	r7, sp, #8
 8004a7c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e059      	b.n	8004b3c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f00f fa2a 	bl	8013efc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ab6:	d102      	bne.n	8004abe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f008 ff2b 	bl	800d91e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7c1a      	ldrb	r2, [r3, #16]
 8004ad0:	f88d 2000 	strb.w	r2, [sp]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad8:	f008 feb6 	bl	800d848 <USB_CoreInit>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e026      	b.n	8004b3c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f008 ff23 	bl	800d940 <USB_SetCurrentMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e017      	b.n	8004b3c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7c1a      	ldrb	r2, [r3, #16]
 8004b14:	f88d 2000 	strb.w	r2, [sp]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1c:	f009 f8c6 	bl	800dcac <USB_HostInit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e004      	b.n	8004b3c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b08b      	sub	sp, #44	@ 0x2c
 8004b48:	af04      	add	r7, sp, #16
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	70fb      	strb	r3, [r7, #3]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70bb      	strb	r3, [r7, #2]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004b5e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b60:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_HCD_HC_Init+0x2c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e09d      	b.n	8004cac <HAL_HCD_HC_Init+0x168>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	3319      	adds	r3, #25
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	787a      	ldrb	r2, [r7, #1]
 8004b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	3315      	adds	r3, #21
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3326      	adds	r3, #38	@ 0x26
 8004bc4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004bc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	78bb      	ldrb	r3, [r7, #2]
 8004bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd2:	b2d8      	uxtb	r0, r3
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3316      	adds	r3, #22
 8004be2:	4602      	mov	r2, r0
 8004be4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fbc8 	bl	8005380 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004bf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da0a      	bge.n	8004c0e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3317      	adds	r3, #23
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e009      	b.n	8004c22 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3317      	adds	r3, #23
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f009 f998 	bl	800df5c <USB_GetHostSpeed>
 8004c2c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10b      	bne.n	8004c4e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_HCD_HC_Init+0x10a>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2bbc      	cmp	r3, #188	@ 0xbc
 8004c48:	d901      	bls.n	8004c4e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004c4a:	23bc      	movs	r3, #188	@ 0xbc
 8004c4c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004c62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	b298      	uxth	r0, r3
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	3328      	adds	r3, #40	@ 0x28
 8004c78:	4602      	mov	r2, r0
 8004c7a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	787c      	ldrb	r4, [r7, #1]
 8004c86:	78ba      	ldrb	r2, [r7, #2]
 8004c88:	78f9      	ldrb	r1, [r7, #3]
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4623      	mov	r3, r4
 8004c9a:	f009 f987 	bl	800dfac <USB_HC_Init>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_HCD_HC_Halt+0x1e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e00f      	b.n	8004cf2 <HAL_HCD_HC_Halt+0x3e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f009 fd19 	bl	800e71a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	70fb      	strb	r3, [r7, #3]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70bb      	strb	r3, [r7, #2]
 8004d12:	4613      	mov	r3, r2
 8004d14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3317      	adds	r3, #23
 8004d26:	78ba      	ldrb	r2, [r7, #2]
 8004d28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3326      	adds	r3, #38	@ 0x26
 8004d3a:	787a      	ldrb	r2, [r7, #1]
 8004d3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d3e:	7c3b      	ldrb	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d114      	bne.n	8004d6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	332a      	adds	r3, #42	@ 0x2a
 8004d54:	2203      	movs	r2, #3
 8004d56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3319      	adds	r3, #25
 8004d68:	7f3a      	ldrb	r2, [r7, #28]
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e009      	b.n	8004d82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	332a      	adds	r3, #42	@ 0x2a
 8004d7e:	2202      	movs	r2, #2
 8004d80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d82:	787b      	ldrb	r3, [r7, #1]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	f200 8102 	bhi.w	8004f8e <HAL_HCD_HC_SubmitRequest+0x292>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004f79 	.word	0x08004f79
 8004d98:	08004e65 	.word	0x08004e65
 8004d9c:	08004eef 	.word	0x08004eef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004da0:	7c3b      	ldrb	r3, [r7, #16]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	f040 80f5 	bne.w	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d12d      	bne.n	8004e0a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004dae:	8b3b      	ldrh	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	333d      	adds	r3, #61	@ 0x3d
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	333d      	adds	r3, #61	@ 0x3d
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	332a      	adds	r3, #42	@ 0x2a
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004df2:	e0ce      	b.n	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	332a      	adds	r3, #42	@ 0x2a
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
      break;
 8004e08:	e0c3      	b.n	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	331a      	adds	r3, #26
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f040 80b8 	bne.w	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	333c      	adds	r3, #60	@ 0x3c
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	332a      	adds	r3, #42	@ 0x2a
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
      break;
 8004e4c:	e0a1      	b.n	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	332a      	adds	r3, #42	@ 0x2a
 8004e5e:	2202      	movs	r2, #2
 8004e60:	701a      	strb	r2, [r3, #0]
      break;
 8004e62:	e096      	b.n	8004f92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e64:	78bb      	ldrb	r3, [r7, #2]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d120      	bne.n	8004eac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	333d      	adds	r3, #61	@ 0x3d
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	332a      	adds	r3, #42	@ 0x2a
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004e94:	e07e      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	332a      	adds	r3, #42	@ 0x2a
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	e073      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	333c      	adds	r3, #60	@ 0x3c
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	332a      	adds	r3, #42	@ 0x2a
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e05d      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	332a      	adds	r3, #42	@ 0x2a
 8004ee8:	2202      	movs	r2, #2
 8004eea:	701a      	strb	r2, [r3, #0]
      break;
 8004eec:	e052      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004eee:	78bb      	ldrb	r3, [r7, #2]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d120      	bne.n	8004f36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	333d      	adds	r3, #61	@ 0x3d
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	332a      	adds	r3, #42	@ 0x2a
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f1e:	e039      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	332a      	adds	r3, #42	@ 0x2a
 8004f30:	2202      	movs	r2, #2
 8004f32:	701a      	strb	r2, [r3, #0]
      break;
 8004f34:	e02e      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	333c      	adds	r3, #60	@ 0x3c
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	332a      	adds	r3, #42	@ 0x2a
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
      break;
 8004f60:	e018      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	332a      	adds	r3, #42	@ 0x2a
 8004f72:	2202      	movs	r2, #2
 8004f74:	701a      	strb	r2, [r3, #0]
      break;
 8004f76:	e00d      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	332a      	adds	r3, #42	@ 0x2a
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
      break;
 8004f8c:	e002      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004f92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	332c      	adds	r3, #44	@ 0x2c
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	8b39      	ldrh	r1, [r7, #24]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4403      	add	r3, r0
 8004fb8:	3334      	adds	r3, #52	@ 0x34
 8004fba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	334c      	adds	r3, #76	@ 0x4c
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3338      	adds	r3, #56	@ 0x38
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3315      	adds	r3, #21
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334d      	adds	r3, #77	@ 0x4d
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3310      	adds	r3, #16
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	799b      	ldrb	r3, [r3, #6]
 8005026:	461a      	mov	r2, r3
 8005028:	f009 f8ec 	bl	800e204 <USB_HC_StartXfer>
 800502c:	4603      	mov	r3, r0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop

08005038 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f008 fdec 	bl	800dc2c <USB_GetMode>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	f040 80fb 	bne.w	8005252 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f008 fdaf 	bl	800dbc4 <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80f1 	beq.w	8005250 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f008 fda6 	bl	800dbc4 <USB_ReadInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800507e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005082:	d104      	bne.n	800508e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800508c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f008 fd96 	bl	800dbc4 <USB_ReadInterrupts>
 8005098:	4603      	mov	r3, r0
 800509a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800509e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a2:	d104      	bne.n	80050ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 fd86 	bl	800dbc4 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050c2:	d104      	bne.n	80050ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f008 fd76 	bl	800dbc4 <USB_ReadInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2202      	movs	r2, #2
 80050e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f008 fd68 	bl	800dbc4 <USB_ReadInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fe:	d120      	bne.n	8005142 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005108:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d113      	bne.n	8005142 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800511a:	2110      	movs	r1, #16
 800511c:	6938      	ldr	r0, [r7, #16]
 800511e:	f008 fc5b 	bl	800d9d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005122:	6938      	ldr	r0, [r7, #16]
 8005124:	f008 fc8a 	bl	800da3c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7a5b      	ldrb	r3, [r3, #9]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d105      	bne.n	800513c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f008 fe70 	bl	800de1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f00e ff4f 	bl	8013fe0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f008 fd3c 	bl	800dbc4 <USB_ReadInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005156:	d102      	bne.n	800515e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 fd33 	bl	8006bc4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f008 fd2e 	bl	800dbc4 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b08      	cmp	r3, #8
 8005170:	d106      	bne.n	8005180 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f00e ff18 	bl	8013fa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2208      	movs	r2, #8
 800517e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f008 fd1d 	bl	800dbc4 <USB_ReadInterrupts>
 800518a:	4603      	mov	r3, r0
 800518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005194:	d139      	bne.n	800520a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f009 faac 	bl	800e6f8 <USB_HC_ReadInterrupt>
 80051a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e025      	b.n	80051f4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d018      	beq.n	80051ee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d2:	d106      	bne.n	80051e2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f905 	bl	80053ea <HCD_HC_IN_IRQHandler>
 80051e0:	e005      	b.n	80051ee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 ff67 	bl	80060bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	3301      	adds	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	795b      	ldrb	r3, [r3, #5]
 80051f8:	461a      	mov	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d3d3      	bcc.n	80051a8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f008 fcd8 	bl	800dbc4 <USB_ReadInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d101      	bne.n	8005222 <HAL_HCD_IRQHandler+0x1ea>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_HCD_IRQHandler+0x1ec>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d014      	beq.n	8005252 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0210 	bic.w	r2, r2, #16
 8005236:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fbe4 	bl	8006a06 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0210 	orr.w	r2, r2, #16
 800524c:	619a      	str	r2, [r3, #24]
 800524e:	e000      	b.n	8005252 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005250:	bf00      	nop
    }
  }
}
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_HCD_Start+0x16>
 800526a:	2302      	movs	r3, #2
 800526c:	e013      	b.n	8005296 <HAL_HCD_Start+0x3e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f008 fe34 	bl	800deea <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f008 fb38 	bl	800d8fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_HCD_Stop+0x16>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e00d      	b.n	80052d0 <HAL_HCD_Stop+0x32>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f009 fb87 	bl	800e9d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f008 fdd6 	bl	800de96 <USB_ResetPort>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	334c      	adds	r3, #76	@ 0x4c
 8005310:	781b      	ldrb	r3, [r3, #0]
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3338      	adds	r3, #56	@ 0x38
 800533a:	681b      	ldr	r3, [r3, #0]
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f008 fe18 	bl	800df8a <USB_GetCurrentFrame>
 800535a:	4603      	mov	r3, r0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f008 fdf3 	bl	800df5c <USB_GetHostSpeed>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	331a      	adds	r3, #26
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	331b      	adds	r3, #27
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3325      	adds	r3, #37	@ 0x25
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3324      	adds	r3, #36	@ 0x24
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f008 fbee 	bl	800dbea <USB_ReadChInterrupts>
 800540e:	4603      	mov	r3, r0
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11a      	bne.n	800544e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005424:	461a      	mov	r2, r3
 8005426:	2304      	movs	r3, #4
 8005428:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	334d      	adds	r3, #77	@ 0x4d
 800543a:	2207      	movs	r2, #7
 800543c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f009 f967 	bl	800e71a <USB_HC_Halt>
 800544c:	e09e      	b.n	800558c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f008 fbc7 	bl	800dbea <USB_ReadChInterrupts>
 800545c:	4603      	mov	r3, r0
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005466:	d11b      	bne.n	80054a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005474:	461a      	mov	r2, r3
 8005476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800547a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	334d      	adds	r3, #77	@ 0x4d
 800548c:	2208      	movs	r2, #8
 800548e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f009 f93e 	bl	800e71a <USB_HC_Halt>
 800549e:	e075      	b.n	800558c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f008 fb9e 	bl	800dbea <USB_ReadChInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d11a      	bne.n	80054ee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	2308      	movs	r3, #8
 80054c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	334d      	adds	r3, #77	@ 0x4d
 80054da:	2206      	movs	r2, #6
 80054dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f009 f917 	bl	800e71a <USB_HC_Halt>
 80054ec:	e04e      	b.n	800558c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	4611      	mov	r1, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f008 fb77 	bl	800dbea <USB_ReadChInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005506:	d11b      	bne.n	8005540 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005514:	461a      	mov	r2, r3
 8005516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	334d      	adds	r3, #77	@ 0x4d
 800552c:	2209      	movs	r2, #9
 800552e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f009 f8ee 	bl	800e71a <USB_HC_Halt>
 800553e:	e025      	b.n	800558c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f008 fb4e 	bl	800dbea <USB_ReadChInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005554:	2b80      	cmp	r3, #128	@ 0x80
 8005556:	d119      	bne.n	800558c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	334d      	adds	r3, #77	@ 0x4d
 800557a:	2207      	movs	r2, #7
 800557c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f009 f8c7 	bl	800e71a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f008 fb28 	bl	800dbea <USB_ReadChInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a4:	d112      	bne.n	80055cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f009 f8b3 	bl	800e71a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c0:	461a      	mov	r2, r3
 80055c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055c6:	6093      	str	r3, [r2, #8]
 80055c8:	f000 bd75 	b.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f008 fb08 	bl	800dbea <USB_ReadChInterrupts>
 80055da:	4603      	mov	r3, r0
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 8128 	bne.w	8005836 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f2:	461a      	mov	r2, r3
 80055f4:	2320      	movs	r3, #32
 80055f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	331b      	adds	r3, #27
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d119      	bne.n	8005642 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	331b      	adds	r3, #27
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800563c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005640:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	799b      	ldrb	r3, [r3, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01b      	beq.n	8005682 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3330      	adds	r3, #48	@ 0x30
 800565a:	6819      	ldr	r1, [r3, #0]
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	1ac9      	subs	r1, r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4403      	add	r3, r0
 800567e:	3338      	adds	r3, #56	@ 0x38
 8005680:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	334d      	adds	r3, #77	@ 0x4d
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3344      	adds	r3, #68	@ 0x44
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	2301      	movs	r3, #1
 80056ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3326      	adds	r3, #38	@ 0x26
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	3326      	adds	r3, #38	@ 0x26
 80056e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d110      	bne.n	800570a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f009 f812 	bl	800e71a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005702:	461a      	mov	r2, r3
 8005704:	2310      	movs	r3, #16
 8005706:	6093      	str	r3, [r2, #8]
 8005708:	e03d      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	3326      	adds	r3, #38	@ 0x26
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d00a      	beq.n	8005736 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	3326      	adds	r3, #38	@ 0x26
 8005730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005732:	2b01      	cmp	r3, #1
 8005734:	d127      	bne.n	8005786 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005754:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	334c      	adds	r3, #76	@ 0x4c
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	334c      	adds	r3, #76	@ 0x4c
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f00e fc3b 	bl	8013ffc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	799b      	ldrb	r3, [r3, #6]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d13b      	bne.n	8005806 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	3338      	adds	r3, #56	@ 0x38
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4403      	add	r3, r0
 80057ae:	3328      	adds	r3, #40	@ 0x28
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	440b      	add	r3, r1
 80057b4:	1e59      	subs	r1, r3, #1
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4403      	add	r3, r0
 80057c4:	3328      	adds	r3, #40	@ 0x28
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8470 	beq.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	333c      	adds	r3, #60	@ 0x3c
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	f083 0301 	eor.w	r3, r3, #1
 80057ee:	b2d8      	uxtb	r0, r3
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	333c      	adds	r3, #60	@ 0x3c
 80057fe:	4602      	mov	r2, r0
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	f000 bc58 	b.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	333c      	adds	r3, #60	@ 0x3c
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	f083 0301 	eor.w	r3, r3, #1
 800581e:	b2d8      	uxtb	r0, r3
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	333c      	adds	r3, #60	@ 0x3c
 800582e:	4602      	mov	r2, r0
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	f000 bc40 	b.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f008 f9d3 	bl	800dbea <USB_ReadChInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b20      	cmp	r3, #32
 800584c:	d131      	bne.n	80058b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	2320      	movs	r3, #32
 800585e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	331a      	adds	r3, #26
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 841f 	bne.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	331b      	adds	r3, #27
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	334d      	adds	r3, #77	@ 0x4d
 800589c:	2203      	movs	r2, #3
 800589e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f008 ff36 	bl	800e71a <USB_HC_Halt>
 80058ae:	f000 bc02 	b.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f008 f995 	bl	800dbea <USB_ReadChInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	f040 8305 	bne.w	8005ed6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d8:	461a      	mov	r2, r3
 80058da:	2302      	movs	r3, #2
 80058dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	334d      	adds	r3, #77	@ 0x4d
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d114      	bne.n	800591e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	334d      	adds	r3, #77	@ 0x4d
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	334c      	adds	r3, #76	@ 0x4c
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e2cc      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	334d      	adds	r3, #77	@ 0x4d
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b06      	cmp	r3, #6
 8005932:	d114      	bne.n	800595e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	334d      	adds	r3, #77	@ 0x4d
 8005944:	2202      	movs	r2, #2
 8005946:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	334c      	adds	r3, #76	@ 0x4c
 8005958:	2205      	movs	r2, #5
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e2ac      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	334d      	adds	r3, #77	@ 0x4d
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b07      	cmp	r3, #7
 8005972:	d00b      	beq.n	800598c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	334d      	adds	r3, #77	@ 0x4d
 8005984:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005986:	2b09      	cmp	r3, #9
 8005988:	f040 80a6 	bne.w	8005ad8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334d      	adds	r3, #77	@ 0x4d
 800599c:	2202      	movs	r2, #2
 800599e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3344      	adds	r3, #68	@ 0x44
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4403      	add	r3, r0
 80059c0:	3344      	adds	r3, #68	@ 0x44
 80059c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3344      	adds	r3, #68	@ 0x44
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d943      	bls.n	8005a62 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3344      	adds	r3, #68	@ 0x44
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	331a      	adds	r3, #26
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d123      	bne.n	8005a4c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	331b      	adds	r3, #27
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331c      	adds	r3, #28
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a4a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	334c      	adds	r3, #76	@ 0x4c
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a60:	e229      	b.n	8005eb6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	334c      	adds	r3, #76	@ 0x4c
 8005a72:	2202      	movs	r2, #2
 8005a74:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3326      	adds	r3, #38	@ 0x26
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3326      	adds	r3, #38	@ 0x26
 8005a9c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	f040 8209 	bne.w	8005eb6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005aba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ac2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ad6:	e1ee      	b.n	8005eb6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	334d      	adds	r3, #77	@ 0x4d
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	f040 80c8 	bne.w	8005c80 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	334d      	adds	r3, #77	@ 0x4d
 8005b00:	2202      	movs	r2, #2
 8005b02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	331b      	adds	r3, #27
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	f040 81ce 	bne.w	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3326      	adds	r3, #38	@ 0x26
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d16b      	bne.n	8005c0a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3348      	adds	r3, #72	@ 0x48
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4403      	add	r3, r0
 8005b52:	3348      	adds	r3, #72	@ 0x48
 8005b54:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3348      	adds	r3, #72	@ 0x48
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d943      	bls.n	8005bf4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	3348      	adds	r3, #72	@ 0x48
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	331b      	adds	r3, #27
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3344      	adds	r3, #68	@ 0x44
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d809      	bhi.n	8005bbe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	331c      	adds	r3, #28
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bdc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	334c      	adds	r3, #76	@ 0x4c
 8005bee:	2204      	movs	r2, #4
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e014      	b.n	8005c1e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	334c      	adds	r3, #76	@ 0x4c
 8005c04:	2202      	movs	r2, #2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e009      	b.n	8005c1e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	334c      	adds	r3, #76	@ 0x4c
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3326      	adds	r3, #38	@ 0x26
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3326      	adds	r3, #38	@ 0x26
 8005c44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	f040 8136 	bne.w	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e11b      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	334d      	adds	r3, #77	@ 0x4d
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	f040 8081 	bne.w	8005d9a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	334d      	adds	r3, #77	@ 0x4d
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	331b      	adds	r3, #27
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	f040 80fa 	bne.w	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	334c      	adds	r3, #76	@ 0x4c
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d16:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d32:	f023 0320 	bic.w	r3, r3, #32
 8005d36:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	3326      	adds	r3, #38	@ 0x26
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3326      	adds	r3, #38	@ 0x26
 8005d5e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f040 80a9 	bne.w	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d84:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d92:	461a      	mov	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e08e      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	334d      	adds	r3, #77	@ 0x4d
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d143      	bne.n	8005e38 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	334d      	adds	r3, #77	@ 0x4d
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	334c      	adds	r3, #76	@ 0x4c
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	3326      	adds	r3, #38	@ 0x26
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3326      	adds	r3, #38	@ 0x26
 8005dfe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d159      	bne.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	461a      	mov	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e03f      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	334d      	adds	r3, #77	@ 0x4d
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d126      	bne.n	8005e9c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	334d      	adds	r3, #77	@ 0x4d
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3344      	adds	r3, #68	@ 0x44
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4403      	add	r3, r0
 8005e82:	3344      	adds	r3, #68	@ 0x44
 8005e84:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	334c      	adds	r3, #76	@ 0x4c
 8005e96:	2204      	movs	r2, #4
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e00d      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	334d      	adds	r3, #77	@ 0x4d
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f000 8100 	beq.w	80060b4 <HCD_HC_IN_IRQHandler+0xcca>
 8005eb4:	e000      	b.n	8005eb8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005eb6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	334c      	adds	r3, #76	@ 0x4c
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f00e f894 	bl	8013ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ed4:	e0ef      	b.n	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f007 fe83 	bl	800dbea <USB_ReadChInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d12f      	bne.n	8005f4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efa:	461a      	mov	r2, r3
 8005efc:	2340      	movs	r3, #64	@ 0x40
 8005efe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	334d      	adds	r3, #77	@ 0x4d
 8005f10:	2205      	movs	r2, #5
 8005f12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	331a      	adds	r3, #26
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3344      	adds	r3, #68	@ 0x44
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f008 fbe7 	bl	800e71a <USB_HC_Halt>
 8005f4c:	e0b3      	b.n	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f007 fe47 	bl	800dbea <USB_ReadChInterrupts>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	f040 80a7 	bne.w	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	3326      	adds	r3, #38	@ 0x26
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d11b      	bne.n	8005fb6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3344      	adds	r3, #68	@ 0x44
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	334d      	adds	r3, #77	@ 0x4d
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f008 fbb3 	bl	800e71a <USB_HC_Halt>
 8005fb4:	e03f      	b.n	8006036 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	3326      	adds	r3, #38	@ 0x26
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	3326      	adds	r3, #38	@ 0x26
 8005fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d129      	bne.n	8006036 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3344      	adds	r3, #68	@ 0x44
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	799b      	ldrb	r3, [r3, #6]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HCD_HC_IN_IRQHandler+0xc2a>
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	331b      	adds	r3, #27
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d110      	bne.n	8006036 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006014:	78fa      	ldrb	r2, [r7, #3]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	334d      	adds	r3, #77	@ 0x4d
 8006024:	2204      	movs	r2, #4
 8006026:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f008 fb72 	bl	800e71a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	331b      	adds	r3, #27
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d129      	bne.n	80060a0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	331b      	adds	r3, #27
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	440a      	add	r2, r1
 8006096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800609a:	f043 0320 	orr.w	r3, r3, #32
 800609e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ac:	461a      	mov	r2, r3
 80060ae:	2310      	movs	r3, #16
 80060b0:	6093      	str	r3, [r2, #8]
 80060b2:	e000      	b.n	80060b6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80060b4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f007 fd85 	bl	800dbea <USB_ReadChInterrupts>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d11b      	bne.n	8006122 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	2304      	movs	r3, #4
 80060fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	334d      	adds	r3, #77	@ 0x4d
 800610c:	2207      	movs	r2, #7
 800610e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f008 fafe 	bl	800e71a <USB_HC_Halt>
 800611e:	f000 bc6f 	b.w	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	4611      	mov	r1, r2
 800612a:	4618      	mov	r0, r3
 800612c:	f007 fd5d 	bl	800dbea <USB_ReadChInterrupts>
 8006130:	4603      	mov	r3, r0
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	f040 8082 	bne.w	8006240 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006148:	461a      	mov	r2, r3
 800614a:	2320      	movs	r3, #32
 800614c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	3319      	adds	r3, #25
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d124      	bne.n	80061ae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	3319      	adds	r3, #25
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	334c      	adds	r3, #76	@ 0x4c
 8006188:	2202      	movs	r2, #2
 800618a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	334d      	adds	r3, #77	@ 0x4d
 800619c:	2203      	movs	r2, #3
 800619e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f008 fab6 	bl	800e71a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	331a      	adds	r3, #26
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	f040 841d 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	331b      	adds	r3, #27
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8411 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	3326      	adds	r3, #38	@ 0x26
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d009      	beq.n	8006208 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	331b      	adds	r3, #27
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	334d      	adds	r3, #77	@ 0x4d
 8006218:	2203      	movs	r2, #3
 800621a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f008 fa78 	bl	800e71a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3344      	adds	r3, #68	@ 0x44
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e3df      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f007 fcce 	bl	800dbea <USB_ReadChInterrupts>
 800624e:	4603      	mov	r3, r0
 8006250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006258:	d111      	bne.n	800627e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006266:	461a      	mov	r2, r3
 8006268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800626c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f008 fa4f 	bl	800e71a <USB_HC_Halt>
 800627c:	e3c0      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f007 fcaf 	bl	800dbea <USB_ReadChInterrupts>
 800628c:	4603      	mov	r3, r0
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d168      	bne.n	8006368 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	3344      	adds	r3, #68	@ 0x44
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	78fa      	ldrb	r2, [r7, #3]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f007 fc99 	bl	800dbea <USB_ReadChInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062be:	2b40      	cmp	r3, #64	@ 0x40
 80062c0:	d112      	bne.n	80062e8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3319      	adds	r3, #25
 80062d2:	2201      	movs	r2, #1
 80062d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e2:	461a      	mov	r2, r3
 80062e4:	2340      	movs	r3, #64	@ 0x40
 80062e6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	331b      	adds	r3, #27
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d019      	beq.n	8006332 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	331b      	adds	r3, #27
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	440a      	add	r2, r1
 8006328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800632c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006330:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633e:	461a      	mov	r2, r3
 8006340:	2301      	movs	r3, #1
 8006342:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	334d      	adds	r3, #77	@ 0x4d
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f008 f9da 	bl	800e71a <USB_HC_Halt>
 8006366:	e34b      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f007 fc3a 	bl	800dbea <USB_ReadChInterrupts>
 8006376:	4603      	mov	r3, r0
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d139      	bne.n	80063f4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	334d      	adds	r3, #77	@ 0x4d
 8006390:	2205      	movs	r2, #5
 8006392:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	331a      	adds	r3, #26
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	3319      	adds	r3, #25
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3344      	adds	r3, #68	@ 0x44
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f008 f99d 	bl	800e71a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ec:	461a      	mov	r2, r3
 80063ee:	2340      	movs	r3, #64	@ 0x40
 80063f0:	6093      	str	r3, [r2, #8]
 80063f2:	e305      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f007 fbf4 	bl	800dbea <USB_ReadChInterrupts>
 8006402:	4603      	mov	r3, r0
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d11a      	bne.n	8006442 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006418:	461a      	mov	r2, r3
 800641a:	2308      	movs	r3, #8
 800641c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	334d      	adds	r3, #77	@ 0x4d
 800642e:	2206      	movs	r2, #6
 8006430:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f008 f96d 	bl	800e71a <USB_HC_Halt>
 8006440:	e2de      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	4611      	mov	r1, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f007 fbcd 	bl	800dbea <USB_ReadChInterrupts>
 8006450:	4603      	mov	r3, r0
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b10      	cmp	r3, #16
 8006458:	d144      	bne.n	80064e4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3344      	adds	r3, #68	@ 0x44
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	334d      	adds	r3, #77	@ 0x4d
 800647e:	2204      	movs	r2, #4
 8006480:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3319      	adds	r3, #25
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d114      	bne.n	80064c2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	3318      	adds	r3, #24
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3319      	adds	r3, #25
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f008 f925 	bl	800e71a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	461a      	mov	r2, r3
 80064de:	2310      	movs	r3, #16
 80064e0:	6093      	str	r3, [r2, #8]
 80064e2:	e28d      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f007 fb7c 	bl	800dbea <USB_ReadChInterrupts>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	2b80      	cmp	r3, #128	@ 0x80
 80064fa:	d169      	bne.n	80065d0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	799b      	ldrb	r3, [r3, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d111      	bne.n	8006528 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	334d      	adds	r3, #77	@ 0x4d
 8006514:	2207      	movs	r2, #7
 8006516:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f008 f8fa 	bl	800e71a <USB_HC_Halt>
 8006526:	e049      	b.n	80065bc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3344      	adds	r3, #68	@ 0x44
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4403      	add	r3, r0
 8006548:	3344      	adds	r3, #68	@ 0x44
 800654a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3344      	adds	r3, #68	@ 0x44
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d922      	bls.n	80065a8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	3344      	adds	r3, #68	@ 0x44
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	334c      	adds	r3, #76	@ 0x4c
 8006586:	2204      	movs	r2, #4
 8006588:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	334c      	adds	r3, #76	@ 0x4c
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f00d fd2b 	bl	8013ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 80065a6:	e009      	b.n	80065bc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	334c      	adds	r3, #76	@ 0x4c
 80065b8:	2202      	movs	r2, #2
 80065ba:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c8:	461a      	mov	r2, r3
 80065ca:	2380      	movs	r3, #128	@ 0x80
 80065cc:	6093      	str	r3, [r2, #8]
 80065ce:	e217      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f007 fb06 	bl	800dbea <USB_ReadChInterrupts>
 80065de:	4603      	mov	r3, r0
 80065e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e8:	d11b      	bne.n	8006622 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	334d      	adds	r3, #77	@ 0x4d
 80065fa:	2209      	movs	r2, #9
 80065fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f008 f887 	bl	800e71a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006618:	461a      	mov	r2, r3
 800661a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800661e:	6093      	str	r3, [r2, #8]
 8006620:	e1ee      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f007 fadd 	bl	800dbea <USB_ReadChInterrupts>
 8006630:	4603      	mov	r3, r0
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b02      	cmp	r3, #2
 8006638:	f040 81df 	bne.w	80069fa <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006648:	461a      	mov	r2, r3
 800664a:	2302      	movs	r3, #2
 800664c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	334d      	adds	r3, #77	@ 0x4d
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 8093 	bne.w	800678c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	334d      	adds	r3, #77	@ 0x4d
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	334c      	adds	r3, #76	@ 0x4c
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3326      	adds	r3, #38	@ 0x26
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d00b      	beq.n	80066bc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3326      	adds	r3, #38	@ 0x26
 80066b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	f040 8190 	bne.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	799b      	ldrb	r3, [r3, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d115      	bne.n	80066f0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	333d      	adds	r3, #61	@ 0x3d
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	f083 0301 	eor.w	r3, r3, #1
 80066dc:	b2d8      	uxtb	r0, r3
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	333d      	adds	r3, #61	@ 0x3d
 80066ec:	4602      	mov	r2, r0
 80066ee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	799b      	ldrb	r3, [r3, #6]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	f040 8171 	bne.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3334      	adds	r3, #52	@ 0x34
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8165 	beq.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3334      	adds	r3, #52	@ 0x34
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4403      	add	r3, r0
 8006732:	3328      	adds	r3, #40	@ 0x28
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	440b      	add	r3, r1
 8006738:	1e59      	subs	r1, r3, #1
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4403      	add	r3, r0
 8006748:	3328      	adds	r3, #40	@ 0x28
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006750:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 813f 	beq.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	333d      	adds	r3, #61	@ 0x3d
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	f083 0301 	eor.w	r3, r3, #1
 8006776:	b2d8      	uxtb	r0, r3
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	333d      	adds	r3, #61	@ 0x3d
 8006786:	4602      	mov	r2, r0
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e127      	b.n	80069dc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	334d      	adds	r3, #77	@ 0x4d
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d120      	bne.n	80067e4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	334d      	adds	r3, #77	@ 0x4d
 80067b2:	2202      	movs	r2, #2
 80067b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	331b      	adds	r3, #27
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f040 8107 	bne.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	334c      	adds	r3, #76	@ 0x4c
 80067de:	2202      	movs	r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e0fb      	b.n	80069dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	334d      	adds	r3, #77	@ 0x4d
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d13a      	bne.n	8006870 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	334d      	adds	r3, #77	@ 0x4d
 800680a:	2202      	movs	r2, #2
 800680c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	334c      	adds	r3, #76	@ 0x4c
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	331b      	adds	r3, #27
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	f040 80d1 	bne.w	80069dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	331b      	adds	r3, #27
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	440a      	add	r2, r1
 8006864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	e0b5      	b.n	80069dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4613      	mov	r3, r2
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	334d      	adds	r3, #77	@ 0x4d
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b05      	cmp	r3, #5
 8006884:	d114      	bne.n	80068b0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	334d      	adds	r3, #77	@ 0x4d
 8006896:	2202      	movs	r2, #2
 8006898:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	334c      	adds	r3, #76	@ 0x4c
 80068aa:	2202      	movs	r2, #2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e095      	b.n	80069dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	334d      	adds	r3, #77	@ 0x4d
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d114      	bne.n	80068f0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	334d      	adds	r3, #77	@ 0x4d
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	334c      	adds	r3, #76	@ 0x4c
 80068ea:	2205      	movs	r2, #5
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e075      	b.n	80069dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	334d      	adds	r3, #77	@ 0x4d
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b07      	cmp	r3, #7
 8006904:	d00a      	beq.n	800691c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	334d      	adds	r3, #77	@ 0x4d
 8006916:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006918:	2b09      	cmp	r3, #9
 800691a:	d170      	bne.n	80069fe <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	334d      	adds	r3, #77	@ 0x4d
 800692c:	2202      	movs	r2, #2
 800692e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	3344      	adds	r3, #68	@ 0x44
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4403      	add	r3, r0
 8006950:	3344      	adds	r3, #68	@ 0x44
 8006952:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	3344      	adds	r3, #68	@ 0x44
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d914      	bls.n	8006994 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	3344      	adds	r3, #68	@ 0x44
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	334c      	adds	r3, #76	@ 0x4c
 800698e:	2204      	movs	r2, #4
 8006990:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006992:	e022      	b.n	80069da <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	334c      	adds	r3, #76	@ 0x4c
 80069a4:	2202      	movs	r2, #2
 80069a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d4:	461a      	mov	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	334c      	adds	r3, #76	@ 0x4c
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f00d fb02 	bl	8013ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 80069f8:	e002      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80069fe:	bf00      	nop
  }
}
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b08a      	sub	sp, #40	@ 0x28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	0c5b      	lsrs	r3, r3, #17
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d004      	beq.n	8006a4c <HCD_RXQLVL_IRQHandler+0x46>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	f000 80b6 	beq.w	8006bb6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a4a:	e0b7      	b.n	8006bbc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80b3 	beq.w	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	332c      	adds	r3, #44	@ 0x2c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a7 	beq.w	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4613      	mov	r3, r2
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	3338      	adds	r3, #56	@ 0x38
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	18d1      	adds	r1, r2, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4613      	mov	r3, r2
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4403      	add	r3, r0
 8006a90:	3334      	adds	r3, #52	@ 0x34
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4299      	cmp	r1, r3
 8006a96:	f200 8083 	bhi.w	8006ba0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	332c      	adds	r3, #44	@ 0x2c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f007 f82d 	bl	800db14 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	332c      	adds	r3, #44	@ 0x2c
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	18d1      	adds	r1, r2, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4403      	add	r3, r0
 8006ade:	332c      	adds	r3, #44	@ 0x2c
 8006ae0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	3338      	adds	r3, #56	@ 0x38
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	18d1      	adds	r1, r2, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	4613      	mov	r3, r2
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4403      	add	r3, r0
 8006b06:	3338      	adds	r3, #56	@ 0x38
 8006b08:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	0cdb      	lsrs	r3, r3, #19
 8006b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4613      	mov	r3, r2
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3328      	adds	r3, #40	@ 0x28
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d13f      	bne.n	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d03c      	beq.n	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b56:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b5e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4613      	mov	r3, r2
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	333c      	adds	r3, #60	@ 0x3c
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f083 0301 	eor.w	r3, r3, #1
 8006b88:	b2d8      	uxtb	r0, r3
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	333c      	adds	r3, #60	@ 0x3c
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	701a      	strb	r2, [r3, #0]
      break;
 8006b9e:	e00c      	b.n	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	334c      	adds	r3, #76	@ 0x4c
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	701a      	strb	r2, [r3, #0]
      break;
 8006bb4:	e001      	b.n	8006bba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e000      	b.n	8006bbc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006bba:	bf00      	nop
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3728      	adds	r7, #40	@ 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006bf0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d10b      	bne.n	8006c14 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f00d f9dc 	bl	8013fc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f043 0302 	orr.w	r3, r3, #2
 8006c12:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d132      	bne.n	8006c84 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f043 0308 	orr.w	r3, r3, #8
 8006c24:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d126      	bne.n	8006c7e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7a5b      	ldrb	r3, [r3, #9]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d113      	bne.n	8006c60 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006c3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c42:	d106      	bne.n	8006c52 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2102      	movs	r1, #2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f007 f8e6 	bl	800de1c <USB_InitFSLSPClkSel>
 8006c50:	e011      	b.n	8006c76 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2101      	movs	r1, #1
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f007 f8df 	bl	800de1c <USB_InitFSLSPClkSel>
 8006c5e:	e00a      	b.n	8006c76 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	79db      	ldrb	r3, [r3, #7]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006c74:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f00d f9d2 	bl	8014020 <HAL_HCD_PortEnabled_Callback>
 8006c7c:	e002      	b.n	8006c84 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f00d f9dc 	bl	801403c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d103      	bne.n	8006c96 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e08b      	b.n	8006dd6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fa fabc 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	@ 0x24
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006cfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	e006      	b.n	8006d34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d108      	bne.n	8006d4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d4a:	605a      	str	r2, [r3, #4]
 8006d4c:	e007      	b.n	8006d5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6859      	ldr	r1, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b1d      	ldr	r3, [pc, #116]	@ (8006de0 <HAL_I2C_Init+0x134>)
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	02008000 	.word	0x02008000

08006de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d138      	bne.n	8006e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e032      	b.n	8006e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	@ 0x24
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d139      	bne.n	8006f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e033      	b.n	8006f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	@ 0x24
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e0bf      	b.n	80070a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa fab2 	bl	80014a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006f56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6999      	ldr	r1, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b4a      	ldr	r3, [pc, #296]	@ (80070b0 <HAL_LTDC_Init+0x19c>)
 8006f88:	400b      	ands	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6899      	ldr	r1, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68d9      	ldr	r1, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80070b0 <HAL_LTDC_Init+0x19c>)
 8006fb6:	400b      	ands	r3, r1
 8006fb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68d9      	ldr	r1, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6919      	ldr	r1, [r3, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b33      	ldr	r3, [pc, #204]	@ (80070b0 <HAL_LTDC_Init+0x19c>)
 8006fe4:	400b      	ands	r3, r1
 8006fe6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6919      	ldr	r1, [r3, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6959      	ldr	r1, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b27      	ldr	r3, [pc, #156]	@ (80070b0 <HAL_LTDC_Init+0x19c>)
 8007012:	400b      	ands	r3, r1
 8007014:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6959      	ldr	r1, [r3, #20]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0206 	orr.w	r2, r2, #6
 8007082:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	f000f800 	.word	0xf000f800

080070b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d023      	beq.n	800711e <HAL_LTDC_IRQHandler+0x6a>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0204 	bic.w	r2, r2, #4
 80070ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2204      	movs	r2, #4
 80070f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070fe:	f043 0201 	orr.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2204      	movs	r2, #4
 800710c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f86f 	bl	80071fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <HAL_LTDC_IRQHandler+0xbc>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01e      	beq.n	8007170 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0202 	bic.w	r2, r2, #2
 8007140:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2202      	movs	r2, #2
 8007148:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007150:	f043 0202 	orr.w	r2, r3, #2
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f846 	bl	80071fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01b      	beq.n	80071b2 <HAL_LTDC_IRQHandler+0xfe>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d016      	beq.n	80071b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f82f 	bl	8007210 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <HAL_LTDC_IRQHandler+0x140>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0208 	bic.w	r2, r2, #8
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2208      	movs	r2, #8
 80071dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f818 	bl	8007224 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80071f4:	bf00      	nop
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007238:	b5b0      	push	{r4, r5, r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_LTDC_ConfigLayer+0x1a>
 800724e:	2302      	movs	r3, #2
 8007250:	e02c      	b.n	80072ac <HAL_LTDC_ConfigLayer+0x74>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2134      	movs	r1, #52	@ 0x34
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f811 	bl	80072b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bdb0      	pop	{r4, r5, r7, pc}

080072b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b089      	sub	sp, #36	@ 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d0:	4413      	add	r3, r2
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	01db      	lsls	r3, r3, #7
 80072e0:	4413      	add	r3, r2
 80072e2:	3384      	adds	r3, #132	@ 0x84
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	4611      	mov	r1, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	01d2      	lsls	r2, r2, #7
 80072f0:	440a      	add	r2, r1
 80072f2:	3284      	adds	r2, #132	@ 0x84
 80072f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80072f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800730a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800730c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	440b      	add	r3, r1
 800731a:	3384      	adds	r3, #132	@ 0x84
 800731c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007322:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007332:	4413      	add	r3, r2
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	01db      	lsls	r3, r3, #7
 8007342:	4413      	add	r3, r2
 8007344:	3384      	adds	r3, #132	@ 0x84
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	4611      	mov	r1, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	01d2      	lsls	r2, r2, #7
 8007352:	440a      	add	r2, r1
 8007354:	3284      	adds	r2, #132	@ 0x84
 8007356:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800735a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800736a:	4413      	add	r3, r2
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4619      	mov	r1, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	01db      	lsls	r3, r3, #7
 8007378:	440b      	add	r3, r1
 800737a:	3384      	adds	r3, #132	@ 0x84
 800737c:	4619      	mov	r1, r3
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4313      	orrs	r3, r2
 8007382:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	01db      	lsls	r3, r3, #7
 800738e:	4413      	add	r3, r2
 8007390:	3384      	adds	r3, #132	@ 0x84
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	4611      	mov	r1, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	01d2      	lsls	r2, r2, #7
 800739e:	440a      	add	r2, r1
 80073a0:	3284      	adds	r2, #132	@ 0x84
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	01db      	lsls	r3, r3, #7
 80073b2:	4413      	add	r3, r2
 80073b4:	3384      	adds	r3, #132	@ 0x84
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80073ce:	041b      	lsls	r3, r3, #16
 80073d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	061b      	lsls	r3, r3, #24
 80073d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	01db      	lsls	r3, r3, #7
 80073e4:	4413      	add	r3, r2
 80073e6:	3384      	adds	r3, #132	@ 0x84
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	4413      	add	r3, r2
 80073f6:	3384      	adds	r3, #132	@ 0x84
 80073f8:	461a      	mov	r2, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007404:	461a      	mov	r2, r3
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	431a      	orrs	r2, r3
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	431a      	orrs	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4619      	mov	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	440b      	add	r3, r1
 800741a:	3384      	adds	r3, #132	@ 0x84
 800741c:	4619      	mov	r1, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	01db      	lsls	r3, r3, #7
 800742e:	4413      	add	r3, r2
 8007430:	3384      	adds	r3, #132	@ 0x84
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	4611      	mov	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	01d2      	lsls	r2, r2, #7
 800743e:	440a      	add	r2, r1
 8007440:	3284      	adds	r2, #132	@ 0x84
 8007442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007446:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	4413      	add	r3, r2
 8007454:	3384      	adds	r3, #132	@ 0x84
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	01db      	lsls	r3, r3, #7
 8007468:	4413      	add	r3, r2
 800746a:	3384      	adds	r3, #132	@ 0x84
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	01db      	lsls	r3, r3, #7
 8007478:	440b      	add	r3, r1
 800747a:	3384      	adds	r3, #132	@ 0x84
 800747c:	4619      	mov	r1, r3
 800747e:	4b58      	ldr	r3, [pc, #352]	@ (80075e0 <LTDC_SetConfig+0x32c>)
 8007480:	4013      	ands	r3, r2
 8007482:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	6809      	ldr	r1, [r1, #0]
 8007490:	4608      	mov	r0, r1
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	01c9      	lsls	r1, r1, #7
 8007496:	4401      	add	r1, r0
 8007498:	3184      	adds	r1, #132	@ 0x84
 800749a:	4313      	orrs	r3, r2
 800749c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	01db      	lsls	r3, r3, #7
 80074a8:	4413      	add	r3, r2
 80074aa:	3384      	adds	r3, #132	@ 0x84
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	4413      	add	r3, r2
 80074ba:	3384      	adds	r3, #132	@ 0x84
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	01db      	lsls	r3, r3, #7
 80074cc:	4413      	add	r3, r2
 80074ce:	3384      	adds	r3, #132	@ 0x84
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80074e0:	2304      	movs	r3, #4
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	e01b      	b.n	800751e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80074ee:	2303      	movs	r3, #3
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	e014      	b.n	800751e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d00b      	beq.n	8007514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007500:	2b02      	cmp	r3, #2
 8007502:	d007      	beq.n	8007514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007508:	2b03      	cmp	r3, #3
 800750a:	d003      	beq.n	8007514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007510:	2b07      	cmp	r3, #7
 8007512:	d102      	bne.n	800751a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007514:	2302      	movs	r3, #2
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e001      	b.n	800751e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800751a:	2301      	movs	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	4413      	add	r3, r2
 800752a:	3384      	adds	r3, #132	@ 0x84
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	4611      	mov	r1, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	01d2      	lsls	r2, r2, #7
 8007538:	440a      	add	r2, r1
 800753a:	3284      	adds	r2, #132	@ 0x84
 800753c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007540:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	fb02 f303 	mul.w	r3, r2, r3
 800754c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6859      	ldr	r1, [r3, #4]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	1acb      	subs	r3, r1, r3
 8007558:	69f9      	ldr	r1, [r7, #28]
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007560:	68f9      	ldr	r1, [r7, #12]
 8007562:	6809      	ldr	r1, [r1, #0]
 8007564:	4608      	mov	r0, r1
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	01c9      	lsls	r1, r1, #7
 800756a:	4401      	add	r1, r0
 800756c:	3184      	adds	r1, #132	@ 0x84
 800756e:	4313      	orrs	r3, r2
 8007570:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	01db      	lsls	r3, r3, #7
 800757c:	4413      	add	r3, r2
 800757e:	3384      	adds	r3, #132	@ 0x84
 8007580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	440b      	add	r3, r1
 800758e:	3384      	adds	r3, #132	@ 0x84
 8007590:	4619      	mov	r1, r3
 8007592:	4b14      	ldr	r3, [pc, #80]	@ (80075e4 <LTDC_SetConfig+0x330>)
 8007594:	4013      	ands	r3, r2
 8007596:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	01db      	lsls	r3, r3, #7
 80075a2:	4413      	add	r3, r2
 80075a4:	3384      	adds	r3, #132	@ 0x84
 80075a6:	461a      	mov	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	01db      	lsls	r3, r3, #7
 80075b8:	4413      	add	r3, r2
 80075ba:	3384      	adds	r3, #132	@ 0x84
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	4611      	mov	r1, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	01d2      	lsls	r2, r2, #7
 80075c8:	440a      	add	r2, r1
 80075ca:	3284      	adds	r2, #132	@ 0x84
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	6013      	str	r3, [r2, #0]
}
 80075d2:	bf00      	nop
 80075d4:	3724      	adds	r7, #36	@ 0x24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	fffff8f8 	.word	0xfffff8f8
 80075e4:	fffff800 	.word	0xfffff800

080075e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f6:	6013      	str	r3, [r2, #0]
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40007000 	.word	0x40007000

08007608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007612:	4b23      	ldr	r3, [pc, #140]	@ (80076a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	4a22      	ldr	r2, [pc, #136]	@ (80076a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800761c:	6413      	str	r3, [r2, #64]	@ 0x40
 800761e:	4b20      	ldr	r3, [pc, #128]	@ (80076a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800762a:	4b1e      	ldr	r3, [pc, #120]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1d      	ldr	r2, [pc, #116]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007634:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007636:	f7fb fcaf 	bl	8002f98 <HAL_GetTick>
 800763a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800763c:	e009      	b.n	8007652 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800763e:	f7fb fcab 	bl	8002f98 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800764c:	d901      	bls.n	8007652 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e022      	b.n	8007698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007652:	4b14      	ldr	r3, [pc, #80]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800765a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800765e:	d1ee      	bne.n	800763e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007660:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a0f      	ldr	r2, [pc, #60]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800766c:	f7fb fc94 	bl	8002f98 <HAL_GetTick>
 8007670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007672:	e009      	b.n	8007688 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007674:	f7fb fc90 	bl	8002f98 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007682:	d901      	bls.n	8007688 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e007      	b.n	8007698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007688:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007694:	d1ee      	bne.n	8007674 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40023800 	.word	0x40023800
 80076a4:	40007000 	.word	0x40007000

080076a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80076b0:	f7fb fc72 	bl	8002f98 <HAL_GetTick>
 80076b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e067      	b.n	8007790 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fa f9ab 	bl	8001a30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80076da:	f241 3188 	movw	r1, #5000	@ 0x1388
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f85e 	bl	80077a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	021a      	lsls	r2, r3, #8
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	2120      	movs	r1, #32
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f856 	bl	80077bc <QSPI_WaitFlagStateUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d135      	bne.n	8007786 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <HAL_QSPI_Init+0xf0>)
 8007722:	4013      	ands	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	0611      	lsls	r1, r2, #24
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	68d2      	ldr	r2, [r2, #12]
 800772e:	4311      	orrs	r1, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	69d2      	ldr	r2, [r2, #28]
 8007734:	4311      	orrs	r1, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6a12      	ldr	r2, [r2, #32]
 800773a:	4311      	orrs	r1, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	430b      	orrs	r3, r1
 8007742:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	4b14      	ldr	r3, [pc, #80]	@ (800779c <HAL_QSPI_Init+0xf4>)
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6912      	ldr	r2, [r2, #16]
 8007752:	0411      	lsls	r1, r2, #16
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6952      	ldr	r2, [r2, #20]
 8007758:	4311      	orrs	r1, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6992      	ldr	r2, [r2, #24]
 800775e:	4311      	orrs	r1, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	430b      	orrs	r3, r1
 8007766:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800778e:	7afb      	ldrb	r3, [r7, #11]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00ffff2f 	.word	0x00ffff2f
 800779c:	ffe0f8fe 	.word	0xffe0f8fe

080077a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077cc:	e01a      	b.n	8007804 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d016      	beq.n	8007804 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d6:	f7fb fbdf 	bl	8002f98 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d302      	bcc.n	80077ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f8:	f043 0201 	orr.w	r2, r3, #1
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e00e      	b.n	8007822 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4013      	ands	r3, r2
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf14      	ite	ne
 8007812:	2301      	movne	r3, #1
 8007814:	2300      	moveq	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	429a      	cmp	r2, r3
 800781e:	d1d6      	bne.n	80077ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e291      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8087 	beq.w	800795e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007850:	4b96      	ldr	r3, [pc, #600]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 030c 	and.w	r3, r3, #12
 8007858:	2b04      	cmp	r3, #4
 800785a:	d00c      	beq.n	8007876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800785c:	4b93      	ldr	r3, [pc, #588]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 030c 	and.w	r3, r3, #12
 8007864:	2b08      	cmp	r3, #8
 8007866:	d112      	bne.n	800788e <HAL_RCC_OscConfig+0x62>
 8007868:	4b90      	ldr	r3, [pc, #576]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007874:	d10b      	bne.n	800788e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007876:	4b8d      	ldr	r3, [pc, #564]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d06c      	beq.n	800795c <HAL_RCC_OscConfig+0x130>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d168      	bne.n	800795c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e26b      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007896:	d106      	bne.n	80078a6 <HAL_RCC_OscConfig+0x7a>
 8007898:	4b84      	ldr	r3, [pc, #528]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a83      	ldr	r2, [pc, #524]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 800789e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	e02e      	b.n	8007904 <HAL_RCC_OscConfig+0xd8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCC_OscConfig+0x9c>
 80078ae:	4b7f      	ldr	r3, [pc, #508]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	4b7c      	ldr	r3, [pc, #496]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a7b      	ldr	r2, [pc, #492]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e01d      	b.n	8007904 <HAL_RCC_OscConfig+0xd8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d0:	d10c      	bne.n	80078ec <HAL_RCC_OscConfig+0xc0>
 80078d2:	4b76      	ldr	r3, [pc, #472]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a75      	ldr	r2, [pc, #468]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	4b73      	ldr	r3, [pc, #460]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a72      	ldr	r2, [pc, #456]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e00b      	b.n	8007904 <HAL_RCC_OscConfig+0xd8>
 80078ec:	4b6f      	ldr	r3, [pc, #444]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6e      	ldr	r2, [pc, #440]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	4b6c      	ldr	r3, [pc, #432]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a6b      	ldr	r2, [pc, #428]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80078fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d013      	beq.n	8007934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fb fb44 	bl	8002f98 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007914:	f7fb fb40 	bl	8002f98 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	@ 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e21f      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	4b61      	ldr	r3, [pc, #388]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCC_OscConfig+0xe8>
 8007932:	e014      	b.n	800795e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007934:	f7fb fb30 	bl	8002f98 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800793c:	f7fb fb2c 	bl	8002f98 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	@ 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e20b      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800794e:	4b57      	ldr	r3, [pc, #348]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f0      	bne.n	800793c <HAL_RCC_OscConfig+0x110>
 800795a:	e000      	b.n	800795e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800795c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d069      	beq.n	8007a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800796a:	4b50      	ldr	r3, [pc, #320]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007976:	4b4d      	ldr	r3, [pc, #308]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	2b08      	cmp	r3, #8
 8007980:	d11c      	bne.n	80079bc <HAL_RCC_OscConfig+0x190>
 8007982:	4b4a      	ldr	r3, [pc, #296]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d116      	bne.n	80079bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	4b47      	ldr	r3, [pc, #284]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_RCC_OscConfig+0x17a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d001      	beq.n	80079a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e1df      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a6:	4b41      	ldr	r3, [pc, #260]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	493d      	ldr	r1, [pc, #244]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ba:	e040      	b.n	8007a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d023      	beq.n	8007a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079c4:	4b39      	ldr	r3, [pc, #228]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a38      	ldr	r2, [pc, #224]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fb fae2 	bl	8002f98 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d8:	f7fb fade 	bl	8002f98 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e1bd      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079ea:	4b30      	ldr	r3, [pc, #192]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f0      	beq.n	80079d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f6:	4b2d      	ldr	r3, [pc, #180]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	4929      	ldr	r1, [pc, #164]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	600b      	str	r3, [r1, #0]
 8007a0a:	e018      	b.n	8007a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a0c:	4b27      	ldr	r3, [pc, #156]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a26      	ldr	r2, [pc, #152]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a12:	f023 0301 	bic.w	r3, r3, #1
 8007a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a18:	f7fb fabe 	bl	8002f98 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a20:	f7fb faba 	bl	8002f98 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e199      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a32:	4b1e      	ldr	r3, [pc, #120]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d038      	beq.n	8007abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d019      	beq.n	8007a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a52:	4b16      	ldr	r3, [pc, #88]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a56:	4a15      	ldr	r2, [pc, #84]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a58:	f043 0301 	orr.w	r3, r3, #1
 8007a5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5e:	f7fb fa9b 	bl	8002f98 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a66:	f7fb fa97 	bl	8002f98 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e176      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a78:	4b0c      	ldr	r3, [pc, #48]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <HAL_RCC_OscConfig+0x23a>
 8007a84:	e01a      	b.n	8007abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a86:	4b09      	ldr	r3, [pc, #36]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a8a:	4a08      	ldr	r2, [pc, #32]	@ (8007aac <HAL_RCC_OscConfig+0x280>)
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fb fa81 	bl	8002f98 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a98:	e00a      	b.n	8007ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9a:	f7fb fa7d 	bl	8002f98 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d903      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e15c      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
 8007aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ab0:	4b91      	ldr	r3, [pc, #580]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1ee      	bne.n	8007a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80a4 	beq.w	8007c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aca:	4b8b      	ldr	r3, [pc, #556]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10d      	bne.n	8007af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad6:	4b88      	ldr	r3, [pc, #544]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	4a87      	ldr	r2, [pc, #540]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ae2:	4b85      	ldr	r3, [pc, #532]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aea:	60bb      	str	r3, [r7, #8]
 8007aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af2:	4b82      	ldr	r3, [pc, #520]	@ (8007cfc <HAL_RCC_OscConfig+0x4d0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d118      	bne.n	8007b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007afe:	4b7f      	ldr	r3, [pc, #508]	@ (8007cfc <HAL_RCC_OscConfig+0x4d0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a7e      	ldr	r2, [pc, #504]	@ (8007cfc <HAL_RCC_OscConfig+0x4d0>)
 8007b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b0a:	f7fb fa45 	bl	8002f98 <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b12:	f7fb fa41 	bl	8002f98 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b64      	cmp	r3, #100	@ 0x64
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e120      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b24:	4b75      	ldr	r3, [pc, #468]	@ (8007cfc <HAL_RCC_OscConfig+0x4d0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <HAL_RCC_OscConfig+0x31a>
 8007b38:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b44:	e02d      	b.n	8007ba2 <HAL_RCC_OscConfig+0x376>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10c      	bne.n	8007b68 <HAL_RCC_OscConfig+0x33c>
 8007b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b52:	4a69      	ldr	r2, [pc, #420]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b5a:	4b67      	ldr	r3, [pc, #412]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5e:	4a66      	ldr	r2, [pc, #408]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	f023 0304 	bic.w	r3, r3, #4
 8007b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b66:	e01c      	b.n	8007ba2 <HAL_RCC_OscConfig+0x376>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b05      	cmp	r3, #5
 8007b6e:	d10c      	bne.n	8007b8a <HAL_RCC_OscConfig+0x35e>
 8007b70:	4b61      	ldr	r3, [pc, #388]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b74:	4a60      	ldr	r2, [pc, #384]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b76:	f043 0304 	orr.w	r3, r3, #4
 8007b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b80:	4a5d      	ldr	r2, [pc, #372]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b88:	e00b      	b.n	8007ba2 <HAL_RCC_OscConfig+0x376>
 8007b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b96:	4b58      	ldr	r3, [pc, #352]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	4a57      	ldr	r2, [pc, #348]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007b9c:	f023 0304 	bic.w	r3, r3, #4
 8007ba0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d015      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007baa:	f7fb f9f5 	bl	8002f98 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb2:	f7fb f9f1 	bl	8002f98 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e0ce      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0ee      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x386>
 8007bd4:	e014      	b.n	8007c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd6:	f7fb f9df 	bl	8002f98 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bdc:	e00a      	b.n	8007bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bde:	f7fb f9db 	bl	8002f98 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e0b8      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bf4:	4b40      	ldr	r3, [pc, #256]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1ee      	bne.n	8007bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d105      	bne.n	8007c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c06:	4b3c      	ldr	r3, [pc, #240]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80a4 	beq.w	8007d64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c1c:	4b36      	ldr	r3, [pc, #216]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 030c 	and.w	r3, r3, #12
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d06b      	beq.n	8007d00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d149      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c30:	4b31      	ldr	r3, [pc, #196]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a30      	ldr	r2, [pc, #192]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fb f9ac 	bl	8002f98 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fb f9a8 	bl	8002f98 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e087      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c56:	4b28      	ldr	r3, [pc, #160]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1f0      	bne.n	8007c44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69da      	ldr	r2, [r3, #28]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c70:	019b      	lsls	r3, r3, #6
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	4313      	orrs	r3, r2
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c90:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a18      	ldr	r2, [pc, #96]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9c:	f7fb f97c 	bl	8002f98 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca4:	f7fb f978 	bl	8002f98 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e057      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb6:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x478>
 8007cc2:	e04f      	b.n	8007d64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd0:	f7fb f962 	bl	8002f98 <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd6:	e008      	b.n	8007cea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd8:	f7fb f95e 	bl	8002f98 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e03d      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cea:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <HAL_RCC_OscConfig+0x4cc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f0      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x4ac>
 8007cf6:	e035      	b.n	8007d64 <HAL_RCC_OscConfig+0x538>
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d00:	4b1b      	ldr	r3, [pc, #108]	@ (8007d70 <HAL_RCC_OscConfig+0x544>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d028      	beq.n	8007d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d121      	bne.n	8007d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d11a      	bne.n	8007d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d111      	bne.n	8007d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d107      	bne.n	8007d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	40023800 	.word	0x40023800

08007d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0d0      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d910      	bls.n	8007dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d9a:	4b67      	ldr	r3, [pc, #412]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 020f 	bic.w	r2, r3, #15
 8007da2:	4965      	ldr	r1, [pc, #404]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007daa:	4b63      	ldr	r3, [pc, #396]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d001      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0b8      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d020      	beq.n	8007e0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dd4:	4b59      	ldr	r3, [pc, #356]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	4a58      	ldr	r2, [pc, #352]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007dda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dec:	4b53      	ldr	r3, [pc, #332]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4a52      	ldr	r2, [pc, #328]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007df2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df8:	4b50      	ldr	r3, [pc, #320]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	494d      	ldr	r1, [pc, #308]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d040      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d107      	bne.n	8007e2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1e:	4b47      	ldr	r3, [pc, #284]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d115      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e07f      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d107      	bne.n	8007e46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e36:	4b41      	ldr	r3, [pc, #260]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e073      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e46:	4b3d      	ldr	r3, [pc, #244]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e06b      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e56:	4b39      	ldr	r3, [pc, #228]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f023 0203 	bic.w	r2, r3, #3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4936      	ldr	r1, [pc, #216]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e68:	f7fb f896 	bl	8002f98 <HAL_GetTick>
 8007e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e6e:	e00a      	b.n	8007e86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e70:	f7fb f892 	bl	8002f98 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e053      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e86:	4b2d      	ldr	r3, [pc, #180]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 020c 	and.w	r2, r3, #12
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d1eb      	bne.n	8007e70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e98:	4b27      	ldr	r3, [pc, #156]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d210      	bcs.n	8007ec8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	4b24      	ldr	r3, [pc, #144]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f023 020f 	bic.w	r2, r3, #15
 8007eae:	4922      	ldr	r1, [pc, #136]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb6:	4b20      	ldr	r3, [pc, #128]	@ (8007f38 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d001      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e032      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ed4:	4b19      	ldr	r3, [pc, #100]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4916      	ldr	r1, [pc, #88]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ef2:	4b12      	ldr	r3, [pc, #72]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	490e      	ldr	r1, [pc, #56]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f06:	f000 f821 	bl	8007f4c <HAL_RCC_GetSysClockFreq>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c8>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	490a      	ldr	r1, [pc, #40]	@ (8007f40 <HAL_RCC_ClockConfig+0x1cc>)
 8007f18:	5ccb      	ldrb	r3, [r1, r3]
 8007f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1e:	4a09      	ldr	r2, [pc, #36]	@ (8007f44 <HAL_RCC_ClockConfig+0x1d0>)
 8007f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f22:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <HAL_RCC_ClockConfig+0x1d4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fa f936 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40023c00 	.word	0x40023c00
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	08014ef0 	.word	0x08014ef0
 8007f44:	20000000 	.word	0x20000000
 8007f48:	20000004 	.word	0x20000004

08007f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f50:	b090      	sub	sp, #64	@ 0x40
 8007f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f64:	4b59      	ldr	r3, [pc, #356]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f003 030c 	and.w	r3, r3, #12
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d00d      	beq.n	8007f8c <HAL_RCC_GetSysClockFreq+0x40>
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	f200 80a1 	bhi.w	80080b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <HAL_RCC_GetSysClockFreq+0x34>
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d003      	beq.n	8007f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f7e:	e09b      	b.n	80080b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f80:	4b53      	ldr	r3, [pc, #332]	@ (80080d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f84:	e09b      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f86:	4b53      	ldr	r3, [pc, #332]	@ (80080d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f8a:	e098      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f8c:	4b4f      	ldr	r3, [pc, #316]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f96:	4b4d      	ldr	r3, [pc, #308]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d028      	beq.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	099b      	lsrs	r3, r3, #6
 8007fa8:	2200      	movs	r2, #0
 8007faa:	623b      	str	r3, [r7, #32]
 8007fac:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4b47      	ldr	r3, [pc, #284]	@ (80080d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fb8:	fb03 f201 	mul.w	r2, r3, r1
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	fb00 f303 	mul.w	r3, r0, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	4a43      	ldr	r2, [pc, #268]	@ (80080d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fc6:	fba0 1202 	umull	r1, r2, r0, r2
 8007fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fcc:	460a      	mov	r2, r1
 8007fce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fd2:	4413      	add	r3, r2
 8007fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd8:	2200      	movs	r2, #0
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	61fa      	str	r2, [r7, #28]
 8007fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fe6:	f7f8 f913 	bl	8000210 <__aeabi_uldivmod>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4613      	mov	r3, r2
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff2:	e053      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ff4:	4b35      	ldr	r3, [pc, #212]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	099b      	lsrs	r3, r3, #6
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	617a      	str	r2, [r7, #20]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008006:	f04f 0b00 	mov.w	fp, #0
 800800a:	4652      	mov	r2, sl
 800800c:	465b      	mov	r3, fp
 800800e:	f04f 0000 	mov.w	r0, #0
 8008012:	f04f 0100 	mov.w	r1, #0
 8008016:	0159      	lsls	r1, r3, #5
 8008018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800801c:	0150      	lsls	r0, r2, #5
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	ebb2 080a 	subs.w	r8, r2, sl
 8008026:	eb63 090b 	sbc.w	r9, r3, fp
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008036:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800803a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800803e:	ebb2 0408 	subs.w	r4, r2, r8
 8008042:	eb63 0509 	sbc.w	r5, r3, r9
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	00eb      	lsls	r3, r5, #3
 8008050:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008054:	00e2      	lsls	r2, r4, #3
 8008056:	4614      	mov	r4, r2
 8008058:	461d      	mov	r5, r3
 800805a:	eb14 030a 	adds.w	r3, r4, sl
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	eb45 030b 	adc.w	r3, r5, fp
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008072:	4629      	mov	r1, r5
 8008074:	028b      	lsls	r3, r1, #10
 8008076:	4621      	mov	r1, r4
 8008078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800807c:	4621      	mov	r1, r4
 800807e:	028a      	lsls	r2, r1, #10
 8008080:	4610      	mov	r0, r2
 8008082:	4619      	mov	r1, r3
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	2200      	movs	r2, #0
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	60fa      	str	r2, [r7, #12]
 800808c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008090:	f7f8 f8be 	bl	8000210 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4613      	mov	r3, r2
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800809c:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <HAL_RCC_GetSysClockFreq+0x180>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	3301      	adds	r3, #1
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80080ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080b6:	e002      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080b8:	4b05      	ldr	r3, [pc, #20]	@ (80080d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80080ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3740      	adds	r7, #64	@ 0x40
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	017d7840 	.word	0x017d7840

080080d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080dc:	4b03      	ldr	r3, [pc, #12]	@ (80080ec <HAL_RCC_GetHCLKFreq+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000000 	.word	0x20000000

080080f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080f4:	f7ff fff0 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b05      	ldr	r3, [pc, #20]	@ (8008110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	0a9b      	lsrs	r3, r3, #10
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4903      	ldr	r1, [pc, #12]	@ (8008114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40023800 	.word	0x40023800
 8008114:	08014f00 	.word	0x08014f00

08008118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800811c:	f7ff ffdc 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 8008120:	4602      	mov	r2, r0
 8008122:	4b05      	ldr	r3, [pc, #20]	@ (8008138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	0b5b      	lsrs	r3, r3, #13
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	4903      	ldr	r1, [pc, #12]	@ (800813c <HAL_RCC_GetPCLK2Freq+0x24>)
 800812e:	5ccb      	ldrb	r3, [r1, r3]
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40023800 	.word	0x40023800
 800813c:	08014f00 	.word	0x08014f00

08008140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	220f      	movs	r2, #15
 800814e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008150:	4b12      	ldr	r3, [pc, #72]	@ (800819c <HAL_RCC_GetClockConfig+0x5c>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0203 	and.w	r2, r3, #3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800815c:	4b0f      	ldr	r3, [pc, #60]	@ (800819c <HAL_RCC_GetClockConfig+0x5c>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008168:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <HAL_RCC_GetClockConfig+0x5c>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_RCC_GetClockConfig+0x5c>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	08db      	lsrs	r3, r3, #3
 800817a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008182:	4b07      	ldr	r3, [pc, #28]	@ (80081a0 <HAL_RCC_GetClockConfig+0x60>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	601a      	str	r2, [r3, #0]
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d012      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081cc:	4b69      	ldr	r3, [pc, #420]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	4a68      	ldr	r2, [pc, #416]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081d6:	6093      	str	r3, [r2, #8]
 80081d8:	4b66      	ldr	r3, [pc, #408]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e0:	4964      	ldr	r1, [pc, #400]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d017      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008204:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820c:	4959      	ldr	r1, [pc, #356]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800821c:	d101      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800821e:	2301      	movs	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800822a:	2301      	movs	r3, #1
 800822c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d017      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800823a:	4b4e      	ldr	r3, [pc, #312]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008240:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008248:	494a      	ldr	r1, [pc, #296]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008258:	d101      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800825a:	2301      	movs	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008276:	2301      	movs	r3, #1
 8008278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 808b 	beq.w	800839e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008288:	4b3a      	ldr	r3, [pc, #232]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	4a39      	ldr	r2, [pc, #228]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008292:	6413      	str	r3, [r2, #64]	@ 0x40
 8008294:	4b37      	ldr	r3, [pc, #220]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082a0:	4b35      	ldr	r3, [pc, #212]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a34      	ldr	r2, [pc, #208]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ac:	f7fa fe74 	bl	8002f98 <HAL_GetTick>
 80082b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082b2:	e008      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082b4:	f7fa fe70 	bl	8002f98 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b64      	cmp	r3, #100	@ 0x64
 80082c0:	d901      	bls.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e357      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082d2:	4b28      	ldr	r3, [pc, #160]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d035      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d02e      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082f0:	4b20      	ldr	r3, [pc, #128]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008304:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008306:	4b1b      	ldr	r3, [pc, #108]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830a:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008310:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008312:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008318:	4b16      	ldr	r3, [pc, #88]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d114      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fa fe38 	bl	8002f98 <HAL_GetTick>
 8008328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800832a:	e00a      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800832c:	f7fa fe34 	bl	8002f98 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800833a:	4293      	cmp	r3, r2
 800833c:	d901      	bls.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e319      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008342:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0ee      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800835a:	d111      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008368:	4b04      	ldr	r3, [pc, #16]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800836a:	400b      	ands	r3, r1
 800836c:	4901      	ldr	r1, [pc, #4]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836e:	4313      	orrs	r3, r2
 8008370:	608b      	str	r3, [r1, #8]
 8008372:	e00b      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008374:	40023800 	.word	0x40023800
 8008378:	40007000 	.word	0x40007000
 800837c:	0ffffcff 	.word	0x0ffffcff
 8008380:	4baa      	ldr	r3, [pc, #680]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	4aa9      	ldr	r2, [pc, #676]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008386:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800838a:	6093      	str	r3, [r2, #8]
 800838c:	4ba7      	ldr	r3, [pc, #668]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800838e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008398:	49a4      	ldr	r1, [pc, #656]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839a:	4313      	orrs	r3, r2
 800839c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0310 	and.w	r3, r3, #16
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d010      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083aa:	4ba0      	ldr	r3, [pc, #640]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083b0:	4a9e      	ldr	r2, [pc, #632]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80083ba:	4b9c      	ldr	r3, [pc, #624]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	4999      	ldr	r1, [pc, #612]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083d8:	4b94      	ldr	r3, [pc, #592]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e6:	4991      	ldr	r1, [pc, #580]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083fa:	4b8c      	ldr	r3, [pc, #560]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008408:	4988      	ldr	r1, [pc, #544]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800841c:	4b83      	ldr	r3, [pc, #524]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800842a:	4980      	ldr	r1, [pc, #512]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800843e:	4b7b      	ldr	r3, [pc, #492]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008444:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844c:	4977      	ldr	r1, [pc, #476]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008460:	4b72      	ldr	r3, [pc, #456]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008466:	f023 0203 	bic.w	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	496f      	ldr	r1, [pc, #444]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008470:	4313      	orrs	r3, r2
 8008472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008482:	4b6a      	ldr	r3, [pc, #424]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008488:	f023 020c 	bic.w	r2, r3, #12
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008490:	4966      	ldr	r1, [pc, #408]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084a4:	4b61      	ldr	r3, [pc, #388]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b2:	495e      	ldr	r1, [pc, #376]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084c6:	4b59      	ldr	r3, [pc, #356]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d4:	4955      	ldr	r1, [pc, #340]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084e8:	4b50      	ldr	r3, [pc, #320]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f6:	494d      	ldr	r1, [pc, #308]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800850a:	4b48      	ldr	r3, [pc, #288]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008510:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008518:	4944      	ldr	r1, [pc, #272]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800852c:	4b3f      	ldr	r3, [pc, #252]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008532:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853a:	493c      	ldr	r1, [pc, #240]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800854e:	4b37      	ldr	r3, [pc, #220]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008554:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800855c:	4933      	ldr	r1, [pc, #204]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855e:	4313      	orrs	r3, r2
 8008560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008570:	4b2e      	ldr	r3, [pc, #184]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008576:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800857e:	492b      	ldr	r1, [pc, #172]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008580:	4313      	orrs	r3, r2
 8008582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d011      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008592:	4b26      	ldr	r3, [pc, #152]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008598:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085a0:	4922      	ldr	r1, [pc, #136]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b0:	d101      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085b2:	2301      	movs	r3, #1
 80085b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085c2:	2301      	movs	r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085d2:	4b16      	ldr	r3, [pc, #88]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e0:	4912      	ldr	r1, [pc, #72]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085f4:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008604:	4909      	ldr	r1, [pc, #36]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d006      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80d9 	beq.w	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008620:	4b02      	ldr	r3, [pc, #8]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a01      	ldr	r2, [pc, #4]	@ (800862c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800862a:	e001      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800862c:	40023800 	.word	0x40023800
 8008630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008632:	f7fa fcb1 	bl	8002f98 <HAL_GetTick>
 8008636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008638:	e008      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800863a:	f7fa fcad 	bl	8002f98 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b64      	cmp	r3, #100	@ 0x64
 8008646:	d901      	bls.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e194      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800864c:	4b6c      	ldr	r3, [pc, #432]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1f0      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d021      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11d      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800866c:	4b64      	ldr	r3, [pc, #400]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800867a:	4b61      	ldr	r3, [pc, #388]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	019a      	lsls	r2, r3, #6
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	431a      	orrs	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	061b      	lsls	r3, r3, #24
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	071b      	lsls	r3, r3, #28
 80086a0:	4957      	ldr	r1, [pc, #348]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d02e      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086d2:	d129      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086da:	0c1b      	lsrs	r3, r3, #16
 80086dc:	f003 0303 	and.w	r3, r3, #3
 80086e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086e2:	4b47      	ldr	r3, [pc, #284]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e8:	0f1b      	lsrs	r3, r3, #28
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	019a      	lsls	r2, r3, #6
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	431a      	orrs	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	071b      	lsls	r3, r3, #28
 8008708:	493d      	ldr	r1, [pc, #244]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008710:	4b3b      	ldr	r3, [pc, #236]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008716:	f023 021f 	bic.w	r2, r3, #31
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	3b01      	subs	r3, #1
 8008720:	4937      	ldr	r1, [pc, #220]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01d      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008734:	4b32      	ldr	r3, [pc, #200]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873a:	0e1b      	lsrs	r3, r3, #24
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008742:	4b2f      	ldr	r3, [pc, #188]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008748:	0f1b      	lsrs	r3, r3, #28
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	019a      	lsls	r2, r3, #6
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	431a      	orrs	r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	061b      	lsls	r3, r3, #24
 8008762:	431a      	orrs	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	071b      	lsls	r3, r3, #28
 8008768:	4925      	ldr	r1, [pc, #148]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d011      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	019a      	lsls	r2, r3, #6
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	061b      	lsls	r3, r3, #24
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	071b      	lsls	r3, r3, #28
 8008798:	4919      	ldr	r1, [pc, #100]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087a0:	4b17      	ldr	r3, [pc, #92]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a16      	ldr	r2, [pc, #88]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ac:	f7fa fbf4 	bl	8002f98 <HAL_GetTick>
 80087b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087b4:	f7fa fbf0 	bl	8002f98 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b64      	cmp	r3, #100	@ 0x64
 80087c0:	d901      	bls.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e0d7      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 80cd 	bne.w	8008974 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a08      	ldr	r2, [pc, #32]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e6:	f7fa fbd7 	bl	8002f98 <HAL_GetTick>
 80087ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087ec:	e00a      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087ee:	f7fa fbd3 	bl	8002f98 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b64      	cmp	r3, #100	@ 0x64
 80087fa:	d903      	bls.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e0ba      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008804:	4b5e      	ldr	r3, [pc, #376]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800880c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008810:	d0ed      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800882e:	2b00      	cmp	r3, #0
 8008830:	d02e      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d12a      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800883a:	4b51      	ldr	r3, [pc, #324]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008848:	4b4d      	ldr	r3, [pc, #308]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800884a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884e:	0f1b      	lsrs	r3, r3, #28
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	019a      	lsls	r2, r3, #6
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	061b      	lsls	r3, r3, #24
 8008868:	431a      	orrs	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	071b      	lsls	r3, r3, #28
 800886e:	4944      	ldr	r1, [pc, #272]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008870:	4313      	orrs	r3, r2
 8008872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008876:	4b42      	ldr	r3, [pc, #264]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800887c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008884:	3b01      	subs	r3, #1
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	493d      	ldr	r1, [pc, #244]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800888a:	4313      	orrs	r3, r2
 800888c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d022      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a4:	d11d      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088a6:	4b36      	ldr	r3, [pc, #216]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	0e1b      	lsrs	r3, r3, #24
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088b4:	4b32      	ldr	r3, [pc, #200]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	019a      	lsls	r2, r3, #6
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	431a      	orrs	r2, r3
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	431a      	orrs	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	071b      	lsls	r3, r3, #28
 80088da:	4929      	ldr	r1, [pc, #164]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d028      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088ee:	4b24      	ldr	r3, [pc, #144]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088fc:	4b20      	ldr	r3, [pc, #128]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	019a      	lsls	r2, r3, #6
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	431a      	orrs	r2, r3
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	071b      	lsls	r3, r3, #28
 8008922:	4917      	ldr	r1, [pc, #92]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800892a:	4b15      	ldr	r3, [pc, #84]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800892c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008930:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008938:	4911      	ldr	r1, [pc, #68]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800893a:	4313      	orrs	r3, r2
 800893c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008940:	4b0f      	ldr	r3, [pc, #60]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a0e      	ldr	r2, [pc, #56]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800894a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800894c:	f7fa fb24 	bl	8002f98 <HAL_GetTick>
 8008950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008952:	e008      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008954:	f7fa fb20 	bl	8002f98 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b64      	cmp	r3, #100	@ 0x64
 8008960:	d901      	bls.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e007      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008966:	4b06      	ldr	r3, [pc, #24]	@ (8008980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008972:	d1ef      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800

08008984 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089a2:	f040 808d 	bne.w	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80089a6:	4b93      	ldr	r3, [pc, #588]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80089b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089bc:	d07c      	beq.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089c4:	d87b      	bhi.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089d2:	d039      	beq.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80089d4:	e073      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80089d6:	4b87      	ldr	r3, [pc, #540]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d108      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80089e2:	4b84      	ldr	r3, [pc, #528]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ea:	4a83      	ldr	r2, [pc, #524]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80089ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e007      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80089f4:	4b7f      	ldr	r3, [pc, #508]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089fc:	4a7f      	ldr	r2, [pc, #508]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008a04:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0a:	0e1b      	lsrs	r3, r3, #24
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008a12:	4b78      	ldr	r3, [pc, #480]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a18:	099b      	lsrs	r3, r3, #6
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	fb03 f202 	mul.w	r2, r3, r2
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008a2c:	4b71      	ldr	r3, [pc, #452]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	3301      	adds	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	617b      	str	r3, [r7, #20]
        break;
 8008a46:	e03b      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a48:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d108      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a54:	4b67      	ldr	r3, [pc, #412]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a5c:	4a66      	ldr	r2, [pc, #408]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	613b      	str	r3, [r7, #16]
 8008a64:	e007      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a66:	4b63      	ldr	r3, [pc, #396]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a6e:	4a63      	ldr	r2, [pc, #396]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008a76:	4b5f      	ldr	r3, [pc, #380]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a7c:	0e1b      	lsrs	r3, r3, #24
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008a84:	4b5b      	ldr	r3, [pc, #364]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a8a:	099b      	lsrs	r3, r3, #6
 8008a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	fb03 f202 	mul.w	r2, r3, r2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008a9e:	4b55      	ldr	r3, [pc, #340]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aa4:	f003 031f 	and.w	r3, r3, #31
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab4:	617b      	str	r3, [r7, #20]
        break;
 8008ab6:	e003      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ab8:	4b51      	ldr	r3, [pc, #324]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008aba:	617b      	str	r3, [r7, #20]
        break;
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008abe:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ac6:	f040 808d 	bne.w	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008aca:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ad0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008ad8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ae0:	d07c      	beq.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ae8:	d87b      	bhi.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008af6:	d039      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008af8:	e073      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008afa:	4b3e      	ldr	r3, [pc, #248]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d108      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b06:	4b3b      	ldr	r3, [pc, #236]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	e007      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b18:	4b36      	ldr	r3, [pc, #216]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b20:	4a36      	ldr	r2, [pc, #216]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008b28:	4b32      	ldr	r3, [pc, #200]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2e:	0e1b      	lsrs	r3, r3, #24
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008b36:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3c:	099b      	lsrs	r3, r3, #6
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	fb03 f202 	mul.w	r2, r3, r2
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008b50:	4b28      	ldr	r3, [pc, #160]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	f003 031f 	and.w	r3, r3, #31
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	617b      	str	r3, [r7, #20]
        break;
 8008b6a:	e03b      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b6c:	4b21      	ldr	r3, [pc, #132]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d108      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b78:	4b1e      	ldr	r3, [pc, #120]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	e007      	b.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b92:	4a1a      	ldr	r2, [pc, #104]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008b9a:	4b16      	ldr	r3, [pc, #88]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008ba8:	4b12      	ldr	r3, [pc, #72]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bae:	099b      	lsrs	r3, r3, #6
 8008bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	fb03 f202 	mul.w	r2, r3, r2
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd8:	617b      	str	r3, [r7, #20]
        break;
 8008bda:	e003      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bdc:	4b08      	ldr	r3, [pc, #32]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008bde:	617b      	str	r3, [r7, #20]
        break;
 8008be0:	e000      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008be2:	bf00      	nop
      }
    }
  }

  return frequency;
 8008be4:	697b      	ldr	r3, [r7, #20]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	00f42400 	.word	0x00f42400
 8008bfc:	017d7840 	.word	0x017d7840
 8008c00:	00bb8000 	.word	0x00bb8000

08008c04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e071      	b.n	8008cfe <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7f5b      	ldrb	r3, [r3, #29]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7f9 f834 	bl	8001c98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d053      	beq.n	8008cec <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	22ca      	movs	r2, #202	@ 0xca
 8008c4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2253      	movs	r2, #83	@ 0x53
 8008c52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fac7 	bl	80091e8 <RTC_EnterInitMode>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d12a      	bne.n	8008cba <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6899      	ldr	r1, [r3, #8]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b26      	ldr	r3, [pc, #152]	@ (8008d08 <HAL_RTC_Init+0x104>)
 8008c70:	400b      	ands	r3, r1
 8008c72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6899      	ldr	r1, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68d2      	ldr	r2, [r2, #12]
 8008c9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6919      	ldr	r1, [r3, #16]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	041a      	lsls	r2, r3, #16
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fad0 	bl	8009256 <RTC_ExitInitMode>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d110      	bne.n	8008ce2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0208 	bic.w	r2, r2, #8
 8008cce:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	22ff      	movs	r2, #255	@ 0xff
 8008ce8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cea:	e001      	b.n	8008cf0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d102      	bne.n	8008cfc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	ff8fffbf 	.word	0xff8fffbf

08008d0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	7f1b      	ldrb	r3, [r3, #28]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_RTC_SetTime+0x1c>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e085      	b.n	8008e34 <HAL_RTC_SetTime+0x128>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2202      	movs	r2, #2
 8008d32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d126      	bne.n	8008d88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 faa4 	bl	80092a0 <RTC_ByteToBcd2>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fa9d 	bl	80092a0 <RTC_ByteToBcd2>
 8008d66:	4603      	mov	r3, r0
 8008d68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	789b      	ldrb	r3, [r3, #2]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fa95 	bl	80092a0 <RTC_ByteToBcd2>
 8008d76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	78db      	ldrb	r3, [r3, #3]
 8008d80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e018      	b.n	8008dba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d102      	bne.n	8008d9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008da8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008dae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	78db      	ldrb	r3, [r3, #3]
 8008db4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	22ca      	movs	r2, #202	@ 0xca
 8008dc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2253      	movs	r2, #83	@ 0x53
 8008dc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 fa0c 	bl	80091e8 <RTC_EnterInitMode>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008dd4:	7cfb      	ldrb	r3, [r7, #19]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11e      	bne.n	8008e18 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	6979      	ldr	r1, [r7, #20]
 8008de0:	4b16      	ldr	r3, [pc, #88]	@ (8008e3c <HAL_RTC_SetTime+0x130>)
 8008de2:	400b      	ands	r3, r1
 8008de4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008df4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6899      	ldr	r1, [r3, #8]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fa21 	bl	8009256 <RTC_ExitInitMode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e18:	7cfb      	ldrb	r3, [r7, #19]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	22ff      	movs	r2, #255	@ 0xff
 8008e2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	771a      	strb	r2, [r3, #28]

  return status;
 8008e32:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	371c      	adds	r7, #28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	007f7f7f 	.word	0x007f7f7f

08008e40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	7f1b      	ldrb	r3, [r3, #28]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_RTC_SetDate+0x1c>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e06f      	b.n	8008f3c <HAL_RTC_SetDate+0xfc>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2202      	movs	r2, #2
 8008e66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10e      	bne.n	8008e8c <HAL_RTC_SetDate+0x4c>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d008      	beq.n	8008e8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	f023 0310 	bic.w	r3, r3, #16
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	330a      	adds	r3, #10
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d11c      	bne.n	8008ecc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	78db      	ldrb	r3, [r3, #3]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fa02 	bl	80092a0 <RTC_ByteToBcd2>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 f9fb 	bl	80092a0 <RTC_ByteToBcd2>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008eae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	789b      	ldrb	r3, [r3, #2]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f9f3 	bl	80092a0 <RTC_ByteToBcd2>
 8008eba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ebc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e00e      	b.n	8008eea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	78db      	ldrb	r3, [r3, #3]
 8008ed0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ed8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008ede:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	22ca      	movs	r2, #202	@ 0xca
 8008ef0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2253      	movs	r2, #83	@ 0x53
 8008ef8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f974 	bl	80091e8 <RTC_EnterInitMode>
 8008f00:	4603      	mov	r3, r0
 8008f02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	6979      	ldr	r1, [r7, #20]
 8008f10:	4b0c      	ldr	r3, [pc, #48]	@ (8008f44 <HAL_RTC_SetDate+0x104>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f99d 	bl	8009256 <RTC_ExitInitMode>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008f20:	7cfb      	ldrb	r3, [r7, #19]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	22ff      	movs	r2, #255	@ 0xff
 8008f32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	771a      	strb	r2, [r3, #28]

  return status;
 8008f3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}
 8008f44:	00ffff3f 	.word	0x00ffff3f

08008f48 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b089      	sub	sp, #36	@ 0x24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7f1b      	ldrb	r3, [r3, #28]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_RTC_SetAlarm+0x24>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e113      	b.n	8009194 <HAL_RTC_SetAlarm+0x24c>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2202      	movs	r2, #2
 8008f76:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d137      	bne.n	8008fee <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f982 	bl	80092a0 <RTC_ByteToBcd2>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f97b 	bl	80092a0 <RTC_ByteToBcd2>
 8008faa:	4603      	mov	r3, r0
 8008fac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 f973 	bl	80092a0 <RTC_ByteToBcd2>
 8008fba:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fbc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	78db      	ldrb	r3, [r3, #3]
 8008fc4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008fc6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f965 	bl	80092a0 <RTC_ByteToBcd2>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008fda:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008fe2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	e023      	b.n	8009036 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800900e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009014:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	78db      	ldrb	r3, [r3, #3]
 800901a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800901c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009024:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009026:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800902c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009032:	4313      	orrs	r3, r2
 8009034:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	22ca      	movs	r2, #202	@ 0xca
 8009048:	625a      	str	r2, [r3, #36]	@ 0x24
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2253      	movs	r2, #83	@ 0x53
 8009050:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800905a:	d148      	bne.n	80090ee <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800906a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800907a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800908c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800908e:	f7f9 ff83 	bl	8002f98 <HAL_GetTick>
 8009092:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009094:	e013      	b.n	80090be <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009096:	f7f9 ff7f 	bl	8002f98 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090a4:	d90b      	bls.n	80090be <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	22ff      	movs	r2, #255	@ 0xff
 80090ac:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2203      	movs	r2, #3
 80090b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e06a      	b.n	8009194 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0e4      	beq.n	8009096 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	e047      	b.n	800917e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80090fc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800910c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	b2da      	uxtb	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800911e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009120:	f7f9 ff3a 	bl	8002f98 <HAL_GetTick>
 8009124:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009126:	e013      	b.n	8009150 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009128:	f7f9 ff36 	bl	8002f98 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009136:	d90b      	bls.n	8009150 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	22ff      	movs	r2, #255	@ 0xff
 800913e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2203      	movs	r2, #3
 8009144:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e021      	b.n	8009194 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0e4      	beq.n	8009128 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800917c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	22ff      	movs	r2, #255	@ 0xff
 8009184:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3724      	adds	r7, #36	@ 0x24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a0d      	ldr	r2, [pc, #52]	@ (80091e4 <HAL_RTC_WaitForSynchro+0x48>)
 80091ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091b0:	f7f9 fef2 	bl	8002f98 <HAL_GetTick>
 80091b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091b6:	e009      	b.n	80091cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091b8:	f7f9 feee 	bl	8002f98 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091c6:	d901      	bls.n	80091cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e007      	b.n	80091dc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0ee      	beq.n	80091b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	0001ff5f 	.word	0x0001ff5f

080091e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d122      	bne.n	800924c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009214:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009216:	f7f9 febf 	bl	8002f98 <HAL_GetTick>
 800921a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800921c:	e00c      	b.n	8009238 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800921e:	f7f9 febb 	bl	8002f98 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800922c:	d904      	bls.n	8009238 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2204      	movs	r2, #4
 8009232:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <RTC_EnterInitMode+0x64>
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d1e8      	bne.n	800921e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009270:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff8b 	bl	800919c <HAL_RTC_WaitForSynchro>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2204      	movs	r2, #4
 8009290:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80092ae:	e005      	b.n	80092bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	3b0a      	subs	r3, #10
 80092ba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d8f6      	bhi.n	80092b0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	7f1b      	ldrb	r3, [r3, #28]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d101      	bne.n	80092f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80092f4:	2302      	movs	r3, #2
 80092f6:	e050      	b.n	800939a <HAL_RTCEx_SetTimeStamp+0xbe>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2202      	movs	r2, #2
 8009302:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0206 	bic.w	r2, r2, #6
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	430a      	orrs	r2, r1
 8009322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	4b1f      	ldr	r3, [pc, #124]	@ (80093a8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800932c:	4013      	ands	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	4313      	orrs	r3, r2
 8009336:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	22ca      	movs	r2, #202	@ 0xca
 800933e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2253      	movs	r2, #83	@ 0x53
 8009346:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	b2da      	uxtb	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009360:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	b2da      	uxtb	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009372:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009382:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	22ff      	movs	r2, #255	@ 0xff
 800938a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	fffff7f7 	.word	0xfffff7f7

080093ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e156      	b.n	8009678 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f8 fd30 	bl	8001e44 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f95b 	bl	80096a8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d00c      	beq.n	8009414 <HAL_SAI_Init+0x68>
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d80d      	bhi.n	800941a <HAL_SAI_Init+0x6e>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <HAL_SAI_Init+0x5c>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d003      	beq.n	800940e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009406:	e008      	b.n	800941a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]
      break;
 800940c:	e006      	b.n	800941c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800940e:	2310      	movs	r3, #16
 8009410:	61fb      	str	r3, [r7, #28]
      break;
 8009412:	e003      	b.n	800941c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009414:	2320      	movs	r3, #32
 8009416:	61fb      	str	r3, [r7, #28]
      break;
 8009418:	e000      	b.n	800941c <HAL_SAI_Init+0x70>
      break;
 800941a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b03      	cmp	r3, #3
 8009422:	d81e      	bhi.n	8009462 <HAL_SAI_Init+0xb6>
 8009424:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <HAL_SAI_Init+0x80>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009443 	.word	0x08009443
 8009434:	0800944b 	.word	0x0800944b
 8009438:	08009453 	.word	0x08009453
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009440:	e010      	b.n	8009464 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009446:	617b      	str	r3, [r7, #20]
    }
    break;
 8009448:	e00c      	b.n	8009464 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800944a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800944e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009450:	e008      	b.n	8009464 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009452:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009456:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009460:	e000      	b.n	8009464 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009462:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a85      	ldr	r2, [pc, #532]	@ (8009680 <HAL_SAI_Init+0x2d4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_SAI_Init+0xcc>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a84      	ldr	r2, [pc, #528]	@ (8009684 <HAL_SAI_Init+0x2d8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d103      	bne.n	8009480 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009478:	4a83      	ldr	r2, [pc, #524]	@ (8009688 <HAL_SAI_Init+0x2dc>)
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e002      	b.n	8009486 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009480:	4a82      	ldr	r2, [pc, #520]	@ (800968c <HAL_SAI_Init+0x2e0>)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d04c      	beq.n	8009528 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a7a      	ldr	r2, [pc, #488]	@ (8009680 <HAL_SAI_Init+0x2d4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d004      	beq.n	80094a6 <HAL_SAI_Init+0xfa>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a78      	ldr	r2, [pc, #480]	@ (8009684 <HAL_SAI_Init+0x2d8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d104      	bne.n	80094b0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80094a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80094aa:	f7ff fa6b 	bl	8008984 <HAL_RCCEx_GetPeriphCLKFreq>
 80094ae:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a76      	ldr	r2, [pc, #472]	@ (8009690 <HAL_SAI_Init+0x2e4>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <HAL_SAI_Init+0x118>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a75      	ldr	r2, [pc, #468]	@ (8009694 <HAL_SAI_Init+0x2e8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d104      	bne.n	80094ce <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80094c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80094c8:	f7ff fa5c 	bl	8008984 <HAL_RCCEx_GetPeriphCLKFreq>
 80094cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	461a      	mov	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	025b      	lsls	r3, r3, #9
 80094e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4a6b      	ldr	r2, [pc, #428]	@ (8009698 <HAL_SAI_Init+0x2ec>)
 80094ea:	fba2 2303 	umull	r2, r3, r2, r3
 80094ee:	08da      	lsrs	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80094f4:	68f9      	ldr	r1, [r7, #12]
 80094f6:	4b68      	ldr	r3, [pc, #416]	@ (8009698 <HAL_SAI_Init+0x2ec>)
 80094f8:	fba3 2301 	umull	r2, r3, r3, r1
 80094fc:	08da      	lsrs	r2, r3, #3
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	1aca      	subs	r2, r1, r3
 8009508:	2a08      	cmp	r2, #8
 800950a:	d904      	bls.n	8009516 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951a:	2b04      	cmp	r3, #4
 800951c:	d104      	bne.n	8009528 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	085a      	lsrs	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_SAI_Init+0x18c>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d109      	bne.n	800954c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_SAI_Init+0x198>
 8009540:	2300      	movs	r3, #0
 8009542:	e001      	b.n	8009548 <HAL_SAI_Init+0x19c>
 8009544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	e008      	b.n	800955e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d102      	bne.n	800955a <HAL_SAI_Init+0x1ae>
 8009554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009558:	e000      	b.n	800955c <HAL_SAI_Init+0x1b0>
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	4b4c      	ldr	r3, [pc, #304]	@ (800969c <HAL_SAI_Init+0x2f0>)
 800956a:	400b      	ands	r3, r1
 800956c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009582:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009588:	431a      	orrs	r2, r3
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8009596:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095a2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	051b      	lsls	r3, r3, #20
 80095aa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6859      	ldr	r1, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b38      	ldr	r3, [pc, #224]	@ (80096a0 <HAL_SAI_Init+0x2f4>)
 80095c0:	400b      	ands	r3, r1
 80095c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6859      	ldr	r1, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6899      	ldr	r1, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	4b2d      	ldr	r3, [pc, #180]	@ (80096a4 <HAL_SAI_Init+0x2f8>)
 80095ee:	400b      	ands	r3, r1
 80095f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6899      	ldr	r1, [r3, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009602:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009608:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800960e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009614:	3b01      	subs	r3, #1
 8009616:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009618:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68d9      	ldr	r1, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009630:	400b      	ands	r3, r1
 8009632:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68d9      	ldr	r1, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009642:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009650:	3b01      	subs	r3, #1
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3720      	adds	r7, #32
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40015804 	.word	0x40015804
 8009684:	40015824 	.word	0x40015824
 8009688:	40015800 	.word	0x40015800
 800968c:	40015c00 	.word	0x40015c00
 8009690:	40015c04 	.word	0x40015c04
 8009694:	40015c24 	.word	0x40015c24
 8009698:	cccccccd 	.word	0xcccccccd
 800969c:	ff05c010 	.word	0xff05c010
 80096a0:	ffff1ff0 	.word	0xffff1ff0
 80096a4:	fff88000 	.word	0xfff88000

080096a8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80096b0:	4b17      	ldr	r3, [pc, #92]	@ (8009710 <SAI_Disable+0x68>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a17      	ldr	r2, [pc, #92]	@ (8009714 <SAI_Disable+0x6c>)
 80096b6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ba:	0b1b      	lsrs	r3, r3, #12
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80096d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	1e5a      	subs	r2, r3, #1
 80096d8:	60fa      	str	r2, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	72fb      	strb	r3, [r7, #11]
      break;
 80096f2:	e006      	b.n	8009702 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e8      	bne.n	80096d4 <SAI_Disable+0x2c>

  return status;
 8009702:	7afb      	ldrb	r3, [r7, #11]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	20000000 	.word	0x20000000
 8009714:	95cbec1b 	.word	0x95cbec1b

08009718 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e022      	b.n	8009770 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7f8 fc0d 	bl	8001f5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2203      	movs	r2, #3
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f814 	bl	8009778 <HAL_SD_InitCard>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e00a      	b.n	8009770 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009778:	b5b0      	push	{r4, r5, r7, lr}
 800977a:	b08e      	sub	sp, #56	@ 0x38
 800977c:	af04      	add	r7, sp, #16
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009780:	2300      	movs	r3, #0
 8009782:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800978c:	2300      	movs	r3, #0
 800978e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009794:	2376      	movs	r3, #118	@ 0x76
 8009796:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681d      	ldr	r5, [r3, #0]
 800979c:	466c      	mov	r4, sp
 800979e:	f107 0314 	add.w	r3, r7, #20
 80097a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097b0:	4628      	mov	r0, r5
 80097b2:	f003 fae3 	bl	800cd7c <SDMMC_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e059      	b.n	800987c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097d6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f003 fb06 	bl	800cdee <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097f0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80097f2:	2002      	movs	r0, #2
 80097f4:	f7f9 fbdc 	bl	8002fb0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fe0f 	bl	800a41c <SD_PowerON>
 80097fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e02e      	b.n	800987c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fd2e 	bl	800a280 <SD_InitCard>
 8009824:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e01b      	b.n	800987c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800984c:	4618      	mov	r0, r3
 800984e:	f003 fb61 	bl	800cf14 <SDMMC_CmdBlockLength>
 8009852:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00f      	beq.n	800987a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a09      	ldr	r2, [pc, #36]	@ (8009884 <HAL_SD_InitCard+0x10c>)
 8009860:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	@ 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bdb0      	pop	{r4, r5, r7, pc}
 8009884:	004005ff 	.word	0x004005ff

08009888 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08c      	sub	sp, #48	@ 0x30
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0c3      	b.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f040 80bc 	bne.w	8009a36 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	441a      	add	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d907      	bls.n	80098e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e0aa      	b.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2203      	movs	r2, #3
 80098e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009900:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009906:	4a4e      	ldr	r2, [pc, #312]	@ (8009a40 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990e:	4a4d      	ldr	r2, [pc, #308]	@ (8009a44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009910:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	2200      	movs	r2, #0
 8009918:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800991e:	2200      	movs	r2, #0
 8009920:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3380      	adds	r3, #128	@ 0x80
 8009948:	4619      	mov	r1, r3
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	025b      	lsls	r3, r3, #9
 8009950:	089b      	lsrs	r3, r3, #2
 8009952:	f7fa f833 	bl	80039bc <HAL_DMA_Start_IT>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d017      	beq.n	800998c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800996a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a35      	ldr	r2, [pc, #212]	@ (8009a48 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009972:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009978:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e055      	b.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0208 	orr.w	r2, r2, #8
 800999a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d002      	beq.n	80099aa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80099a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a6:	025b      	lsls	r3, r3, #9
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
 80099ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	025b      	lsls	r3, r3, #9
 80099b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099b6:	2390      	movs	r3, #144	@ 0x90
 80099b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099ba:	2302      	movs	r3, #2
 80099bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099be:	2300      	movs	r3, #0
 80099c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80099c2:	2301      	movs	r3, #1
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f107 0210 	add.w	r2, r7, #16
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f003 fa73 	bl	800cebc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d90a      	bls.n	80099f2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2282      	movs	r2, #130	@ 0x82
 80099e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e8:	4618      	mov	r0, r3
 80099ea:	f003 fad7 	bl	800cf9c <SDMMC_CmdReadMultiBlock>
 80099ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80099f0:	e009      	b.n	8009a06 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2281      	movs	r2, #129	@ 0x81
 80099f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099fe:	4618      	mov	r0, r3
 8009a00:	f003 faaa 	bl	800cf58 <SDMMC_CmdReadSingleBlock>
 8009a04:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d012      	beq.n	8009a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0d      	ldr	r2, [pc, #52]	@ (8009a48 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e002      	b.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e000      	b.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009a36:	2302      	movs	r3, #2
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3730      	adds	r7, #48	@ 0x30
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	0800a16b 	.word	0x0800a16b
 8009a44:	0800a1dd 	.word	0x0800a1dd
 8009a48:	004005ff 	.word	0x004005ff

08009a4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08c      	sub	sp, #48	@ 0x30
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d107      	bne.n	8009a74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e0c6      	b.n	8009c02 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	f040 80bf 	bne.w	8009c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	441a      	add	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d907      	bls.n	8009aa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e0ad      	b.n	8009c02 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2203      	movs	r2, #3
 8009aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 021a 	orr.w	r2, r2, #26
 8009ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aca:	4a50      	ldr	r2, [pc, #320]	@ (8009c0c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8009c10 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009ad4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ada:	2200      	movs	r2, #0
 8009adc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d002      	beq.n	8009aec <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	025b      	lsls	r3, r3, #9
 8009aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d90a      	bls.n	8009b08 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	22a0      	movs	r2, #160	@ 0xa0
 8009af6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009afe:	4618      	mov	r0, r3
 8009b00:	f003 fa90 	bl	800d024 <SDMMC_CmdWriteMultiBlock>
 8009b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009b06:	e009      	b.n	8009b1c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2290      	movs	r2, #144	@ 0x90
 8009b0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b14:	4618      	mov	r0, r3
 8009b16:	f003 fa63 	bl	800cfe0 <SDMMC_CmdWriteSingleBlock>
 8009b1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d012      	beq.n	8009b48 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a3b      	ldr	r2, [pc, #236]	@ (8009c14 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009b28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e05c      	b.n	8009c02 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0208 	orr.w	r2, r2, #8
 8009b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b5c:	2240      	movs	r2, #64	@ 0x40
 8009b5e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3380      	adds	r3, #128	@ 0x80
 8009b88:	461a      	mov	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	025b      	lsls	r3, r3, #9
 8009b8e:	089b      	lsrs	r3, r3, #2
 8009b90:	f7f9 ff14 	bl	80039bc <HAL_DMA_Start_IT>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01a      	beq.n	8009bd0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 021a 	bic.w	r2, r2, #26
 8009ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a19      	ldr	r2, [pc, #100]	@ (8009c14 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009bb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e018      	b.n	8009c02 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	025b      	lsls	r3, r3, #9
 8009bda:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009bdc:	2390      	movs	r3, #144	@ 0x90
 8009bde:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f107 0210 	add.w	r2, r7, #16
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f003 f960 	bl	800cebc <SDMMC_ConfigData>

      return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e000      	b.n	8009c02 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3730      	adds	r7, #48	@ 0x30
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800a141 	.word	0x0800a141
 8009c10:	0800a1dd 	.word	0x0800a1dd
 8009c14:	004005ff 	.word	0x004005ff

08009c18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3a:	0f9b      	lsrs	r3, r3, #30
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c46:	0e9b      	lsrs	r3, r3, #26
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c58:	0e1b      	lsrs	r3, r3, #24
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0303 	and.w	r3, r3, #3
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c6a:	0c1b      	lsrs	r3, r3, #16
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c76:	0a1b      	lsrs	r3, r3, #8
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c8c:	0d1b      	lsrs	r3, r3, #20
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c98:	0c1b      	lsrs	r3, r3, #16
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009caa:	0bdb      	lsrs	r3, r3, #15
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cbc:	0b9b      	lsrs	r3, r3, #14
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cce:	0b5b      	lsrs	r3, r3, #13
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ce0:	0b1b      	lsrs	r3, r3, #12
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d163      	bne.n	8009dc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d00:	009a      	lsls	r2, r3, #2
 8009d02:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d06:	4013      	ands	r3, r2
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009d0c:	0f92      	lsrs	r2, r2, #30
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d18:	0edb      	lsrs	r3, r3, #27
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d2a:	0e1b      	lsrs	r3, r3, #24
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d3c:	0d5b      	lsrs	r3, r3, #21
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4e:	0c9b      	lsrs	r3, r3, #18
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d60:	0bdb      	lsrs	r3, r3, #15
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 0307 	and.w	r3, r3, #7
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	7e1b      	ldrb	r3, [r3, #24]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	3302      	adds	r3, #2
 8009d84:	2201      	movs	r2, #1
 8009d86:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009d8e:	fb03 f202 	mul.w	r2, r3, r2
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	7a1b      	ldrb	r3, [r3, #8]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	2201      	movs	r2, #1
 8009da2:	409a      	lsls	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009db0:	0a52      	lsrs	r2, r2, #9
 8009db2:	fb03 f202 	mul.w	r2, r3, r2
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dc0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009dc2:	e031      	b.n	8009e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d11d      	bne.n	8009e08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dd0:	041b      	lsls	r3, r3, #16
 8009dd2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	3301      	adds	r3, #1
 8009de8:	029a      	lsls	r2, r3, #10
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dfc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e06:	e00f      	b.n	8009e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a58      	ldr	r2, [pc, #352]	@ (8009f70 <HAL_SD_GetCardCSD+0x344>)
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e09d      	b.n	8009f64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e2c:	0b9b      	lsrs	r3, r3, #14
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e3e:	09db      	lsrs	r3, r3, #7
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e60:	0fdb      	lsrs	r3, r3, #31
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e6c:	0f5b      	lsrs	r3, r3, #29
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e7e:	0e9b      	lsrs	r3, r3, #26
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e90:	0d9b      	lsrs	r3, r3, #22
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ea2:	0d5b      	lsrs	r3, r3, #21
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ebe:	0c1b      	lsrs	r3, r3, #16
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ed2:	0bdb      	lsrs	r3, r3, #15
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee6:	0b9b      	lsrs	r3, r3, #14
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009efa:	0b5b      	lsrs	r3, r3, #13
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f0e:	0b1b      	lsrs	r3, r3, #12
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f22:	0a9b      	lsrs	r3, r3, #10
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	004005ff 	.word	0x004005ff

08009f74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009fcc:	b5b0      	push	{r4, r5, r7, lr}
 8009fce:	b08e      	sub	sp, #56	@ 0x38
 8009fd0:	af04      	add	r7, sp, #16
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2203      	movs	r2, #3
 8009fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d02e      	beq.n	800a04a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff2:	d106      	bne.n	800a002 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	639a      	str	r2, [r3, #56]	@ 0x38
 800a000:	e029      	b.n	800a056 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a008:	d10a      	bne.n	800a020 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fabc 	bl	800a588 <SD_WideBus_Enable>
 800a010:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a01e:	e01a      	b.n	800a056 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 faf9 	bl	800a61e <SD_WideBus_Disable>
 800a02c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	639a      	str	r2, [r3, #56]	@ 0x38
 800a03a:	e00c      	b.n	800a056 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a040:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38
 800a048:	e005      	b.n	800a056 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a26      	ldr	r2, [pc, #152]	@ (800a0fc <HAL_SD_ConfigWideBusOperation+0x130>)
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a074:	e01f      	b.n	800a0b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681d      	ldr	r5, [r3, #0]
 800a09c:	466c      	mov	r4, sp
 800a09e:	f107 0314 	add.w	r3, r7, #20
 800a0a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f002 fe63 	bl	800cd7c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 ff28 	bl	800cf14 <SDMMC_CmdBlockLength>
 800a0c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00c      	beq.n	800a0e6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0fc <HAL_SD_ConfigWideBusOperation+0x130>)
 800a0d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	@ 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	004005ff 	.word	0x004005ff

0800a100 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa10 	bl	800a538 <SD_SendStatus>
 800a118:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	431a      	orrs	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0a5b      	lsrs	r3, r3, #9
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a136:	693b      	ldr	r3, [r7, #16]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a15c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a176:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17c:	2b82      	cmp	r3, #130	@ 0x82
 800a17e:	d111      	bne.n	800a1a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f002 ff6f 	bl	800d068 <SDMMC_CmdStopTransfer>
 800a18a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d008      	beq.n	800a1a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff fd3a 	bl	8009c18 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 0208 	bic.w	r2, r2, #8
 800a1b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a1bc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f004 fd1d 	bl	800ec0c <HAL_SD_RxCpltCallback>
#endif
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7f9 fcd8 	bl	8003ba0 <HAL_DMA_GetError>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d03e      	beq.n	800a274 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a204:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d002      	beq.n	800a212 <SD_DMAError+0x36>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d12d      	bne.n	800a26e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a19      	ldr	r2, [pc, #100]	@ (800a27c <SD_DMAError+0xa0>)
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a228:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	f7ff ff62 	bl	800a100 <HAL_SD_GetCardState>
 800a23c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b06      	cmp	r3, #6
 800a242:	d002      	beq.n	800a24a <SD_DMAError+0x6e>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b05      	cmp	r3, #5
 800a248:	d10a      	bne.n	800a260 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f002 ff0a 	bl	800d068 <SDMMC_CmdStopTransfer>
 800a254:	4602      	mov	r2, r0
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a25a:	431a      	orrs	r2, r3
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2200      	movs	r2, #0
 800a26c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a26e:	6978      	ldr	r0, [r7, #20]
 800a270:	f7ff fcd2 	bl	8009c18 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a274:	bf00      	nop
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	004005ff 	.word	0x004005ff

0800a280 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a280:	b5b0      	push	{r4, r5, r7, lr}
 800a282:	b094      	sub	sp, #80	@ 0x50
 800a284:	af04      	add	r7, sp, #16
 800a286:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a288:	2301      	movs	r3, #1
 800a28a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f002 fdba 	bl	800ce0a <SDMMC_GetPowerState>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a29c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a2a0:	e0b8      	b.n	800a414 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d02f      	beq.n	800a30a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 ffe5 	bl	800d27e <SDMMC_CmdSendCID>
 800a2b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <SD_InitCard+0x40>
    {
      return errorstate;
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2be:	e0a9      	b.n	800a414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f002 fde5 	bl	800ce96 <SDMMC_GetResponse>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f002 fddc 	bl	800ce96 <SDMMC_GetResponse>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2108      	movs	r1, #8
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f002 fdd3 	bl	800ce96 <SDMMC_GetResponse>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	210c      	movs	r1, #12
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f002 fdca 	bl	800ce96 <SDMMC_GetResponse>
 800a302:	4602      	mov	r2, r0
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d00d      	beq.n	800a32e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f107 020e 	add.w	r2, r7, #14
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f002 ffeb 	bl	800d2f8 <SDMMC_CmdSetRelAdd>
 800a322:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <SD_InitCard+0xae>
    {
      return errorstate;
 800a32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32c:	e072      	b.n	800a414 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a332:	2b03      	cmp	r3, #3
 800a334:	d036      	beq.n	800a3a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a336:	89fb      	ldrh	r3, [r7, #14]
 800a338:	461a      	mov	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f002 ffb5 	bl	800d2ba <SDMMC_CmdSendCSD>
 800a350:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	e05b      	b.n	800a414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f002 fd97 	bl	800ce96 <SDMMC_GetResponse>
 800a368:	4602      	mov	r2, r0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2104      	movs	r1, #4
 800a374:	4618      	mov	r0, r3
 800a376:	f002 fd8e 	bl	800ce96 <SDMMC_GetResponse>
 800a37a:	4602      	mov	r2, r0
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2108      	movs	r1, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f002 fd85 	bl	800ce96 <SDMMC_GetResponse>
 800a38c:	4602      	mov	r2, r0
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	210c      	movs	r1, #12
 800a398:	4618      	mov	r0, r3
 800a39a:	f002 fd7c 	bl	800ce96 <SDMMC_GetResponse>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2104      	movs	r1, #4
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f002 fd73 	bl	800ce96 <SDMMC_GetResponse>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	0d1a      	lsrs	r2, r3, #20
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a3b8:	f107 0310 	add.w	r3, r7, #16
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff fc34 	bl	8009c2c <HAL_SD_GetCardCSD>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a3ce:	e021      	b.n	800a414 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	2200      	movs	r2, #0
 800a3dc:	461c      	mov	r4, r3
 800a3de:	4615      	mov	r5, r2
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	f002 fe61 	bl	800d0ac <SDMMC_CmdSelDesel>
 800a3ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <SD_InitCard+0x176>
  {
    return errorstate;
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3f4:	e00e      	b.n	800a414 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681d      	ldr	r5, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	466c      	mov	r4, sp
 800a3fe:	f103 0210 	add.w	r2, r3, #16
 800a402:	ca07      	ldmia	r2, {r0, r1, r2}
 800a404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a408:	3304      	adds	r3, #4
 800a40a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a40c:	4628      	mov	r0, r5
 800a40e:	f002 fcb5 	bl	800cd7c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3740      	adds	r7, #64	@ 0x40
 800a418:	46bd      	mov	sp, r7
 800a41a:	bdb0      	pop	{r4, r5, r7, pc}

0800a41c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	2300      	movs	r3, #0
 800a42e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f002 fe5c 	bl	800d0f2 <SDMMC_CmdGoIdleState>
 800a43a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	e072      	b.n	800a52c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fe6f 	bl	800d12e <SDMMC_CmdOperCond>
 800a450:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00d      	beq.n	800a474 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f002 fe45 	bl	800d0f2 <SDMMC_CmdGoIdleState>
 800a468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <SD_PowerON+0x5e>
    {
      return errorstate;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	e05b      	b.n	800a52c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d137      	bne.n	800a4f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2100      	movs	r1, #0
 800a488:	4618      	mov	r0, r3
 800a48a:	f002 fe6f 	bl	800d16c <SDMMC_CmdAppCommand>
 800a48e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d02d      	beq.n	800a4f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a496:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a49a:	e047      	b.n	800a52c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 fe62 	bl	800d16c <SDMMC_CmdAppCommand>
 800a4a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	e03b      	b.n	800a52c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	491e      	ldr	r1, [pc, #120]	@ (800a534 <SD_PowerON+0x118>)
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f002 fe78 	bl	800d1b0 <SDMMC_CmdAppOperCommand>
 800a4c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4cc:	e02e      	b.n	800a52c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f002 fcde 	bl	800ce96 <SDMMC_GetResponse>
 800a4da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	0fdb      	lsrs	r3, r3, #31
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <SD_PowerON+0xcc>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e000      	b.n	800a4ea <SD_PowerON+0xce>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]

    count++;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d802      	bhi.n	800a502 <SD_PowerON+0xe6>
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0cc      	beq.n	800a49c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a508:	4293      	cmp	r3, r2
 800a50a:	d902      	bls.n	800a512 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a50c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a510:	e00c      	b.n	800a52c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	645a      	str	r2, [r3, #68]	@ 0x44
 800a522:	e002      	b.n	800a52a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	c1100000 	.word	0xc1100000

0800a538 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a548:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a54c:	e018      	b.n	800a580 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a556:	041b      	lsls	r3, r3, #16
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f002 feed 	bl	800d33a <SDMMC_CmdSendStatus>
 800a560:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	e009      	b.n	800a580 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2100      	movs	r1, #0
 800a572:	4618      	mov	r0, r3
 800a574:	f002 fc8f 	bl	800ce96 <SDMMC_GetResponse>
 800a578:	4602      	mov	r2, r0
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f002 fc79 	bl	800ce96 <SDMMC_GetResponse>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ae:	d102      	bne.n	800a5b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5b4:	e02f      	b.n	800a616 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a5b6:	f107 030c 	add.w	r3, r7, #12
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f879 	bl	800a6b4 <SD_FindSCR>
 800a5c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	e023      	b.n	800a616 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01c      	beq.n	800a612 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e0:	041b      	lsls	r3, r3, #16
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	f002 fdc1 	bl	800d16c <SDMMC_CmdAppCommand>
 800a5ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	e00f      	b.n	800a616 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f002 fdfb 	bl	800d1f8 <SDMMC_CmdBusWidth>
 800a602:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	e003      	b.n	800a616 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a60e:	2300      	movs	r3, #0
 800a610:	e001      	b.n	800a616 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a612:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f002 fc2e 	bl	800ce96 <SDMMC_GetResponse>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a644:	d102      	bne.n	800a64c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a646:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a64a:	e02f      	b.n	800a6ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a64c:	f107 030c 	add.w	r3, r7, #12
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f82e 	bl	800a6b4 <SD_FindSCR>
 800a658:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	e023      	b.n	800a6ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01c      	beq.n	800a6a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a676:	041b      	lsls	r3, r3, #16
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f002 fd76 	bl	800d16c <SDMMC_CmdAppCommand>
 800a680:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	e00f      	b.n	800a6ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2100      	movs	r1, #0
 800a692:	4618      	mov	r0, r3
 800a694:	f002 fdb0 	bl	800d1f8 <SDMMC_CmdBusWidth>
 800a698:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	e003      	b.n	800a6ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e001      	b.n	800a6ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a6b4:	b590      	push	{r4, r7, lr}
 800a6b6:	b08f      	sub	sp, #60	@ 0x3c
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a6be:	f7f8 fc6b 	bl	8002f98 <HAL_GetTick>
 800a6c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60bb      	str	r3, [r7, #8]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2108      	movs	r1, #8
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f002 fc1a 	bl	800cf14 <SDMMC_CmdBlockLength>
 800a6e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	e0b2      	b.n	800a852 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6f4:	041b      	lsls	r3, r3, #16
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f002 fd37 	bl	800d16c <SDMMC_CmdAppCommand>
 800a6fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a708:	e0a3      	b.n	800a852 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a710:	2308      	movs	r3, #8
 800a712:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a714:	2330      	movs	r3, #48	@ 0x30
 800a716:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a718:	2302      	movs	r3, #2
 800a71a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a720:	2301      	movs	r3, #1
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f107 0210 	add.w	r2, r7, #16
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f002 fbc4 	bl	800cebc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	f002 fd7f 	bl	800d23c <SDMMC_CmdSendSCR>
 800a73e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a742:	2b00      	cmp	r3, #0
 800a744:	d02a      	beq.n	800a79c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a748:	e083      	b.n	800a852 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6819      	ldr	r1, [r3, #0]
 800a75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	f107 0208 	add.w	r2, r7, #8
 800a764:	18d4      	adds	r4, r2, r3
 800a766:	4608      	mov	r0, r1
 800a768:	f002 fb34 	bl	800cdd4 <SDMMC_ReadFIFO>
 800a76c:	4603      	mov	r3, r0
 800a76e:	6023      	str	r3, [r4, #0]
      index++;
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	3301      	adds	r3, #1
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
 800a776:	e006      	b.n	800a786 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a77e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d012      	beq.n	800a7ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a786:	f7f8 fc07 	bl	8002f98 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d102      	bne.n	800a79c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a796:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a79a:	e05a      	b.n	800a852 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0cf      	beq.n	800a74a <SD_FindSCR+0x96>
 800a7aa:	e000      	b.n	800a7ae <SD_FindSCR+0xfa>
      break;
 800a7ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b4:	f003 0308 	and.w	r3, r3, #8
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d005      	beq.n	800a7c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	e044      	b.n	800a852 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e037      	b.n	800a852 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e8:	f003 0320 	and.w	r3, r3, #32
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a7f8:	2320      	movs	r3, #32
 800a7fa:	e02a      	b.n	800a852 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a804:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	061a      	lsls	r2, r3, #24
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	021b      	lsls	r3, r3, #8
 800a80e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a812:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a81c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	0e1b      	lsrs	r3, r3, #24
 800a822:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	601a      	str	r2, [r3, #0]
    scr++;
 800a828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82a:	3304      	adds	r3, #4
 800a82c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	061a      	lsls	r2, r3, #24
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a83a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a844:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	0e1b      	lsrs	r3, r3, #24
 800a84a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	373c      	adds	r7, #60	@ 0x3c
 800a856:	46bd      	mov	sp, r7
 800a858:	bd90      	pop	{r4, r7, pc}

0800a85a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e025      	b.n	800a8ba <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7f6 fa20 	bl	8000cc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f002 f9a8 	bl	800cbf0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	f002 f9fc 	bl	800cca8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e04c      	b.n	800a970 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7f7 fbc8 	bl	8002080 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0203 	bic.w	r2, r2, #3
 800a906:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4b19      	ldr	r3, [pc, #100]	@ (800a978 <HAL_SPDIFRX_Init+0xb4>)
 800a914:	4013      	ands	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a920:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a926:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a92c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a932:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a938:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a93e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a944:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a94a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a950:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	fff88407 	.word	0xfff88407

0800a97c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e049      	b.n	800aa22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7f8 f822 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f000 fc12 	bl	800b1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d001      	beq.n	800aa44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e054      	b.n	800aaee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0201 	orr.w	r2, r2, #1
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a26      	ldr	r2, [pc, #152]	@ (800aafc <HAL_TIM_Base_Start_IT+0xd0>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d022      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa6e:	d01d      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a22      	ldr	r2, [pc, #136]	@ (800ab00 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d018      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a21      	ldr	r2, [pc, #132]	@ (800ab04 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d013      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a1f      	ldr	r2, [pc, #124]	@ (800ab08 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00e      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a1e      	ldr	r2, [pc, #120]	@ (800ab0c <HAL_TIM_Base_Start_IT+0xe0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d009      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ab10 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d004      	beq.n	800aaac <HAL_TIM_Base_Start_IT+0x80>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab14 <HAL_TIM_Base_Start_IT+0xe8>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d115      	bne.n	800aad8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	4b19      	ldr	r3, [pc, #100]	@ (800ab18 <HAL_TIM_Base_Start_IT+0xec>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b06      	cmp	r3, #6
 800aabc:	d015      	beq.n	800aaea <HAL_TIM_Base_Start_IT+0xbe>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac4:	d011      	beq.n	800aaea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0201 	orr.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad6:	e008      	b.n	800aaea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	e000      	b.n	800aaec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	40010000 	.word	0x40010000
 800ab00:	40000400 	.word	0x40000400
 800ab04:	40000800 	.word	0x40000800
 800ab08:	40000c00 	.word	0x40000c00
 800ab0c:	40010400 	.word	0x40010400
 800ab10:	40014000 	.word	0x40014000
 800ab14:	40001800 	.word	0x40001800
 800ab18:	00010007 	.word	0x00010007

0800ab1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e049      	b.n	800abc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7f7 ffc0 	bl	8002ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3304      	adds	r3, #4
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	f000 fb42 	bl	800b1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d020      	beq.n	800ac2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01b      	beq.n	800ac2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f06f 0202 	mvn.w	r2, #2
 800abfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fac7 	bl	800b1a8 <HAL_TIM_IC_CaptureCallback>
 800ac1a:	e005      	b.n	800ac28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fab9 	bl	800b194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 faca 	bl	800b1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d020      	beq.n	800ac7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d01b      	beq.n	800ac7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f06f 0204 	mvn.w	r2, #4
 800ac4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 faa1 	bl	800b1a8 <HAL_TIM_IC_CaptureCallback>
 800ac66:	e005      	b.n	800ac74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa93 	bl	800b194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 faa4 	bl	800b1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d020      	beq.n	800acc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 0308 	and.w	r3, r3, #8
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01b      	beq.n	800acc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f06f 0208 	mvn.w	r2, #8
 800ac96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2204      	movs	r2, #4
 800ac9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa7b 	bl	800b1a8 <HAL_TIM_IC_CaptureCallback>
 800acb2:	e005      	b.n	800acc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fa6d 	bl	800b194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fa7e 	bl	800b1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	f003 0310 	and.w	r3, r3, #16
 800accc:	2b00      	cmp	r3, #0
 800acce:	d020      	beq.n	800ad12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01b      	beq.n	800ad12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f06f 0210 	mvn.w	r2, #16
 800ace2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2208      	movs	r2, #8
 800ace8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa55 	bl	800b1a8 <HAL_TIM_IC_CaptureCallback>
 800acfe:	e005      	b.n	800ad0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fa47 	bl	800b194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fa58 	bl	800b1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00c      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f06f 0201 	mvn.w	r2, #1
 800ad2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f6 fe39 	bl	80019a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00c      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fefa 	bl	800bb58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fef2 	bl	800bb6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00c      	beq.n	800adac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d007      	beq.n	800adac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ada4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fa12 	bl	800b1d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00c      	beq.n	800add0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0220 	mvn.w	r2, #32
 800adc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 feba 	bl	800bb44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e0ff      	b.n	800aff6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b14      	cmp	r3, #20
 800ae02:	f200 80f0 	bhi.w	800afe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae06:	a201      	add	r2, pc, #4	@ (adr r2, 800ae0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae61 	.word	0x0800ae61
 800ae10:	0800afe7 	.word	0x0800afe7
 800ae14:	0800afe7 	.word	0x0800afe7
 800ae18:	0800afe7 	.word	0x0800afe7
 800ae1c:	0800aea1 	.word	0x0800aea1
 800ae20:	0800afe7 	.word	0x0800afe7
 800ae24:	0800afe7 	.word	0x0800afe7
 800ae28:	0800afe7 	.word	0x0800afe7
 800ae2c:	0800aee3 	.word	0x0800aee3
 800ae30:	0800afe7 	.word	0x0800afe7
 800ae34:	0800afe7 	.word	0x0800afe7
 800ae38:	0800afe7 	.word	0x0800afe7
 800ae3c:	0800af23 	.word	0x0800af23
 800ae40:	0800afe7 	.word	0x0800afe7
 800ae44:	0800afe7 	.word	0x0800afe7
 800ae48:	0800afe7 	.word	0x0800afe7
 800ae4c:	0800af65 	.word	0x0800af65
 800ae50:	0800afe7 	.word	0x0800afe7
 800ae54:	0800afe7 	.word	0x0800afe7
 800ae58:	0800afe7 	.word	0x0800afe7
 800ae5c:	0800afa5 	.word	0x0800afa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fa68 	bl	800b33c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0208 	orr.w	r2, r2, #8
 800ae7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0204 	bic.w	r2, r2, #4
 800ae8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6999      	ldr	r1, [r3, #24]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	619a      	str	r2, [r3, #24]
      break;
 800ae9e:	e0a5      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 faba 	bl	800b420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6999      	ldr	r1, [r3, #24]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	021a      	lsls	r2, r3, #8
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	619a      	str	r2, [r3, #24]
      break;
 800aee0:	e084      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fb11 	bl	800b510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69da      	ldr	r2, [r3, #28]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f042 0208 	orr.w	r2, r2, #8
 800aefc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69da      	ldr	r2, [r3, #28]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0204 	bic.w	r2, r2, #4
 800af0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69d9      	ldr	r1, [r3, #28]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	61da      	str	r2, [r3, #28]
      break;
 800af20:	e064      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 fb67 	bl	800b5fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69d9      	ldr	r1, [r3, #28]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	021a      	lsls	r2, r3, #8
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	61da      	str	r2, [r3, #28]
      break;
 800af62:	e043      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fb9e 	bl	800b6ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0208 	orr.w	r2, r2, #8
 800af7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0204 	bic.w	r2, r2, #4
 800af8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691a      	ldr	r2, [r3, #16]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afa2:	e023      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fbd0 	bl	800b750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	021a      	lsls	r2, r3, #8
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afe4:	e002      	b.n	800afec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	75fb      	strb	r3, [r7, #23]
      break;
 800afea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop

0800b000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b014:	2b01      	cmp	r3, #1
 800b016:	d101      	bne.n	800b01c <HAL_TIM_ConfigClockSource+0x1c>
 800b018:	2302      	movs	r3, #2
 800b01a:	e0b4      	b.n	800b186 <HAL_TIM_ConfigClockSource+0x186>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	4b56      	ldr	r3, [pc, #344]	@ (800b190 <HAL_TIM_ConfigClockSource+0x190>)
 800b038:	4013      	ands	r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b054:	d03e      	beq.n	800b0d4 <HAL_TIM_ConfigClockSource+0xd4>
 800b056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b05a:	f200 8087 	bhi.w	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b05e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b062:	f000 8086 	beq.w	800b172 <HAL_TIM_ConfigClockSource+0x172>
 800b066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b06a:	d87f      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b06c:	2b70      	cmp	r3, #112	@ 0x70
 800b06e:	d01a      	beq.n	800b0a6 <HAL_TIM_ConfigClockSource+0xa6>
 800b070:	2b70      	cmp	r3, #112	@ 0x70
 800b072:	d87b      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b074:	2b60      	cmp	r3, #96	@ 0x60
 800b076:	d050      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0x11a>
 800b078:	2b60      	cmp	r3, #96	@ 0x60
 800b07a:	d877      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b07c:	2b50      	cmp	r3, #80	@ 0x50
 800b07e:	d03c      	beq.n	800b0fa <HAL_TIM_ConfigClockSource+0xfa>
 800b080:	2b50      	cmp	r3, #80	@ 0x50
 800b082:	d873      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b084:	2b40      	cmp	r3, #64	@ 0x40
 800b086:	d058      	beq.n	800b13a <HAL_TIM_ConfigClockSource+0x13a>
 800b088:	2b40      	cmp	r3, #64	@ 0x40
 800b08a:	d86f      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b08c:	2b30      	cmp	r3, #48	@ 0x30
 800b08e:	d064      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x15a>
 800b090:	2b30      	cmp	r3, #48	@ 0x30
 800b092:	d86b      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b094:	2b20      	cmp	r3, #32
 800b096:	d060      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x15a>
 800b098:	2b20      	cmp	r3, #32
 800b09a:	d867      	bhi.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d05c      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x15a>
 800b0a0:	2b10      	cmp	r3, #16
 800b0a2:	d05a      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x15a>
 800b0a4:	e062      	b.n	800b16c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0b6:	f000 fc19 	bl	800b8ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	609a      	str	r2, [r3, #8]
      break;
 800b0d2:	e04f      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0e4:	f000 fc02 	bl	800b8ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0f6:	609a      	str	r2, [r3, #8]
      break;
 800b0f8:	e03c      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b106:	461a      	mov	r2, r3
 800b108:	f000 fb76 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2150      	movs	r1, #80	@ 0x50
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fbcf 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b118:	e02c      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b126:	461a      	mov	r2, r3
 800b128:	f000 fb95 	bl	800b856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2160      	movs	r1, #96	@ 0x60
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fbbf 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b138:	e01c      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b146:	461a      	mov	r2, r3
 800b148:	f000 fb56 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2140      	movs	r1, #64	@ 0x40
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fbaf 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b158:	e00c      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4619      	mov	r1, r3
 800b164:	4610      	mov	r0, r2
 800b166:	f000 fba6 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b16a:	e003      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]
      break;
 800b170:	e000      	b.n	800b174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	fffeff88 	.word	0xfffeff88

0800b194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a46      	ldr	r2, [pc, #280]	@ (800b310 <TIM_Base_SetConfig+0x12c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d013      	beq.n	800b224 <TIM_Base_SetConfig+0x40>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b202:	d00f      	beq.n	800b224 <TIM_Base_SetConfig+0x40>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a43      	ldr	r2, [pc, #268]	@ (800b314 <TIM_Base_SetConfig+0x130>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d00b      	beq.n	800b224 <TIM_Base_SetConfig+0x40>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a42      	ldr	r2, [pc, #264]	@ (800b318 <TIM_Base_SetConfig+0x134>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d007      	beq.n	800b224 <TIM_Base_SetConfig+0x40>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a41      	ldr	r2, [pc, #260]	@ (800b31c <TIM_Base_SetConfig+0x138>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d003      	beq.n	800b224 <TIM_Base_SetConfig+0x40>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a40      	ldr	r2, [pc, #256]	@ (800b320 <TIM_Base_SetConfig+0x13c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d108      	bne.n	800b236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b22a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4313      	orrs	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a35      	ldr	r2, [pc, #212]	@ (800b310 <TIM_Base_SetConfig+0x12c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d02b      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b244:	d027      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a32      	ldr	r2, [pc, #200]	@ (800b314 <TIM_Base_SetConfig+0x130>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d023      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a31      	ldr	r2, [pc, #196]	@ (800b318 <TIM_Base_SetConfig+0x134>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d01f      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a30      	ldr	r2, [pc, #192]	@ (800b31c <TIM_Base_SetConfig+0x138>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d01b      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a2f      	ldr	r2, [pc, #188]	@ (800b320 <TIM_Base_SetConfig+0x13c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d017      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a2e      	ldr	r2, [pc, #184]	@ (800b324 <TIM_Base_SetConfig+0x140>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d013      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a2d      	ldr	r2, [pc, #180]	@ (800b328 <TIM_Base_SetConfig+0x144>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00f      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a2c      	ldr	r2, [pc, #176]	@ (800b32c <TIM_Base_SetConfig+0x148>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00b      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a2b      	ldr	r2, [pc, #172]	@ (800b330 <TIM_Base_SetConfig+0x14c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d007      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a2a      	ldr	r2, [pc, #168]	@ (800b334 <TIM_Base_SetConfig+0x150>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_Base_SetConfig+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a29      	ldr	r2, [pc, #164]	@ (800b338 <TIM_Base_SetConfig+0x154>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d108      	bne.n	800b2a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b29c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a10      	ldr	r2, [pc, #64]	@ (800b310 <TIM_Base_SetConfig+0x12c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d003      	beq.n	800b2dc <TIM_Base_SetConfig+0xf8>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a12      	ldr	r2, [pc, #72]	@ (800b320 <TIM_Base_SetConfig+0x13c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d103      	bne.n	800b2e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d105      	bne.n	800b302 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f023 0201 	bic.w	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	611a      	str	r2, [r3, #16]
  }
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	40010000 	.word	0x40010000
 800b314:	40000400 	.word	0x40000400
 800b318:	40000800 	.word	0x40000800
 800b31c:	40000c00 	.word	0x40000c00
 800b320:	40010400 	.word	0x40010400
 800b324:	40014000 	.word	0x40014000
 800b328:	40014400 	.word	0x40014400
 800b32c:	40014800 	.word	0x40014800
 800b330:	40001800 	.word	0x40001800
 800b334:	40001c00 	.word	0x40001c00
 800b338:	40002000 	.word	0x40002000

0800b33c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	f023 0201 	bic.w	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4b2b      	ldr	r3, [pc, #172]	@ (800b414 <TIM_OC1_SetConfig+0xd8>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f023 0302 	bic.w	r3, r3, #2
 800b384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a21      	ldr	r2, [pc, #132]	@ (800b418 <TIM_OC1_SetConfig+0xdc>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d003      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x64>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a20      	ldr	r2, [pc, #128]	@ (800b41c <TIM_OC1_SetConfig+0xe0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d10c      	bne.n	800b3ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f023 0308 	bic.w	r3, r3, #8
 800b3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f023 0304 	bic.w	r3, r3, #4
 800b3b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a16      	ldr	r2, [pc, #88]	@ (800b418 <TIM_OC1_SetConfig+0xdc>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d003      	beq.n	800b3ca <TIM_OC1_SetConfig+0x8e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a15      	ldr	r2, [pc, #84]	@ (800b41c <TIM_OC1_SetConfig+0xe0>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d111      	bne.n	800b3ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	621a      	str	r2, [r3, #32]
}
 800b408:	bf00      	nop
 800b40a:	371c      	adds	r7, #28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	fffeff8f 	.word	0xfffeff8f
 800b418:	40010000 	.word	0x40010000
 800b41c:	40010400 	.word	0x40010400

0800b420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	f023 0210 	bic.w	r2, r3, #16
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4b2e      	ldr	r3, [pc, #184]	@ (800b504 <TIM_OC2_SetConfig+0xe4>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f023 0320 	bic.w	r3, r3, #32
 800b46a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4313      	orrs	r3, r2
 800b476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a23      	ldr	r2, [pc, #140]	@ (800b508 <TIM_OC2_SetConfig+0xe8>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d003      	beq.n	800b488 <TIM_OC2_SetConfig+0x68>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a22      	ldr	r2, [pc, #136]	@ (800b50c <TIM_OC2_SetConfig+0xec>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d10d      	bne.n	800b4a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	@ (800b508 <TIM_OC2_SetConfig+0xe8>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d003      	beq.n	800b4b4 <TIM_OC2_SetConfig+0x94>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a17      	ldr	r2, [pc, #92]	@ (800b50c <TIM_OC2_SetConfig+0xec>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d113      	bne.n	800b4dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	621a      	str	r2, [r3, #32]
}
 800b4f6:	bf00      	nop
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	feff8fff 	.word	0xfeff8fff
 800b508:	40010000 	.word	0x40010000
 800b50c:	40010400 	.word	0x40010400

0800b510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f0 <TIM_OC3_SetConfig+0xe0>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	021b      	lsls	r3, r3, #8
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	4313      	orrs	r3, r2
 800b564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a22      	ldr	r2, [pc, #136]	@ (800b5f4 <TIM_OC3_SetConfig+0xe4>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d003      	beq.n	800b576 <TIM_OC3_SetConfig+0x66>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a21      	ldr	r2, [pc, #132]	@ (800b5f8 <TIM_OC3_SetConfig+0xe8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d10d      	bne.n	800b592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b57c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4313      	orrs	r3, r2
 800b588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <TIM_OC3_SetConfig+0xe4>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_OC3_SetConfig+0x92>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a16      	ldr	r2, [pc, #88]	@ (800b5f8 <TIM_OC3_SetConfig+0xe8>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d113      	bne.n	800b5ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	621a      	str	r2, [r3, #32]
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	fffeff8f 	.word	0xfffeff8f
 800b5f4:	40010000 	.word	0x40010000
 800b5f8:	40010400 	.word	0x40010400

0800b5fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a0 <TIM_OC4_SetConfig+0xa4>)
 800b628:	4013      	ands	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	021b      	lsls	r3, r3, #8
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	031b      	lsls	r3, r3, #12
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	4313      	orrs	r3, r2
 800b652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a13      	ldr	r2, [pc, #76]	@ (800b6a4 <TIM_OC4_SetConfig+0xa8>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d003      	beq.n	800b664 <TIM_OC4_SetConfig+0x68>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a12      	ldr	r2, [pc, #72]	@ (800b6a8 <TIM_OC4_SetConfig+0xac>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d109      	bne.n	800b678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b66a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	019b      	lsls	r3, r3, #6
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	4313      	orrs	r3, r2
 800b676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	621a      	str	r2, [r3, #32]
}
 800b692:	bf00      	nop
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	feff8fff 	.word	0xfeff8fff
 800b6a4:	40010000 	.word	0x40010000
 800b6a8:	40010400 	.word	0x40010400

0800b6ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800b744 <TIM_OC5_SetConfig+0x98>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b6ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	041b      	lsls	r3, r3, #16
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a12      	ldr	r2, [pc, #72]	@ (800b748 <TIM_OC5_SetConfig+0x9c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d003      	beq.n	800b70a <TIM_OC5_SetConfig+0x5e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a11      	ldr	r2, [pc, #68]	@ (800b74c <TIM_OC5_SetConfig+0xa0>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d109      	bne.n	800b71e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	021b      	lsls	r3, r3, #8
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	621a      	str	r2, [r3, #32]
}
 800b738:	bf00      	nop
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	fffeff8f 	.word	0xfffeff8f
 800b748:	40010000 	.word	0x40010000
 800b74c:	40010400 	.word	0x40010400

0800b750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b1c      	ldr	r3, [pc, #112]	@ (800b7ec <TIM_OC6_SetConfig+0x9c>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4313      	orrs	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	051b      	lsls	r3, r3, #20
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a13      	ldr	r2, [pc, #76]	@ (800b7f0 <TIM_OC6_SetConfig+0xa0>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_OC6_SetConfig+0x60>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a12      	ldr	r2, [pc, #72]	@ (800b7f4 <TIM_OC6_SetConfig+0xa4>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d109      	bne.n	800b7c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	029b      	lsls	r3, r3, #10
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	feff8fff 	.word	0xfeff8fff
 800b7f0:	40010000 	.word	0x40010000
 800b7f4:	40010400 	.word	0x40010400

0800b7f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	f023 0201 	bic.w	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f023 030a 	bic.w	r3, r3, #10
 800b834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	621a      	str	r2, [r3, #32]
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b856:	b480      	push	{r7}
 800b858:	b087      	sub	sp, #28
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f023 0210 	bic.w	r2, r3, #16
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	031b      	lsls	r3, r3, #12
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	621a      	str	r2, [r3, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b085      	sub	sp, #20
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	f043 0307 	orr.w	r3, r3, #7
 800b8d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	609a      	str	r2, [r3, #8]
}
 800b8e0:	bf00      	nop
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	021a      	lsls	r2, r3, #8
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	431a      	orrs	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4313      	orrs	r3, r2
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	609a      	str	r2, [r3, #8]
}
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b940:	2302      	movs	r3, #2
 800b942:	e06d      	b.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a30      	ldr	r2, [pc, #192]	@ (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a2f      	ldr	r2, [pc, #188]	@ (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d108      	bne.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b97e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a20      	ldr	r2, [pc, #128]	@ (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d022      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b6:	d01d      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d018      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a1c      	ldr	r2, [pc, #112]	@ (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d013      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00e      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a15      	ldr	r2, [pc, #84]	@ (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a16      	ldr	r2, [pc, #88]	@ (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d004      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a15      	ldr	r2, [pc, #84]	@ (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d10c      	bne.n	800ba0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40010400 	.word	0x40010400
 800ba34:	40000400 	.word	0x40000400
 800ba38:	40000800 	.word	0x40000800
 800ba3c:	40000c00 	.word	0x40000c00
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40001800 	.word	0x40001800

0800ba48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d101      	bne.n	800ba64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e065      	b.n	800bb30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	041b      	lsls	r3, r3, #16
 800bada:	4313      	orrs	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a16      	ldr	r2, [pc, #88]	@ (800bb3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d004      	beq.n	800baf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a14      	ldr	r2, [pc, #80]	@ (800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d115      	bne.n	800bb1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafc:	051b      	lsls	r3, r3, #20
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	40010000 	.word	0x40010000
 800bb40:	40010400 	.word	0x40010400

0800bb44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e040      	b.n	800bc14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7f7 f8de 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2224      	movs	r2, #36	@ 0x24
 800bbac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0201 	bic.w	r2, r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fe08 	bl	800c7dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fba1 	bl	800c314 <UART_SetConfig>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d101      	bne.n	800bbdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e01b      	b.n	800bc14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bbea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689a      	ldr	r2, [r3, #8]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0201 	orr.w	r2, r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fe87 	bl	800c920 <UART_CheckIdleState>
 800bc12:	4603      	mov	r3, r0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	@ 0x28
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d177      	bne.n	800bd24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <HAL_UART_Transmit+0x24>
 800bc3a:	88fb      	ldrh	r3, [r7, #6]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e070      	b.n	800bd26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2221      	movs	r2, #33	@ 0x21
 800bc50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc52:	f7f7 f9a1 	bl	8002f98 <HAL_GetTick>
 800bc56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	88fa      	ldrh	r2, [r7, #6]
 800bc5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	88fa      	ldrh	r2, [r7, #6]
 800bc64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc70:	d108      	bne.n	800bc84 <HAL_UART_Transmit+0x68>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d104      	bne.n	800bc84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	61bb      	str	r3, [r7, #24]
 800bc82:	e003      	b.n	800bc8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bc8c:	e02f      	b.n	800bcee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2200      	movs	r2, #0
 800bc96:	2180      	movs	r1, #128	@ 0x80
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fe98 	bl	800c9ce <UART_WaitOnFlagUntilTimeout>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2220      	movs	r2, #32
 800bca8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e03b      	b.n	800bd26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10b      	bne.n	800bccc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	3302      	adds	r3, #2
 800bcc8:	61bb      	str	r3, [r7, #24]
 800bcca:	e007      	b.n	800bcdc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1c9      	bne.n	800bc8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2140      	movs	r1, #64	@ 0x40
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 fe62 	bl	800c9ce <UART_WaitOnFlagUntilTimeout>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d004      	beq.n	800bd1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2220      	movs	r2, #32
 800bd14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e005      	b.n	800bd26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	e000      	b.n	800bd26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bd24:	2302      	movs	r3, #2
  }
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b0ba      	sub	sp, #232	@ 0xe8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bd5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bd5e:	4013      	ands	r3, r2
 800bd60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bd64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d115      	bne.n	800bd98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bd6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00f      	beq.n	800bd98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd7c:	f003 0320 	and.w	r3, r3, #32
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 8297 	beq.w	800c2bc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
      }
      return;
 800bd96:	e291      	b.n	800c2bc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8117 	beq.w	800bfd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bdae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bdb2:	4b85      	ldr	r3, [pc, #532]	@ (800bfc8 <HAL_UART_IRQHandler+0x298>)
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 810a 	beq.w	800bfd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bdbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d011      	beq.n	800bdec <HAL_UART_IRQHandler+0xbc>
 800bdc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bde2:	f043 0201 	orr.w	r2, r3, #1
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdf0:	f003 0302 	and.w	r3, r3, #2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d011      	beq.n	800be1c <HAL_UART_IRQHandler+0xec>
 800bdf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00b      	beq.n	800be1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2202      	movs	r2, #2
 800be0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be12:	f043 0204 	orr.w	r2, r3, #4
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b00      	cmp	r3, #0
 800be26:	d011      	beq.n	800be4c <HAL_UART_IRQHandler+0x11c>
 800be28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2204      	movs	r2, #4
 800be3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be42:	f043 0202 	orr.w	r2, r3, #2
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be50:	f003 0308 	and.w	r3, r3, #8
 800be54:	2b00      	cmp	r3, #0
 800be56:	d017      	beq.n	800be88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800be58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be5c:	f003 0320 	and.w	r3, r3, #32
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800be64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00b      	beq.n	800be88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2208      	movs	r2, #8
 800be76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be7e:	f043 0208 	orr.w	r2, r3, #8
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be90:	2b00      	cmp	r3, #0
 800be92:	d012      	beq.n	800beba <HAL_UART_IRQHandler+0x18a>
 800be94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00c      	beq.n	800beba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beb0:	f043 0220 	orr.w	r2, r3, #32
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 81fd 	beq.w	800c2c0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beca:	f003 0320 	and.w	r3, r3, #32
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00d      	beq.n	800beee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bed6:	f003 0320 	and.w	r3, r3, #32
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d007      	beq.n	800beee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf02:	2b40      	cmp	r3, #64	@ 0x40
 800bf04:	d005      	beq.n	800bf12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d04f      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fdc8 	bl	800caa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf22:	2b40      	cmp	r3, #64	@ 0x40
 800bf24:	d141      	bne.n	800bfaa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bf3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3308      	adds	r3, #8
 800bf4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bf52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bf56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bf5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bf6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1d9      	bne.n	800bf26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d013      	beq.n	800bfa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf7e:	4a13      	ldr	r2, [pc, #76]	@ (800bfcc <HAL_UART_IRQHandler+0x29c>)
 800bf80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f7 fde8 	bl	8003b5c <HAL_DMA_Abort_IT>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d017      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa0:	e00f      	b.n	800bfc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9a0 	bl	800c2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa8:	e00b      	b.n	800bfc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f99c 	bl	800c2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb0:	e007      	b.n	800bfc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f998 	bl	800c2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bfc0:	e17e      	b.n	800c2c0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc2:	bf00      	nop
    return;
 800bfc4:	e17c      	b.n	800c2c0 <HAL_UART_IRQHandler+0x590>
 800bfc6:	bf00      	nop
 800bfc8:	04000120 	.word	0x04000120
 800bfcc:	0800cb71 	.word	0x0800cb71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	f040 814c 	bne.w	800c272 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfde:	f003 0310 	and.w	r3, r3, #16
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 8145 	beq.w	800c272 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bfe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfec:	f003 0310 	and.w	r3, r3, #16
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 813e 	beq.w	800c272 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2210      	movs	r2, #16
 800bffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c008:	2b40      	cmp	r3, #64	@ 0x40
 800c00a:	f040 80b6 	bne.w	800c17a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c01a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 8150 	beq.w	800c2c4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c02a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c02e:	429a      	cmp	r2, r3
 800c030:	f080 8148 	bcs.w	800c2c4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c03a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c048:	f000 8086 	beq.w	800c158 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c07a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c082:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c08e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1da      	bne.n	800c04c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3308      	adds	r3, #8
 800c09c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0a8:	f023 0301 	bic.w	r3, r3, #1
 800c0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c0ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c0be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c0c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0c6:	e841 2300 	strex	r3, r2, [r1]
 800c0ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c0cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1e1      	bne.n	800c096 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c0f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e3      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c128:	f023 0310 	bic.w	r3, r3, #16
 800c12c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c13a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c13c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e4      	bne.n	800c118 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c152:	4618      	mov	r0, r3
 800c154:	f7f7 fc92 	bl	8003a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	b29b      	uxth	r3, r3
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f8c2 	bl	800c2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c178:	e0a4      	b.n	800c2c4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c186:	b29b      	uxth	r3, r3
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c194:	b29b      	uxth	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8096 	beq.w	800c2c8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c19c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 8091 	beq.w	800c2c8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ae:	e853 3f00 	ldrex	r3, [r3]
 800c1b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c1ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e4      	bne.n	800c1a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	623b      	str	r3, [r7, #32]
   return(result);
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c200:	633a      	str	r2, [r7, #48]	@ 0x30
 800c202:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c208:	e841 2300 	strex	r3, r2, [r1]
 800c20c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e3      	bne.n	800c1dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2220      	movs	r2, #32
 800c218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	e853 3f00 	ldrex	r3, [r3]
 800c234:	60fb      	str	r3, [r7, #12]
   return(result);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f023 0310 	bic.w	r3, r3, #16
 800c23c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c24a:	61fb      	str	r3, [r7, #28]
 800c24c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	69b9      	ldr	r1, [r7, #24]
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	617b      	str	r3, [r7, #20]
   return(result);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e4      	bne.n	800c228 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2202      	movs	r2, #2
 800c262:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f846 	bl	800c2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c270:	e02a      	b.n	800c2c8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00e      	beq.n	800c29c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c286:	2b00      	cmp	r3, #0
 800c288:	d008      	beq.n	800c29c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d01c      	beq.n	800c2cc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
    }
    return;
 800c29a:	e017      	b.n	800c2cc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <HAL_UART_IRQHandler+0x59e>
 800c2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00c      	beq.n	800c2ce <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc71 	bl	800cb9c <UART_EndTransmit_IT>
    return;
 800c2ba:	e008      	b.n	800c2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800c2bc:	bf00      	nop
 800c2be:	e006      	b.n	800c2ce <HAL_UART_IRQHandler+0x59e>
    return;
 800c2c0:	bf00      	nop
 800c2c2:	e004      	b.n	800c2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800c2c4:	bf00      	nop
 800c2c6:	e002      	b.n	800c2ce <HAL_UART_IRQHandler+0x59e>
      return;
 800c2c8:	bf00      	nop
 800c2ca:	e000      	b.n	800c2ce <HAL_UART_IRQHandler+0x59e>
    return;
 800c2cc:	bf00      	nop
  }

}
 800c2ce:	37e8      	adds	r7, #232	@ 0xe8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689a      	ldr	r2, [r3, #8]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	4313      	orrs	r3, r2
 800c336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	4ba6      	ldr	r3, [pc, #664]	@ (800c5d8 <UART_SetConfig+0x2c4>)
 800c340:	4013      	ands	r3, r2
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6812      	ldr	r2, [r2, #0]
 800c346:	6979      	ldr	r1, [r7, #20]
 800c348:	430b      	orrs	r3, r1
 800c34a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	430a      	orrs	r2, r1
 800c384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a94      	ldr	r2, [pc, #592]	@ (800c5dc <UART_SetConfig+0x2c8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d120      	bne.n	800c3d2 <UART_SetConfig+0xbe>
 800c390:	4b93      	ldr	r3, [pc, #588]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c396:	f003 0303 	and.w	r3, r3, #3
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d816      	bhi.n	800c3cc <UART_SetConfig+0xb8>
 800c39e:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a4 <UART_SetConfig+0x90>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3b5 	.word	0x0800c3b5
 800c3a8:	0800c3c1 	.word	0x0800c3c1
 800c3ac:	0800c3bb 	.word	0x0800c3bb
 800c3b0:	0800c3c7 	.word	0x0800c3c7
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	77fb      	strb	r3, [r7, #31]
 800c3b8:	e150      	b.n	800c65c <UART_SetConfig+0x348>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	77fb      	strb	r3, [r7, #31]
 800c3be:	e14d      	b.n	800c65c <UART_SetConfig+0x348>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	77fb      	strb	r3, [r7, #31]
 800c3c4:	e14a      	b.n	800c65c <UART_SetConfig+0x348>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	77fb      	strb	r3, [r7, #31]
 800c3ca:	e147      	b.n	800c65c <UART_SetConfig+0x348>
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	77fb      	strb	r3, [r7, #31]
 800c3d0:	e144      	b.n	800c65c <UART_SetConfig+0x348>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a83      	ldr	r2, [pc, #524]	@ (800c5e4 <UART_SetConfig+0x2d0>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d132      	bne.n	800c442 <UART_SetConfig+0x12e>
 800c3dc:	4b80      	ldr	r3, [pc, #512]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3e2:	f003 030c 	and.w	r3, r3, #12
 800c3e6:	2b0c      	cmp	r3, #12
 800c3e8:	d828      	bhi.n	800c43c <UART_SetConfig+0x128>
 800c3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f0 <UART_SetConfig+0xdc>)
 800c3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f0:	0800c425 	.word	0x0800c425
 800c3f4:	0800c43d 	.word	0x0800c43d
 800c3f8:	0800c43d 	.word	0x0800c43d
 800c3fc:	0800c43d 	.word	0x0800c43d
 800c400:	0800c431 	.word	0x0800c431
 800c404:	0800c43d 	.word	0x0800c43d
 800c408:	0800c43d 	.word	0x0800c43d
 800c40c:	0800c43d 	.word	0x0800c43d
 800c410:	0800c42b 	.word	0x0800c42b
 800c414:	0800c43d 	.word	0x0800c43d
 800c418:	0800c43d 	.word	0x0800c43d
 800c41c:	0800c43d 	.word	0x0800c43d
 800c420:	0800c437 	.word	0x0800c437
 800c424:	2300      	movs	r3, #0
 800c426:	77fb      	strb	r3, [r7, #31]
 800c428:	e118      	b.n	800c65c <UART_SetConfig+0x348>
 800c42a:	2302      	movs	r3, #2
 800c42c:	77fb      	strb	r3, [r7, #31]
 800c42e:	e115      	b.n	800c65c <UART_SetConfig+0x348>
 800c430:	2304      	movs	r3, #4
 800c432:	77fb      	strb	r3, [r7, #31]
 800c434:	e112      	b.n	800c65c <UART_SetConfig+0x348>
 800c436:	2308      	movs	r3, #8
 800c438:	77fb      	strb	r3, [r7, #31]
 800c43a:	e10f      	b.n	800c65c <UART_SetConfig+0x348>
 800c43c:	2310      	movs	r3, #16
 800c43e:	77fb      	strb	r3, [r7, #31]
 800c440:	e10c      	b.n	800c65c <UART_SetConfig+0x348>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a68      	ldr	r2, [pc, #416]	@ (800c5e8 <UART_SetConfig+0x2d4>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d120      	bne.n	800c48e <UART_SetConfig+0x17a>
 800c44c:	4b64      	ldr	r3, [pc, #400]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c452:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c456:	2b30      	cmp	r3, #48	@ 0x30
 800c458:	d013      	beq.n	800c482 <UART_SetConfig+0x16e>
 800c45a:	2b30      	cmp	r3, #48	@ 0x30
 800c45c:	d814      	bhi.n	800c488 <UART_SetConfig+0x174>
 800c45e:	2b20      	cmp	r3, #32
 800c460:	d009      	beq.n	800c476 <UART_SetConfig+0x162>
 800c462:	2b20      	cmp	r3, #32
 800c464:	d810      	bhi.n	800c488 <UART_SetConfig+0x174>
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <UART_SetConfig+0x15c>
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d006      	beq.n	800c47c <UART_SetConfig+0x168>
 800c46e:	e00b      	b.n	800c488 <UART_SetConfig+0x174>
 800c470:	2300      	movs	r3, #0
 800c472:	77fb      	strb	r3, [r7, #31]
 800c474:	e0f2      	b.n	800c65c <UART_SetConfig+0x348>
 800c476:	2302      	movs	r3, #2
 800c478:	77fb      	strb	r3, [r7, #31]
 800c47a:	e0ef      	b.n	800c65c <UART_SetConfig+0x348>
 800c47c:	2304      	movs	r3, #4
 800c47e:	77fb      	strb	r3, [r7, #31]
 800c480:	e0ec      	b.n	800c65c <UART_SetConfig+0x348>
 800c482:	2308      	movs	r3, #8
 800c484:	77fb      	strb	r3, [r7, #31]
 800c486:	e0e9      	b.n	800c65c <UART_SetConfig+0x348>
 800c488:	2310      	movs	r3, #16
 800c48a:	77fb      	strb	r3, [r7, #31]
 800c48c:	e0e6      	b.n	800c65c <UART_SetConfig+0x348>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a56      	ldr	r2, [pc, #344]	@ (800c5ec <UART_SetConfig+0x2d8>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d120      	bne.n	800c4da <UART_SetConfig+0x1c6>
 800c498:	4b51      	ldr	r3, [pc, #324]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4a4:	d013      	beq.n	800c4ce <UART_SetConfig+0x1ba>
 800c4a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4a8:	d814      	bhi.n	800c4d4 <UART_SetConfig+0x1c0>
 800c4aa:	2b80      	cmp	r3, #128	@ 0x80
 800c4ac:	d009      	beq.n	800c4c2 <UART_SetConfig+0x1ae>
 800c4ae:	2b80      	cmp	r3, #128	@ 0x80
 800c4b0:	d810      	bhi.n	800c4d4 <UART_SetConfig+0x1c0>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <UART_SetConfig+0x1a8>
 800c4b6:	2b40      	cmp	r3, #64	@ 0x40
 800c4b8:	d006      	beq.n	800c4c8 <UART_SetConfig+0x1b4>
 800c4ba:	e00b      	b.n	800c4d4 <UART_SetConfig+0x1c0>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	77fb      	strb	r3, [r7, #31]
 800c4c0:	e0cc      	b.n	800c65c <UART_SetConfig+0x348>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	77fb      	strb	r3, [r7, #31]
 800c4c6:	e0c9      	b.n	800c65c <UART_SetConfig+0x348>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	77fb      	strb	r3, [r7, #31]
 800c4cc:	e0c6      	b.n	800c65c <UART_SetConfig+0x348>
 800c4ce:	2308      	movs	r3, #8
 800c4d0:	77fb      	strb	r3, [r7, #31]
 800c4d2:	e0c3      	b.n	800c65c <UART_SetConfig+0x348>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	77fb      	strb	r3, [r7, #31]
 800c4d8:	e0c0      	b.n	800c65c <UART_SetConfig+0x348>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a44      	ldr	r2, [pc, #272]	@ (800c5f0 <UART_SetConfig+0x2dc>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d125      	bne.n	800c530 <UART_SetConfig+0x21c>
 800c4e4:	4b3e      	ldr	r3, [pc, #248]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4f2:	d017      	beq.n	800c524 <UART_SetConfig+0x210>
 800c4f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4f8:	d817      	bhi.n	800c52a <UART_SetConfig+0x216>
 800c4fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4fe:	d00b      	beq.n	800c518 <UART_SetConfig+0x204>
 800c500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c504:	d811      	bhi.n	800c52a <UART_SetConfig+0x216>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <UART_SetConfig+0x1fe>
 800c50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c50e:	d006      	beq.n	800c51e <UART_SetConfig+0x20a>
 800c510:	e00b      	b.n	800c52a <UART_SetConfig+0x216>
 800c512:	2300      	movs	r3, #0
 800c514:	77fb      	strb	r3, [r7, #31]
 800c516:	e0a1      	b.n	800c65c <UART_SetConfig+0x348>
 800c518:	2302      	movs	r3, #2
 800c51a:	77fb      	strb	r3, [r7, #31]
 800c51c:	e09e      	b.n	800c65c <UART_SetConfig+0x348>
 800c51e:	2304      	movs	r3, #4
 800c520:	77fb      	strb	r3, [r7, #31]
 800c522:	e09b      	b.n	800c65c <UART_SetConfig+0x348>
 800c524:	2308      	movs	r3, #8
 800c526:	77fb      	strb	r3, [r7, #31]
 800c528:	e098      	b.n	800c65c <UART_SetConfig+0x348>
 800c52a:	2310      	movs	r3, #16
 800c52c:	77fb      	strb	r3, [r7, #31]
 800c52e:	e095      	b.n	800c65c <UART_SetConfig+0x348>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a2f      	ldr	r2, [pc, #188]	@ (800c5f4 <UART_SetConfig+0x2e0>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d125      	bne.n	800c586 <UART_SetConfig+0x272>
 800c53a:	4b29      	ldr	r3, [pc, #164]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c548:	d017      	beq.n	800c57a <UART_SetConfig+0x266>
 800c54a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c54e:	d817      	bhi.n	800c580 <UART_SetConfig+0x26c>
 800c550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c554:	d00b      	beq.n	800c56e <UART_SetConfig+0x25a>
 800c556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c55a:	d811      	bhi.n	800c580 <UART_SetConfig+0x26c>
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <UART_SetConfig+0x254>
 800c560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c564:	d006      	beq.n	800c574 <UART_SetConfig+0x260>
 800c566:	e00b      	b.n	800c580 <UART_SetConfig+0x26c>
 800c568:	2301      	movs	r3, #1
 800c56a:	77fb      	strb	r3, [r7, #31]
 800c56c:	e076      	b.n	800c65c <UART_SetConfig+0x348>
 800c56e:	2302      	movs	r3, #2
 800c570:	77fb      	strb	r3, [r7, #31]
 800c572:	e073      	b.n	800c65c <UART_SetConfig+0x348>
 800c574:	2304      	movs	r3, #4
 800c576:	77fb      	strb	r3, [r7, #31]
 800c578:	e070      	b.n	800c65c <UART_SetConfig+0x348>
 800c57a:	2308      	movs	r3, #8
 800c57c:	77fb      	strb	r3, [r7, #31]
 800c57e:	e06d      	b.n	800c65c <UART_SetConfig+0x348>
 800c580:	2310      	movs	r3, #16
 800c582:	77fb      	strb	r3, [r7, #31]
 800c584:	e06a      	b.n	800c65c <UART_SetConfig+0x348>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5f8 <UART_SetConfig+0x2e4>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d138      	bne.n	800c602 <UART_SetConfig+0x2ee>
 800c590:	4b13      	ldr	r3, [pc, #76]	@ (800c5e0 <UART_SetConfig+0x2cc>)
 800c592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c596:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c59a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c59e:	d017      	beq.n	800c5d0 <UART_SetConfig+0x2bc>
 800c5a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c5a4:	d82a      	bhi.n	800c5fc <UART_SetConfig+0x2e8>
 800c5a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5aa:	d00b      	beq.n	800c5c4 <UART_SetConfig+0x2b0>
 800c5ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5b0:	d824      	bhi.n	800c5fc <UART_SetConfig+0x2e8>
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d003      	beq.n	800c5be <UART_SetConfig+0x2aa>
 800c5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ba:	d006      	beq.n	800c5ca <UART_SetConfig+0x2b6>
 800c5bc:	e01e      	b.n	800c5fc <UART_SetConfig+0x2e8>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	77fb      	strb	r3, [r7, #31]
 800c5c2:	e04b      	b.n	800c65c <UART_SetConfig+0x348>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	77fb      	strb	r3, [r7, #31]
 800c5c8:	e048      	b.n	800c65c <UART_SetConfig+0x348>
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	77fb      	strb	r3, [r7, #31]
 800c5ce:	e045      	b.n	800c65c <UART_SetConfig+0x348>
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	77fb      	strb	r3, [r7, #31]
 800c5d4:	e042      	b.n	800c65c <UART_SetConfig+0x348>
 800c5d6:	bf00      	nop
 800c5d8:	efff69f3 	.word	0xefff69f3
 800c5dc:	40011000 	.word	0x40011000
 800c5e0:	40023800 	.word	0x40023800
 800c5e4:	40004400 	.word	0x40004400
 800c5e8:	40004800 	.word	0x40004800
 800c5ec:	40004c00 	.word	0x40004c00
 800c5f0:	40005000 	.word	0x40005000
 800c5f4:	40011400 	.word	0x40011400
 800c5f8:	40007800 	.word	0x40007800
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	77fb      	strb	r3, [r7, #31]
 800c600:	e02c      	b.n	800c65c <UART_SetConfig+0x348>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a72      	ldr	r2, [pc, #456]	@ (800c7d0 <UART_SetConfig+0x4bc>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d125      	bne.n	800c658 <UART_SetConfig+0x344>
 800c60c:	4b71      	ldr	r3, [pc, #452]	@ (800c7d4 <UART_SetConfig+0x4c0>)
 800c60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c612:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c616:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c61a:	d017      	beq.n	800c64c <UART_SetConfig+0x338>
 800c61c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c620:	d817      	bhi.n	800c652 <UART_SetConfig+0x33e>
 800c622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c626:	d00b      	beq.n	800c640 <UART_SetConfig+0x32c>
 800c628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c62c:	d811      	bhi.n	800c652 <UART_SetConfig+0x33e>
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <UART_SetConfig+0x326>
 800c632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c636:	d006      	beq.n	800c646 <UART_SetConfig+0x332>
 800c638:	e00b      	b.n	800c652 <UART_SetConfig+0x33e>
 800c63a:	2300      	movs	r3, #0
 800c63c:	77fb      	strb	r3, [r7, #31]
 800c63e:	e00d      	b.n	800c65c <UART_SetConfig+0x348>
 800c640:	2302      	movs	r3, #2
 800c642:	77fb      	strb	r3, [r7, #31]
 800c644:	e00a      	b.n	800c65c <UART_SetConfig+0x348>
 800c646:	2304      	movs	r3, #4
 800c648:	77fb      	strb	r3, [r7, #31]
 800c64a:	e007      	b.n	800c65c <UART_SetConfig+0x348>
 800c64c:	2308      	movs	r3, #8
 800c64e:	77fb      	strb	r3, [r7, #31]
 800c650:	e004      	b.n	800c65c <UART_SetConfig+0x348>
 800c652:	2310      	movs	r3, #16
 800c654:	77fb      	strb	r3, [r7, #31]
 800c656:	e001      	b.n	800c65c <UART_SetConfig+0x348>
 800c658:	2310      	movs	r3, #16
 800c65a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	69db      	ldr	r3, [r3, #28]
 800c660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c664:	d15b      	bne.n	800c71e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c666:	7ffb      	ldrb	r3, [r7, #31]
 800c668:	2b08      	cmp	r3, #8
 800c66a:	d828      	bhi.n	800c6be <UART_SetConfig+0x3aa>
 800c66c:	a201      	add	r2, pc, #4	@ (adr r2, 800c674 <UART_SetConfig+0x360>)
 800c66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c672:	bf00      	nop
 800c674:	0800c699 	.word	0x0800c699
 800c678:	0800c6a1 	.word	0x0800c6a1
 800c67c:	0800c6a9 	.word	0x0800c6a9
 800c680:	0800c6bf 	.word	0x0800c6bf
 800c684:	0800c6af 	.word	0x0800c6af
 800c688:	0800c6bf 	.word	0x0800c6bf
 800c68c:	0800c6bf 	.word	0x0800c6bf
 800c690:	0800c6bf 	.word	0x0800c6bf
 800c694:	0800c6b7 	.word	0x0800c6b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c698:	f7fb fd2a 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800c69c:	61b8      	str	r0, [r7, #24]
        break;
 800c69e:	e013      	b.n	800c6c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6a0:	f7fb fd3a 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 800c6a4:	61b8      	str	r0, [r7, #24]
        break;
 800c6a6:	e00f      	b.n	800c6c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6a8:	4b4b      	ldr	r3, [pc, #300]	@ (800c7d8 <UART_SetConfig+0x4c4>)
 800c6aa:	61bb      	str	r3, [r7, #24]
        break;
 800c6ac:	e00c      	b.n	800c6c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6ae:	f7fb fc4d 	bl	8007f4c <HAL_RCC_GetSysClockFreq>
 800c6b2:	61b8      	str	r0, [r7, #24]
        break;
 800c6b4:	e008      	b.n	800c6c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6ba:	61bb      	str	r3, [r7, #24]
        break;
 800c6bc:	e004      	b.n	800c6c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	77bb      	strb	r3, [r7, #30]
        break;
 800c6c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d074      	beq.n	800c7b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	005a      	lsls	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	441a      	add	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b0f      	cmp	r3, #15
 800c6e8:	d916      	bls.n	800c718 <UART_SetConfig+0x404>
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6f0:	d212      	bcs.n	800c718 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	f023 030f 	bic.w	r3, r3, #15
 800c6fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	085b      	lsrs	r3, r3, #1
 800c700:	b29b      	uxth	r3, r3
 800c702:	f003 0307 	and.w	r3, r3, #7
 800c706:	b29a      	uxth	r2, r3
 800c708:	89fb      	ldrh	r3, [r7, #14]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	89fa      	ldrh	r2, [r7, #14]
 800c714:	60da      	str	r2, [r3, #12]
 800c716:	e04f      	b.n	800c7b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	77bb      	strb	r3, [r7, #30]
 800c71c:	e04c      	b.n	800c7b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c71e:	7ffb      	ldrb	r3, [r7, #31]
 800c720:	2b08      	cmp	r3, #8
 800c722:	d828      	bhi.n	800c776 <UART_SetConfig+0x462>
 800c724:	a201      	add	r2, pc, #4	@ (adr r2, 800c72c <UART_SetConfig+0x418>)
 800c726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72a:	bf00      	nop
 800c72c:	0800c751 	.word	0x0800c751
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c761 	.word	0x0800c761
 800c738:	0800c777 	.word	0x0800c777
 800c73c:	0800c767 	.word	0x0800c767
 800c740:	0800c777 	.word	0x0800c777
 800c744:	0800c777 	.word	0x0800c777
 800c748:	0800c777 	.word	0x0800c777
 800c74c:	0800c76f 	.word	0x0800c76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c750:	f7fb fcce 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800c754:	61b8      	str	r0, [r7, #24]
        break;
 800c756:	e013      	b.n	800c780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c758:	f7fb fcde 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 800c75c:	61b8      	str	r0, [r7, #24]
        break;
 800c75e:	e00f      	b.n	800c780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c760:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d8 <UART_SetConfig+0x4c4>)
 800c762:	61bb      	str	r3, [r7, #24]
        break;
 800c764:	e00c      	b.n	800c780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c766:	f7fb fbf1 	bl	8007f4c <HAL_RCC_GetSysClockFreq>
 800c76a:	61b8      	str	r0, [r7, #24]
        break;
 800c76c:	e008      	b.n	800c780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c772:	61bb      	str	r3, [r7, #24]
        break;
 800c774:	e004      	b.n	800c780 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c776:	2300      	movs	r3, #0
 800c778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	77bb      	strb	r3, [r7, #30]
        break;
 800c77e:	bf00      	nop
    }

    if (pclk != 0U)
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d018      	beq.n	800c7b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	085a      	lsrs	r2, r3, #1
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	441a      	add	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	fbb2 f3f3 	udiv	r3, r2, r3
 800c798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	2b0f      	cmp	r3, #15
 800c79e:	d909      	bls.n	800c7b4 <UART_SetConfig+0x4a0>
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7a6:	d205      	bcs.n	800c7b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60da      	str	r2, [r3, #12]
 800c7b2:	e001      	b.n	800c7b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c7c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3720      	adds	r7, #32
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	40007c00 	.word	0x40007c00
 800c7d4:	40023800 	.word	0x40023800
 800c7d8:	00f42400 	.word	0x00f42400

0800c7dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e8:	f003 0308 	and.w	r3, r3, #8
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00a      	beq.n	800c806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	430a      	orrs	r2, r1
 800c804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00a      	beq.n	800c828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00a      	beq.n	800c84a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84e:	f003 0304 	and.w	r3, r3, #4
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00a      	beq.n	800c86c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c870:	f003 0310 	and.w	r3, r3, #16
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00a      	beq.n	800c88e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	430a      	orrs	r2, r1
 800c88c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01a      	beq.n	800c8f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8da:	d10a      	bne.n	800c8f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00a      	beq.n	800c914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	430a      	orrs	r2, r1
 800c912:	605a      	str	r2, [r3, #4]
  }
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08c      	sub	sp, #48	@ 0x30
 800c924:	af02      	add	r7, sp, #8
 800c926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c930:	f7f6 fb32 	bl	8002f98 <HAL_GetTick>
 800c934:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0308 	and.w	r3, r3, #8
 800c940:	2b08      	cmp	r3, #8
 800c942:	d12e      	bne.n	800c9a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	2200      	movs	r2, #0
 800c94e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f83b 	bl	800c9ce <UART_WaitOnFlagUntilTimeout>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d021      	beq.n	800c9a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	e853 3f00 	ldrex	r3, [r3]
 800c96a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c972:	623b      	str	r3, [r7, #32]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	61fb      	str	r3, [r7, #28]
 800c97e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c980:	69b9      	ldr	r1, [r7, #24]
 800c982:	69fa      	ldr	r2, [r7, #28]
 800c984:	e841 2300 	strex	r3, r2, [r1]
 800c988:	617b      	str	r3, [r7, #20]
   return(result);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e6      	bne.n	800c95e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2220      	movs	r2, #32
 800c994:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e011      	b.n	800c9c6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3728      	adds	r7, #40	@ 0x28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	60f8      	str	r0, [r7, #12]
 800c9d6:	60b9      	str	r1, [r7, #8]
 800c9d8:	603b      	str	r3, [r7, #0]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9de:	e04f      	b.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e6:	d04b      	beq.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9e8:	f7f6 fad6 	bl	8002f98 <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	69ba      	ldr	r2, [r7, #24]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d302      	bcc.n	800c9fe <UART_WaitOnFlagUntilTimeout+0x30>
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e04e      	b.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d037      	beq.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b80      	cmp	r3, #128	@ 0x80
 800ca14:	d034      	beq.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b40      	cmp	r3, #64	@ 0x40
 800ca1a:	d031      	beq.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	f003 0308 	and.w	r3, r3, #8
 800ca26:	2b08      	cmp	r3, #8
 800ca28:	d110      	bne.n	800ca4c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2208      	movs	r2, #8
 800ca30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 f838 	bl	800caa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2208      	movs	r2, #8
 800ca3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e029      	b.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca5a:	d111      	bne.n	800ca80 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f000 f81e 	bl	800caa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2220      	movs	r2, #32
 800ca70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e00f      	b.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	69da      	ldr	r2, [r3, #28]
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	4013      	ands	r3, r2
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	bf0c      	ite	eq
 800ca90:	2301      	moveq	r3, #1
 800ca92:	2300      	movne	r3, #0
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	461a      	mov	r2, r3
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d0a0      	beq.n	800c9e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b095      	sub	sp, #84	@ 0x54
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cace:	643b      	str	r3, [r7, #64]	@ 0x40
 800cad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e6      	bne.n	800cab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3308      	adds	r3, #8
 800cae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	e853 3f00 	ldrex	r3, [r3]
 800caf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	f023 0301 	bic.w	r3, r3, #1
 800caf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3308      	adds	r3, #8
 800cb00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb0a:	e841 2300 	strex	r3, r2, [r1]
 800cb0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1e5      	bne.n	800cae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d118      	bne.n	800cb50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	f023 0310 	bic.w	r3, r3, #16
 800cb32:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb3c:	61bb      	str	r3, [r7, #24]
 800cb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6979      	ldr	r1, [r7, #20]
 800cb42:	69ba      	ldr	r2, [r7, #24]
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	613b      	str	r3, [r7, #16]
   return(result);
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e6      	bne.n	800cb1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cb64:	bf00      	nop
 800cb66:	3754      	adds	r7, #84	@ 0x54
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7ff fbaa 	bl	800c2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb94:	bf00      	nop
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	61bb      	str	r3, [r7, #24]
 800cbc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6979      	ldr	r1, [r7, #20]
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e6      	bne.n	800cba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7ff fb76 	bl	800c2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbe8:	bf00      	nop
 800cbea:	3720      	adds	r7, #32
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d121      	bne.n	800cc46 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	4b27      	ldr	r3, [pc, #156]	@ (800cca4 <FMC_SDRAM_Init+0xb4>)
 800cc08:	4013      	ands	r3, r2
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	6851      	ldr	r1, [r2, #4]
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	6892      	ldr	r2, [r2, #8]
 800cc12:	4311      	orrs	r1, r2
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	68d2      	ldr	r2, [r2, #12]
 800cc18:	4311      	orrs	r1, r2
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	6912      	ldr	r2, [r2, #16]
 800cc1e:	4311      	orrs	r1, r2
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	6952      	ldr	r2, [r2, #20]
 800cc24:	4311      	orrs	r1, r2
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	6992      	ldr	r2, [r2, #24]
 800cc2a:	4311      	orrs	r1, r2
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	69d2      	ldr	r2, [r2, #28]
 800cc30:	4311      	orrs	r1, r2
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	6a12      	ldr	r2, [r2, #32]
 800cc36:	4311      	orrs	r1, r2
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	e026      	b.n	800cc94 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	69d9      	ldr	r1, [r3, #28]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	4319      	orrs	r1, r3
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc5c:	430b      	orrs	r3, r1
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	4b0e      	ldr	r3, [pc, #56]	@ (800cca4 <FMC_SDRAM_Init+0xb4>)
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	6851      	ldr	r1, [r2, #4]
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	6892      	ldr	r2, [r2, #8]
 800cc74:	4311      	orrs	r1, r2
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	68d2      	ldr	r2, [r2, #12]
 800cc7a:	4311      	orrs	r1, r2
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	6912      	ldr	r2, [r2, #16]
 800cc80:	4311      	orrs	r1, r2
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	6952      	ldr	r2, [r2, #20]
 800cc86:	4311      	orrs	r1, r2
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	6992      	ldr	r2, [r2, #24]
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	ffff8000 	.word	0xffff8000

0800cca8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d128      	bne.n	800cd0c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	1e59      	subs	r1, r3, #1
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	4319      	orrs	r1, r3
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	021b      	lsls	r3, r3, #8
 800ccda:	4319      	orrs	r1, r3
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	031b      	lsls	r3, r3, #12
 800cce4:	4319      	orrs	r1, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	041b      	lsls	r3, r3, #16
 800ccee:	4319      	orrs	r1, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	051b      	lsls	r3, r3, #20
 800ccf8:	4319      	orrs	r1, r3
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	061b      	lsls	r3, r3, #24
 800cd02:	430b      	orrs	r3, r1
 800cd04:	431a      	orrs	r2, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	609a      	str	r2, [r3, #8]
 800cd0a:	e02d      	b.n	800cd68 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	4b19      	ldr	r3, [pc, #100]	@ (800cd78 <FMC_SDRAM_Timing_Init+0xd0>)
 800cd12:	4013      	ands	r3, r2
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	68d2      	ldr	r2, [r2, #12]
 800cd18:	3a01      	subs	r2, #1
 800cd1a:	0311      	lsls	r1, r2, #12
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	6952      	ldr	r2, [r2, #20]
 800cd20:	3a01      	subs	r2, #1
 800cd22:	0512      	lsls	r2, r2, #20
 800cd24:	430a      	orrs	r2, r1
 800cd26:	431a      	orrs	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	1e59      	subs	r1, r3, #1
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	011b      	lsls	r3, r3, #4
 800cd42:	4319      	orrs	r1, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	021b      	lsls	r3, r3, #8
 800cd4c:	4319      	orrs	r1, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	041b      	lsls	r3, r3, #16
 800cd56:	4319      	orrs	r1, r3
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	061b      	lsls	r3, r3, #24
 800cd60:	430b      	orrs	r3, r1
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	ff0f0fff 	.word	0xff0f0fff

0800cd7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	b480      	push	{r7}
 800cd80:	b085      	sub	sp, #20
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	f107 001c 	add.w	r0, r7, #28
 800cd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cd92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cd94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cd96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cd9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cd9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cda2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cda6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <SDMMC_Init+0x54>)
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	431a      	orrs	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	b004      	add	sp, #16
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	ffff8100 	.word	0xffff8100

0800cdd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800cdee:	b480      	push	{r7}
 800cdf0:	b083      	sub	sp, #12
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2203      	movs	r2, #3
 800cdfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b083      	sub	sp, #12
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 0303 	and.w	r3, r3, #3
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ce52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68da      	ldr	r2, [r3, #12]
 800ce5e:	4b06      	ldr	r3, [pc, #24]	@ (800ce78 <SDMMC_SendCommand+0x50>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	fffff000 	.word	0xfffff000

0800ce7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	b2db      	uxtb	r3, r3
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b085      	sub	sp, #20
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3314      	adds	r3, #20
 800cea4:	461a      	mov	r2, r3
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	4413      	add	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
}  
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cee2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cee8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ceee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cefa:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	431a      	orrs	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cf06:	2300      	movs	r3, #0

}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf22:	2310      	movs	r3, #16
 800cf24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf26:	2340      	movs	r3, #64	@ 0x40
 800cf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf34:	f107 0308 	add.w	r3, r7, #8
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ff74 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf44:	2110      	movs	r1, #16
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa1a 	bl	800d380 <SDMMC_GetCmdResp1>
 800cf4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3720      	adds	r7, #32
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf66:	2311      	movs	r3, #17
 800cf68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf6a:	2340      	movs	r3, #64	@ 0x40
 800cf6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf78:	f107 0308 	add.w	r3, r7, #8
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff ff52 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cf84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf88:	2111      	movs	r1, #17
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f9f8 	bl	800d380 <SDMMC_GetCmdResp1>
 800cf90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf92:	69fb      	ldr	r3, [r7, #28]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3720      	adds	r7, #32
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cfaa:	2312      	movs	r3, #18
 800cfac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfae:	2340      	movs	r3, #64	@ 0x40
 800cfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfbc:	f107 0308 	add.w	r3, r7, #8
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ff30 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cfc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfcc:	2112      	movs	r1, #18
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f9d6 	bl	800d380 <SDMMC_GetCmdResp1>
 800cfd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3720      	adds	r7, #32
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cfee:	2318      	movs	r3, #24
 800cff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cff2:	2340      	movs	r3, #64	@ 0x40
 800cff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d000:	f107 0308 	add.w	r3, r7, #8
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7ff ff0e 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d00c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d010:	2118      	movs	r1, #24
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f9b4 	bl	800d380 <SDMMC_GetCmdResp1>
 800d018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d01a:	69fb      	ldr	r3, [r7, #28]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d032:	2319      	movs	r3, #25
 800d034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d036:	2340      	movs	r3, #64	@ 0x40
 800d038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d03a:	2300      	movs	r3, #0
 800d03c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d044:	f107 0308 	add.w	r3, r7, #8
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff feec 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d050:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d054:	2119      	movs	r1, #25
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f992 	bl	800d380 <SDMMC_GetCmdResp1>
 800d05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d05e:	69fb      	ldr	r3, [r7, #28]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d070:	2300      	movs	r3, #0
 800d072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d074:	230c      	movs	r3, #12
 800d076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d078:	2340      	movs	r3, #64	@ 0x40
 800d07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d07c:	2300      	movs	r3, #0
 800d07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d086:	f107 0308 	add.w	r3, r7, #8
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7ff fecb 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d092:	4a05      	ldr	r2, [pc, #20]	@ (800d0a8 <SDMMC_CmdStopTransfer+0x40>)
 800d094:	210c      	movs	r1, #12
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f972 	bl	800d380 <SDMMC_GetCmdResp1>
 800d09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d09e:	69fb      	ldr	r3, [r7, #28]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3720      	adds	r7, #32
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	05f5e100 	.word	0x05f5e100

0800d0ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	@ 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d0bc:	2307      	movs	r3, #7
 800d0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0c0:	2340      	movs	r3, #64	@ 0x40
 800d0c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ce:	f107 0310 	add.w	r3, r7, #16
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f7ff fea7 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d0da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0de:	2107      	movs	r1, #7
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 f94d 	bl	800d380 <SDMMC_GetCmdResp1>
 800d0e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3728      	adds	r7, #40	@ 0x28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b088      	sub	sp, #32
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d102:	2300      	movs	r3, #0
 800d104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d106:	2300      	movs	r3, #0
 800d108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d110:	f107 0308 	add.w	r3, r7, #8
 800d114:	4619      	mov	r1, r3
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff fe86 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fb67 	bl	800d7f0 <SDMMC_GetCmdError>
 800d122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d124:	69fb      	ldr	r3, [r7, #28]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b088      	sub	sp, #32
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d136:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d13c:	2308      	movs	r3, #8
 800d13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d140:	2340      	movs	r3, #64	@ 0x40
 800d142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d144:	2300      	movs	r3, #0
 800d146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d14c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d14e:	f107 0308 	add.w	r3, r7, #8
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff fe67 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fafa 	bl	800d754 <SDMMC_GetCmdResp7>
 800d160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d162:	69fb      	ldr	r3, [r7, #28]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d17a:	2337      	movs	r3, #55	@ 0x37
 800d17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d17e:	2340      	movs	r3, #64	@ 0x40
 800d180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d182:	2300      	movs	r3, #0
 800d184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d18a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d18c:	f107 0308 	add.w	r3, r7, #8
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff fe48 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d19c:	2137      	movs	r1, #55	@ 0x37
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f8ee 	bl	800d380 <SDMMC_GetCmdResp1>
 800d1a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a6:	69fb      	ldr	r3, [r7, #28]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3720      	adds	r7, #32
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f4 <SDMMC_CmdAppOperCommand+0x44>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d1c2:	2329      	movs	r3, #41	@ 0x29
 800d1c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1c6:	2340      	movs	r3, #64	@ 0x40
 800d1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1d4:	f107 0308 	add.w	r3, r7, #8
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fe24 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa03 	bl	800d5ec <SDMMC_GetCmdResp3>
 800d1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3720      	adds	r7, #32
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	80100000 	.word	0x80100000

0800d1f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b088      	sub	sp, #32
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d206:	2306      	movs	r3, #6
 800d208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d20a:	2340      	movs	r3, #64	@ 0x40
 800d20c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d218:	f107 0308 	add.w	r3, r7, #8
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fe02 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d224:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d228:	2106      	movs	r1, #6
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f8a8 	bl	800d380 <SDMMC_GetCmdResp1>
 800d230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d232:	69fb      	ldr	r3, [r7, #28]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d248:	2333      	movs	r3, #51	@ 0x33
 800d24a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d24c:	2340      	movs	r3, #64	@ 0x40
 800d24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d250:	2300      	movs	r3, #0
 800d252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff fde1 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d26a:	2133      	movs	r1, #51	@ 0x33
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f887 	bl	800d380 <SDMMC_GetCmdResp1>
 800d272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d274:	69fb      	ldr	r3, [r7, #28]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3720      	adds	r7, #32
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b088      	sub	sp, #32
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d28a:	2302      	movs	r3, #2
 800d28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d28e:	23c0      	movs	r3, #192	@ 0xc0
 800d290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d292:	2300      	movs	r3, #0
 800d294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d29a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d29c:	f107 0308 	add.w	r3, r7, #8
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff fdc0 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f957 	bl	800d55c <SDMMC_GetCmdResp2>
 800d2ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3720      	adds	r7, #32
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b088      	sub	sp, #32
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d2c8:	2309      	movs	r3, #9
 800d2ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2cc:	23c0      	movs	r3, #192	@ 0xc0
 800d2ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2da:	f107 0308 	add.w	r3, r7, #8
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff fda1 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f938 	bl	800d55c <SDMMC_GetCmdResp2>
 800d2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ee:	69fb      	ldr	r3, [r7, #28]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3720      	adds	r7, #32
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b088      	sub	sp, #32
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d306:	2303      	movs	r3, #3
 800d308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d30a:	2340      	movs	r3, #64	@ 0x40
 800d30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d318:	f107 0308 	add.w	r3, r7, #8
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fd82 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	2103      	movs	r1, #3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f99d 	bl	800d668 <SDMMC_GetCmdResp6>
 800d32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d330:	69fb      	ldr	r3, [r7, #28]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b088      	sub	sp, #32
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d348:	230d      	movs	r3, #13
 800d34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d34c:	2340      	movs	r3, #64	@ 0x40
 800d34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fd61 	bl	800ce28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d36a:	210d      	movs	r1, #13
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f807 	bl	800d380 <SDMMC_GetCmdResp1>
 800d372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d374:	69fb      	ldr	r3, [r7, #28]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3720      	adds	r7, #32
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	460b      	mov	r3, r1
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d38e:	4b70      	ldr	r3, [pc, #448]	@ (800d550 <SDMMC_GetCmdResp1+0x1d0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a70      	ldr	r2, [pc, #448]	@ (800d554 <SDMMC_GetCmdResp1+0x1d4>)
 800d394:	fba2 2303 	umull	r2, r3, r2, r3
 800d398:	0a5a      	lsrs	r2, r3, #9
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	fb02 f303 	mul.w	r3, r2, r3
 800d3a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	1e5a      	subs	r2, r3, #1
 800d3a6:	61fa      	str	r2, [r7, #28]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3b0:	e0c9      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0ef      	beq.n	800d3a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1ea      	bne.n	800d3a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2204      	movs	r2, #4
 800d3dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3de:	2304      	movs	r3, #4
 800d3e0:	e0b1      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e0a6      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	22c5      	movs	r2, #197	@ 0xc5
 800d3fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff fd3c 	bl	800ce7c <SDMMC_GetCommandResponse>
 800d404:	4603      	mov	r3, r0
 800d406:	461a      	mov	r2, r3
 800d408:	7afb      	ldrb	r3, [r7, #11]
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d001      	beq.n	800d412 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d40e:	2301      	movs	r3, #1
 800d410:	e099      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d412:	2100      	movs	r1, #0
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff fd3e 	bl	800ce96 <SDMMC_GetResponse>
 800d41a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	4b4e      	ldr	r3, [pc, #312]	@ (800d558 <SDMMC_GetCmdResp1+0x1d8>)
 800d420:	4013      	ands	r3, r2
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d426:	2300      	movs	r3, #0
 800d428:	e08d      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	da02      	bge.n	800d436 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d434:	e087      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d440:	2340      	movs	r3, #64	@ 0x40
 800d442:	e080      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d44e:	2380      	movs	r3, #128	@ 0x80
 800d450:	e079      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d45c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d460:	e071      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d46c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d470:	e069      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d47c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d480:	e061      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d48c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d490:	e059      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d49c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4a0:	e051      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d4b0:	e049      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d4c0:	e041      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d4cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4d0:	e039      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d4dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d4e0:	e031      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d4ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d4f0:	e029      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d4fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d500:	e021      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d50c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d510:	e019      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d51c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d520:	e011      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d52c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d530:	e009      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f003 0308 	and.w	r3, r3, #8
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d53c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d540:	e001      	b.n	800d546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	20000000 	.word	0x20000000
 800d554:	10624dd3 	.word	0x10624dd3
 800d558:	fdffe008 	.word	0xfdffe008

0800d55c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d564:	4b1f      	ldr	r3, [pc, #124]	@ (800d5e4 <SDMMC_GetCmdResp2+0x88>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a1f      	ldr	r2, [pc, #124]	@ (800d5e8 <SDMMC_GetCmdResp2+0x8c>)
 800d56a:	fba2 2303 	umull	r2, r3, r2, r3
 800d56e:	0a5b      	lsrs	r3, r3, #9
 800d570:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d574:	fb02 f303 	mul.w	r3, r2, r3
 800d578:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1e5a      	subs	r2, r3, #1
 800d57e:	60fa      	str	r2, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d584:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d588:	e026      	b.n	800d5d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d58e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0ef      	beq.n	800d57a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1ea      	bne.n	800d57a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5a8:	f003 0304 	and.w	r3, r3, #4
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5b6:	2304      	movs	r3, #4
 800d5b8:	e00e      	b.n	800d5d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d004      	beq.n	800d5d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e003      	b.n	800d5d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	22c5      	movs	r2, #197	@ 0xc5
 800d5d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr
 800d5e4:	20000000 	.word	0x20000000
 800d5e8:	10624dd3 	.word	0x10624dd3

0800d5ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d660 <SDMMC_GetCmdResp3+0x74>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a1a      	ldr	r2, [pc, #104]	@ (800d664 <SDMMC_GetCmdResp3+0x78>)
 800d5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d5fe:	0a5b      	lsrs	r3, r3, #9
 800d600:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d604:	fb02 f303 	mul.w	r3, r2, r3
 800d608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	60fa      	str	r2, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d614:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d618:	e01b      	b.n	800d652 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d61e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0ef      	beq.n	800d60a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1ea      	bne.n	800d60a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d004      	beq.n	800d64a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2204      	movs	r2, #4
 800d644:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d646:	2304      	movs	r3, #4
 800d648:	e003      	b.n	800d652 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	22c5      	movs	r2, #197	@ 0xc5
 800d64e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3714      	adds	r7, #20
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	20000000 	.word	0x20000000
 800d664:	10624dd3 	.word	0x10624dd3

0800d668 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	460b      	mov	r3, r1
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d676:	4b35      	ldr	r3, [pc, #212]	@ (800d74c <SDMMC_GetCmdResp6+0xe4>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a35      	ldr	r2, [pc, #212]	@ (800d750 <SDMMC_GetCmdResp6+0xe8>)
 800d67c:	fba2 2303 	umull	r2, r3, r2, r3
 800d680:	0a5b      	lsrs	r3, r3, #9
 800d682:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d686:	fb02 f303 	mul.w	r3, r2, r3
 800d68a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	1e5a      	subs	r2, r3, #1
 800d690:	61fa      	str	r2, [r7, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d102      	bne.n	800d69c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d696:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d69a:	e052      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d0ef      	beq.n	800d68c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1ea      	bne.n	800d68c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6ba:	f003 0304 	and.w	r3, r3, #4
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d004      	beq.n	800d6cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2204      	movs	r2, #4
 800d6c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	e03a      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e02f      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7ff fbca 	bl	800ce7c <SDMMC_GetCommandResponse>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	7afb      	ldrb	r3, [r7, #11]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d001      	beq.n	800d6f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e025      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	22c5      	movs	r2, #197	@ 0xc5
 800d6fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f7ff fbc9 	bl	800ce96 <SDMMC_GetResponse>
 800d704:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	0c1b      	lsrs	r3, r3, #16
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e011      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d72c:	e009      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d73c:	e001      	b.n	800d742 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d73e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d742:	4618      	mov	r0, r3
 800d744:	3720      	adds	r7, #32
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000000 	.word	0x20000000
 800d750:	10624dd3 	.word	0x10624dd3

0800d754 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d75c:	4b22      	ldr	r3, [pc, #136]	@ (800d7e8 <SDMMC_GetCmdResp7+0x94>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a22      	ldr	r2, [pc, #136]	@ (800d7ec <SDMMC_GetCmdResp7+0x98>)
 800d762:	fba2 2303 	umull	r2, r3, r2, r3
 800d766:	0a5b      	lsrs	r3, r3, #9
 800d768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d76c:	fb02 f303 	mul.w	r3, r2, r3
 800d770:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	1e5a      	subs	r2, r3, #1
 800d776:	60fa      	str	r2, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d102      	bne.n	800d782 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d77c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d780:	e02c      	b.n	800d7dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d786:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0ef      	beq.n	800d772 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1ea      	bne.n	800d772 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7a0:	f003 0304 	and.w	r3, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ae:	2304      	movs	r3, #4
 800d7b0:	e014      	b.n	800d7dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d004      	beq.n	800d7c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e009      	b.n	800d7dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2240      	movs	r2, #64	@ 0x40
 800d7d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d7da:	2300      	movs	r3, #0
  
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	20000000 	.word	0x20000000
 800d7ec:	10624dd3 	.word	0x10624dd3

0800d7f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7f8:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <SDMMC_GetCmdError+0x50>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a11      	ldr	r2, [pc, #68]	@ (800d844 <SDMMC_GetCmdError+0x54>)
 800d7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d802:	0a5b      	lsrs	r3, r3, #9
 800d804:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d808:	fb02 f303 	mul.w	r3, r2, r3
 800d80c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1e5a      	subs	r2, r3, #1
 800d812:	60fa      	str	r2, [r7, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d102      	bne.n	800d81e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d818:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d81c:	e009      	b.n	800d832 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d826:	2b00      	cmp	r3, #0
 800d828:	d0f1      	beq.n	800d80e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	22c5      	movs	r2, #197	@ 0xc5
 800d82e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	20000000 	.word	0x20000000
 800d844:	10624dd3 	.word	0x10624dd3

0800d848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d848:	b084      	sub	sp, #16
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	f107 001c 	add.w	r0, r7, #28
 800d856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d85a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d121      	bne.n	800d8a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d866:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68da      	ldr	r2, [r3, #12]
 800d872:	4b21      	ldr	r3, [pc, #132]	@ (800d8f8 <USB_CoreInit+0xb0>)
 800d874:	4013      	ands	r3, r2
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d105      	bne.n	800d89a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f000 f9d4 	bl	800dc48 <USB_CoreReset>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]
 800d8a4:	e010      	b.n	800d8c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f9c8 	bl	800dc48 <USB_CoreReset>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d8c8:	7fbb      	ldrb	r3, [r7, #30]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d10b      	bne.n	800d8e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f043 0206 	orr.w	r2, r3, #6
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f043 0220 	orr.w	r2, r3, #32
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8f2:	b004      	add	sp, #16
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	ffbdffbf 	.word	0xffbdffbf

0800d8fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f043 0201 	orr.w	r2, r3, #1
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d91e:	b480      	push	{r7}
 800d920:	b083      	sub	sp, #12
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	f023 0201 	bic.w	r2, r3, #1
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	460b      	mov	r3, r1
 800d94a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d115      	bne.n	800d98e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d96e:	200a      	movs	r0, #10
 800d970:	f7f5 fb1e 	bl	8002fb0 <HAL_Delay>
      ms += 10U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	330a      	adds	r3, #10
 800d978:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f956 	bl	800dc2c <USB_GetMode>
 800d980:	4603      	mov	r3, r0
 800d982:	2b01      	cmp	r3, #1
 800d984:	d01e      	beq.n	800d9c4 <USB_SetCurrentMode+0x84>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2bc7      	cmp	r3, #199	@ 0xc7
 800d98a:	d9f0      	bls.n	800d96e <USB_SetCurrentMode+0x2e>
 800d98c:	e01a      	b.n	800d9c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d98e:	78fb      	ldrb	r3, [r7, #3]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d115      	bne.n	800d9c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d9a0:	200a      	movs	r0, #10
 800d9a2:	f7f5 fb05 	bl	8002fb0 <HAL_Delay>
      ms += 10U;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	330a      	adds	r3, #10
 800d9aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f93d 	bl	800dc2c <USB_GetMode>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <USB_SetCurrentMode+0x84>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2bc7      	cmp	r3, #199	@ 0xc7
 800d9bc:	d9f0      	bls.n	800d9a0 <USB_SetCurrentMode+0x60>
 800d9be:	e001      	b.n	800d9c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e005      	b.n	800d9d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d9c8:	d101      	bne.n	800d9ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e000      	b.n	800d9d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9f2:	d901      	bls.n	800d9f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	e01b      	b.n	800da30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	daf2      	bge.n	800d9e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	019b      	lsls	r3, r3, #6
 800da08:	f043 0220 	orr.w	r2, r3, #32
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3301      	adds	r3, #1
 800da14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da1c:	d901      	bls.n	800da22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800da1e:	2303      	movs	r3, #3
 800da20:	e006      	b.n	800da30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f003 0320 	and.w	r3, r3, #32
 800da2a:	2b20      	cmp	r3, #32
 800da2c:	d0f0      	beq.n	800da10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da44:	2300      	movs	r3, #0
 800da46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	3301      	adds	r3, #1
 800da4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da54:	d901      	bls.n	800da5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e018      	b.n	800da8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	daf2      	bge.n	800da48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2210      	movs	r2, #16
 800da6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	3301      	adds	r3, #1
 800da70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da78:	d901      	bls.n	800da7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da7a:	2303      	movs	r3, #3
 800da7c:	e006      	b.n	800da8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	f003 0310 	and.w	r3, r3, #16
 800da86:	2b10      	cmp	r3, #16
 800da88:	d0f0      	beq.n	800da6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800da98:	b480      	push	{r7}
 800da9a:	b089      	sub	sp, #36	@ 0x24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	4611      	mov	r1, r2
 800daa4:	461a      	mov	r2, r3
 800daa6:	460b      	mov	r3, r1
 800daa8:	71fb      	strb	r3, [r7, #7]
 800daaa:	4613      	mov	r3, r2
 800daac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d123      	bne.n	800db06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dabe:	88bb      	ldrh	r3, [r7, #4]
 800dac0:	3303      	adds	r3, #3
 800dac2:	089b      	lsrs	r3, r3, #2
 800dac4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dac6:	2300      	movs	r3, #0
 800dac8:	61bb      	str	r3, [r7, #24]
 800daca:	e018      	b.n	800dafe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	031a      	lsls	r2, r3, #12
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dad8:	461a      	mov	r2, r3
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	3301      	adds	r3, #1
 800dae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	3301      	adds	r3, #1
 800daea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	3301      	adds	r3, #1
 800daf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	3301      	adds	r3, #1
 800daf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	3301      	adds	r3, #1
 800dafc:	61bb      	str	r3, [r7, #24]
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	429a      	cmp	r2, r3
 800db04:	d3e2      	bcc.n	800dacc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3724      	adds	r7, #36	@ 0x24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800db14:	b480      	push	{r7}
 800db16:	b08b      	sub	sp, #44	@ 0x2c
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	4613      	mov	r3, r2
 800db20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	089b      	lsrs	r3, r3, #2
 800db2e:	b29b      	uxth	r3, r3
 800db30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800db32:	88fb      	ldrh	r3, [r7, #6]
 800db34:	f003 0303 	and.w	r3, r3, #3
 800db38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800db3a:	2300      	movs	r3, #0
 800db3c:	623b      	str	r3, [r7, #32]
 800db3e:	e014      	b.n	800db6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4a:	601a      	str	r2, [r3, #0]
    pDest++;
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	3301      	adds	r3, #1
 800db50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db54:	3301      	adds	r3, #1
 800db56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5a:	3301      	adds	r3, #1
 800db5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db60:	3301      	adds	r3, #1
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	3301      	adds	r3, #1
 800db68:	623b      	str	r3, [r7, #32]
 800db6a:	6a3a      	ldr	r2, [r7, #32]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d3e6      	bcc.n	800db40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800db72:	8bfb      	ldrh	r3, [r7, #30]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01e      	beq.n	800dbb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db82:	461a      	mov	r2, r3
 800db84:	f107 0310 	add.w	r3, r7, #16
 800db88:	6812      	ldr	r2, [r2, #0]
 800db8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	b2db      	uxtb	r3, r3
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	fa22 f303 	lsr.w	r3, r2, r3
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	701a      	strb	r2, [r3, #0]
      i++;
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	3301      	adds	r3, #1
 800dba2:	623b      	str	r3, [r7, #32]
      pDest++;
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	3301      	adds	r3, #1
 800dba8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dbaa:	8bfb      	ldrh	r3, [r7, #30]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dbb0:	8bfb      	ldrh	r3, [r7, #30]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1ea      	bne.n	800db8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	372c      	adds	r7, #44	@ 0x2c
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	4013      	ands	r3, r2
 800dbda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b085      	sub	sp, #20
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800dbfa:	78fb      	ldrb	r3, [r7, #3]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	015a      	lsls	r2, r3, #5
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4413      	add	r3, r2
 800dc12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	f003 0301 	and.w	r3, r3, #1
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc60:	d901      	bls.n	800dc66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc62:	2303      	movs	r3, #3
 800dc64:	e01b      	b.n	800dc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	daf2      	bge.n	800dc54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	f043 0201 	orr.w	r2, r3, #1
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc8a:	d901      	bls.n	800dc90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e006      	b.n	800dc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d0f0      	beq.n	800dc7e <USB_CoreReset+0x36>

  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
	...

0800dcac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dcac:	b084      	sub	sp, #16
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b086      	sub	sp, #24
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dcba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dccc:	461a      	mov	r2, r3
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcd6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d119      	bne.n	800dd1e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800dcea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d10a      	bne.n	800dd08 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd00:	f043 0304 	orr.w	r3, r3, #4
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	e014      	b.n	800dd32 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd16:	f023 0304 	bic.w	r3, r3, #4
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	e009      	b.n	800dd32 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd2c:	f023 0304 	bic.w	r3, r3, #4
 800dd30:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd32:	2110      	movs	r1, #16
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff fe4f 	bl	800d9d8 <USB_FlushTxFifo>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff fe79 	bl	800da3c <USB_FlushRxFifo>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dd54:	2300      	movs	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
 800dd58:	e015      	b.n	800dd86 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd66:	461a      	mov	r2, r3
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	015a      	lsls	r2, r3, #5
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	3301      	adds	r3, #1
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d3e3      	bcc.n	800dd5a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a18      	ldr	r2, [pc, #96]	@ (800de04 <USB_HostInit+0x158>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d10b      	bne.n	800ddc0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddae:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a15      	ldr	r2, [pc, #84]	@ (800de08 <USB_HostInit+0x15c>)
 800ddb4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a14      	ldr	r2, [pc, #80]	@ (800de0c <USB_HostInit+0x160>)
 800ddba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ddbe:	e009      	b.n	800ddd4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2280      	movs	r2, #128	@ 0x80
 800ddc4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a11      	ldr	r2, [pc, #68]	@ (800de10 <USB_HostInit+0x164>)
 800ddca:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a11      	ldr	r2, [pc, #68]	@ (800de14 <USB_HostInit+0x168>)
 800ddd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d105      	bne.n	800dde8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	f043 0210 	orr.w	r2, r3, #16
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	699a      	ldr	r2, [r3, #24]
 800ddec:	4b0a      	ldr	r3, [pc, #40]	@ (800de18 <USB_HostInit+0x16c>)
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de00:	b004      	add	sp, #16
 800de02:	4770      	bx	lr
 800de04:	40040000 	.word	0x40040000
 800de08:	01000200 	.word	0x01000200
 800de0c:	00e00300 	.word	0x00e00300
 800de10:	00600080 	.word	0x00600080
 800de14:	004000e0 	.word	0x004000e0
 800de18:	a3200008 	.word	0xa3200008

0800de1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de3a:	f023 0303 	bic.w	r3, r3, #3
 800de3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	78fb      	ldrb	r3, [r7, #3]
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	68f9      	ldr	r1, [r7, #12]
 800de50:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800de54:	4313      	orrs	r3, r2
 800de56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800de58:	78fb      	ldrb	r3, [r7, #3]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d107      	bne.n	800de6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de64:	461a      	mov	r2, r3
 800de66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800de6a:	6053      	str	r3, [r2, #4]
 800de6c:	e00c      	b.n	800de88 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	2b02      	cmp	r3, #2
 800de72:	d107      	bne.n	800de84 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de7a:	461a      	mov	r2, r3
 800de7c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800de80:	6053      	str	r3, [r2, #4]
 800de82:	e001      	b.n	800de88 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e000      	b.n	800de8a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b084      	sub	sp, #16
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800deb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dec4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dec6:	2064      	movs	r0, #100	@ 0x64
 800dec8:	f7f5 f872 	bl	8002fb0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ded4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ded8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800deda:	200a      	movs	r0, #10
 800dedc:	f7f5 f868 	bl	8002fb0 <HAL_Delay>

  return HAL_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	460b      	mov	r3, r1
 800def4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800df0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d109      	bne.n	800df2e <USB_DriveVbus+0x44>
 800df1a:	78fb      	ldrb	r3, [r7, #3]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d106      	bne.n	800df2e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800df28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800df2c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800df34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df38:	d109      	bne.n	800df4e <USB_DriveVbus+0x64>
 800df3a:	78fb      	ldrb	r3, [r7, #3]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d106      	bne.n	800df4e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800df48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df4c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3714      	adds	r7, #20
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	0c5b      	lsrs	r3, r3, #17
 800df7a:	f003 0303 	and.w	r3, r3, #3
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	b29b      	uxth	r3, r3
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	4608      	mov	r0, r1
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	461a      	mov	r2, r3
 800dfba:	4603      	mov	r3, r0
 800dfbc:	70fb      	strb	r3, [r7, #3]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	70bb      	strb	r3, [r7, #2]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dfce:	78fb      	ldrb	r3, [r7, #3]
 800dfd0:	015a      	lsls	r2, r3, #5
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dfe2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dfe6:	2b03      	cmp	r3, #3
 800dfe8:	d87c      	bhi.n	800e0e4 <USB_HC_Init+0x138>
 800dfea:	a201      	add	r2, pc, #4	@ (adr r2, 800dff0 <USB_HC_Init+0x44>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e001 	.word	0x0800e001
 800dff4:	0800e0a7 	.word	0x0800e0a7
 800dff8:	0800e001 	.word	0x0800e001
 800dffc:	0800e069 	.word	0x0800e069
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	4413      	add	r3, r2
 800e008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e00c:	461a      	mov	r2, r3
 800e00e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e012:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e014:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	da10      	bge.n	800e03e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e01c:	78fb      	ldrb	r3, [r7, #3]
 800e01e:	015a      	lsls	r2, r3, #5
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	4413      	add	r3, r2
 800e024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	78fa      	ldrb	r2, [r7, #3]
 800e02c:	0151      	lsls	r1, r2, #5
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	440a      	add	r2, r1
 800e032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e03a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e03c:	e055      	b.n	800e0ea <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a6f      	ldr	r2, [pc, #444]	@ (800e200 <USB_HC_Init+0x254>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d151      	bne.n	800e0ea <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e046:	78fb      	ldrb	r3, [r7, #3]
 800e048:	015a      	lsls	r2, r3, #5
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	4413      	add	r3, r2
 800e04e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	78fa      	ldrb	r2, [r7, #3]
 800e056:	0151      	lsls	r1, r2, #5
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	440a      	add	r2, r1
 800e05c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e060:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e064:	60d3      	str	r3, [r2, #12]
      break;
 800e066:	e040      	b.n	800e0ea <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	015a      	lsls	r2, r3, #5
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	4413      	add	r3, r2
 800e070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e074:	461a      	mov	r2, r3
 800e076:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e07a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e07c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e080:	2b00      	cmp	r3, #0
 800e082:	da34      	bge.n	800e0ee <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e084:	78fb      	ldrb	r3, [r7, #3]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	78fa      	ldrb	r2, [r7, #3]
 800e094:	0151      	lsls	r1, r2, #5
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	440a      	add	r2, r1
 800e09a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e09e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e0a4:	e023      	b.n	800e0ee <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e0a6:	78fb      	ldrb	r3, [r7, #3]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f240 2325 	movw	r3, #549	@ 0x225
 800e0b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e0ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	da17      	bge.n	800e0f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e0c2:	78fb      	ldrb	r3, [r7, #3]
 800e0c4:	015a      	lsls	r2, r3, #5
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	78fa      	ldrb	r2, [r7, #3]
 800e0d2:	0151      	lsls	r1, r2, #5
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	440a      	add	r2, r1
 800e0d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0dc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e0e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e0e2:	e006      	b.n	800e0f2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	77fb      	strb	r3, [r7, #31]
      break;
 800e0e8:	e004      	b.n	800e0f4 <USB_HC_Init+0x148>
      break;
 800e0ea:	bf00      	nop
 800e0ec:	e002      	b.n	800e0f4 <USB_HC_Init+0x148>
      break;
 800e0ee:	bf00      	nop
 800e0f0:	e000      	b.n	800e0f4 <USB_HC_Init+0x148>
      break;
 800e0f2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e0f4:	78fb      	ldrb	r3, [r7, #3]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e100:	461a      	mov	r2, r3
 800e102:	2300      	movs	r3, #0
 800e104:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e106:	78fb      	ldrb	r3, [r7, #3]
 800e108:	015a      	lsls	r2, r3, #5
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	4413      	add	r3, r2
 800e10e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	78fa      	ldrb	r2, [r7, #3]
 800e116:	0151      	lsls	r1, r2, #5
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	440a      	add	r2, r1
 800e11c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e120:	f043 0302 	orr.w	r3, r3, #2
 800e124:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e12c:	699a      	ldr	r2, [r3, #24]
 800e12e:	78fb      	ldrb	r3, [r7, #3]
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	2101      	movs	r1, #1
 800e136:	fa01 f303 	lsl.w	r3, r1, r3
 800e13a:	6939      	ldr	r1, [r7, #16]
 800e13c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e140:	4313      	orrs	r3, r2
 800e142:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e150:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e154:	2b00      	cmp	r3, #0
 800e156:	da03      	bge.n	800e160 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e15c:	61bb      	str	r3, [r7, #24]
 800e15e:	e001      	b.n	800e164 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e160:	2300      	movs	r3, #0
 800e162:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff fef9 	bl	800df5c <USB_GetHostSpeed>
 800e16a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e16c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e170:	2b02      	cmp	r3, #2
 800e172:	d106      	bne.n	800e182 <USB_HC_Init+0x1d6>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d003      	beq.n	800e182 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e17a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e001      	b.n	800e186 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e182:	2300      	movs	r3, #0
 800e184:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e186:	787b      	ldrb	r3, [r7, #1]
 800e188:	059b      	lsls	r3, r3, #22
 800e18a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e18e:	78bb      	ldrb	r3, [r7, #2]
 800e190:	02db      	lsls	r3, r3, #11
 800e192:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e196:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e198:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e19c:	049b      	lsls	r3, r3, #18
 800e19e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e1a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e1a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e1a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e1aa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1b4:	78fa      	ldrb	r2, [r7, #3]
 800e1b6:	0151      	lsls	r1, r2, #5
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	440a      	add	r2, r1
 800e1bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e1c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1c4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e1c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d003      	beq.n	800e1d6 <USB_HC_Init+0x22a>
 800e1ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d10f      	bne.n	800e1f6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e1d6:	78fb      	ldrb	r3, [r7, #3]
 800e1d8:	015a      	lsls	r2, r3, #5
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	4413      	add	r3, r2
 800e1de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	78fa      	ldrb	r2, [r7, #3]
 800e1e6:	0151      	lsls	r1, r2, #5
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	440a      	add	r2, r1
 800e1ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e1f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e1f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	40040000 	.word	0x40040000

0800e204 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b08c      	sub	sp, #48	@ 0x30
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4613      	mov	r3, r2
 800e210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	785b      	ldrb	r3, [r3, #1]
 800e21a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e21c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e220:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	4a5d      	ldr	r2, [pc, #372]	@ (800e39c <USB_HC_StartXfer+0x198>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d12f      	bne.n	800e28a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d11c      	bne.n	800e26a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	7c9b      	ldrb	r3, [r3, #18]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d003      	beq.n	800e240 <USB_HC_StartXfer+0x3c>
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	7c9b      	ldrb	r3, [r3, #18]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d124      	bne.n	800e28a <USB_HC_StartXfer+0x86>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	799b      	ldrb	r3, [r3, #6]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d120      	bne.n	800e28a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	0151      	lsls	r1, r2, #5
 800e25a:	6a3a      	ldr	r2, [r7, #32]
 800e25c:	440a      	add	r2, r1
 800e25e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e266:	60d3      	str	r3, [r2, #12]
 800e268:	e00f      	b.n	800e28a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	791b      	ldrb	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10b      	bne.n	800e28a <USB_HC_StartXfer+0x86>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	795b      	ldrb	r3, [r3, #5]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d107      	bne.n	800e28a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	785b      	ldrb	r3, [r3, #1]
 800e27e:	4619      	mov	r1, r3
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 fb6b 	bl	800e95c <USB_DoPing>
        return HAL_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	e232      	b.n	800e6f0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	799b      	ldrb	r3, [r3, #6]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d158      	bne.n	800e344 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e292:	2301      	movs	r3, #1
 800e294:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	78db      	ldrb	r3, [r3, #3]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d007      	beq.n	800e2ae <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e29e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	8a92      	ldrh	r2, [r2, #20]
 800e2a4:	fb03 f202 	mul.w	r2, r3, r2
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	61da      	str	r2, [r3, #28]
 800e2ac:	e07c      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	7c9b      	ldrb	r3, [r3, #18]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d130      	bne.n	800e318 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	2bbc      	cmp	r3, #188	@ 0xbc
 800e2bc:	d918      	bls.n	800e2f0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	8a9b      	ldrh	r3, [r3, #20]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	69da      	ldr	r2, [r3, #28]
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d003      	beq.n	800e2e0 <USB_HC_StartXfer+0xdc>
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d103      	bne.n	800e2e8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	60da      	str	r2, [r3, #12]
 800e2e6:	e05f      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	60da      	str	r2, [r3, #12]
 800e2ee:	e05b      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	6a1a      	ldr	r2, [r3, #32]
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d007      	beq.n	800e310 <USB_HC_StartXfer+0x10c>
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d003      	beq.n	800e310 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2204      	movs	r2, #4
 800e30c:	60da      	str	r2, [r3, #12]
 800e30e:	e04b      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	2203      	movs	r2, #3
 800e314:	60da      	str	r2, [r3, #12]
 800e316:	e047      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d10d      	bne.n	800e33a <USB_HC_StartXfer+0x136>
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	8a92      	ldrh	r2, [r2, #20]
 800e326:	4293      	cmp	r3, r2
 800e328:	d907      	bls.n	800e33a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e32a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	8a92      	ldrh	r2, [r2, #20]
 800e330:	fb03 f202 	mul.w	r2, r3, r2
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	61da      	str	r2, [r3, #28]
 800e338:	e036      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	6a1a      	ldr	r2, [r3, #32]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	61da      	str	r2, [r3, #28]
 800e342:	e031      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	6a1b      	ldr	r3, [r3, #32]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d018      	beq.n	800e37e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	8a92      	ldrh	r2, [r2, #20]
 800e354:	4413      	add	r3, r2
 800e356:	3b01      	subs	r3, #1
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	8a92      	ldrh	r2, [r2, #20]
 800e35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e360:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e362:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e364:	8b7b      	ldrh	r3, [r7, #26]
 800e366:	429a      	cmp	r2, r3
 800e368:	d90b      	bls.n	800e382 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e36a:	8b7b      	ldrh	r3, [r7, #26]
 800e36c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e36e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	8a92      	ldrh	r2, [r2, #20]
 800e374:	fb03 f202 	mul.w	r2, r3, r2
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	61da      	str	r2, [r3, #28]
 800e37c:	e001      	b.n	800e382 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e37e:	2301      	movs	r3, #1
 800e380:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	78db      	ldrb	r3, [r3, #3]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00a      	beq.n	800e3a0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e38a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	8a92      	ldrh	r2, [r2, #20]
 800e390:	fb03 f202 	mul.w	r2, r3, r2
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	61da      	str	r2, [r3, #28]
 800e398:	e006      	b.n	800e3a8 <USB_HC_StartXfer+0x1a4>
 800e39a:	bf00      	nop
 800e39c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	6a1a      	ldr	r2, [r3, #32]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	69db      	ldr	r3, [r3, #28]
 800e3ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3b2:	04d9      	lsls	r1, r3, #19
 800e3b4:	4ba3      	ldr	r3, [pc, #652]	@ (800e644 <USB_HC_StartXfer+0x440>)
 800e3b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	7d9b      	ldrb	r3, [r3, #22]
 800e3be:	075b      	lsls	r3, r3, #29
 800e3c0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3c4:	69f9      	ldr	r1, [r7, #28]
 800e3c6:	0148      	lsls	r0, r1, #5
 800e3c8:	6a39      	ldr	r1, [r7, #32]
 800e3ca:	4401      	add	r1, r0
 800e3cc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d009      	beq.n	800e3ee <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	6999      	ldr	r1, [r3, #24]
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3ea:	460a      	mov	r2, r1
 800e3ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e3ee:	6a3b      	ldr	r3, [r7, #32]
 800e3f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bf0c      	ite	eq
 800e3fe:	2301      	moveq	r3, #1
 800e400:	2300      	movne	r3, #0
 800e402:	b2db      	uxtb	r3, r3
 800e404:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	69fa      	ldr	r2, [r7, #28]
 800e416:	0151      	lsls	r1, r2, #5
 800e418:	6a3a      	ldr	r2, [r7, #32]
 800e41a:	440a      	add	r2, r1
 800e41c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e420:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e424:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	7e7b      	ldrb	r3, [r7, #25]
 800e436:	075b      	lsls	r3, r3, #29
 800e438:	69f9      	ldr	r1, [r7, #28]
 800e43a:	0148      	lsls	r0, r1, #5
 800e43c:	6a39      	ldr	r1, [r7, #32]
 800e43e:	4401      	add	r1, r0
 800e440:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e444:	4313      	orrs	r3, r2
 800e446:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	799b      	ldrb	r3, [r3, #6]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	f040 80c3 	bne.w	800e5d8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	7c5b      	ldrb	r3, [r3, #17]
 800e456:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e45c:	4313      	orrs	r3, r2
 800e45e:	69fa      	ldr	r2, [r7, #28]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	6a3a      	ldr	r2, [r7, #32]
 800e464:	440a      	add	r2, r1
 800e466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e46a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e46e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	4413      	add	r3, r2
 800e478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	6a3a      	ldr	r2, [r7, #32]
 800e484:	440a      	add	r2, r1
 800e486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e48a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e48e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	79db      	ldrb	r3, [r3, #7]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d123      	bne.n	800e4e0 <USB_HC_StartXfer+0x2dc>
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	78db      	ldrb	r3, [r3, #3]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d11f      	bne.n	800e4e0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	69fa      	ldr	r2, [r7, #28]
 800e4b0:	0151      	lsls	r1, r2, #5
 800e4b2:	6a3a      	ldr	r2, [r7, #32]
 800e4b4:	440a      	add	r2, r1
 800e4b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4be:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	69fa      	ldr	r2, [r7, #28]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	6a3a      	ldr	r2, [r7, #32]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4de:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	7c9b      	ldrb	r3, [r3, #18]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d003      	beq.n	800e4f0 <USB_HC_StartXfer+0x2ec>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	7c9b      	ldrb	r3, [r3, #18]
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	d117      	bne.n	800e520 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d113      	bne.n	800e520 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	78db      	ldrb	r3, [r3, #3]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d10f      	bne.n	800e520 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	4413      	add	r3, r2
 800e508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	6a3a      	ldr	r2, [r7, #32]
 800e514:	440a      	add	r2, r1
 800e516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e51a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e51e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	7c9b      	ldrb	r3, [r3, #18]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d162      	bne.n	800e5ee <USB_HC_StartXfer+0x3ea>
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	78db      	ldrb	r3, [r3, #3]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d15e      	bne.n	800e5ee <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	3b01      	subs	r3, #1
 800e536:	2b03      	cmp	r3, #3
 800e538:	d858      	bhi.n	800e5ec <USB_HC_StartXfer+0x3e8>
 800e53a:	a201      	add	r2, pc, #4	@ (adr r2, 800e540 <USB_HC_StartXfer+0x33c>)
 800e53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e540:	0800e551 	.word	0x0800e551
 800e544:	0800e573 	.word	0x0800e573
 800e548:	0800e595 	.word	0x0800e595
 800e54c:	0800e5b7 	.word	0x0800e5b7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	4413      	add	r3, r2
 800e558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	69fa      	ldr	r2, [r7, #28]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	6a3a      	ldr	r2, [r7, #32]
 800e564:	440a      	add	r2, r1
 800e566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e56e:	6053      	str	r3, [r2, #4]
          break;
 800e570:	e03d      	b.n	800e5ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	015a      	lsls	r2, r3, #5
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	4413      	add	r3, r2
 800e57a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	69fa      	ldr	r2, [r7, #28]
 800e582:	0151      	lsls	r1, r2, #5
 800e584:	6a3a      	ldr	r2, [r7, #32]
 800e586:	440a      	add	r2, r1
 800e588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e58c:	f043 030e 	orr.w	r3, r3, #14
 800e590:	6053      	str	r3, [r2, #4]
          break;
 800e592:	e02c      	b.n	800e5ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	69fa      	ldr	r2, [r7, #28]
 800e5a4:	0151      	lsls	r1, r2, #5
 800e5a6:	6a3a      	ldr	r2, [r7, #32]
 800e5a8:	440a      	add	r2, r1
 800e5aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e5b2:	6053      	str	r3, [r2, #4]
          break;
 800e5b4:	e01b      	b.n	800e5ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	69fa      	ldr	r2, [r7, #28]
 800e5c6:	0151      	lsls	r1, r2, #5
 800e5c8:	6a3a      	ldr	r2, [r7, #32]
 800e5ca:	440a      	add	r2, r1
 800e5cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e5d4:	6053      	str	r3, [r2, #4]
          break;
 800e5d6:	e00a      	b.n	800e5ee <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	6053      	str	r3, [r2, #4]
 800e5ea:	e000      	b.n	800e5ee <USB_HC_StartXfer+0x3ea>
          break;
 800e5ec:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	6a3b      	ldr	r3, [r7, #32]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e604:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	78db      	ldrb	r3, [r3, #3]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e614:	613b      	str	r3, [r7, #16]
 800e616:	e003      	b.n	800e620 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e61e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e626:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e634:	461a      	mov	r2, r3
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	e055      	b.n	800e6f0 <USB_HC_StartXfer+0x4ec>
 800e644:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	78db      	ldrb	r3, [r3, #3]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d14e      	bne.n	800e6ee <USB_HC_StartXfer+0x4ea>
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	6a1b      	ldr	r3, [r3, #32]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d04a      	beq.n	800e6ee <USB_HC_StartXfer+0x4ea>
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	79db      	ldrb	r3, [r3, #7]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d146      	bne.n	800e6ee <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	7c9b      	ldrb	r3, [r3, #18]
 800e664:	2b03      	cmp	r3, #3
 800e666:	d831      	bhi.n	800e6cc <USB_HC_StartXfer+0x4c8>
 800e668:	a201      	add	r2, pc, #4	@ (adr r2, 800e670 <USB_HC_StartXfer+0x46c>)
 800e66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66e:	bf00      	nop
 800e670:	0800e681 	.word	0x0800e681
 800e674:	0800e6a5 	.word	0x0800e6a5
 800e678:	0800e681 	.word	0x0800e681
 800e67c:	0800e6a5 	.word	0x0800e6a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	6a1b      	ldr	r3, [r3, #32]
 800e684:	3303      	adds	r3, #3
 800e686:	089b      	lsrs	r3, r3, #2
 800e688:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e68a:	8afa      	ldrh	r2, [r7, #22]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e690:	b29b      	uxth	r3, r3
 800e692:	429a      	cmp	r2, r3
 800e694:	d91c      	bls.n	800e6d0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	699b      	ldr	r3, [r3, #24]
 800e69a:	f043 0220 	orr.w	r2, r3, #32
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e6a2:	e015      	b.n	800e6d0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	3303      	adds	r3, #3
 800e6aa:	089b      	lsrs	r3, r3, #2
 800e6ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e6ae:	8afa      	ldrh	r2, [r7, #22]
 800e6b0:	6a3b      	ldr	r3, [r7, #32]
 800e6b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d90a      	bls.n	800e6d4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	619a      	str	r2, [r3, #24]
        }
        break;
 800e6ca:	e003      	b.n	800e6d4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e6cc:	bf00      	nop
 800e6ce:	e002      	b.n	800e6d6 <USB_HC_StartXfer+0x4d2>
        break;
 800e6d0:	bf00      	nop
 800e6d2:	e000      	b.n	800e6d6 <USB_HC_StartXfer+0x4d2>
        break;
 800e6d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	6999      	ldr	r1, [r3, #24]
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	785a      	ldrb	r2, [r3, #1]
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	9000      	str	r0, [sp, #0]
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7ff f9d5 	bl	800da98 <USB_WritePacket>
  }

  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3728      	adds	r7, #40	@ 0x28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	b29b      	uxth	r3, r3
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e71a:	b480      	push	{r7}
 800e71c:	b089      	sub	sp, #36	@ 0x24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	460b      	mov	r3, r1
 800e724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e72a:	78fb      	ldrb	r3, [r7, #3]
 800e72c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e72e:	2300      	movs	r3, #0
 800e730:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	015a      	lsls	r2, r3, #5
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	4413      	add	r3, r2
 800e73a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	0c9b      	lsrs	r3, r3, #18
 800e742:	f003 0303 	and.w	r3, r3, #3
 800e746:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	0fdb      	lsrs	r3, r3, #31
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	015a      	lsls	r2, r3, #5
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	4413      	add	r3, r2
 800e766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	0fdb      	lsrs	r3, r3, #31
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	f003 0320 	and.w	r3, r3, #32
 800e77c:	2b20      	cmp	r3, #32
 800e77e:	d10d      	bne.n	800e79c <USB_HC_Halt+0x82>
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10a      	bne.n	800e79c <USB_HC_Halt+0x82>
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d005      	beq.n	800e798 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d002      	beq.n	800e798 <USB_HC_Halt+0x7e>
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b03      	cmp	r3, #3
 800e796:	d101      	bne.n	800e79c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	e0d8      	b.n	800e94e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d002      	beq.n	800e7a8 <USB_HC_Halt+0x8e>
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b02      	cmp	r3, #2
 800e7a6:	d173      	bne.n	800e890 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	015a      	lsls	r2, r3, #5
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	0151      	lsls	r1, r2, #5
 800e7ba:	69fa      	ldr	r2, [r7, #28]
 800e7bc:	440a      	add	r2, r1
 800e7be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f003 0320 	and.w	r3, r3, #32
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d14a      	bne.n	800e86a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d133      	bne.n	800e848 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	015a      	lsls	r2, r3, #5
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	0151      	lsls	r1, r2, #5
 800e7f2:	69fa      	ldr	r2, [r7, #28]
 800e7f4:	440a      	add	r2, r1
 800e7f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7fe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	4413      	add	r3, r2
 800e808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	69ba      	ldr	r2, [r7, #24]
 800e810:	0151      	lsls	r1, r2, #5
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	440a      	add	r2, r1
 800e816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e81a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e81e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	3301      	adds	r3, #1
 800e824:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e82c:	d82e      	bhi.n	800e88c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	015a      	lsls	r2, r3, #5
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	4413      	add	r3, r2
 800e836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e844:	d0ec      	beq.n	800e820 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e846:	e081      	b.n	800e94c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	0151      	lsls	r1, r2, #5
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	440a      	add	r2, r1
 800e85e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e862:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e866:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e868:	e070      	b.n	800e94c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	015a      	lsls	r2, r3, #5
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	4413      	add	r3, r2
 800e872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	69ba      	ldr	r2, [r7, #24]
 800e87a:	0151      	lsls	r1, r2, #5
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	440a      	add	r2, r1
 800e880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e884:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e888:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e88a:	e05f      	b.n	800e94c <USB_HC_Halt+0x232>
            break;
 800e88c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e88e:	e05d      	b.n	800e94c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	4413      	add	r3, r2
 800e898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	69ba      	ldr	r2, [r7, #24]
 800e8a0:	0151      	lsls	r1, r2, #5
 800e8a2:	69fa      	ldr	r2, [r7, #28]
 800e8a4:	440a      	add	r2, r1
 800e8a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d133      	bne.n	800e928 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	0151      	lsls	r1, r2, #5
 800e8d2:	69fa      	ldr	r2, [r7, #28]
 800e8d4:	440a      	add	r2, r1
 800e8d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e8fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	3301      	adds	r3, #1
 800e904:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e90c:	d81d      	bhi.n	800e94a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	015a      	lsls	r2, r3, #5
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	4413      	add	r3, r2
 800e916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e924:	d0ec      	beq.n	800e900 <USB_HC_Halt+0x1e6>
 800e926:	e011      	b.n	800e94c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	015a      	lsls	r2, r3, #5
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	4413      	add	r3, r2
 800e930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69ba      	ldr	r2, [r7, #24]
 800e938:	0151      	lsls	r1, r2, #5
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	440a      	add	r2, r1
 800e93e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e942:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e946:	6013      	str	r3, [r2, #0]
 800e948:	e000      	b.n	800e94c <USB_HC_Halt+0x232>
          break;
 800e94a:	bf00      	nop
    }
  }

  return HAL_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3724      	adds	r7, #36	@ 0x24
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
	...

0800e95c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e970:	2301      	movs	r3, #1
 800e972:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	04da      	lsls	r2, r3, #19
 800e978:	4b15      	ldr	r3, [pc, #84]	@ (800e9d0 <USB_DoPing+0x74>)
 800e97a:	4013      	ands	r3, r2
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	0151      	lsls	r1, r2, #5
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	440a      	add	r2, r1
 800e984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e988:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e98c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	015a      	lsls	r2, r3, #5
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	4413      	add	r3, r2
 800e996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e9a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e9ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	015a      	lsls	r2, r3, #5
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	371c      	adds	r7, #28
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	1ff80000 	.word	0x1ff80000

0800e9d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7fe ff98 	bl	800d91e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9ee:	2110      	movs	r1, #16
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7fe fff1 	bl	800d9d8 <USB_FlushTxFifo>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff f81b 	bl	800da3c <USB_FlushRxFifo>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ea10:	2300      	movs	r3, #0
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	e01f      	b.n	800ea56 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	015a      	lsls	r2, r3, #5
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	4413      	add	r3, r2
 800ea46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3301      	adds	r3, #1
 800ea54:	61bb      	str	r3, [r7, #24]
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	2b0f      	cmp	r3, #15
 800ea5a:	d9dc      	bls.n	800ea16 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	61bb      	str	r3, [r7, #24]
 800ea60:	e034      	b.n	800eacc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	015a      	lsls	r2, r3, #5
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	4413      	add	r3, r2
 800ea6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ea80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	015a      	lsls	r2, r3, #5
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	4413      	add	r3, r2
 800ea92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea96:	461a      	mov	r2, r3
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eaa8:	d80c      	bhi.n	800eac4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	015a      	lsls	r2, r3, #5
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	4413      	add	r3, r2
 800eab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eabc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eac0:	d0ec      	beq.n	800ea9c <USB_StopHost+0xc8>
 800eac2:	e000      	b.n	800eac6 <USB_StopHost+0xf2>
        break;
 800eac4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	3301      	adds	r3, #1
 800eaca:	61bb      	str	r3, [r7, #24]
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	2b0f      	cmp	r3, #15
 800ead0:	d9c7      	bls.n	800ea62 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ead8:	461a      	mov	r2, r3
 800eada:	f04f 33ff 	mov.w	r3, #4294967295
 800eade:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f04f 32ff 	mov.w	r2, #4294967295
 800eae6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7fe ff07 	bl	800d8fc <USB_EnableGlobalInt>

  return ret;
 800eaee:	7ffb      	ldrb	r3, [r7, #31]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3720      	adds	r7, #32
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eafc:	4904      	ldr	r1, [pc, #16]	@ (800eb10 <MX_FATFS_Init+0x18>)
 800eafe:	4805      	ldr	r0, [pc, #20]	@ (800eb14 <MX_FATFS_Init+0x1c>)
 800eb00:	f002 fd74 	bl	80115ec <FATFS_LinkDriver>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
 800eb08:	4b03      	ldr	r3, [pc, #12]	@ (800eb18 <MX_FATFS_Init+0x20>)
 800eb0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb0c:	bf00      	nop
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20000d34 	.word	0x20000d34
 800eb14:	08014f08 	.word	0x08014f08
 800eb18:	20000d30 	.word	0x20000d30

0800eb1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eb26:	f000 f87b 	bl	800ec20 <BSP_SD_IsDetected>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d001      	beq.n	800eb34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eb30:	2302      	movs	r3, #2
 800eb32:	e012      	b.n	800eb5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eb34:	480b      	ldr	r0, [pc, #44]	@ (800eb64 <BSP_SD_Init+0x48>)
 800eb36:	f7fa fdef 	bl	8009718 <HAL_SD_Init>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eb3e:	79fb      	ldrb	r3, [r7, #7]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d109      	bne.n	800eb58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eb44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800eb48:	4806      	ldr	r0, [pc, #24]	@ (800eb64 <BSP_SD_Init+0x48>)
 800eb4a:	f7fb fa3f 	bl	8009fcc <HAL_SD_ConfigWideBusOperation>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eb58:	79fb      	ldrb	r3, [r7, #7]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20000934 	.word	0x20000934

0800eb68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	68f9      	ldr	r1, [r7, #12]
 800eb7e:	4806      	ldr	r0, [pc, #24]	@ (800eb98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eb80:	f7fa fe82 	bl	8009888 <HAL_SD_ReadBlocks_DMA>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	20000934 	.word	0x20000934

0800eb9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	68f9      	ldr	r1, [r7, #12]
 800ebb2:	4806      	ldr	r0, [pc, #24]	@ (800ebcc <BSP_SD_WriteBlocks_DMA+0x30>)
 800ebb4:	f7fa ff4a 	bl	8009a4c <HAL_SD_WriteBlocks_DMA>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ebc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3718      	adds	r7, #24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	20000934 	.word	0x20000934

0800ebd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ebd4:	4805      	ldr	r0, [pc, #20]	@ (800ebec <BSP_SD_GetCardState+0x1c>)
 800ebd6:	f7fb fa93 	bl	800a100 <HAL_SD_GetCardState>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	bf14      	ite	ne
 800ebe0:	2301      	movne	r3, #1
 800ebe2:	2300      	moveq	r3, #0
 800ebe4:	b2db      	uxtb	r3, r3
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	20000934 	.word	0x20000934

0800ebf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ebf8:	6879      	ldr	r1, [r7, #4]
 800ebfa:	4803      	ldr	r0, [pc, #12]	@ (800ec08 <BSP_SD_GetCardInfo+0x18>)
 800ebfc:	f7fb f9ba 	bl	8009f74 <HAL_SD_GetCardInfo>
}
 800ec00:	bf00      	nop
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20000934 	.word	0x20000934

0800ec0c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ec14:	f000 f9b2 	bl	800ef7c <BSP_SD_ReadCpltCallback>
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ec26:	2301      	movs	r3, #1
 800ec28:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ec2a:	f000 f80b 	bl	800ec44 <BSP_PlatformIsDetected>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ec34:	2300      	movs	r3, #0
 800ec36:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	b2db      	uxtb	r3, r3
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ec4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ec52:	4806      	ldr	r0, [pc, #24]	@ (800ec6c <BSP_PlatformIsDetected+0x28>)
 800ec54:	f7f5 fec4 	bl	80049e0 <HAL_GPIO_ReadPin>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ec62:	79fb      	ldrb	r3, [r7, #7]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	40020800 	.word	0x40020800

0800ec70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ec78:	f002 fd04 	bl	8011684 <osKernelSysTick>
 800ec7c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ec7e:	e006      	b.n	800ec8e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec80:	f7ff ffa6 	bl	800ebd0 <BSP_SD_GetCardState>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e009      	b.n	800eca2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ec8e:	f002 fcf9 	bl	8011684 <osKernelSysTick>
 800ec92:	4602      	mov	r2, r0
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	1ad3      	subs	r3, r2, r3
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d8f0      	bhi.n	800ec80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ec9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
	...

0800ecac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ecb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ece4 <SD_CheckStatus+0x38>)
 800ecb8:	2201      	movs	r2, #1
 800ecba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecbc:	f7ff ff88 	bl	800ebd0 <BSP_SD_GetCardState>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d107      	bne.n	800ecd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ecc6:	4b07      	ldr	r3, [pc, #28]	@ (800ece4 <SD_CheckStatus+0x38>)
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	f023 0301 	bic.w	r3, r3, #1
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	4b04      	ldr	r3, [pc, #16]	@ (800ece4 <SD_CheckStatus+0x38>)
 800ecd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ecd6:	4b03      	ldr	r3, [pc, #12]	@ (800ece4 <SD_CheckStatus+0x38>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	b2db      	uxtb	r3, r3
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20000009 	.word	0x20000009

0800ece8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ecf2:	4b20      	ldr	r3, [pc, #128]	@ (800ed74 <SD_initialize+0x8c>)
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ecf8:	f002 fcb8 	bl	801166c <osKernelRunning>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d030      	beq.n	800ed64 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ed02:	f7ff ff0b 	bl	800eb1c <BSP_SD_Init>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d107      	bne.n	800ed1c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ed0c:	79fb      	ldrb	r3, [r7, #7]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff ffcc 	bl	800ecac <SD_CheckStatus>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	4b16      	ldr	r3, [pc, #88]	@ (800ed74 <SD_initialize+0x8c>)
 800ed1a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ed1c:	4b15      	ldr	r3, [pc, #84]	@ (800ed74 <SD_initialize+0x8c>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d01e      	beq.n	800ed64 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ed26:	4b14      	ldr	r3, [pc, #80]	@ (800ed78 <SD_initialize+0x90>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10e      	bne.n	800ed4c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ed2e:	4b13      	ldr	r3, [pc, #76]	@ (800ed7c <SD_initialize+0x94>)
 800ed30:	f107 0408 	add.w	r4, r7, #8
 800ed34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ed3a:	f107 0308 	add.w	r3, r7, #8
 800ed3e:	2100      	movs	r1, #0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f002 fd0f 	bl	8011764 <osMessageCreate>
 800ed46:	4603      	mov	r3, r0
 800ed48:	4a0b      	ldr	r2, [pc, #44]	@ (800ed78 <SD_initialize+0x90>)
 800ed4a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed78 <SD_initialize+0x90>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d107      	bne.n	800ed64 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ed54:	4b07      	ldr	r3, [pc, #28]	@ (800ed74 <SD_initialize+0x8c>)
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	f043 0301 	orr.w	r3, r3, #1
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	4b04      	ldr	r3, [pc, #16]	@ (800ed74 <SD_initialize+0x8c>)
 800ed62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ed64:	4b03      	ldr	r3, [pc, #12]	@ (800ed74 <SD_initialize+0x8c>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	b2db      	uxtb	r3, r3
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	371c      	adds	r7, #28
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd90      	pop	{r4, r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20000009 	.word	0x20000009
 800ed78:	20000d38 	.word	0x20000d38
 800ed7c:	08014e9c 	.word	0x08014e9c

0800ed80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ed8a:	79fb      	ldrb	r3, [r7, #7]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7ff ff8d 	bl	800ecac <SD_CheckStatus>
 800ed92:	4603      	mov	r3, r0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08a      	sub	sp, #40	@ 0x28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60b9      	str	r1, [r7, #8]
 800eda4:	607a      	str	r2, [r7, #4]
 800eda6:	603b      	str	r3, [r7, #0]
 800eda8:	4603      	mov	r3, r0
 800edaa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800edac:	2301      	movs	r3, #1
 800edae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800edb2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800edb6:	f7ff ff5b 	bl	800ec70 <SD_CheckStatusWithTimeout>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	da02      	bge.n	800edc6 <SD_read+0x2a>
  {
    return res;
 800edc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edc4:	e032      	b.n	800ee2c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	6879      	ldr	r1, [r7, #4]
 800edca:	68b8      	ldr	r0, [r7, #8]
 800edcc:	f7ff fecc 	bl	800eb68 <BSP_SD_ReadBlocks_DMA>
 800edd0:	4603      	mov	r3, r0
 800edd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800edd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d124      	bne.n	800ee28 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800edde:	4b15      	ldr	r3, [pc, #84]	@ (800ee34 <SD_read+0x98>)
 800ede0:	6819      	ldr	r1, [r3, #0]
 800ede2:	f107 0314 	add.w	r3, r7, #20
 800ede6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800edea:	4618      	mov	r0, r3
 800edec:	f002 fd22 	bl	8011834 <osMessageGet>

    if (event.status == osEventMessage)
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b10      	cmp	r3, #16
 800edf4:	d118      	bne.n	800ee28 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d115      	bne.n	800ee28 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800edfc:	f002 fc42 	bl	8011684 <osKernelSysTick>
 800ee00:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ee02:	e008      	b.n	800ee16 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee04:	f7ff fee4 	bl	800ebd0 <BSP_SD_GetCardState>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d103      	bne.n	800ee16 <SD_read+0x7a>
              {
                res = RES_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ee14:	e008      	b.n	800ee28 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ee16:	f002 fc35 	bl	8011684 <osKernelSysTick>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d9ed      	bls.n	800ee04 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ee28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3728      	adds	r7, #40	@ 0x28
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20000d38 	.word	0x20000d38

0800ee38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08a      	sub	sp, #40	@ 0x28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ee4e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ee52:	f7ff ff0d 	bl	800ec70 <SD_CheckStatusWithTimeout>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	da02      	bge.n	800ee62 <SD_write+0x2a>
  {
    return res;
 800ee5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee60:	e02e      	b.n	800eec0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	68b8      	ldr	r0, [r7, #8]
 800ee68:	f7ff fe98 	bl	800eb9c <BSP_SD_WriteBlocks_DMA>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d124      	bne.n	800eebc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ee72:	4b15      	ldr	r3, [pc, #84]	@ (800eec8 <SD_write+0x90>)
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	f107 0314 	add.w	r3, r7, #20
 800ee7a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f002 fcd8 	bl	8011834 <osMessageGet>

    if (event.status == osEventMessage)
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2b10      	cmp	r3, #16
 800ee88:	d118      	bne.n	800eebc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d115      	bne.n	800eebc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ee90:	f002 fbf8 	bl	8011684 <osKernelSysTick>
 800ee94:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ee96:	e008      	b.n	800eeaa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee98:	f7ff fe9a 	bl	800ebd0 <BSP_SD_GetCardState>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d103      	bne.n	800eeaa <SD_write+0x72>
          {
            res = RES_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eea8:	e008      	b.n	800eebc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eeaa:	f002 fbeb 	bl	8011684 <osKernelSysTick>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d9ed      	bls.n	800ee98 <SD_write+0x60>
    }

  }
#endif

  return res;
 800eebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3728      	adds	r7, #40	@ 0x28
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	20000d38 	.word	0x20000d38

0800eecc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08c      	sub	sp, #48	@ 0x30
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	603a      	str	r2, [r7, #0]
 800eed6:	71fb      	strb	r3, [r7, #7]
 800eed8:	460b      	mov	r3, r1
 800eeda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eee2:	4b25      	ldr	r3, [pc, #148]	@ (800ef78 <SD_ioctl+0xac>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	f003 0301 	and.w	r3, r3, #1
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <SD_ioctl+0x28>
 800eef0:	2303      	movs	r3, #3
 800eef2:	e03c      	b.n	800ef6e <SD_ioctl+0xa2>

  switch (cmd)
 800eef4:	79bb      	ldrb	r3, [r7, #6]
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	d834      	bhi.n	800ef64 <SD_ioctl+0x98>
 800eefa:	a201      	add	r2, pc, #4	@ (adr r2, 800ef00 <SD_ioctl+0x34>)
 800eefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef00:	0800ef11 	.word	0x0800ef11
 800ef04:	0800ef19 	.word	0x0800ef19
 800ef08:	0800ef31 	.word	0x0800ef31
 800ef0c:	0800ef4b 	.word	0x0800ef4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef16:	e028      	b.n	800ef6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef18:	f107 030c 	add.w	r3, r7, #12
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff fe67 	bl	800ebf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ef22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef2e:	e01c      	b.n	800ef6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef30:	f107 030c 	add.w	r3, r7, #12
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff fe5b 	bl	800ebf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ef3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef48:	e00f      	b.n	800ef6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef4a:	f107 030c 	add.w	r3, r7, #12
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff fe4e 	bl	800ebf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ef54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef56:	0a5a      	lsrs	r2, r3, #9
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef62:	e002      	b.n	800ef6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ef64:	2304      	movs	r3, #4
 800ef66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ef6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3730      	adds	r7, #48	@ 0x30
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20000009 	.word	0x20000009

0800ef7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ef80:	4b04      	ldr	r3, [pc, #16]	@ (800ef94 <BSP_SD_ReadCpltCallback+0x18>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2200      	movs	r2, #0
 800ef86:	2101      	movs	r1, #1
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f002 fc13 	bl	80117b4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ef8e:	bf00      	nop
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20000d38 	.word	0x20000d38

0800ef98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ef98:	b590      	push	{r4, r7, lr}
 800ef9a:	b089      	sub	sp, #36	@ 0x24
 800ef9c:	af04      	add	r7, sp, #16
 800ef9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800efa0:	2301      	movs	r3, #1
 800efa2:	2202      	movs	r2, #2
 800efa4:	2102      	movs	r1, #2
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fcd7 	bl	800f95a <USBH_FindInterface>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
 800efb2:	2bff      	cmp	r3, #255	@ 0xff
 800efb4:	d002      	beq.n	800efbc <USBH_CDC_InterfaceInit+0x24>
 800efb6:	7bfb      	ldrb	r3, [r7, #15]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d901      	bls.n	800efc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800efbc:	2302      	movs	r3, #2
 800efbe:	e13d      	b.n	800f23c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800efc0:	7bfb      	ldrb	r3, [r7, #15]
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fcac 	bl	800f922 <USBH_SelectInterface>
 800efca:	4603      	mov	r3, r0
 800efcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800efce:	7bbb      	ldrb	r3, [r7, #14]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800efd4:	2302      	movs	r3, #2
 800efd6:	e131      	b.n	800f23c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800efde:	2050      	movs	r0, #80	@ 0x50
 800efe0:	f005 fa30 	bl	8014444 <malloc>
 800efe4:	4603      	mov	r3, r0
 800efe6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d101      	bne.n	800effc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800eff8:	2302      	movs	r3, #2
 800effa:	e11f      	b.n	800f23c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800effc:	2250      	movs	r2, #80	@ 0x50
 800effe:	2100      	movs	r1, #0
 800f000:	68b8      	ldr	r0, [r7, #8]
 800f002:	f005 fcd5 	bl	80149b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	211a      	movs	r1, #26
 800f00c:	fb01 f303 	mul.w	r3, r1, r3
 800f010:	4413      	add	r3, r2
 800f012:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	b25b      	sxtb	r3, r3
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	da15      	bge.n	800f04a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	211a      	movs	r1, #26
 800f024:	fb01 f303 	mul.w	r3, r1, r3
 800f028:	4413      	add	r3, r2
 800f02a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f02e:	781a      	ldrb	r2, [r3, #0]
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	211a      	movs	r1, #26
 800f03a:	fb01 f303 	mul.w	r3, r1, r3
 800f03e:	4413      	add	r3, r2
 800f040:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f044:	881a      	ldrh	r2, [r3, #0]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f002 fa1c 	bl	801148e <USBH_AllocPipe>
 800f056:	4603      	mov	r3, r0
 800f058:	461a      	mov	r2, r3
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	7819      	ldrb	r1, [r3, #0]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	7858      	ldrb	r0, [r3, #1]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	8952      	ldrh	r2, [r2, #10]
 800f076:	9202      	str	r2, [sp, #8]
 800f078:	2203      	movs	r2, #3
 800f07a:	9201      	str	r2, [sp, #4]
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	4623      	mov	r3, r4
 800f080:	4602      	mov	r2, r0
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f002 f9d4 	bl	8011430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2200      	movs	r2, #0
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f005 f951 	bl	8014338 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f096:	2300      	movs	r3, #0
 800f098:	2200      	movs	r2, #0
 800f09a:	210a      	movs	r1, #10
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fc5c 	bl	800f95a <USBH_FindInterface>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	2bff      	cmp	r3, #255	@ 0xff
 800f0aa:	d002      	beq.n	800f0b2 <USBH_CDC_InterfaceInit+0x11a>
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d901      	bls.n	800f0b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	e0c2      	b.n	800f23c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	211a      	movs	r1, #26
 800f0bc:	fb01 f303 	mul.w	r3, r1, r3
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	b25b      	sxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	da16      	bge.n	800f0fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	211a      	movs	r1, #26
 800f0d4:	fb01 f303 	mul.w	r3, r1, r3
 800f0d8:	4413      	add	r3, r2
 800f0da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f0de:	781a      	ldrb	r2, [r3, #0]
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	211a      	movs	r1, #26
 800f0ea:	fb01 f303 	mul.w	r3, r1, r3
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f0f4:	881a      	ldrh	r2, [r3, #0]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	835a      	strh	r2, [r3, #26]
 800f0fa:	e015      	b.n	800f128 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	211a      	movs	r1, #26
 800f102:	fb01 f303 	mul.w	r3, r1, r3
 800f106:	4413      	add	r3, r2
 800f108:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f10c:	781a      	ldrb	r2, [r3, #0]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	211a      	movs	r1, #26
 800f118:	fb01 f303 	mul.w	r3, r1, r3
 800f11c:	4413      	add	r3, r2
 800f11e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f122:	881a      	ldrh	r2, [r3, #0]
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	211a      	movs	r1, #26
 800f12e:	fb01 f303 	mul.w	r3, r1, r3
 800f132:	4413      	add	r3, r2
 800f134:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	da16      	bge.n	800f16e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	211a      	movs	r1, #26
 800f146:	fb01 f303 	mul.w	r3, r1, r3
 800f14a:	4413      	add	r3, r2
 800f14c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f150:	781a      	ldrb	r2, [r3, #0]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	211a      	movs	r1, #26
 800f15c:	fb01 f303 	mul.w	r3, r1, r3
 800f160:	4413      	add	r3, r2
 800f162:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f166:	881a      	ldrh	r2, [r3, #0]
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	835a      	strh	r2, [r3, #26]
 800f16c:	e015      	b.n	800f19a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	211a      	movs	r1, #26
 800f174:	fb01 f303 	mul.w	r3, r1, r3
 800f178:	4413      	add	r3, r2
 800f17a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f17e:	781a      	ldrb	r2, [r3, #0]
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	211a      	movs	r1, #26
 800f18a:	fb01 f303 	mul.w	r3, r1, r3
 800f18e:	4413      	add	r3, r2
 800f190:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f194:	881a      	ldrh	r2, [r3, #0]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	7b9b      	ldrb	r3, [r3, #14]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f002 f974 	bl	801148e <USBH_AllocPipe>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	7bdb      	ldrb	r3, [r3, #15]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f002 f96a 	bl	801148e <USBH_AllocPipe>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	461a      	mov	r2, r3
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	7b59      	ldrb	r1, [r3, #13]
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	7b98      	ldrb	r0, [r3, #14]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	8b12      	ldrh	r2, [r2, #24]
 800f1da:	9202      	str	r2, [sp, #8]
 800f1dc:	2202      	movs	r2, #2
 800f1de:	9201      	str	r2, [sp, #4]
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	4623      	mov	r3, r4
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f002 f922 	bl	8011430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	7b19      	ldrb	r1, [r3, #12]
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	7bd8      	ldrb	r0, [r3, #15]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	8b52      	ldrh	r2, [r2, #26]
 800f204:	9202      	str	r2, [sp, #8]
 800f206:	2202      	movs	r2, #2
 800f208:	9201      	str	r2, [sp, #4]
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	4623      	mov	r3, r4
 800f20e:	4602      	mov	r2, r0
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f002 f90d 	bl	8011430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	7b5b      	ldrb	r3, [r3, #13]
 800f222:	2200      	movs	r2, #0
 800f224:	4619      	mov	r1, r3
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f005 f886 	bl	8014338 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	7b1b      	ldrb	r3, [r3, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f005 f87f 	bl	8014338 <USBH_LL_SetToggle>

  return USBH_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3714      	adds	r7, #20
 800f240:	46bd      	mov	sp, r7
 800f242:	bd90      	pop	{r4, r7, pc}

0800f244 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f252:	69db      	ldr	r3, [r3, #28]
 800f254:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00e      	beq.n	800f27c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f002 f902 	bl	801146e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f002 f92d 	bl	80114d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2200      	movs	r2, #0
 800f27a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	7b1b      	ldrb	r3, [r3, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00e      	beq.n	800f2a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	7b1b      	ldrb	r3, [r3, #12]
 800f288:	4619      	mov	r1, r3
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f002 f8ef 	bl	801146e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	7b1b      	ldrb	r3, [r3, #12]
 800f294:	4619      	mov	r1, r3
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f002 f91a 	bl	80114d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	7b5b      	ldrb	r3, [r3, #13]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00e      	beq.n	800f2c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	7b5b      	ldrb	r3, [r3, #13]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f002 f8dc 	bl	801146e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	7b5b      	ldrb	r3, [r3, #13]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f002 f907 	bl	80114d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00b      	beq.n	800f2ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2da:	69db      	ldr	r3, [r3, #28]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f005 f8b9 	bl	8014454 <free>
    phost->pActiveClass->pData = 0U;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3340      	adds	r3, #64	@ 0x40
 800f30c:	4619      	mov	r1, r3
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f8b1 	bl	800f476 <GetLineCoding>
 800f314:	4603      	mov	r3, r0
 800f316:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f318:	7afb      	ldrb	r3, [r7, #11]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d105      	bne.n	800f32a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f324:	2102      	movs	r1, #2
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f32a:	7afb      	ldrb	r3, [r7, #11]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f33c:	2301      	movs	r3, #1
 800f33e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f340:	2300      	movs	r3, #0
 800f342:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f34a:	69db      	ldr	r3, [r3, #28]
 800f34c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f354:	2b04      	cmp	r3, #4
 800f356:	d877      	bhi.n	800f448 <USBH_CDC_Process+0x114>
 800f358:	a201      	add	r2, pc, #4	@ (adr r2, 800f360 <USBH_CDC_Process+0x2c>)
 800f35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f35e:	bf00      	nop
 800f360:	0800f375 	.word	0x0800f375
 800f364:	0800f37b 	.word	0x0800f37b
 800f368:	0800f3ab 	.word	0x0800f3ab
 800f36c:	0800f41f 	.word	0x0800f41f
 800f370:	0800f42d 	.word	0x0800f42d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	73fb      	strb	r3, [r7, #15]
      break;
 800f378:	e06d      	b.n	800f456 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 f897 	bl	800f4b4 <SetLineCoding>
 800f386:	4603      	mov	r3, r0
 800f388:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f38a:	7bbb      	ldrb	r3, [r7, #14]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2202      	movs	r2, #2
 800f394:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f398:	e058      	b.n	800f44c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f39a:	7bbb      	ldrb	r3, [r7, #14]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d055      	beq.n	800f44c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2204      	movs	r2, #4
 800f3a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f3a8:	e050      	b.n	800f44c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	3340      	adds	r3, #64	@ 0x40
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f860 	bl	800f476 <GetLineCoding>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d126      	bne.n	800f40e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3d2:	791b      	ldrb	r3, [r3, #4]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d13b      	bne.n	800f450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d133      	bne.n	800f450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d12b      	bne.n	800f450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f400:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f402:	429a      	cmp	r2, r3
 800f404:	d124      	bne.n	800f450 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f982 	bl	800f710 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f40c:	e020      	b.n	800f450 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f40e:	7bbb      	ldrb	r3, [r7, #14]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d01d      	beq.n	800f450 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2204      	movs	r2, #4
 800f418:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f41c:	e018      	b.n	800f450 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f867 	bl	800f4f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f8f6 	bl	800f616 <CDC_ProcessReception>
      break;
 800f42a:	e014      	b.n	800f456 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f42c:	2100      	movs	r1, #0
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f001 f988 	bl	8010744 <USBH_ClrFeature>
 800f434:	4603      	mov	r3, r0
 800f436:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10a      	bne.n	800f454 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f446:	e005      	b.n	800f454 <USBH_CDC_Process+0x120>

    default:
      break;
 800f448:	bf00      	nop
 800f44a:	e004      	b.n	800f456 <USBH_CDC_Process+0x122>
      break;
 800f44c:	bf00      	nop
 800f44e:	e002      	b.n	800f456 <USBH_CDC_Process+0x122>
      break;
 800f450:	bf00      	nop
 800f452:	e000      	b.n	800f456 <USBH_CDC_Process+0x122>
      break;
 800f454:	bf00      	nop

  }

  return status;
 800f456:	7bfb      	ldrb	r3, [r7, #15]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f468:	2300      	movs	r3, #0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	370c      	adds	r7, #12
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr

0800f476 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	22a1      	movs	r2, #161	@ 0xa1
 800f484:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2221      	movs	r2, #33	@ 0x21
 800f48a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2207      	movs	r2, #7
 800f49c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2207      	movs	r2, #7
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f001 fc82 	bl	8010dae <USBH_CtlReq>
 800f4aa:	4603      	mov	r3, r0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2221      	movs	r2, #33	@ 0x21
 800f4c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2220      	movs	r2, #32
 800f4c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2207      	movs	r2, #7
 800f4da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2207      	movs	r2, #7
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f001 fc63 	bl	8010dae <USBH_CtlReq>
 800f4e8:	4603      	mov	r3, r0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b086      	sub	sp, #24
 800f4f6:	af02      	add	r7, sp, #8
 800f4f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f500:	69db      	ldr	r3, [r3, #28]
 800f502:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f504:	2300      	movs	r3, #0
 800f506:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d002      	beq.n	800f518 <CDC_ProcessTransmission+0x26>
 800f512:	2b02      	cmp	r3, #2
 800f514:	d023      	beq.n	800f55e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f516:	e07a      	b.n	800f60e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	8b12      	ldrh	r2, [r2, #24]
 800f520:	4293      	cmp	r3, r2
 800f522:	d90b      	bls.n	800f53c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	69d9      	ldr	r1, [r3, #28]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	8b1a      	ldrh	r2, [r3, #24]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	7b5b      	ldrb	r3, [r3, #13]
 800f530:	2001      	movs	r0, #1
 800f532:	9000      	str	r0, [sp, #0]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f001 ff38 	bl	80113aa <USBH_BulkSendData>
 800f53a:	e00b      	b.n	800f554 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f544:	b29a      	uxth	r2, r3
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	7b5b      	ldrb	r3, [r3, #13]
 800f54a:	2001      	movs	r0, #1
 800f54c:	9000      	str	r0, [sp, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f001 ff2b 	bl	80113aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2202      	movs	r2, #2
 800f558:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f55c:	e057      	b.n	800f60e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	7b5b      	ldrb	r3, [r3, #13]
 800f562:	4619      	mov	r1, r3
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f004 febd 	bl	80142e4 <USBH_LL_GetURBState>
 800f56a:	4603      	mov	r3, r0
 800f56c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f56e:	7afb      	ldrb	r3, [r7, #11]
 800f570:	2b01      	cmp	r3, #1
 800f572:	d136      	bne.n	800f5e2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	8b12      	ldrh	r2, [r2, #24]
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d90e      	bls.n	800f59e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	8b12      	ldrh	r2, [r2, #24]
 800f588:	1a9a      	subs	r2, r3, r2
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	69db      	ldr	r3, [r3, #28]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	8b12      	ldrh	r2, [r2, #24]
 800f596:	441a      	add	r2, r3
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	61da      	str	r2, [r3, #28]
 800f59c:	e002      	b.n	800f5a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d004      	beq.n	800f5b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800f5b4:	e006      	b.n	800f5c4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f892 	bl	800f6e8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2204      	movs	r2, #4
 800f5c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f002 f8ea 	bl	80117b4 <osMessagePut>
      break;
 800f5e0:	e014      	b.n	800f60c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f5e2:	7afb      	ldrb	r3, [r7, #11]
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d111      	bne.n	800f60c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2204      	movs	r2, #4
 800f5f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f604:	2200      	movs	r2, #0
 800f606:	4619      	mov	r1, r3
 800f608:	f002 f8d4 	bl	80117b4 <osMessagePut>
      break;
 800f60c:	bf00      	nop
  }
}
 800f60e:	bf00      	nop
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b086      	sub	sp, #24
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f624:	69db      	ldr	r3, [r3, #28]
 800f626:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f628:	2300      	movs	r3, #0
 800f62a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800f632:	2b03      	cmp	r3, #3
 800f634:	d002      	beq.n	800f63c <CDC_ProcessReception+0x26>
 800f636:	2b04      	cmp	r3, #4
 800f638:	d00e      	beq.n	800f658 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f63a:	e051      	b.n	800f6e0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	6a19      	ldr	r1, [r3, #32]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	8b5a      	ldrh	r2, [r3, #26]
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	7b1b      	ldrb	r3, [r3, #12]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f001 fed3 	bl	80113f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	2204      	movs	r2, #4
 800f652:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f656:	e043      	b.n	800f6e0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	7b1b      	ldrb	r3, [r3, #12]
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f004 fe40 	bl	80142e4 <USBH_LL_GetURBState>
 800f664:	4603      	mov	r3, r0
 800f666:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f668:	7cfb      	ldrb	r3, [r7, #19]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d137      	bne.n	800f6de <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	7b1b      	ldrb	r3, [r3, #12]
 800f672:	4619      	mov	r1, r3
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f004 fda3 	bl	80141c0 <USBH_LL_GetLastXferSize>
 800f67a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	429a      	cmp	r2, r3
 800f684:	d016      	beq.n	800f6b4 <CDC_ProcessReception+0x9e>
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	8b5b      	ldrh	r3, [r3, #26]
 800f68a:	461a      	mov	r2, r3
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	4293      	cmp	r3, r2
 800f690:	d110      	bne.n	800f6b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	1ad2      	subs	r2, r2, r3
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	6a1a      	ldr	r2, [r3, #32]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	441a      	add	r2, r3
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2203      	movs	r2, #3
 800f6ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800f6b2:	e006      	b.n	800f6c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f81d 	bl	800f6fc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2204      	movs	r2, #4
 800f6c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4619      	mov	r1, r3
 800f6da:	f002 f86b 	bl	80117b4 <osMessagePut>
      break;
 800f6de:	bf00      	nop
  }
}
 800f6e0:	bf00      	nop
 800f6e2:	3718      	adds	r7, #24
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f724:	b5b0      	push	{r4, r5, r7, lr}
 800f726:	b090      	sub	sp, #64	@ 0x40
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	4613      	mov	r3, r2
 800f730:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d101      	bne.n	800f73c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f738:	2302      	movs	r3, #2
 800f73a:	e04d      	b.n	800f7d8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	79fa      	ldrb	r2, [r7, #7]
 800f740:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2200      	movs	r2, #0
 800f750:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f000 f847 	bl	800f7e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2200      	movs	r2, #0
 800f766:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f788:	4b15      	ldr	r3, [pc, #84]	@ (800f7e0 <USBH_Init+0xbc>)
 800f78a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f78e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f794:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f798:	2100      	movs	r1, #0
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 ffe2 	bl	8011764 <osMessageCreate>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f7e4 <USBH_Init+0xc0>)
 800f7aa:	f107 0414 	add.w	r4, r7, #20
 800f7ae:	461d      	mov	r5, r3
 800f7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f7bc:	f107 0314 	add.w	r3, r7, #20
 800f7c0:	68f9      	ldr	r1, [r7, #12]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f001 ff6e 	bl	80116a4 <osThreadCreate>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f004 fc41 	bl	8014058 <USBH_LL_Init>

  return USBH_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3740      	adds	r7, #64	@ 0x40
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bdb0      	pop	{r4, r5, r7, pc}
 800f7e0:	08014eb0 	.word	0x08014eb0
 800f7e4:	08014ecc 	.word	0x08014ecc

0800f7e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	e009      	b.n	800f80e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	33e0      	adds	r3, #224	@ 0xe0
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	2200      	movs	r2, #0
 800f806:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3301      	adds	r3, #1
 800f80c:	60fb      	str	r3, [r7, #12]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2b0f      	cmp	r3, #15
 800f812:	d9f2      	bls.n	800f7fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	e009      	b.n	800f82e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	4413      	add	r3, r2
 800f820:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f824:	2200      	movs	r2, #0
 800f826:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3301      	adds	r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f834:	d3f1      	bcc.n	800f81a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2240      	movs	r2, #64	@ 0x40
 800f85a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	331c      	adds	r3, #28
 800f886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f88a:	2100      	movs	r1, #0
 800f88c:	4618      	mov	r0, r3
 800f88e:	f005 f88f 	bl	80149b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f89c:	2100      	movs	r1, #0
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f005 f886 	bl	80149b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f8aa:	2212      	movs	r2, #18
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f005 f87e 	bl	80149b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f8ba:	223e      	movs	r2, #62	@ 0x3e
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f005 f876 	bl	80149b0 <memset>

  return USBH_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f8ce:	b480      	push	{r7}
 800f8d0:	b085      	sub	sp, #20
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d016      	beq.n	800f910 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10e      	bne.n	800f90a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f8f2:	1c59      	adds	r1, r3, #1
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	33de      	adds	r3, #222	@ 0xde
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	73fb      	strb	r3, [r7, #15]
 800f908:	e004      	b.n	800f914 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f90a:	2302      	movs	r3, #2
 800f90c:	73fb      	strb	r3, [r7, #15]
 800f90e:	e001      	b.n	800f914 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f910:	2302      	movs	r3, #2
 800f912:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f914:	7bfb      	ldrb	r3, [r7, #15]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f922:	b480      	push	{r7}
 800f924:	b085      	sub	sp, #20
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	460b      	mov	r3, r1
 800f92c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f938:	78fa      	ldrb	r2, [r7, #3]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d204      	bcs.n	800f948 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	78fa      	ldrb	r2, [r7, #3]
 800f942:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f946:	e001      	b.n	800f94c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f948:	2302      	movs	r3, #2
 800f94a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f95a:	b480      	push	{r7}
 800f95c:	b087      	sub	sp, #28
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	4608      	mov	r0, r1
 800f964:	4611      	mov	r1, r2
 800f966:	461a      	mov	r2, r3
 800f968:	4603      	mov	r3, r0
 800f96a:	70fb      	strb	r3, [r7, #3]
 800f96c:	460b      	mov	r3, r1
 800f96e:	70bb      	strb	r3, [r7, #2]
 800f970:	4613      	mov	r3, r2
 800f972:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f974:	2300      	movs	r3, #0
 800f976:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f982:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f984:	e025      	b.n	800f9d2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	221a      	movs	r2, #26
 800f98a:	fb02 f303 	mul.w	r3, r2, r3
 800f98e:	3308      	adds	r3, #8
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	3302      	adds	r3, #2
 800f996:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	795b      	ldrb	r3, [r3, #5]
 800f99c:	78fa      	ldrb	r2, [r7, #3]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d002      	beq.n	800f9a8 <USBH_FindInterface+0x4e>
 800f9a2:	78fb      	ldrb	r3, [r7, #3]
 800f9a4:	2bff      	cmp	r3, #255	@ 0xff
 800f9a6:	d111      	bne.n	800f9cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f9ac:	78ba      	ldrb	r2, [r7, #2]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d002      	beq.n	800f9b8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9b2:	78bb      	ldrb	r3, [r7, #2]
 800f9b4:	2bff      	cmp	r3, #255	@ 0xff
 800f9b6:	d109      	bne.n	800f9cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9bc:	787a      	ldrb	r2, [r7, #1]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d002      	beq.n	800f9c8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f9c2:	787b      	ldrb	r3, [r7, #1]
 800f9c4:	2bff      	cmp	r3, #255	@ 0xff
 800f9c6:	d101      	bne.n	800f9cc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ca:	e006      	b.n	800f9da <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f9d2:	7dfb      	ldrb	r3, [r7, #23]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d9d6      	bls.n	800f986 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f9d8:	23ff      	movs	r3, #255	@ 0xff
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f004 fb6e 	bl	80140d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f004 fc87 	bl	801430a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b088      	sub	sp, #32
 800fa0c:	af04      	add	r7, sp, #16
 800fa0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fa10:	2302      	movs	r3, #2
 800fa12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fa14:	2300      	movs	r3, #0
 800fa16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d102      	bne.n	800fa2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2203      	movs	r2, #3
 800fa28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	2b0b      	cmp	r3, #11
 800fa32:	f200 8244 	bhi.w	800febe <USBH_Process+0x4b6>
 800fa36:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <USBH_Process+0x34>)
 800fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3c:	0800fa6d 	.word	0x0800fa6d
 800fa40:	0800fabb 	.word	0x0800fabb
 800fa44:	0800fb3f 	.word	0x0800fb3f
 800fa48:	0800fe3d 	.word	0x0800fe3d
 800fa4c:	0800febf 	.word	0x0800febf
 800fa50:	0800fbfb 	.word	0x0800fbfb
 800fa54:	0800fdc7 	.word	0x0800fdc7
 800fa58:	0800fc4d 	.word	0x0800fc4d
 800fa5c:	0800fc89 	.word	0x0800fc89
 800fa60:	0800fcc1 	.word	0x0800fcc1
 800fa64:	0800fd1f 	.word	0x0800fd1f
 800fa68:	0800fe25 	.word	0x0800fe25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f000 8224 	beq.w	800fec2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fa80:	20c8      	movs	r0, #200	@ 0xc8
 800fa82:	f004 fc8c 	bl	801439e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f004 fb7f 	bl	801418a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fab0:	2200      	movs	r2, #0
 800fab2:	4619      	mov	r1, r3
 800fab4:	f001 fe7e 	bl	80117b4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fab8:	e203      	b.n	800fec2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d107      	bne.n	800fad4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2202      	movs	r2, #2
 800fad0:	701a      	strb	r2, [r3, #0]
 800fad2:	e025      	b.n	800fb20 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fade:	d914      	bls.n	800fb0a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fae6:	3301      	adds	r3, #1
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800faf6:	2b03      	cmp	r3, #3
 800faf8:	d903      	bls.n	800fb02 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	220d      	movs	r2, #13
 800fafe:	701a      	strb	r2, [r3, #0]
 800fb00:	e00e      	b.n	800fb20 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	701a      	strb	r2, [r3, #0]
 800fb08:	e00a      	b.n	800fb20 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fb10:	f103 020a 	add.w	r2, r3, #10
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800fb1a:	200a      	movs	r0, #10
 800fb1c:	f004 fc3f 	bl	801439e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb34:	2200      	movs	r2, #0
 800fb36:	4619      	mov	r1, r3
 800fb38:	f001 fe3c 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb3c:	e1c8      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d005      	beq.n	800fb54 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb4e:	2104      	movs	r1, #4
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fb54:	2064      	movs	r0, #100	@ 0x64
 800fb56:	f004 fc22 	bl	801439e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f004 faee 	bl	801413c <USBH_LL_GetSpeed>
 800fb60:	4603      	mov	r3, r0
 800fb62:	461a      	mov	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800fb70:	2100      	movs	r1, #0
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f001 fc8b 	bl	801148e <USBH_AllocPipe>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fb80:	2180      	movs	r1, #128	@ 0x80
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 fc83 	bl	801148e <USBH_AllocPipe>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	7919      	ldrb	r1, [r3, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fba4:	9202      	str	r2, [sp, #8]
 800fba6:	2200      	movs	r2, #0
 800fba8:	9201      	str	r2, [sp, #4]
 800fbaa:	9300      	str	r3, [sp, #0]
 800fbac:	4603      	mov	r3, r0
 800fbae:	2280      	movs	r2, #128	@ 0x80
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f001 fc3d 	bl	8011430 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	7959      	ldrb	r1, [r3, #5]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fbca:	9202      	str	r2, [sp, #8]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	9201      	str	r2, [sp, #4]
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f001 fc2a 	bl	8011430 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	f001 fdde 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fbf8:	e16a      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f96e 	bl	800fedc <USBH_HandleEnum>
 800fc00:	4603      	mov	r3, r0
 800fc02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fc04:	7bbb      	ldrb	r3, [r7, #14]
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	f040 815c 	bne.w	800fec6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d103      	bne.n	800fc28 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2208      	movs	r2, #8
 800fc24:	701a      	strb	r2, [r3, #0]
 800fc26:	e002      	b.n	800fc2e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2207      	movs	r2, #7
 800fc2c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2205      	movs	r2, #5
 800fc32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fc42:	2200      	movs	r2, #0
 800fc44:	4619      	mov	r1, r3
 800fc46:	f001 fdb5 	bl	80117b4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fc4a:	e13c      	b.n	800fec6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 8139 	beq.w	800feca <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fc5e:	2101      	movs	r1, #1
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2208      	movs	r2, #8
 800fc68:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2205      	movs	r2, #5
 800fc6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fc7e:	2200      	movs	r2, #0
 800fc80:	4619      	mov	r1, r3
 800fc82:	f001 fd97 	bl	80117b4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fc86:	e120      	b.n	800feca <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800fc8e:	4619      	mov	r1, r3
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 fd10 	bl	80106b6 <USBH_SetCfg>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d102      	bne.n	800fca2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2209      	movs	r2, #9
 800fca0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2201      	movs	r2, #1
 800fca6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	4619      	mov	r1, r3
 800fcba:	f001 fd7b 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fcbe:	e107      	b.n	800fed0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800fcc6:	f003 0320 	and.w	r3, r3, #32
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d015      	beq.n	800fcfa <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fcce:	2101      	movs	r1, #1
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fd13 	bl	80106fc <USBH_SetFeature>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d103      	bne.n	800fcea <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	220a      	movs	r2, #10
 800fce6:	701a      	strb	r2, [r3, #0]
 800fce8:	e00a      	b.n	800fd00 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b03      	cmp	r3, #3
 800fcf0:	d106      	bne.n	800fd00 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	220a      	movs	r2, #10
 800fcf6:	701a      	strb	r2, [r3, #0]
 800fcf8:	e002      	b.n	800fd00 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	220a      	movs	r2, #10
 800fcfe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2201      	movs	r2, #1
 800fd04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fd14:	2200      	movs	r2, #0
 800fd16:	4619      	mov	r1, r3
 800fd18:	f001 fd4c 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fd1c:	e0d8      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d03f      	beq.n	800fda8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd30:	2300      	movs	r3, #0
 800fd32:	73fb      	strb	r3, [r7, #15]
 800fd34:	e016      	b.n	800fd64 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fd36:	7bfa      	ldrb	r2, [r7, #15]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	32de      	adds	r2, #222	@ 0xde
 800fd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd40:	791a      	ldrb	r2, [r3, #4]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d108      	bne.n	800fd5e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fd4c:	7bfa      	ldrb	r2, [r7, #15]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	32de      	adds	r2, #222	@ 0xde
 800fd52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800fd5c:	e005      	b.n	800fd6a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	3301      	adds	r3, #1
 800fd62:	73fb      	strb	r3, [r7, #15]
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d0e5      	beq.n	800fd36 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d016      	beq.n	800fda2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fd7a:	689b      	ldr	r3, [r3, #8]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	4798      	blx	r3
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d109      	bne.n	800fd9a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2206      	movs	r2, #6
 800fd8a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fd92:	2103      	movs	r1, #3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	4798      	blx	r3
 800fd98:	e006      	b.n	800fda8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	220d      	movs	r2, #13
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	e002      	b.n	800fda8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	220d      	movs	r2, #13
 800fda6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2205      	movs	r2, #5
 800fdac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	f001 fcf8 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fdc4:	e084      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d017      	beq.n	800fe00 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdd6:	691b      	ldr	r3, [r3, #16]
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	4798      	blx	r3
 800fddc:	4603      	mov	r3, r0
 800fdde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d103      	bne.n	800fdf0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	220b      	movs	r2, #11
 800fdec:	701a      	strb	r2, [r3, #0]
 800fdee:	e00a      	b.n	800fe06 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800fdf0:	7bbb      	ldrb	r3, [r7, #14]
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	d106      	bne.n	800fe06 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	220d      	movs	r2, #13
 800fdfc:	701a      	strb	r2, [r3, #0]
 800fdfe:	e002      	b.n	800fe06 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	220d      	movs	r2, #13
 800fe04:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2205      	movs	r2, #5
 800fe0a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	f001 fcc9 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fe22:	e055      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d04f      	beq.n	800fece <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe34:	695b      	ldr	r3, [r3, #20]
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	4798      	blx	r3
      }
      break;
 800fe3a:	e048      	b.n	800fece <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7ff fccf 	bl	800f7e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d005      	beq.n	800fe7e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fe78:	2105      	movs	r1, #5
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d107      	bne.n	800fe9a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fda7 	bl	800f9e6 <USBH_Start>
 800fe98:	e002      	b.n	800fea0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f004 f918 	bl	80140d0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800feb4:	2200      	movs	r2, #0
 800feb6:	4619      	mov	r1, r3
 800feb8:	f001 fc7c 	bl	80117b4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800febc:	e008      	b.n	800fed0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800febe:	bf00      	nop
 800fec0:	e006      	b.n	800fed0 <USBH_Process+0x4c8>
      break;
 800fec2:	bf00      	nop
 800fec4:	e004      	b.n	800fed0 <USBH_Process+0x4c8>
      break;
 800fec6:	bf00      	nop
 800fec8:	e002      	b.n	800fed0 <USBH_Process+0x4c8>
    break;
 800feca:	bf00      	nop
 800fecc:	e000      	b.n	800fed0 <USBH_Process+0x4c8>
      break;
 800fece:	bf00      	nop
  }
  return USBH_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop

0800fedc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b088      	sub	sp, #32
 800fee0:	af04      	add	r7, sp, #16
 800fee2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fee4:	2301      	movs	r3, #1
 800fee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fee8:	2301      	movs	r3, #1
 800feea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	785b      	ldrb	r3, [r3, #1]
 800fef0:	2b07      	cmp	r3, #7
 800fef2:	f200 8204 	bhi.w	80102fe <USBH_HandleEnum+0x422>
 800fef6:	a201      	add	r2, pc, #4	@ (adr r2, 800fefc <USBH_HandleEnum+0x20>)
 800fef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefc:	0800ff1d 	.word	0x0800ff1d
 800ff00:	0800ffd7 	.word	0x0800ffd7
 800ff04:	08010041 	.word	0x08010041
 800ff08:	080100cb 	.word	0x080100cb
 800ff0c:	08010135 	.word	0x08010135
 800ff10:	080101a5 	.word	0x080101a5
 800ff14:	08010241 	.word	0x08010241
 800ff18:	080102bf 	.word	0x080102bf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ff1c:	2108      	movs	r1, #8
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 fae6 	bl	80104f0 <USBH_Get_DevDesc>
 800ff24:	4603      	mov	r3, r0
 800ff26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ff28:	7bbb      	ldrb	r3, [r7, #14]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d12e      	bne.n	800ff8c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7919      	ldrb	r1, [r3, #4]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff52:	9202      	str	r2, [sp, #8]
 800ff54:	2200      	movs	r2, #0
 800ff56:	9201      	str	r2, [sp, #4]
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2280      	movs	r2, #128	@ 0x80
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f001 fa66 	bl	8011430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7959      	ldrb	r1, [r3, #5]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff78:	9202      	str	r2, [sp, #8]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	9201      	str	r2, [sp, #4]
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	4603      	mov	r3, r0
 800ff82:	2200      	movs	r2, #0
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f001 fa53 	bl	8011430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ff8a:	e1ba      	b.n	8010302 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	2b03      	cmp	r3, #3
 800ff90:	f040 81b7 	bne.w	8010302 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	b2da      	uxtb	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ffaa:	2b03      	cmp	r3, #3
 800ffac:	d903      	bls.n	800ffb6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	220d      	movs	r2, #13
 800ffb2:	701a      	strb	r2, [r3, #0]
      break;
 800ffb4:	e1a5      	b.n	8010302 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	795b      	ldrb	r3, [r3, #5]
 800ffba:	4619      	mov	r1, r3
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f001 fa87 	bl	80114d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	791b      	ldrb	r3, [r3, #4]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f001 fa81 	bl	80114d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	701a      	strb	r2, [r3, #0]
      break;
 800ffd4:	e195      	b.n	8010302 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ffd6:	2112      	movs	r1, #18
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa89 	bl	80104f0 <USBH_Get_DevDesc>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffe2:	7bbb      	ldrb	r3, [r7, #14]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2202      	movs	r2, #2
 800ffec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ffee:	e18a      	b.n	8010306 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fff0:	7bbb      	ldrb	r3, [r7, #14]
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	f040 8187 	bne.w	8010306 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fffe:	3301      	adds	r3, #1
 8010000:	b2da      	uxtb	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801000e:	2b03      	cmp	r3, #3
 8010010:	d903      	bls.n	801001a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	220d      	movs	r2, #13
 8010016:	701a      	strb	r2, [r3, #0]
      break;
 8010018:	e175      	b.n	8010306 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	795b      	ldrb	r3, [r3, #5]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f001 fa55 	bl	80114d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	791b      	ldrb	r3, [r3, #4]
 801002a:	4619      	mov	r1, r3
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f001 fa4f 	bl	80114d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	701a      	strb	r2, [r3, #0]
      break;
 801003e:	e162      	b.n	8010306 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010040:	2101      	movs	r1, #1
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fb13 	bl	801066e <USBH_SetAddress>
 8010048:	4603      	mov	r3, r0
 801004a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d130      	bne.n	80100b4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8010052:	2002      	movs	r0, #2
 8010054:	f004 f9a3 	bl	801439e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2201      	movs	r2, #1
 801005c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2203      	movs	r2, #3
 8010064:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	7919      	ldrb	r1, [r3, #4]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801007a:	9202      	str	r2, [sp, #8]
 801007c:	2200      	movs	r2, #0
 801007e:	9201      	str	r2, [sp, #4]
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	4603      	mov	r3, r0
 8010084:	2280      	movs	r2, #128	@ 0x80
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f001 f9d2 	bl	8011430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	7959      	ldrb	r1, [r3, #5]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80100a0:	9202      	str	r2, [sp, #8]
 80100a2:	2200      	movs	r2, #0
 80100a4:	9201      	str	r2, [sp, #4]
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	4603      	mov	r3, r0
 80100aa:	2200      	movs	r2, #0
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f001 f9bf 	bl	8011430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80100b2:	e12a      	b.n	801030a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100b4:	7bbb      	ldrb	r3, [r7, #14]
 80100b6:	2b03      	cmp	r3, #3
 80100b8:	f040 8127 	bne.w	801030a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	220d      	movs	r2, #13
 80100c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	705a      	strb	r2, [r3, #1]
      break;
 80100c8:	e11f      	b.n	801030a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80100ca:	2109      	movs	r1, #9
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fa3b 	bl	8010548 <USBH_Get_CfgDesc>
 80100d2:	4603      	mov	r3, r0
 80100d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d103      	bne.n	80100e4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2204      	movs	r2, #4
 80100e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80100e2:	e114      	b.n	801030e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100e4:	7bbb      	ldrb	r3, [r7, #14]
 80100e6:	2b03      	cmp	r3, #3
 80100e8:	f040 8111 	bne.w	801030e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80100f2:	3301      	adds	r3, #1
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010102:	2b03      	cmp	r3, #3
 8010104:	d903      	bls.n	801010e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	220d      	movs	r2, #13
 801010a:	701a      	strb	r2, [r3, #0]
      break;
 801010c:	e0ff      	b.n	801030e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	795b      	ldrb	r3, [r3, #5]
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f001 f9db 	bl	80114d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	791b      	ldrb	r3, [r3, #4]
 801011e:	4619      	mov	r1, r3
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f001 f9d5 	bl	80114d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	701a      	strb	r2, [r3, #0]
      break;
 8010132:	e0ec      	b.n	801030e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fa03 	bl	8010548 <USBH_Get_CfgDesc>
 8010142:	4603      	mov	r3, r0
 8010144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d103      	bne.n	8010154 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2205      	movs	r2, #5
 8010150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010152:	e0de      	b.n	8010312 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010154:	7bbb      	ldrb	r3, [r7, #14]
 8010156:	2b03      	cmp	r3, #3
 8010158:	f040 80db 	bne.w	8010312 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010162:	3301      	adds	r3, #1
 8010164:	b2da      	uxtb	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010172:	2b03      	cmp	r3, #3
 8010174:	d903      	bls.n	801017e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	220d      	movs	r2, #13
 801017a:	701a      	strb	r2, [r3, #0]
      break;
 801017c:	e0c9      	b.n	8010312 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	795b      	ldrb	r3, [r3, #5]
 8010182:	4619      	mov	r1, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f001 f9a3 	bl	80114d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	791b      	ldrb	r3, [r3, #4]
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f001 f99d 	bl	80114d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	701a      	strb	r2, [r3, #0]
      break;
 80101a2:	e0b6      	b.n	8010312 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d036      	beq.n	801021c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101ba:	23ff      	movs	r3, #255	@ 0xff
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f9ed 	bl	801059c <USBH_Get_StringDesc>
 80101c2:	4603      	mov	r3, r0
 80101c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101c6:	7bbb      	ldrb	r3, [r7, #14]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d111      	bne.n	80101f0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2206      	movs	r2, #6
 80101d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2205      	movs	r2, #5
 80101d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80101e6:	2200      	movs	r2, #0
 80101e8:	4619      	mov	r1, r3
 80101ea:	f001 fae3 	bl	80117b4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80101ee:	e092      	b.n	8010316 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101f0:	7bbb      	ldrb	r3, [r7, #14]
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	f040 808f 	bne.w	8010316 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2206      	movs	r2, #6
 80101fc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2205      	movs	r2, #5
 8010202:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010212:	2200      	movs	r2, #0
 8010214:	4619      	mov	r1, r3
 8010216:	f001 facd 	bl	80117b4 <osMessagePut>
      break;
 801021a:	e07c      	b.n	8010316 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2206      	movs	r2, #6
 8010220:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2205      	movs	r2, #5
 8010226:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010236:	2200      	movs	r2, #0
 8010238:	4619      	mov	r1, r3
 801023a:	f001 fabb 	bl	80117b4 <osMessagePut>
      break;
 801023e:	e06a      	b.n	8010316 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8010246:	2b00      	cmp	r3, #0
 8010248:	d027      	beq.n	801029a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010256:	23ff      	movs	r3, #255	@ 0xff
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 f99f 	bl	801059c <USBH_Get_StringDesc>
 801025e:	4603      	mov	r3, r0
 8010260:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010262:	7bbb      	ldrb	r3, [r7, #14]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d103      	bne.n	8010270 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2207      	movs	r2, #7
 801026c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801026e:	e054      	b.n	801031a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010270:	7bbb      	ldrb	r3, [r7, #14]
 8010272:	2b03      	cmp	r3, #3
 8010274:	d151      	bne.n	801031a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2207      	movs	r2, #7
 801027a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2205      	movs	r2, #5
 8010280:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010290:	2200      	movs	r2, #0
 8010292:	4619      	mov	r1, r3
 8010294:	f001 fa8e 	bl	80117b4 <osMessagePut>
      break;
 8010298:	e03f      	b.n	801031a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2207      	movs	r2, #7
 801029e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2205      	movs	r2, #5
 80102a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80102b4:	2200      	movs	r2, #0
 80102b6:	4619      	mov	r1, r3
 80102b8:	f001 fa7c 	bl	80117b4 <osMessagePut>
      break;
 80102bc:	e02d      	b.n	801031a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d017      	beq.n	80102f8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80102d4:	23ff      	movs	r3, #255	@ 0xff
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f960 	bl	801059c <USBH_Get_StringDesc>
 80102dc:	4603      	mov	r3, r0
 80102de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80102e0:	7bbb      	ldrb	r3, [r7, #14]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80102e6:	2300      	movs	r3, #0
 80102e8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80102ea:	e018      	b.n	801031e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80102ec:	7bbb      	ldrb	r3, [r7, #14]
 80102ee:	2b03      	cmp	r3, #3
 80102f0:	d115      	bne.n	801031e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80102f2:	2300      	movs	r3, #0
 80102f4:	73fb      	strb	r3, [r7, #15]
      break;
 80102f6:	e012      	b.n	801031e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
      break;
 80102fc:	e00f      	b.n	801031e <USBH_HandleEnum+0x442>

    default:
      break;
 80102fe:	bf00      	nop
 8010300:	e00e      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 8010302:	bf00      	nop
 8010304:	e00c      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 8010306:	bf00      	nop
 8010308:	e00a      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 801030a:	bf00      	nop
 801030c:	e008      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 801030e:	bf00      	nop
 8010310:	e006      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 8010312:	bf00      	nop
 8010314:	e004      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 8010316:	bf00      	nop
 8010318:	e002      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 801031a:	bf00      	nop
 801031c:	e000      	b.n	8010320 <USBH_HandleEnum+0x444>
      break;
 801031e:	bf00      	nop
  }
  return Status;
 8010320:	7bfb      	ldrb	r3, [r7, #15]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop

0801032c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	683a      	ldr	r2, [r7, #0]
 801033a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 801033e:	bf00      	nop
 8010340:	370c      	adds	r7, #12
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr

0801034a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010358:	1c5a      	adds	r2, r3, #1
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 f804 	bl	801036e <USBH_HandleSof>
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b0b      	cmp	r3, #11
 801037e:	d10a      	bne.n	8010396 <USBH_HandleSof+0x28>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d005      	beq.n	8010396 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010390:	699b      	ldr	r3, [r3, #24]
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	4798      	blx	r3
  }
}
 8010396:	bf00      	nop
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2201      	movs	r2, #1
 80103aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80103c2:	2200      	movs	r2, #0
 80103c4:	4619      	mov	r1, r3
 80103c6:	f001 f9f5 	bl	80117b4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80103ca:	bf00      	nop
}
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80103d2:	b480      	push	{r7}
 80103d4:	b083      	sub	sp, #12
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80103e2:	bf00      	nop
}
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b082      	sub	sp, #8
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2201      	movs	r2, #1
 8010412:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010422:	2200      	movs	r2, #0
 8010424:	4619      	mov	r1, r3
 8010426:	f001 f9c5 	bl	80117b4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2201      	movs	r2, #1
 8010440:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f003 fe56 	bl	8014106 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	791b      	ldrb	r3, [r3, #4]
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f001 f835 	bl	80114d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	795b      	ldrb	r3, [r3, #5]
 801046a:	4619      	mov	r1, r3
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f001 f82f 	bl	80114d0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2201      	movs	r2, #1
 8010476:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010486:	2200      	movs	r2, #0
 8010488:	4619      	mov	r1, r3
 801048a:	f001 f993 	bl	80117b4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80104a6:	f107 030c 	add.w	r3, r7, #12
 80104aa:	f04f 32ff 	mov.w	r2, #4294967295
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f9c0 	bl	8011834 <osMessageGet>
    if (event.status == osEventMessage)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b10      	cmp	r3, #16
 80104b8:	d1f2      	bne.n	80104a0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff faa4 	bl	800fa08 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80104c0:	e7ee      	b.n	80104a0 <USBH_Process_OS+0x8>

080104c2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b082      	sub	sp, #8
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80104de:	2200      	movs	r2, #0
 80104e0:	4619      	mov	r1, r3
 80104e2:	f001 f967 	bl	80117b4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af02      	add	r7, sp, #8
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	460b      	mov	r3, r1
 80104fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80104fc:	887b      	ldrh	r3, [r7, #2]
 80104fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010502:	d901      	bls.n	8010508 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010504:	2303      	movs	r3, #3
 8010506:	e01b      	b.n	8010540 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801050e:	887b      	ldrh	r3, [r7, #2]
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	4613      	mov	r3, r2
 8010514:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010518:	2100      	movs	r1, #0
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 f872 	bl	8010604 <USBH_GetDescriptor>
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d109      	bne.n	801053e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010530:	887a      	ldrh	r2, [r7, #2]
 8010532:	4619      	mov	r1, r3
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 f929 	bl	801078c <USBH_ParseDevDesc>
 801053a:	4603      	mov	r3, r0
 801053c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801053e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af02      	add	r7, sp, #8
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	460b      	mov	r3, r1
 8010552:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	331c      	adds	r3, #28
 8010558:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801055a:	887b      	ldrh	r3, [r7, #2]
 801055c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010560:	d901      	bls.n	8010566 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010562:	2303      	movs	r3, #3
 8010564:	e016      	b.n	8010594 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010566:	887b      	ldrh	r3, [r7, #2]
 8010568:	9300      	str	r3, [sp, #0]
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010570:	2100      	movs	r1, #0
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f846 	bl	8010604 <USBH_GetDescriptor>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d107      	bne.n	8010592 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010582:	887b      	ldrh	r3, [r7, #2]
 8010584:	461a      	mov	r2, r3
 8010586:	68b9      	ldr	r1, [r7, #8]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f9af 	bl	80108ec <USBH_ParseCfgDesc>
 801058e:	4603      	mov	r3, r0
 8010590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010592:	7bfb      	ldrb	r3, [r7, #15]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af02      	add	r7, sp, #8
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	607a      	str	r2, [r7, #4]
 80105a6:	461a      	mov	r2, r3
 80105a8:	460b      	mov	r3, r1
 80105aa:	72fb      	strb	r3, [r7, #11]
 80105ac:	4613      	mov	r3, r2
 80105ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80105b0:	893b      	ldrh	r3, [r7, #8]
 80105b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80105b6:	d802      	bhi.n	80105be <USBH_Get_StringDesc+0x22>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80105be:	2303      	movs	r3, #3
 80105c0:	e01c      	b.n	80105fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80105c2:	7afb      	ldrb	r3, [r7, #11]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80105ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80105d2:	893b      	ldrh	r3, [r7, #8]
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	460b      	mov	r3, r1
 80105d8:	2100      	movs	r1, #0
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f000 f812 	bl	8010604 <USBH_GetDescriptor>
 80105e0:	4603      	mov	r3, r0
 80105e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80105e4:	7dfb      	ldrb	r3, [r7, #23]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d107      	bne.n	80105fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80105f0:	893a      	ldrh	r2, [r7, #8]
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 fb8d 	bl	8010d14 <USBH_ParseStringDesc>
  }

  return status;
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3718      	adds	r7, #24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	607b      	str	r3, [r7, #4]
 801060e:	460b      	mov	r3, r1
 8010610:	72fb      	strb	r3, [r7, #11]
 8010612:	4613      	mov	r3, r2
 8010614:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	789b      	ldrb	r3, [r3, #2]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d11c      	bne.n	8010658 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801061e:	7afb      	ldrb	r3, [r7, #11]
 8010620:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010624:	b2da      	uxtb	r2, r3
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2206      	movs	r2, #6
 801062e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	893a      	ldrh	r2, [r7, #8]
 8010634:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010636:	893b      	ldrh	r3, [r7, #8]
 8010638:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801063c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010640:	d104      	bne.n	801064c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f240 4209 	movw	r2, #1033	@ 0x409
 8010648:	829a      	strh	r2, [r3, #20]
 801064a:	e002      	b.n	8010652 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2200      	movs	r2, #0
 8010650:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	8b3a      	ldrh	r2, [r7, #24]
 8010656:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010658:	8b3b      	ldrh	r3, [r7, #24]
 801065a:	461a      	mov	r2, r3
 801065c:	6879      	ldr	r1, [r7, #4]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f000 fba5 	bl	8010dae <USBH_CtlReq>
 8010664:	4603      	mov	r3, r0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	789b      	ldrb	r3, [r3, #2]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d10f      	bne.n	80106a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2205      	movs	r2, #5
 801068c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801068e:	78fb      	ldrb	r3, [r7, #3]
 8010690:	b29a      	uxth	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106a2:	2200      	movs	r2, #0
 80106a4:	2100      	movs	r1, #0
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fb81 	bl	8010dae <USBH_CtlReq>
 80106ac:	4603      	mov	r3, r0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	460b      	mov	r3, r1
 80106c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	789b      	ldrb	r3, [r3, #2]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d10e      	bne.n	80106e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2209      	movs	r2, #9
 80106d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	887a      	ldrh	r2, [r7, #2]
 80106da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106e8:	2200      	movs	r2, #0
 80106ea:	2100      	movs	r1, #0
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fb5e 	bl	8010dae <USBH_CtlReq>
 80106f2:	4603      	mov	r3, r0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	789b      	ldrb	r3, [r3, #2]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d10f      	bne.n	8010730 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2203      	movs	r2, #3
 801071a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801071c:	78fb      	ldrb	r3, [r7, #3]
 801071e:	b29a      	uxth	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010730:	2200      	movs	r2, #0
 8010732:	2100      	movs	r1, #0
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fb3a 	bl	8010dae <USBH_CtlReq>
 801073a:	4603      	mov	r3, r0
}
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	460b      	mov	r3, r1
 801074e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	789b      	ldrb	r3, [r3, #2]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d10f      	bne.n	8010778 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2202      	movs	r2, #2
 801075c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2201      	movs	r2, #1
 8010762:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801076a:	78fb      	ldrb	r3, [r7, #3]
 801076c:	b29a      	uxth	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010778:	2200      	movs	r2, #0
 801077a:	2100      	movs	r1, #0
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fb16 	bl	8010dae <USBH_CtlReq>
 8010782:	4603      	mov	r3, r0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801078c:	b480      	push	{r7}
 801078e:	b087      	sub	sp, #28
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	4613      	mov	r3, r2
 8010798:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80107a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80107a2:	2300      	movs	r3, #0
 80107a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d101      	bne.n	80107b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80107ac:	2302      	movs	r3, #2
 80107ae:	e094      	b.n	80108da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	781a      	ldrb	r2, [r3, #0]
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	785a      	ldrb	r2, [r3, #1]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	3302      	adds	r3, #2
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	3303      	adds	r3, #3
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	021b      	lsls	r3, r3, #8
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	4313      	orrs	r3, r2
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	791a      	ldrb	r2, [r3, #4]
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	795a      	ldrb	r2, [r3, #5]
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	799a      	ldrb	r2, [r3, #6]
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	79da      	ldrb	r2, [r3, #7]
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010800:	2b00      	cmp	r3, #0
 8010802:	d004      	beq.n	801080e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801080a:	2b01      	cmp	r3, #1
 801080c:	d11b      	bne.n	8010846 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	79db      	ldrb	r3, [r3, #7]
 8010812:	2b20      	cmp	r3, #32
 8010814:	dc0f      	bgt.n	8010836 <USBH_ParseDevDesc+0xaa>
 8010816:	2b08      	cmp	r3, #8
 8010818:	db0f      	blt.n	801083a <USBH_ParseDevDesc+0xae>
 801081a:	3b08      	subs	r3, #8
 801081c:	4a32      	ldr	r2, [pc, #200]	@ (80108e8 <USBH_ParseDevDesc+0x15c>)
 801081e:	fa22 f303 	lsr.w	r3, r2, r3
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	2b00      	cmp	r3, #0
 8010828:	bf14      	ite	ne
 801082a:	2301      	movne	r3, #1
 801082c:	2300      	moveq	r3, #0
 801082e:	b2db      	uxtb	r3, r3
 8010830:	2b00      	cmp	r3, #0
 8010832:	d106      	bne.n	8010842 <USBH_ParseDevDesc+0xb6>
 8010834:	e001      	b.n	801083a <USBH_ParseDevDesc+0xae>
 8010836:	2b40      	cmp	r3, #64	@ 0x40
 8010838:	d003      	beq.n	8010842 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	2208      	movs	r2, #8
 801083e:	71da      	strb	r2, [r3, #7]
        break;
 8010840:	e000      	b.n	8010844 <USBH_ParseDevDesc+0xb8>
        break;
 8010842:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010844:	e00e      	b.n	8010864 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801084c:	2b02      	cmp	r3, #2
 801084e:	d107      	bne.n	8010860 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	79db      	ldrb	r3, [r3, #7]
 8010854:	2b08      	cmp	r3, #8
 8010856:	d005      	beq.n	8010864 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	2208      	movs	r2, #8
 801085c:	71da      	strb	r2, [r3, #7]
 801085e:	e001      	b.n	8010864 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010860:	2303      	movs	r3, #3
 8010862:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010864:	88fb      	ldrh	r3, [r7, #6]
 8010866:	2b08      	cmp	r3, #8
 8010868:	d936      	bls.n	80108d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	3308      	adds	r3, #8
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	461a      	mov	r2, r3
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	3309      	adds	r3, #9
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	021b      	lsls	r3, r3, #8
 801087a:	b29b      	uxth	r3, r3
 801087c:	4313      	orrs	r3, r2
 801087e:	b29a      	uxth	r2, r3
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	330a      	adds	r3, #10
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	461a      	mov	r2, r3
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	330b      	adds	r3, #11
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	021b      	lsls	r3, r3, #8
 8010894:	b29b      	uxth	r3, r3
 8010896:	4313      	orrs	r3, r2
 8010898:	b29a      	uxth	r2, r3
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	330c      	adds	r3, #12
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	330d      	adds	r3, #13
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	021b      	lsls	r3, r3, #8
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	4313      	orrs	r3, r2
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	7b9a      	ldrb	r2, [r3, #14]
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	7bda      	ldrb	r2, [r3, #15]
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	7c1a      	ldrb	r2, [r3, #16]
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	7c5a      	ldrb	r2, [r3, #17]
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	371c      	adds	r7, #28
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	01000101 	.word	0x01000101

080108ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08c      	sub	sp, #48	@ 0x30
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	4613      	mov	r3, r2
 80108f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010900:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010908:	2300      	movs	r3, #0
 801090a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801090e:	2300      	movs	r3, #0
 8010910:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801091a:	2302      	movs	r3, #2
 801091c:	e0da      	b.n	8010ad4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b09      	cmp	r3, #9
 8010928:	d002      	beq.n	8010930 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092c:	2209      	movs	r2, #9
 801092e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	781a      	ldrb	r2, [r3, #0]
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	785a      	ldrb	r2, [r3, #1]
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	3302      	adds	r3, #2
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3303      	adds	r3, #3
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	021b      	lsls	r3, r3, #8
 8010950:	b29b      	uxth	r3, r3
 8010952:	4313      	orrs	r3, r2
 8010954:	b29b      	uxth	r3, r3
 8010956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801095a:	bf28      	it	cs
 801095c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010960:	b29a      	uxth	r2, r3
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	791a      	ldrb	r2, [r3, #4]
 801096a:	6a3b      	ldr	r3, [r7, #32]
 801096c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	795a      	ldrb	r2, [r3, #5]
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	799a      	ldrb	r2, [r3, #6]
 801097a:	6a3b      	ldr	r3, [r7, #32]
 801097c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	79da      	ldrb	r2, [r3, #7]
 8010982:	6a3b      	ldr	r3, [r7, #32]
 8010984:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	7a1a      	ldrb	r2, [r3, #8]
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801098e:	88fb      	ldrh	r3, [r7, #6]
 8010990:	2b09      	cmp	r3, #9
 8010992:	f240 809d 	bls.w	8010ad0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8010996:	2309      	movs	r3, #9
 8010998:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801099a:	2300      	movs	r3, #0
 801099c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801099e:	e081      	b.n	8010aa4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80109a0:	f107 0316 	add.w	r3, r7, #22
 80109a4:	4619      	mov	r1, r3
 80109a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109a8:	f000 f9e7 	bl	8010d7a <USBH_GetNextDesc>
 80109ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80109ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109b0:	785b      	ldrb	r3, [r3, #1]
 80109b2:	2b04      	cmp	r3, #4
 80109b4:	d176      	bne.n	8010aa4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80109b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b09      	cmp	r3, #9
 80109bc:	d002      	beq.n	80109c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80109be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c0:	2209      	movs	r2, #9
 80109c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80109c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109c8:	221a      	movs	r2, #26
 80109ca:	fb02 f303 	mul.w	r3, r2, r3
 80109ce:	3308      	adds	r3, #8
 80109d0:	6a3a      	ldr	r2, [r7, #32]
 80109d2:	4413      	add	r3, r2
 80109d4:	3302      	adds	r3, #2
 80109d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80109d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109da:	69f8      	ldr	r0, [r7, #28]
 80109dc:	f000 f87e 	bl	8010adc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80109e0:	2300      	movs	r3, #0
 80109e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80109ea:	e043      	b.n	8010a74 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80109ec:	f107 0316 	add.w	r3, r7, #22
 80109f0:	4619      	mov	r1, r3
 80109f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109f4:	f000 f9c1 	bl	8010d7a <USBH_GetNextDesc>
 80109f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80109fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109fc:	785b      	ldrb	r3, [r3, #1]
 80109fe:	2b05      	cmp	r3, #5
 8010a00:	d138      	bne.n	8010a74 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	795b      	ldrb	r3, [r3, #5]
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d113      	bne.n	8010a32 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d003      	beq.n	8010a1a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	799b      	ldrb	r3, [r3, #6]
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	d10b      	bne.n	8010a32 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	79db      	ldrb	r3, [r3, #7]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10b      	bne.n	8010a3a <USBH_ParseCfgDesc+0x14e>
 8010a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	2b09      	cmp	r3, #9
 8010a28:	d007      	beq.n	8010a3a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a2c:	2209      	movs	r2, #9
 8010a2e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a30:	e003      	b.n	8010a3a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a34:	2207      	movs	r2, #7
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	e000      	b.n	8010a3c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a3a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a44:	3201      	adds	r2, #1
 8010a46:	00d2      	lsls	r2, r2, #3
 8010a48:	211a      	movs	r1, #26
 8010a4a:	fb01 f303 	mul.w	r3, r1, r3
 8010a4e:	4413      	add	r3, r2
 8010a50:	3308      	adds	r3, #8
 8010a52:	6a3a      	ldr	r2, [r7, #32]
 8010a54:	4413      	add	r3, r2
 8010a56:	3304      	adds	r3, #4
 8010a58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a5c:	69b9      	ldr	r1, [r7, #24]
 8010a5e:	68f8      	ldr	r0, [r7, #12]
 8010a60:	f000 f870 	bl	8010b44 <USBH_ParseEPDesc>
 8010a64:	4603      	mov	r3, r0
 8010a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a6e:	3301      	adds	r3, #1
 8010a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	791b      	ldrb	r3, [r3, #4]
 8010a78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d204      	bcs.n	8010a8a <USBH_ParseCfgDesc+0x19e>
 8010a80:	6a3b      	ldr	r3, [r7, #32]
 8010a82:	885a      	ldrh	r2, [r3, #2]
 8010a84:	8afb      	ldrh	r3, [r7, #22]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d8b0      	bhi.n	80109ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	791b      	ldrb	r3, [r3, #4]
 8010a8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d201      	bcs.n	8010a9a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010a96:	2303      	movs	r3, #3
 8010a98:	e01c      	b.n	8010ad4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8010a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d805      	bhi.n	8010ab8 <USBH_ParseCfgDesc+0x1cc>
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	885a      	ldrh	r2, [r3, #2]
 8010ab0:	8afb      	ldrh	r3, [r7, #22]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	f63f af74 	bhi.w	80109a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	791b      	ldrb	r3, [r3, #4]
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	bf28      	it	cs
 8010ac0:	2302      	movcs	r3, #2
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d201      	bcs.n	8010ad0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010acc:	2303      	movs	r3, #3
 8010ace:	e001      	b.n	8010ad4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3730      	adds	r7, #48	@ 0x30
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	781a      	ldrb	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	785a      	ldrb	r2, [r3, #1]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	789a      	ldrb	r2, [r3, #2]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	78da      	ldrb	r2, [r3, #3]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	bf28      	it	cs
 8010b10:	2302      	movcs	r3, #2
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	795a      	ldrb	r2, [r3, #5]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	799a      	ldrb	r2, [r3, #6]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	79da      	ldrb	r2, [r3, #7]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	7a1a      	ldrb	r2, [r3, #8]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	721a      	strb	r2, [r3, #8]
}
 8010b38:	bf00      	nop
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b087      	sub	sp, #28
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	781a      	ldrb	r2, [r3, #0]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	785a      	ldrb	r2, [r3, #1]
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	789a      	ldrb	r2, [r3, #2]
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	78da      	ldrb	r2, [r3, #3]
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3304      	adds	r3, #4
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3305      	adds	r3, #5
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	021b      	lsls	r3, r3, #8
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	4313      	orrs	r3, r2
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	799a      	ldrb	r2, [r3, #6]
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	889b      	ldrh	r3, [r3, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d009      	beq.n	8010bb2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ba6:	d804      	bhi.n	8010bb2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bb0:	d901      	bls.n	8010bb6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d136      	bne.n	8010c2e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	78db      	ldrb	r3, [r3, #3]
 8010bc4:	f003 0303 	and.w	r3, r3, #3
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d108      	bne.n	8010bde <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	889b      	ldrh	r3, [r3, #4]
 8010bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bd4:	f240 8097 	bls.w	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	75fb      	strb	r3, [r7, #23]
 8010bdc:	e093      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	78db      	ldrb	r3, [r3, #3]
 8010be2:	f003 0303 	and.w	r3, r3, #3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d107      	bne.n	8010bfa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	889b      	ldrh	r3, [r3, #4]
 8010bee:	2b40      	cmp	r3, #64	@ 0x40
 8010bf0:	f240 8089 	bls.w	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	75fb      	strb	r3, [r7, #23]
 8010bf8:	e085      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	78db      	ldrb	r3, [r3, #3]
 8010bfe:	f003 0303 	and.w	r3, r3, #3
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d005      	beq.n	8010c12 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	78db      	ldrb	r3, [r3, #3]
 8010c0a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d10a      	bne.n	8010c28 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	799b      	ldrb	r3, [r3, #6]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d003      	beq.n	8010c22 <USBH_ParseEPDesc+0xde>
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	799b      	ldrb	r3, [r3, #6]
 8010c1e:	2b10      	cmp	r3, #16
 8010c20:	d970      	bls.n	8010d04 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010c22:	2303      	movs	r3, #3
 8010c24:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c26:	e06d      	b.n	8010d04 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	75fb      	strb	r3, [r7, #23]
 8010c2c:	e06b      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d13c      	bne.n	8010cb2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	78db      	ldrb	r3, [r3, #3]
 8010c3c:	f003 0303 	and.w	r3, r3, #3
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d005      	beq.n	8010c50 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	78db      	ldrb	r3, [r3, #3]
 8010c48:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d106      	bne.n	8010c5e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	889b      	ldrh	r3, [r3, #4]
 8010c54:	2b40      	cmp	r3, #64	@ 0x40
 8010c56:	d956      	bls.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010c58:	2303      	movs	r3, #3
 8010c5a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c5c:	e053      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	78db      	ldrb	r3, [r3, #3]
 8010c62:	f003 0303 	and.w	r3, r3, #3
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d10e      	bne.n	8010c88 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	799b      	ldrb	r3, [r3, #6]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d007      	beq.n	8010c82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010c76:	2b10      	cmp	r3, #16
 8010c78:	d803      	bhi.n	8010c82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010c7e:	2b40      	cmp	r3, #64	@ 0x40
 8010c80:	d941      	bls.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010c82:	2303      	movs	r3, #3
 8010c84:	75fb      	strb	r3, [r7, #23]
 8010c86:	e03e      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	78db      	ldrb	r3, [r3, #3]
 8010c8c:	f003 0303 	and.w	r3, r3, #3
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d10b      	bne.n	8010cac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	799b      	ldrb	r3, [r3, #6]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d004      	beq.n	8010ca6 <USBH_ParseEPDesc+0x162>
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	889b      	ldrh	r3, [r3, #4]
 8010ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ca4:	d32f      	bcc.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	75fb      	strb	r3, [r7, #23]
 8010caa:	e02c      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010cac:	2303      	movs	r3, #3
 8010cae:	75fb      	strb	r3, [r7, #23]
 8010cb0:	e029      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d120      	bne.n	8010cfe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	78db      	ldrb	r3, [r3, #3]
 8010cc0:	f003 0303 	and.w	r3, r3, #3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d106      	bne.n	8010cd6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	889b      	ldrh	r3, [r3, #4]
 8010ccc:	2b08      	cmp	r3, #8
 8010cce:	d01a      	beq.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	75fb      	strb	r3, [r7, #23]
 8010cd4:	e017      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	78db      	ldrb	r3, [r3, #3]
 8010cda:	f003 0303 	and.w	r3, r3, #3
 8010cde:	2b03      	cmp	r3, #3
 8010ce0:	d10a      	bne.n	8010cf8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	799b      	ldrb	r3, [r3, #6]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d003      	beq.n	8010cf2 <USBH_ParseEPDesc+0x1ae>
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	889b      	ldrh	r3, [r3, #4]
 8010cee:	2b08      	cmp	r3, #8
 8010cf0:	d909      	bls.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010cf2:	2303      	movs	r3, #3
 8010cf4:	75fb      	strb	r3, [r7, #23]
 8010cf6:	e006      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010cf8:	2303      	movs	r3, #3
 8010cfa:	75fb      	strb	r3, [r7, #23]
 8010cfc:	e003      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010cfe:	2303      	movs	r3, #3
 8010d00:	75fb      	strb	r3, [r7, #23]
 8010d02:	e000      	b.n	8010d06 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010d04:	bf00      	nop
  }

  return status;
 8010d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	371c      	adds	r7, #28
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	4613      	mov	r3, r2
 8010d20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	3301      	adds	r3, #1
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	2b03      	cmp	r3, #3
 8010d2a:	d120      	bne.n	8010d6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	1e9a      	subs	r2, r3, #2
 8010d32:	88fb      	ldrh	r3, [r7, #6]
 8010d34:	4293      	cmp	r3, r2
 8010d36:	bf28      	it	cs
 8010d38:	4613      	movcs	r3, r2
 8010d3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	3302      	adds	r3, #2
 8010d40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010d42:	2300      	movs	r3, #0
 8010d44:	82fb      	strh	r3, [r7, #22]
 8010d46:	e00b      	b.n	8010d60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010d48:	8afb      	ldrh	r3, [r7, #22]
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	781a      	ldrb	r2, [r3, #0]
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	3301      	adds	r3, #1
 8010d58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010d5a:	8afb      	ldrh	r3, [r7, #22]
 8010d5c:	3302      	adds	r3, #2
 8010d5e:	82fb      	strh	r3, [r7, #22]
 8010d60:	8afa      	ldrh	r2, [r7, #22]
 8010d62:	8abb      	ldrh	r3, [r7, #20]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d3ef      	bcc.n	8010d48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	701a      	strb	r2, [r3, #0]
  }
}
 8010d6e:	bf00      	nop
 8010d70:	371c      	adds	r7, #28
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr

08010d7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010d7a:	b480      	push	{r7}
 8010d7c:	b085      	sub	sp, #20
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	7812      	ldrb	r2, [r2, #0]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010da0:	68fb      	ldr	r3, [r7, #12]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b086      	sub	sp, #24
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	60f8      	str	r0, [r7, #12]
 8010db6:	60b9      	str	r1, [r7, #8]
 8010db8:	4613      	mov	r3, r2
 8010dba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	789b      	ldrb	r3, [r3, #2]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d002      	beq.n	8010dce <USBH_CtlReq+0x20>
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d01d      	beq.n	8010e08 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010dcc:	e043      	b.n	8010e56 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	88fa      	ldrh	r2, [r7, #6]
 8010dd8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2202      	movs	r2, #2
 8010de4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010de6:	2301      	movs	r3, #1
 8010de8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2203      	movs	r2, #3
 8010dee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010dfe:	2200      	movs	r2, #0
 8010e00:	4619      	mov	r1, r3
 8010e02:	f000 fcd7 	bl	80117b4 <osMessagePut>
      break;
 8010e06:	e026      	b.n	8010e56 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f000 f829 	bl	8010e60 <USBH_HandleControl>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010e12:	7dfb      	ldrb	r3, [r7, #23]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <USBH_CtlReq+0x70>
 8010e18:	7dfb      	ldrb	r3, [r7, #23]
 8010e1a:	2b03      	cmp	r3, #3
 8010e1c:	d106      	bne.n	8010e2c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2201      	movs	r2, #1
 8010e22:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	761a      	strb	r2, [r3, #24]
 8010e2a:	e005      	b.n	8010e38 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d102      	bne.n	8010e38 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2201      	movs	r2, #1
 8010e36:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2203      	movs	r2, #3
 8010e3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	4619      	mov	r1, r3
 8010e50:	f000 fcb0 	bl	80117b4 <osMessagePut>
      break;
 8010e54:	bf00      	nop
  }
  return status;
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3718      	adds	r7, #24
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	7e1b      	ldrb	r3, [r3, #24]
 8010e74:	3b01      	subs	r3, #1
 8010e76:	2b0a      	cmp	r3, #10
 8010e78:	f200 8229 	bhi.w	80112ce <USBH_HandleControl+0x46e>
 8010e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8010e84 <USBH_HandleControl+0x24>)
 8010e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e82:	bf00      	nop
 8010e84:	08010eb1 	.word	0x08010eb1
 8010e88:	08010ecb 	.word	0x08010ecb
 8010e8c:	08010f6d 	.word	0x08010f6d
 8010e90:	08010f93 	.word	0x08010f93
 8010e94:	0801101f 	.word	0x0801101f
 8010e98:	08011049 	.word	0x08011049
 8010e9c:	0801110b 	.word	0x0801110b
 8010ea0:	0801112d 	.word	0x0801112d
 8010ea4:	080111bf 	.word	0x080111bf
 8010ea8:	080111e5 	.word	0x080111e5
 8010eac:	08011277 	.word	0x08011277
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f103 0110 	add.w	r1, r3, #16
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	795b      	ldrb	r3, [r3, #5]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fa17 	bl	80112f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2202      	movs	r2, #2
 8010ec6:	761a      	strb	r2, [r3, #24]
      break;
 8010ec8:	e20c      	b.n	80112e4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	795b      	ldrb	r3, [r3, #5]
 8010ece:	4619      	mov	r1, r3
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f003 fa07 	bl	80142e4 <USBH_LL_GetURBState>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010eda:	7bbb      	ldrb	r3, [r7, #14]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d12c      	bne.n	8010f3a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	7c1b      	ldrb	r3, [r3, #16]
 8010ee4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010ee8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	8adb      	ldrh	r3, [r3, #22]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00a      	beq.n	8010f08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010ef2:	7b7b      	ldrb	r3, [r7, #13]
 8010ef4:	2b80      	cmp	r3, #128	@ 0x80
 8010ef6:	d103      	bne.n	8010f00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2203      	movs	r2, #3
 8010efc:	761a      	strb	r2, [r3, #24]
 8010efe:	e00d      	b.n	8010f1c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2205      	movs	r2, #5
 8010f04:	761a      	strb	r2, [r3, #24]
 8010f06:	e009      	b.n	8010f1c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010f08:	7b7b      	ldrb	r3, [r7, #13]
 8010f0a:	2b80      	cmp	r3, #128	@ 0x80
 8010f0c:	d103      	bne.n	8010f16 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2209      	movs	r2, #9
 8010f12:	761a      	strb	r2, [r3, #24]
 8010f14:	e002      	b.n	8010f1c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2207      	movs	r2, #7
 8010f1a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2203      	movs	r2, #3
 8010f20:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010f30:	2200      	movs	r2, #0
 8010f32:	4619      	mov	r1, r3
 8010f34:	f000 fc3e 	bl	80117b4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f38:	e1cb      	b.n	80112d2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010f3a:	7bbb      	ldrb	r3, [r7, #14]
 8010f3c:	2b04      	cmp	r3, #4
 8010f3e:	d003      	beq.n	8010f48 <USBH_HandleControl+0xe8>
 8010f40:	7bbb      	ldrb	r3, [r7, #14]
 8010f42:	2b02      	cmp	r3, #2
 8010f44:	f040 81c5 	bne.w	80112d2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	220b      	movs	r2, #11
 8010f4c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2203      	movs	r2, #3
 8010f52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010f62:	2200      	movs	r2, #0
 8010f64:	4619      	mov	r1, r3
 8010f66:	f000 fc25 	bl	80117b4 <osMessagePut>
      break;
 8010f6a:	e1b2      	b.n	80112d2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6899      	ldr	r1, [r3, #8]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	899a      	ldrh	r2, [r3, #12]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	791b      	ldrb	r3, [r3, #4]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 f9f2 	bl	801136e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2204      	movs	r2, #4
 8010f8e:	761a      	strb	r2, [r3, #24]
      break;
 8010f90:	e1a8      	b.n	80112e4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	791b      	ldrb	r3, [r3, #4]
 8010f96:	4619      	mov	r1, r3
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f003 f9a3 	bl	80142e4 <USBH_LL_GetURBState>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010fa2:	7bbb      	ldrb	r3, [r7, #14]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d110      	bne.n	8010fca <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2209      	movs	r2, #9
 8010fac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2203      	movs	r2, #3
 8010fb2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	f000 fbf5 	bl	80117b4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010fca:	7bbb      	ldrb	r3, [r7, #14]
 8010fcc:	2b05      	cmp	r3, #5
 8010fce:	d110      	bne.n	8010ff2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010fd0:	2303      	movs	r3, #3
 8010fd2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2203      	movs	r2, #3
 8010fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4619      	mov	r1, r3
 8010fec:	f000 fbe2 	bl	80117b4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ff0:	e171      	b.n	80112d6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010ff2:	7bbb      	ldrb	r3, [r7, #14]
 8010ff4:	2b04      	cmp	r3, #4
 8010ff6:	f040 816e 	bne.w	80112d6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	220b      	movs	r2, #11
 8010ffe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2203      	movs	r2, #3
 8011004:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011014:	2200      	movs	r2, #0
 8011016:	4619      	mov	r1, r3
 8011018:	f000 fbcc 	bl	80117b4 <osMessagePut>
      break;
 801101c:	e15b      	b.n	80112d6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6899      	ldr	r1, [r3, #8]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	899a      	ldrh	r2, [r3, #12]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	795b      	ldrb	r3, [r3, #5]
 801102a:	2001      	movs	r0, #1
 801102c:	9000      	str	r0, [sp, #0]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f978 	bl	8011324 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2206      	movs	r2, #6
 8011044:	761a      	strb	r2, [r3, #24]
      break;
 8011046:	e14d      	b.n	80112e4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	795b      	ldrb	r3, [r3, #5]
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f003 f948 	bl	80142e4 <USBH_LL_GetURBState>
 8011054:	4603      	mov	r3, r0
 8011056:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011058:	7bbb      	ldrb	r3, [r7, #14]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d111      	bne.n	8011082 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2207      	movs	r2, #7
 8011062:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2203      	movs	r2, #3
 8011068:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011078:	2200      	movs	r2, #0
 801107a:	4619      	mov	r1, r3
 801107c:	f000 fb9a 	bl	80117b4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011080:	e12b      	b.n	80112da <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8011082:	7bbb      	ldrb	r3, [r7, #14]
 8011084:	2b05      	cmp	r3, #5
 8011086:	d113      	bne.n	80110b0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	220c      	movs	r2, #12
 801108c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801108e:	2303      	movs	r3, #3
 8011090:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2203      	movs	r2, #3
 8011096:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80110a6:	2200      	movs	r2, #0
 80110a8:	4619      	mov	r1, r3
 80110aa:	f000 fb83 	bl	80117b4 <osMessagePut>
      break;
 80110ae:	e114      	b.n	80112da <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80110b0:	7bbb      	ldrb	r3, [r7, #14]
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d111      	bne.n	80110da <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2205      	movs	r2, #5
 80110ba:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2203      	movs	r2, #3
 80110c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80110d0:	2200      	movs	r2, #0
 80110d2:	4619      	mov	r1, r3
 80110d4:	f000 fb6e 	bl	80117b4 <osMessagePut>
      break;
 80110d8:	e0ff      	b.n	80112da <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80110da:	7bbb      	ldrb	r3, [r7, #14]
 80110dc:	2b04      	cmp	r3, #4
 80110de:	f040 80fc 	bne.w	80112da <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	220b      	movs	r2, #11
 80110e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80110e8:	2302      	movs	r3, #2
 80110ea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2203      	movs	r2, #3
 80110f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011100:	2200      	movs	r2, #0
 8011102:	4619      	mov	r1, r3
 8011104:	f000 fb56 	bl	80117b4 <osMessagePut>
      break;
 8011108:	e0e7      	b.n	80112da <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	791b      	ldrb	r3, [r3, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	2100      	movs	r1, #0
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f92b 	bl	801136e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801111e:	b29a      	uxth	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2208      	movs	r2, #8
 8011128:	761a      	strb	r2, [r3, #24]

      break;
 801112a:	e0db      	b.n	80112e4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	791b      	ldrb	r3, [r3, #4]
 8011130:	4619      	mov	r1, r3
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f003 f8d6 	bl	80142e4 <USBH_LL_GetURBState>
 8011138:	4603      	mov	r3, r0
 801113a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801113c:	7bbb      	ldrb	r3, [r7, #14]
 801113e:	2b01      	cmp	r3, #1
 8011140:	d113      	bne.n	801116a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	220d      	movs	r2, #13
 8011146:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2203      	movs	r2, #3
 8011150:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011160:	2200      	movs	r2, #0
 8011162:	4619      	mov	r1, r3
 8011164:	f000 fb26 	bl	80117b4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011168:	e0b9      	b.n	80112de <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801116a:	7bbb      	ldrb	r3, [r7, #14]
 801116c:	2b04      	cmp	r3, #4
 801116e:	d111      	bne.n	8011194 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	220b      	movs	r2, #11
 8011174:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2203      	movs	r2, #3
 801117a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801118a:	2200      	movs	r2, #0
 801118c:	4619      	mov	r1, r3
 801118e:	f000 fb11 	bl	80117b4 <osMessagePut>
      break;
 8011192:	e0a4      	b.n	80112de <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8011194:	7bbb      	ldrb	r3, [r7, #14]
 8011196:	2b05      	cmp	r3, #5
 8011198:	f040 80a1 	bne.w	80112de <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 801119c:	2303      	movs	r3, #3
 801119e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2203      	movs	r2, #3
 80111a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80111b4:	2200      	movs	r2, #0
 80111b6:	4619      	mov	r1, r3
 80111b8:	f000 fafc 	bl	80117b4 <osMessagePut>
      break;
 80111bc:	e08f      	b.n	80112de <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	795b      	ldrb	r3, [r3, #5]
 80111c2:	2201      	movs	r2, #1
 80111c4:	9200      	str	r2, [sp, #0]
 80111c6:	2200      	movs	r2, #0
 80111c8:	2100      	movs	r1, #0
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f8aa 	bl	8011324 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	220a      	movs	r2, #10
 80111e0:	761a      	strb	r2, [r3, #24]
      break;
 80111e2:	e07f      	b.n	80112e4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	795b      	ldrb	r3, [r3, #5]
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f003 f87a 	bl	80142e4 <USBH_LL_GetURBState>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d113      	bne.n	8011222 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	220d      	movs	r2, #13
 8011202:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2203      	movs	r2, #3
 8011208:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011218:	2200      	movs	r2, #0
 801121a:	4619      	mov	r1, r3
 801121c:	f000 faca 	bl	80117b4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011220:	e05f      	b.n	80112e2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011222:	7bbb      	ldrb	r3, [r7, #14]
 8011224:	2b02      	cmp	r3, #2
 8011226:	d111      	bne.n	801124c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2209      	movs	r2, #9
 801122c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2203      	movs	r2, #3
 8011232:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011242:	2200      	movs	r2, #0
 8011244:	4619      	mov	r1, r3
 8011246:	f000 fab5 	bl	80117b4 <osMessagePut>
      break;
 801124a:	e04a      	b.n	80112e2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 801124c:	7bbb      	ldrb	r3, [r7, #14]
 801124e:	2b04      	cmp	r3, #4
 8011250:	d147      	bne.n	80112e2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	220b      	movs	r2, #11
 8011256:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2203      	movs	r2, #3
 801125c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801126c:	2200      	movs	r2, #0
 801126e:	4619      	mov	r1, r3
 8011270:	f000 faa0 	bl	80117b4 <osMessagePut>
      break;
 8011274:	e035      	b.n	80112e2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	7e5b      	ldrb	r3, [r3, #25]
 801127a:	3301      	adds	r3, #1
 801127c:	b2da      	uxtb	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	765a      	strb	r2, [r3, #25]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	7e5b      	ldrb	r3, [r3, #25]
 8011286:	2b02      	cmp	r3, #2
 8011288:	d806      	bhi.n	8011298 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2201      	movs	r2, #1
 801128e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011296:	e025      	b.n	80112e4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801129e:	2106      	movs	r1, #6
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	795b      	ldrb	r3, [r3, #5]
 80112ae:	4619      	mov	r1, r3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 f90d 	bl	80114d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	791b      	ldrb	r3, [r3, #4]
 80112ba:	4619      	mov	r1, r3
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 f907 	bl	80114d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80112c8:	2302      	movs	r3, #2
 80112ca:	73fb      	strb	r3, [r7, #15]
      break;
 80112cc:	e00a      	b.n	80112e4 <USBH_HandleControl+0x484>

    default:
      break;
 80112ce:	bf00      	nop
 80112d0:	e008      	b.n	80112e4 <USBH_HandleControl+0x484>
      break;
 80112d2:	bf00      	nop
 80112d4:	e006      	b.n	80112e4 <USBH_HandleControl+0x484>
      break;
 80112d6:	bf00      	nop
 80112d8:	e004      	b.n	80112e4 <USBH_HandleControl+0x484>
      break;
 80112da:	bf00      	nop
 80112dc:	e002      	b.n	80112e4 <USBH_HandleControl+0x484>
      break;
 80112de:	bf00      	nop
 80112e0:	e000      	b.n	80112e4 <USBH_HandleControl+0x484>
      break;
 80112e2:	bf00      	nop
  }

  return status;
 80112e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop

080112f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b088      	sub	sp, #32
 80112f4:	af04      	add	r7, sp, #16
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	4613      	mov	r3, r2
 80112fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80112fe:	79f9      	ldrb	r1, [r7, #7]
 8011300:	2300      	movs	r3, #0
 8011302:	9303      	str	r3, [sp, #12]
 8011304:	2308      	movs	r3, #8
 8011306:	9302      	str	r3, [sp, #8]
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	2300      	movs	r3, #0
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	2300      	movs	r3, #0
 8011312:	2200      	movs	r2, #0
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f002 ffb4 	bl	8014282 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3710      	adds	r7, #16
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af04      	add	r7, sp, #16
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	4611      	mov	r1, r2
 8011330:	461a      	mov	r2, r3
 8011332:	460b      	mov	r3, r1
 8011334:	80fb      	strh	r3, [r7, #6]
 8011336:	4613      	mov	r3, r2
 8011338:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011344:	2300      	movs	r3, #0
 8011346:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011348:	7979      	ldrb	r1, [r7, #5]
 801134a:	7e3b      	ldrb	r3, [r7, #24]
 801134c:	9303      	str	r3, [sp, #12]
 801134e:	88fb      	ldrh	r3, [r7, #6]
 8011350:	9302      	str	r3, [sp, #8]
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	2301      	movs	r3, #1
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	2300      	movs	r3, #0
 801135c:	2200      	movs	r2, #0
 801135e:	68f8      	ldr	r0, [r7, #12]
 8011360:	f002 ff8f 	bl	8014282 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b088      	sub	sp, #32
 8011372:	af04      	add	r7, sp, #16
 8011374:	60f8      	str	r0, [r7, #12]
 8011376:	60b9      	str	r1, [r7, #8]
 8011378:	4611      	mov	r1, r2
 801137a:	461a      	mov	r2, r3
 801137c:	460b      	mov	r3, r1
 801137e:	80fb      	strh	r3, [r7, #6]
 8011380:	4613      	mov	r3, r2
 8011382:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011384:	7979      	ldrb	r1, [r7, #5]
 8011386:	2300      	movs	r3, #0
 8011388:	9303      	str	r3, [sp, #12]
 801138a:	88fb      	ldrh	r3, [r7, #6]
 801138c:	9302      	str	r3, [sp, #8]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	9301      	str	r3, [sp, #4]
 8011392:	2301      	movs	r3, #1
 8011394:	9300      	str	r3, [sp, #0]
 8011396:	2300      	movs	r3, #0
 8011398:	2201      	movs	r2, #1
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f002 ff71 	bl	8014282 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80113a0:	2300      	movs	r3, #0

}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b088      	sub	sp, #32
 80113ae:	af04      	add	r7, sp, #16
 80113b0:	60f8      	str	r0, [r7, #12]
 80113b2:	60b9      	str	r1, [r7, #8]
 80113b4:	4611      	mov	r1, r2
 80113b6:	461a      	mov	r2, r3
 80113b8:	460b      	mov	r3, r1
 80113ba:	80fb      	strh	r3, [r7, #6]
 80113bc:	4613      	mov	r3, r2
 80113be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d001      	beq.n	80113ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80113ca:	2300      	movs	r3, #0
 80113cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80113ce:	7979      	ldrb	r1, [r7, #5]
 80113d0:	7e3b      	ldrb	r3, [r7, #24]
 80113d2:	9303      	str	r3, [sp, #12]
 80113d4:	88fb      	ldrh	r3, [r7, #6]
 80113d6:	9302      	str	r3, [sp, #8]
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	2301      	movs	r3, #1
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	2302      	movs	r3, #2
 80113e2:	2200      	movs	r2, #0
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f002 ff4c 	bl	8014282 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80113ea:	2300      	movs	r3, #0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b088      	sub	sp, #32
 80113f8:	af04      	add	r7, sp, #16
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	4611      	mov	r1, r2
 8011400:	461a      	mov	r2, r3
 8011402:	460b      	mov	r3, r1
 8011404:	80fb      	strh	r3, [r7, #6]
 8011406:	4613      	mov	r3, r2
 8011408:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801140a:	7979      	ldrb	r1, [r7, #5]
 801140c:	2300      	movs	r3, #0
 801140e:	9303      	str	r3, [sp, #12]
 8011410:	88fb      	ldrh	r3, [r7, #6]
 8011412:	9302      	str	r3, [sp, #8]
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	9301      	str	r3, [sp, #4]
 8011418:	2301      	movs	r3, #1
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	2302      	movs	r3, #2
 801141e:	2201      	movs	r2, #1
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	f002 ff2e 	bl	8014282 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af04      	add	r7, sp, #16
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	4608      	mov	r0, r1
 801143a:	4611      	mov	r1, r2
 801143c:	461a      	mov	r2, r3
 801143e:	4603      	mov	r3, r0
 8011440:	70fb      	strb	r3, [r7, #3]
 8011442:	460b      	mov	r3, r1
 8011444:	70bb      	strb	r3, [r7, #2]
 8011446:	4613      	mov	r3, r2
 8011448:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801144a:	7878      	ldrb	r0, [r7, #1]
 801144c:	78ba      	ldrb	r2, [r7, #2]
 801144e:	78f9      	ldrb	r1, [r7, #3]
 8011450:	8b3b      	ldrh	r3, [r7, #24]
 8011452:	9302      	str	r3, [sp, #8]
 8011454:	7d3b      	ldrb	r3, [r7, #20]
 8011456:	9301      	str	r3, [sp, #4]
 8011458:	7c3b      	ldrb	r3, [r7, #16]
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	4603      	mov	r3, r0
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f002 fec1 	bl	80141e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3708      	adds	r7, #8
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b082      	sub	sp, #8
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	460b      	mov	r3, r1
 8011478:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801147a:	78fb      	ldrb	r3, [r7, #3]
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f002 fee0 	bl	8014244 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b084      	sub	sp, #16
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	460b      	mov	r3, r1
 8011498:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f000 f836 	bl	801150c <USBH_GetFreePipe>
 80114a0:	4603      	mov	r3, r0
 80114a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80114a4:	89fb      	ldrh	r3, [r7, #14]
 80114a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d00a      	beq.n	80114c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80114ae:	78fa      	ldrb	r2, [r7, #3]
 80114b0:	89fb      	ldrh	r3, [r7, #14]
 80114b2:	f003 030f 	and.w	r3, r3, #15
 80114b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80114ba:	6879      	ldr	r1, [r7, #4]
 80114bc:	33e0      	adds	r3, #224	@ 0xe0
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	440b      	add	r3, r1
 80114c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80114c4:	89fb      	ldrh	r3, [r7, #14]
 80114c6:	b2db      	uxtb	r3, r3
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3710      	adds	r7, #16
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	460b      	mov	r3, r1
 80114da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	2b0f      	cmp	r3, #15
 80114e0:	d80d      	bhi.n	80114fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80114e2:	78fb      	ldrb	r3, [r7, #3]
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	33e0      	adds	r3, #224	@ 0xe0
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	685a      	ldr	r2, [r3, #4]
 80114ee:	78fb      	ldrb	r3, [r7, #3]
 80114f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	33e0      	adds	r3, #224	@ 0xe0
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	440b      	add	r3, r1
 80114fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80114fe:	2300      	movs	r3, #0
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011514:	2300      	movs	r3, #0
 8011516:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011518:	2300      	movs	r3, #0
 801151a:	73fb      	strb	r3, [r7, #15]
 801151c:	e00f      	b.n	801153e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801151e:	7bfb      	ldrb	r3, [r7, #15]
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	33e0      	adds	r3, #224	@ 0xe0
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801152e:	2b00      	cmp	r3, #0
 8011530:	d102      	bne.n	8011538 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011532:	7bfb      	ldrb	r3, [r7, #15]
 8011534:	b29b      	uxth	r3, r3
 8011536:	e007      	b.n	8011548 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011538:	7bfb      	ldrb	r3, [r7, #15]
 801153a:	3301      	adds	r3, #1
 801153c:	73fb      	strb	r3, [r7, #15]
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	2b0f      	cmp	r3, #15
 8011542:	d9ec      	bls.n	801151e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011544:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011548:	4618      	mov	r0, r3
 801154a:	3714      	adds	r7, #20
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011554:	b480      	push	{r7}
 8011556:	b087      	sub	sp, #28
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	4613      	mov	r3, r2
 8011560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011562:	2301      	movs	r3, #1
 8011564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801156a:	4b1f      	ldr	r3, [pc, #124]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 801156c:	7a5b      	ldrb	r3, [r3, #9]
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b00      	cmp	r3, #0
 8011572:	d131      	bne.n	80115d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011574:	4b1c      	ldr	r3, [pc, #112]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 8011576:	7a5b      	ldrb	r3, [r3, #9]
 8011578:	b2db      	uxtb	r3, r3
 801157a:	461a      	mov	r2, r3
 801157c:	4b1a      	ldr	r3, [pc, #104]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 801157e:	2100      	movs	r1, #0
 8011580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011582:	4b19      	ldr	r3, [pc, #100]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 8011584:	7a5b      	ldrb	r3, [r3, #9]
 8011586:	b2db      	uxtb	r3, r3
 8011588:	4a17      	ldr	r2, [pc, #92]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011592:	4b15      	ldr	r3, [pc, #84]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 8011594:	7a5b      	ldrb	r3, [r3, #9]
 8011596:	b2db      	uxtb	r3, r3
 8011598:	461a      	mov	r2, r3
 801159a:	4b13      	ldr	r3, [pc, #76]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 801159c:	4413      	add	r3, r2
 801159e:	79fa      	ldrb	r2, [r7, #7]
 80115a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80115a2:	4b11      	ldr	r3, [pc, #68]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 80115a4:	7a5b      	ldrb	r3, [r3, #9]
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	1c5a      	adds	r2, r3, #1
 80115aa:	b2d1      	uxtb	r1, r2
 80115ac:	4a0e      	ldr	r2, [pc, #56]	@ (80115e8 <FATFS_LinkDriverEx+0x94>)
 80115ae:	7251      	strb	r1, [r2, #9]
 80115b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80115b2:	7dbb      	ldrb	r3, [r7, #22]
 80115b4:	3330      	adds	r3, #48	@ 0x30
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	3301      	adds	r3, #1
 80115c0:	223a      	movs	r2, #58	@ 0x3a
 80115c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	3302      	adds	r3, #2
 80115c8:	222f      	movs	r2, #47	@ 0x2f
 80115ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	3303      	adds	r3, #3
 80115d0:	2200      	movs	r2, #0
 80115d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80115d4:	2300      	movs	r3, #0
 80115d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80115d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	371c      	adds	r7, #28
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	20000d3c 	.word	0x20000d3c

080115ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80115f6:	2200      	movs	r2, #0
 80115f8:	6839      	ldr	r1, [r7, #0]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7ff ffaa 	bl	8011554 <FATFS_LinkDriverEx>
 8011600:	4603      	mov	r3, r0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801160a:	b480      	push	{r7}
 801160c:	b085      	sub	sp, #20
 801160e:	af00      	add	r7, sp, #0
 8011610:	4603      	mov	r3, r0
 8011612:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011614:	2300      	movs	r3, #0
 8011616:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801161c:	2b84      	cmp	r3, #132	@ 0x84
 801161e:	d005      	beq.n	801162c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011620:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	4413      	add	r3, r2
 8011628:	3303      	adds	r3, #3
 801162a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801162c:	68fb      	ldr	r3, [r7, #12]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr

0801163a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801163a:	b480      	push	{r7}
 801163c:	b083      	sub	sp, #12
 801163e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011640:	f3ef 8305 	mrs	r3, IPSR
 8011644:	607b      	str	r3, [r7, #4]
  return(result);
 8011646:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011648:	2b00      	cmp	r3, #0
 801164a:	bf14      	ite	ne
 801164c:	2301      	movne	r3, #1
 801164e:	2300      	moveq	r3, #0
 8011650:	b2db      	uxtb	r3, r3
}
 8011652:	4618      	mov	r0, r3
 8011654:	370c      	adds	r7, #12
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr

0801165e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801165e:	b580      	push	{r7, lr}
 8011660:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011662:	f001 f975 	bl	8012950 <vTaskStartScheduler>
  
  return osOK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	bd80      	pop	{r7, pc}

0801166c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011670:	f001 fdd6 	bl	8013220 <xTaskGetSchedulerState>
 8011674:	4603      	mov	r3, r0
 8011676:	2b01      	cmp	r3, #1
 8011678:	d101      	bne.n	801167e <osKernelRunning+0x12>
    return 0;
 801167a:	2300      	movs	r3, #0
 801167c:	e000      	b.n	8011680 <osKernelRunning+0x14>
  else
    return 1;
 801167e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011680:	4618      	mov	r0, r3
 8011682:	bd80      	pop	{r7, pc}

08011684 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011688:	f7ff ffd7 	bl	801163a <inHandlerMode>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d003      	beq.n	801169a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011692:	f001 fa81 	bl	8012b98 <xTaskGetTickCountFromISR>
 8011696:	4603      	mov	r3, r0
 8011698:	e002      	b.n	80116a0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801169a:	f001 fa6d 	bl	8012b78 <xTaskGetTickCount>
 801169e:	4603      	mov	r3, r0
  }
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80116a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116a6:	b089      	sub	sp, #36	@ 0x24
 80116a8:	af04      	add	r7, sp, #16
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	695b      	ldr	r3, [r3, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d020      	beq.n	80116f8 <osThreadCreate+0x54>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	699b      	ldr	r3, [r3, #24]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d01c      	beq.n	80116f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	685c      	ldr	r4, [r3, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	691e      	ldr	r6, [r3, #16]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff ff9a 	bl	801160a <makeFreeRtosPriority>
 80116d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116e0:	9202      	str	r2, [sp, #8]
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	9100      	str	r1, [sp, #0]
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	4632      	mov	r2, r6
 80116ea:	4629      	mov	r1, r5
 80116ec:	4620      	mov	r0, r4
 80116ee:	f000 ff4d 	bl	801258c <xTaskCreateStatic>
 80116f2:	4603      	mov	r3, r0
 80116f4:	60fb      	str	r3, [r7, #12]
 80116f6:	e01c      	b.n	8011732 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685c      	ldr	r4, [r3, #4]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011704:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff ff7c 	bl	801160a <makeFreeRtosPriority>
 8011712:	4602      	mov	r2, r0
 8011714:	f107 030c 	add.w	r3, r7, #12
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	9200      	str	r2, [sp, #0]
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	4632      	mov	r2, r6
 8011720:	4629      	mov	r1, r5
 8011722:	4620      	mov	r0, r4
 8011724:	f000 ff98 	bl	8012658 <xTaskCreate>
 8011728:	4603      	mov	r3, r0
 801172a:	2b01      	cmp	r3, #1
 801172c:	d001      	beq.n	8011732 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	e000      	b.n	8011734 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011732:	68fb      	ldr	r3, [r7, #12]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3714      	adds	r7, #20
 8011738:	46bd      	mov	sp, r7
 801173a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801173c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <osDelay+0x16>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	e000      	b.n	8011754 <osDelay+0x18>
 8011752:	2301      	movs	r3, #1
 8011754:	4618      	mov	r0, r3
 8011756:	f001 f8c3 	bl	80128e0 <vTaskDelay>
  
  return osOK;
 801175a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801175c:	4618      	mov	r0, r3
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b085      	sub	sp, #20
 8011768:	af02      	add	r7, sp, #8
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d011      	beq.n	801179a <osMessageCreate+0x36>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00d      	beq.n	801179a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6818      	ldr	r0, [r3, #0]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6859      	ldr	r1, [r3, #4]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	689a      	ldr	r2, [r3, #8]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	2400      	movs	r4, #0
 8011790:	9400      	str	r4, [sp, #0]
 8011792:	f000 f9e3 	bl	8011b5c <xQueueGenericCreateStatic>
 8011796:	4603      	mov	r3, r0
 8011798:	e008      	b.n	80117ac <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6818      	ldr	r0, [r3, #0]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	4619      	mov	r1, r3
 80117a6:	f000 fa60 	bl	8011c6a <xQueueGenericCreate>
 80117aa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd90      	pop	{r4, r7, pc}

080117b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b086      	sub	sp, #24
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80117c0:	2300      	movs	r3, #0
 80117c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d101      	bne.n	80117d2 <osMessagePut+0x1e>
    ticks = 1;
 80117ce:	2301      	movs	r3, #1
 80117d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80117d2:	f7ff ff32 	bl	801163a <inHandlerMode>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d018      	beq.n	801180e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80117dc:	f107 0210 	add.w	r2, r7, #16
 80117e0:	f107 0108 	add.w	r1, r7, #8
 80117e4:	2300      	movs	r3, #0
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f000 fbac 	bl	8011f44 <xQueueGenericSendFromISR>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d001      	beq.n	80117f6 <osMessagePut+0x42>
      return osErrorOS;
 80117f2:	23ff      	movs	r3, #255	@ 0xff
 80117f4:	e018      	b.n	8011828 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d014      	beq.n	8011826 <osMessagePut+0x72>
 80117fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011830 <osMessagePut+0x7c>)
 80117fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011802:	601a      	str	r2, [r3, #0]
 8011804:	f3bf 8f4f 	dsb	sy
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	e00b      	b.n	8011826 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801180e:	f107 0108 	add.w	r1, r7, #8
 8011812:	2300      	movs	r3, #0
 8011814:	697a      	ldr	r2, [r7, #20]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f000 fa8a 	bl	8011d30 <xQueueGenericSend>
 801181c:	4603      	mov	r3, r0
 801181e:	2b01      	cmp	r3, #1
 8011820:	d001      	beq.n	8011826 <osMessagePut+0x72>
      return osErrorOS;
 8011822:	23ff      	movs	r3, #255	@ 0xff
 8011824:	e000      	b.n	8011828 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011826:	2300      	movs	r3, #0
}
 8011828:	4618      	mov	r0, r3
 801182a:	3718      	adds	r7, #24
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	e000ed04 	.word	0xe000ed04

08011834 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011834:	b590      	push	{r4, r7, lr}
 8011836:	b08b      	sub	sp, #44	@ 0x2c
 8011838:	af00      	add	r7, sp, #0
 801183a:	60f8      	str	r0, [r7, #12]
 801183c:	60b9      	str	r1, [r7, #8]
 801183e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011844:	2300      	movs	r3, #0
 8011846:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10a      	bne.n	8011864 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801184e:	2380      	movs	r3, #128	@ 0x80
 8011850:	617b      	str	r3, [r7, #20]
    return event;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	461c      	mov	r4, r3
 8011856:	f107 0314 	add.w	r3, r7, #20
 801185a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801185e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011862:	e054      	b.n	801190e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011864:	2300      	movs	r3, #0
 8011866:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011872:	d103      	bne.n	801187c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011874:	f04f 33ff 	mov.w	r3, #4294967295
 8011878:	627b      	str	r3, [r7, #36]	@ 0x24
 801187a:	e009      	b.n	8011890 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d006      	beq.n	8011890 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8011886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <osMessageGet+0x5c>
      ticks = 1;
 801188c:	2301      	movs	r3, #1
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011890:	f7ff fed3 	bl	801163a <inHandlerMode>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d01c      	beq.n	80118d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801189a:	f107 0220 	add.w	r2, r7, #32
 801189e:	f107 0314 	add.w	r3, r7, #20
 80118a2:	3304      	adds	r3, #4
 80118a4:	4619      	mov	r1, r3
 80118a6:	68b8      	ldr	r0, [r7, #8]
 80118a8:	f000 fcd8 	bl	801225c <xQueueReceiveFromISR>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d102      	bne.n	80118b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80118b2:	2310      	movs	r3, #16
 80118b4:	617b      	str	r3, [r7, #20]
 80118b6:	e001      	b.n	80118bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80118b8:	2300      	movs	r3, #0
 80118ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d01d      	beq.n	80118fe <osMessageGet+0xca>
 80118c2:	4b15      	ldr	r3, [pc, #84]	@ (8011918 <osMessageGet+0xe4>)
 80118c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118c8:	601a      	str	r2, [r3, #0]
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	e014      	b.n	80118fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80118d4:	f107 0314 	add.w	r3, r7, #20
 80118d8:	3304      	adds	r3, #4
 80118da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118dc:	4619      	mov	r1, r3
 80118de:	68b8      	ldr	r0, [r7, #8]
 80118e0:	f000 fbd4 	bl	801208c <xQueueReceive>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d102      	bne.n	80118f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80118ea:	2310      	movs	r3, #16
 80118ec:	617b      	str	r3, [r7, #20]
 80118ee:	e006      	b.n	80118fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d101      	bne.n	80118fa <osMessageGet+0xc6>
 80118f6:	2300      	movs	r3, #0
 80118f8:	e000      	b.n	80118fc <osMessageGet+0xc8>
 80118fa:	2340      	movs	r3, #64	@ 0x40
 80118fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	461c      	mov	r4, r3
 8011902:	f107 0314 	add.w	r3, r7, #20
 8011906:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801190a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	372c      	adds	r7, #44	@ 0x2c
 8011912:	46bd      	mov	sp, r7
 8011914:	bd90      	pop	{r4, r7, pc}
 8011916:	bf00      	nop
 8011918:	e000ed04 	.word	0xe000ed04

0801191c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f103 0208 	add.w	r2, r3, #8
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f04f 32ff 	mov.w	r2, #4294967295
 8011934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f103 0208 	add.w	r2, r3, #8
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f103 0208 	add.w	r2, r3, #8
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2200      	movs	r2, #0
 801194e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011950:	bf00      	nop
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2200      	movs	r2, #0
 8011968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801196a:	bf00      	nop
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011976:	b480      	push	{r7}
 8011978:	b085      	sub	sp, #20
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	689a      	ldr	r2, [r3, #8]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	601a      	str	r2, [r3, #0]
}
 80119b2:	bf00      	nop
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119be:	b480      	push	{r7}
 80119c0:	b085      	sub	sp, #20
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d4:	d103      	bne.n	80119de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e00c      	b.n	80119f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3308      	adds	r3, #8
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	e002      	b.n	80119ec <vListInsert+0x2e>
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68ba      	ldr	r2, [r7, #8]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d2f6      	bcs.n	80119e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	685a      	ldr	r2, [r3, #4]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	683a      	ldr	r2, [r7, #0]
 8011a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	1c5a      	adds	r2, r3, #1
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	601a      	str	r2, [r3, #0]
}
 8011a24:	bf00      	nop
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a30:	b480      	push	{r7}
 8011a32:	b085      	sub	sp, #20
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	691b      	ldr	r3, [r3, #16]
 8011a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	6892      	ldr	r2, [r2, #8]
 8011a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	6852      	ldr	r2, [r2, #4]
 8011a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d103      	bne.n	8011a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	689a      	ldr	r2, [r3, #8]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	1e5a      	subs	r2, r3, #1
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3714      	adds	r7, #20
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10d      	bne.n	8011ab4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a9c:	b672      	cpsid	i
 8011a9e:	f383 8811 	msr	BASEPRI, r3
 8011aa2:	f3bf 8f6f 	isb	sy
 8011aa6:	f3bf 8f4f 	dsb	sy
 8011aaa:	b662      	cpsie	i
 8011aac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011aae:	bf00      	nop
 8011ab0:	bf00      	nop
 8011ab2:	e7fd      	b.n	8011ab0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011ab4:	f001 feb2 	bl	801381c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ac0:	68f9      	ldr	r1, [r7, #12]
 8011ac2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011ac4:	fb01 f303 	mul.w	r3, r1, r3
 8011ac8:	441a      	add	r2, r3
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ae4:	3b01      	subs	r3, #1
 8011ae6:	68f9      	ldr	r1, [r7, #12]
 8011ae8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011aea:	fb01 f303 	mul.w	r3, r1, r3
 8011aee:	441a      	add	r2, r3
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	22ff      	movs	r2, #255	@ 0xff
 8011af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	22ff      	movs	r2, #255	@ 0xff
 8011b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d114      	bne.n	8011b34 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	691b      	ldr	r3, [r3, #16]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d01a      	beq.n	8011b48 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	3310      	adds	r3, #16
 8011b16:	4618      	mov	r0, r3
 8011b18:	f001 f9b8 	bl	8012e8c <xTaskRemoveFromEventList>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d012      	beq.n	8011b48 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b22:	4b0d      	ldr	r3, [pc, #52]	@ (8011b58 <xQueueGenericReset+0xd4>)
 8011b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	f3bf 8f4f 	dsb	sy
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	e009      	b.n	8011b48 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	3310      	adds	r3, #16
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff feef 	bl	801191c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	3324      	adds	r3, #36	@ 0x24
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ff feea 	bl	801191c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b48:	f001 fe9e 	bl	8013888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b4c:	2301      	movs	r3, #1
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	e000ed04 	.word	0xe000ed04

08011b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08e      	sub	sp, #56	@ 0x38
 8011b60:	af02      	add	r7, sp, #8
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
 8011b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d10d      	bne.n	8011b8c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b74:	b672      	cpsid	i
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	b662      	cpsie	i
 8011b84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011b86:	bf00      	nop
 8011b88:	bf00      	nop
 8011b8a:	e7fd      	b.n	8011b88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d10d      	bne.n	8011bae <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8011b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b96:	b672      	cpsid	i
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	b662      	cpsie	i
 8011ba6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011ba8:	bf00      	nop
 8011baa:	bf00      	nop
 8011bac:	e7fd      	b.n	8011baa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d002      	beq.n	8011bba <xQueueGenericCreateStatic+0x5e>
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d001      	beq.n	8011bbe <xQueueGenericCreateStatic+0x62>
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e000      	b.n	8011bc0 <xQueueGenericCreateStatic+0x64>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d10d      	bne.n	8011be0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8011bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc8:	b672      	cpsid	i
 8011bca:	f383 8811 	msr	BASEPRI, r3
 8011bce:	f3bf 8f6f 	isb	sy
 8011bd2:	f3bf 8f4f 	dsb	sy
 8011bd6:	b662      	cpsie	i
 8011bd8:	623b      	str	r3, [r7, #32]
}
 8011bda:	bf00      	nop
 8011bdc:	bf00      	nop
 8011bde:	e7fd      	b.n	8011bdc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d102      	bne.n	8011bec <xQueueGenericCreateStatic+0x90>
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <xQueueGenericCreateStatic+0x94>
 8011bec:	2301      	movs	r3, #1
 8011bee:	e000      	b.n	8011bf2 <xQueueGenericCreateStatic+0x96>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d10d      	bne.n	8011c12 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8011bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bfa:	b672      	cpsid	i
 8011bfc:	f383 8811 	msr	BASEPRI, r3
 8011c00:	f3bf 8f6f 	isb	sy
 8011c04:	f3bf 8f4f 	dsb	sy
 8011c08:	b662      	cpsie	i
 8011c0a:	61fb      	str	r3, [r7, #28]
}
 8011c0c:	bf00      	nop
 8011c0e:	bf00      	nop
 8011c10:	e7fd      	b.n	8011c0e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011c12:	2348      	movs	r3, #72	@ 0x48
 8011c14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	2b48      	cmp	r3, #72	@ 0x48
 8011c1a:	d00d      	beq.n	8011c38 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c20:	b672      	cpsid	i
 8011c22:	f383 8811 	msr	BASEPRI, r3
 8011c26:	f3bf 8f6f 	isb	sy
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	b662      	cpsie	i
 8011c30:	61bb      	str	r3, [r7, #24]
}
 8011c32:	bf00      	nop
 8011c34:	bf00      	nop
 8011c36:	e7fd      	b.n	8011c34 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011c38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00d      	beq.n	8011c60 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c46:	2201      	movs	r2, #1
 8011c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	4613      	mov	r3, r2
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	68f8      	ldr	r0, [r7, #12]
 8011c5c:	f000 f848 	bl	8011cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3730      	adds	r7, #48	@ 0x30
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b08a      	sub	sp, #40	@ 0x28
 8011c6e:	af02      	add	r7, sp, #8
 8011c70:	60f8      	str	r0, [r7, #12]
 8011c72:	60b9      	str	r1, [r7, #8]
 8011c74:	4613      	mov	r3, r2
 8011c76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10d      	bne.n	8011c9a <xQueueGenericCreate+0x30>
	__asm volatile
 8011c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c82:	b672      	cpsid	i
 8011c84:	f383 8811 	msr	BASEPRI, r3
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	b662      	cpsie	i
 8011c92:	613b      	str	r3, [r7, #16]
}
 8011c94:	bf00      	nop
 8011c96:	bf00      	nop
 8011c98:	e7fd      	b.n	8011c96 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	61fb      	str	r3, [r7, #28]
 8011ca4:	e004      	b.n	8011cb0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	fb02 f303 	mul.w	r3, r2, r3
 8011cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	3348      	adds	r3, #72	@ 0x48
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f001 fedf 	bl	8013a78 <pvPortMalloc>
 8011cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d011      	beq.n	8011ce6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	3348      	adds	r3, #72	@ 0x48
 8011cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cd4:	79fa      	ldrb	r2, [r7, #7]
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	697a      	ldr	r2, [r7, #20]
 8011cde:	68b9      	ldr	r1, [r7, #8]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f000 f805 	bl	8011cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3720      	adds	r7, #32
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
 8011cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	69ba      	ldr	r2, [r7, #24]
 8011d08:	601a      	str	r2, [r3, #0]
 8011d0a:	e002      	b.n	8011d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d0c:	69bb      	ldr	r3, [r7, #24]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d1e:	2101      	movs	r1, #1
 8011d20:	69b8      	ldr	r0, [r7, #24]
 8011d22:	f7ff feaf 	bl	8011a84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08e      	sub	sp, #56	@ 0x38
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10d      	bne.n	8011d68 <xQueueGenericSend+0x38>
	__asm volatile
 8011d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d50:	b672      	cpsid	i
 8011d52:	f383 8811 	msr	BASEPRI, r3
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	f3bf 8f4f 	dsb	sy
 8011d5e:	b662      	cpsie	i
 8011d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011d62:	bf00      	nop
 8011d64:	bf00      	nop
 8011d66:	e7fd      	b.n	8011d64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d103      	bne.n	8011d76 <xQueueGenericSend+0x46>
 8011d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <xQueueGenericSend+0x4a>
 8011d76:	2301      	movs	r3, #1
 8011d78:	e000      	b.n	8011d7c <xQueueGenericSend+0x4c>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d10d      	bne.n	8011d9c <xQueueGenericSend+0x6c>
	__asm volatile
 8011d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d84:	b672      	cpsid	i
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	b662      	cpsie	i
 8011d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011d96:	bf00      	nop
 8011d98:	bf00      	nop
 8011d9a:	e7fd      	b.n	8011d98 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	2b02      	cmp	r3, #2
 8011da0:	d103      	bne.n	8011daa <xQueueGenericSend+0x7a>
 8011da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d101      	bne.n	8011dae <xQueueGenericSend+0x7e>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <xQueueGenericSend+0x80>
 8011dae:	2300      	movs	r3, #0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10d      	bne.n	8011dd0 <xQueueGenericSend+0xa0>
	__asm volatile
 8011db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011db8:	b672      	cpsid	i
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	b662      	cpsie	i
 8011dc8:	623b      	str	r3, [r7, #32]
}
 8011dca:	bf00      	nop
 8011dcc:	bf00      	nop
 8011dce:	e7fd      	b.n	8011dcc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011dd0:	f001 fa26 	bl	8013220 <xTaskGetSchedulerState>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d102      	bne.n	8011de0 <xQueueGenericSend+0xb0>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d101      	bne.n	8011de4 <xQueueGenericSend+0xb4>
 8011de0:	2301      	movs	r3, #1
 8011de2:	e000      	b.n	8011de6 <xQueueGenericSend+0xb6>
 8011de4:	2300      	movs	r3, #0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10d      	bne.n	8011e06 <xQueueGenericSend+0xd6>
	__asm volatile
 8011dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dee:	b672      	cpsid	i
 8011df0:	f383 8811 	msr	BASEPRI, r3
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	f3bf 8f4f 	dsb	sy
 8011dfc:	b662      	cpsie	i
 8011dfe:	61fb      	str	r3, [r7, #28]
}
 8011e00:	bf00      	nop
 8011e02:	bf00      	nop
 8011e04:	e7fd      	b.n	8011e02 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e06:	f001 fd09 	bl	801381c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d302      	bcc.n	8011e1c <xQueueGenericSend+0xec>
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	2b02      	cmp	r3, #2
 8011e1a:	d129      	bne.n	8011e70 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e1c:	683a      	ldr	r2, [r7, #0]
 8011e1e:	68b9      	ldr	r1, [r7, #8]
 8011e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e22:	f000 faa3 	bl	801236c <prvCopyDataToQueue>
 8011e26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d010      	beq.n	8011e52 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e32:	3324      	adds	r3, #36	@ 0x24
 8011e34:	4618      	mov	r0, r3
 8011e36:	f001 f829 	bl	8012e8c <xTaskRemoveFromEventList>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d013      	beq.n	8011e68 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e40:	4b3f      	ldr	r3, [pc, #252]	@ (8011f40 <xQueueGenericSend+0x210>)
 8011e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	e00a      	b.n	8011e68 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d007      	beq.n	8011e68 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e58:	4b39      	ldr	r3, [pc, #228]	@ (8011f40 <xQueueGenericSend+0x210>)
 8011e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e68:	f001 fd0e 	bl	8013888 <vPortExitCritical>
				return pdPASS;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e063      	b.n	8011f38 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d103      	bne.n	8011e7e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e76:	f001 fd07 	bl	8013888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	e05c      	b.n	8011f38 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d106      	bne.n	8011e92 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e84:	f107 0314 	add.w	r3, r7, #20
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f001 f865 	bl	8012f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e8e:	2301      	movs	r3, #1
 8011e90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e92:	f001 fcf9 	bl	8013888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e96:	f000 fdc1 	bl	8012a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e9a:	f001 fcbf 	bl	801381c <vPortEnterCritical>
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011ea4:	b25b      	sxtb	r3, r3
 8011ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eaa:	d103      	bne.n	8011eb4 <xQueueGenericSend+0x184>
 8011eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011eba:	b25b      	sxtb	r3, r3
 8011ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec0:	d103      	bne.n	8011eca <xQueueGenericSend+0x19a>
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011eca:	f001 fcdd 	bl	8013888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ece:	1d3a      	adds	r2, r7, #4
 8011ed0:	f107 0314 	add.w	r3, r7, #20
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f001 f854 	bl	8012f84 <xTaskCheckForTimeOut>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d124      	bne.n	8011f2c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011ee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ee4:	f000 fb3a 	bl	801255c <prvIsQueueFull>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d018      	beq.n	8011f20 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef0:	3310      	adds	r3, #16
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f000 ffa0 	bl	8012e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011efe:	f000 fac5 	bl	801248c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011f02:	f000 fd99 	bl	8012a38 <xTaskResumeAll>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	f47f af7c 	bne.w	8011e06 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8011f40 <xQueueGenericSend+0x210>)
 8011f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f14:	601a      	str	r2, [r3, #0]
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	f3bf 8f6f 	isb	sy
 8011f1e:	e772      	b.n	8011e06 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f22:	f000 fab3 	bl	801248c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f26:	f000 fd87 	bl	8012a38 <xTaskResumeAll>
 8011f2a:	e76c      	b.n	8011e06 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f2e:	f000 faad 	bl	801248c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f32:	f000 fd81 	bl	8012a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011f36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3738      	adds	r7, #56	@ 0x38
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	e000ed04 	.word	0xe000ed04

08011f44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b08e      	sub	sp, #56	@ 0x38
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
 8011f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10d      	bne.n	8011f78 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f60:	b672      	cpsid	i
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	b662      	cpsie	i
 8011f70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011f72:	bf00      	nop
 8011f74:	bf00      	nop
 8011f76:	e7fd      	b.n	8011f74 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d103      	bne.n	8011f86 <xQueueGenericSendFromISR+0x42>
 8011f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d101      	bne.n	8011f8a <xQueueGenericSendFromISR+0x46>
 8011f86:	2301      	movs	r3, #1
 8011f88:	e000      	b.n	8011f8c <xQueueGenericSendFromISR+0x48>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10d      	bne.n	8011fac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f94:	b672      	cpsid	i
 8011f96:	f383 8811 	msr	BASEPRI, r3
 8011f9a:	f3bf 8f6f 	isb	sy
 8011f9e:	f3bf 8f4f 	dsb	sy
 8011fa2:	b662      	cpsie	i
 8011fa4:	623b      	str	r3, [r7, #32]
}
 8011fa6:	bf00      	nop
 8011fa8:	bf00      	nop
 8011faa:	e7fd      	b.n	8011fa8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d103      	bne.n	8011fba <xQueueGenericSendFromISR+0x76>
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d101      	bne.n	8011fbe <xQueueGenericSendFromISR+0x7a>
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e000      	b.n	8011fc0 <xQueueGenericSendFromISR+0x7c>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10d      	bne.n	8011fe0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fc8:	b672      	cpsid	i
 8011fca:	f383 8811 	msr	BASEPRI, r3
 8011fce:	f3bf 8f6f 	isb	sy
 8011fd2:	f3bf 8f4f 	dsb	sy
 8011fd6:	b662      	cpsie	i
 8011fd8:	61fb      	str	r3, [r7, #28]
}
 8011fda:	bf00      	nop
 8011fdc:	bf00      	nop
 8011fde:	e7fd      	b.n	8011fdc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011fe0:	f001 fd04 	bl	80139ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8011fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fec:	b672      	cpsid	i
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	b662      	cpsie	i
 8011ffc:	61ba      	str	r2, [r7, #24]
 8011ffe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012000:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012002:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801200c:	429a      	cmp	r2, r3
 801200e:	d302      	bcc.n	8012016 <xQueueGenericSendFromISR+0xd2>
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	2b02      	cmp	r3, #2
 8012014:	d12c      	bne.n	8012070 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012018:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801201c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	68b9      	ldr	r1, [r7, #8]
 8012024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012026:	f000 f9a1 	bl	801236c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801202a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012032:	d112      	bne.n	801205a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012038:	2b00      	cmp	r3, #0
 801203a:	d016      	beq.n	801206a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801203c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801203e:	3324      	adds	r3, #36	@ 0x24
 8012040:	4618      	mov	r0, r3
 8012042:	f000 ff23 	bl	8012e8c <xTaskRemoveFromEventList>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00e      	beq.n	801206a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00b      	beq.n	801206a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2201      	movs	r2, #1
 8012056:	601a      	str	r2, [r3, #0]
 8012058:	e007      	b.n	801206a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801205a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801205e:	3301      	adds	r3, #1
 8012060:	b2db      	uxtb	r3, r3
 8012062:	b25a      	sxtb	r2, r3
 8012064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801206a:	2301      	movs	r3, #1
 801206c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801206e:	e001      	b.n	8012074 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012070:	2300      	movs	r3, #0
 8012072:	637b      	str	r3, [r7, #52]	@ 0x34
 8012074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012076:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801207e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012082:	4618      	mov	r0, r3
 8012084:	3738      	adds	r7, #56	@ 0x38
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
	...

0801208c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b08c      	sub	sp, #48	@ 0x30
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012098:	2300      	movs	r3, #0
 801209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80120a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d10d      	bne.n	80120c2 <xQueueReceive+0x36>
	__asm volatile
 80120a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120aa:	b672      	cpsid	i
 80120ac:	f383 8811 	msr	BASEPRI, r3
 80120b0:	f3bf 8f6f 	isb	sy
 80120b4:	f3bf 8f4f 	dsb	sy
 80120b8:	b662      	cpsie	i
 80120ba:	623b      	str	r3, [r7, #32]
}
 80120bc:	bf00      	nop
 80120be:	bf00      	nop
 80120c0:	e7fd      	b.n	80120be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d103      	bne.n	80120d0 <xQueueReceive+0x44>
 80120c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d101      	bne.n	80120d4 <xQueueReceive+0x48>
 80120d0:	2301      	movs	r3, #1
 80120d2:	e000      	b.n	80120d6 <xQueueReceive+0x4a>
 80120d4:	2300      	movs	r3, #0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d10d      	bne.n	80120f6 <xQueueReceive+0x6a>
	__asm volatile
 80120da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120de:	b672      	cpsid	i
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	b662      	cpsie	i
 80120ee:	61fb      	str	r3, [r7, #28]
}
 80120f0:	bf00      	nop
 80120f2:	bf00      	nop
 80120f4:	e7fd      	b.n	80120f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80120f6:	f001 f893 	bl	8013220 <xTaskGetSchedulerState>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d102      	bne.n	8012106 <xQueueReceive+0x7a>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d101      	bne.n	801210a <xQueueReceive+0x7e>
 8012106:	2301      	movs	r3, #1
 8012108:	e000      	b.n	801210c <xQueueReceive+0x80>
 801210a:	2300      	movs	r3, #0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d10d      	bne.n	801212c <xQueueReceive+0xa0>
	__asm volatile
 8012110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012114:	b672      	cpsid	i
 8012116:	f383 8811 	msr	BASEPRI, r3
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	b662      	cpsie	i
 8012124:	61bb      	str	r3, [r7, #24]
}
 8012126:	bf00      	nop
 8012128:	bf00      	nop
 801212a:	e7fd      	b.n	8012128 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801212c:	f001 fb76 	bl	801381c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012134:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012138:	2b00      	cmp	r3, #0
 801213a:	d01f      	beq.n	801217c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801213c:	68b9      	ldr	r1, [r7, #8]
 801213e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012140:	f000 f97e 	bl	8012440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012146:	1e5a      	subs	r2, r3, #1
 8012148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d00f      	beq.n	8012174 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012156:	3310      	adds	r3, #16
 8012158:	4618      	mov	r0, r3
 801215a:	f000 fe97 	bl	8012e8c <xTaskRemoveFromEventList>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d007      	beq.n	8012174 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012164:	4b3c      	ldr	r3, [pc, #240]	@ (8012258 <xQueueReceive+0x1cc>)
 8012166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012174:	f001 fb88 	bl	8013888 <vPortExitCritical>
				return pdPASS;
 8012178:	2301      	movs	r3, #1
 801217a:	e069      	b.n	8012250 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d103      	bne.n	801218a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012182:	f001 fb81 	bl	8013888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012186:	2300      	movs	r3, #0
 8012188:	e062      	b.n	8012250 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801218c:	2b00      	cmp	r3, #0
 801218e:	d106      	bne.n	801219e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012190:	f107 0310 	add.w	r3, r7, #16
 8012194:	4618      	mov	r0, r3
 8012196:	f000 fedf 	bl	8012f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801219a:	2301      	movs	r3, #1
 801219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801219e:	f001 fb73 	bl	8013888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121a2:	f000 fc3b 	bl	8012a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121a6:	f001 fb39 	bl	801381c <vPortEnterCritical>
 80121aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80121b0:	b25b      	sxtb	r3, r3
 80121b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b6:	d103      	bne.n	80121c0 <xQueueReceive+0x134>
 80121b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ba:	2200      	movs	r2, #0
 80121bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80121c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80121c6:	b25b      	sxtb	r3, r3
 80121c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121cc:	d103      	bne.n	80121d6 <xQueueReceive+0x14a>
 80121ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d0:	2200      	movs	r2, #0
 80121d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80121d6:	f001 fb57 	bl	8013888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80121da:	1d3a      	adds	r2, r7, #4
 80121dc:	f107 0310 	add.w	r3, r7, #16
 80121e0:	4611      	mov	r1, r2
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 fece 	bl	8012f84 <xTaskCheckForTimeOut>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d123      	bne.n	8012236 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121f0:	f000 f99e 	bl	8012530 <prvIsQueueEmpty>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d017      	beq.n	801222a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80121fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121fc:	3324      	adds	r3, #36	@ 0x24
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f000 fe1a 	bl	8012e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801220a:	f000 f93f 	bl	801248c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801220e:	f000 fc13 	bl	8012a38 <xTaskResumeAll>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d189      	bne.n	801212c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8012218:	4b0f      	ldr	r3, [pc, #60]	@ (8012258 <xQueueReceive+0x1cc>)
 801221a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801221e:	601a      	str	r2, [r3, #0]
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	e780      	b.n	801212c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801222a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801222c:	f000 f92e 	bl	801248c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012230:	f000 fc02 	bl	8012a38 <xTaskResumeAll>
 8012234:	e77a      	b.n	801212c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012238:	f000 f928 	bl	801248c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801223c:	f000 fbfc 	bl	8012a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012242:	f000 f975 	bl	8012530 <prvIsQueueEmpty>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	f43f af6f 	beq.w	801212c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801224e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012250:	4618      	mov	r0, r3
 8012252:	3730      	adds	r7, #48	@ 0x30
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	e000ed04 	.word	0xe000ed04

0801225c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08e      	sub	sp, #56	@ 0x38
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226e:	2b00      	cmp	r3, #0
 8012270:	d10d      	bne.n	801228e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8012272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012276:	b672      	cpsid	i
 8012278:	f383 8811 	msr	BASEPRI, r3
 801227c:	f3bf 8f6f 	isb	sy
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	b662      	cpsie	i
 8012286:	623b      	str	r3, [r7, #32]
}
 8012288:	bf00      	nop
 801228a:	bf00      	nop
 801228c:	e7fd      	b.n	801228a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d103      	bne.n	801229c <xQueueReceiveFromISR+0x40>
 8012294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012298:	2b00      	cmp	r3, #0
 801229a:	d101      	bne.n	80122a0 <xQueueReceiveFromISR+0x44>
 801229c:	2301      	movs	r3, #1
 801229e:	e000      	b.n	80122a2 <xQueueReceiveFromISR+0x46>
 80122a0:	2300      	movs	r3, #0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10d      	bne.n	80122c2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80122a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122aa:	b672      	cpsid	i
 80122ac:	f383 8811 	msr	BASEPRI, r3
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	b662      	cpsie	i
 80122ba:	61fb      	str	r3, [r7, #28]
}
 80122bc:	bf00      	nop
 80122be:	bf00      	nop
 80122c0:	e7fd      	b.n	80122be <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122c2:	f001 fb93 	bl	80139ec <vPortValidateInterruptPriority>
	__asm volatile
 80122c6:	f3ef 8211 	mrs	r2, BASEPRI
 80122ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ce:	b672      	cpsid	i
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	b662      	cpsie	i
 80122de:	61ba      	str	r2, [r7, #24]
 80122e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80122e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80122e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d02f      	beq.n	8012352 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80122f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80122f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80122fc:	68b9      	ldr	r1, [r7, #8]
 80122fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012300:	f000 f89e 	bl	8012440 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012306:	1e5a      	subs	r2, r3, #1
 8012308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801230a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801230c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d112      	bne.n	801233c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012318:	691b      	ldr	r3, [r3, #16]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d016      	beq.n	801234c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012320:	3310      	adds	r3, #16
 8012322:	4618      	mov	r0, r3
 8012324:	f000 fdb2 	bl	8012e8c <xTaskRemoveFromEventList>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00e      	beq.n	801234c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00b      	beq.n	801234c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	e007      	b.n	801234c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801233c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012340:	3301      	adds	r3, #1
 8012342:	b2db      	uxtb	r3, r3
 8012344:	b25a      	sxtb	r2, r3
 8012346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801234c:	2301      	movs	r3, #1
 801234e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012350:	e001      	b.n	8012356 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8012352:	2300      	movs	r3, #0
 8012354:	637b      	str	r3, [r7, #52]	@ 0x34
 8012356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012358:	613b      	str	r3, [r7, #16]
	__asm volatile
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	f383 8811 	msr	BASEPRI, r3
}
 8012360:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012364:	4618      	mov	r0, r3
 8012366:	3738      	adds	r7, #56	@ 0x38
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012378:	2300      	movs	r3, #0
 801237a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012386:	2b00      	cmp	r3, #0
 8012388:	d10d      	bne.n	80123a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d14d      	bne.n	801242e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	4618      	mov	r0, r3
 8012398:	f000 ff60 	bl	801325c <xTaskPriorityDisinherit>
 801239c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2200      	movs	r2, #0
 80123a2:	609a      	str	r2, [r3, #8]
 80123a4:	e043      	b.n	801242e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d119      	bne.n	80123e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6858      	ldr	r0, [r3, #4]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123b4:	461a      	mov	r2, r3
 80123b6:	68b9      	ldr	r1, [r7, #8]
 80123b8:	f002 fb85 	bl	8014ac6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123c4:	441a      	add	r2, r3
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	685a      	ldr	r2, [r3, #4]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d32b      	bcc.n	801242e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	605a      	str	r2, [r3, #4]
 80123de:	e026      	b.n	801242e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	68d8      	ldr	r0, [r3, #12]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123e8:	461a      	mov	r2, r3
 80123ea:	68b9      	ldr	r1, [r7, #8]
 80123ec:	f002 fb6b 	bl	8014ac6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68da      	ldr	r2, [r3, #12]
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123f8:	425b      	negs	r3, r3
 80123fa:	441a      	add	r2, r3
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	68da      	ldr	r2, [r3, #12]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	429a      	cmp	r2, r3
 801240a:	d207      	bcs.n	801241c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	689a      	ldr	r2, [r3, #8]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012414:	425b      	negs	r3, r3
 8012416:	441a      	add	r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b02      	cmp	r3, #2
 8012420:	d105      	bne.n	801242e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	3b01      	subs	r3, #1
 801242c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012436:	697b      	ldr	r3, [r7, #20]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801244e:	2b00      	cmp	r3, #0
 8012450:	d018      	beq.n	8012484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	68da      	ldr	r2, [r3, #12]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801245a:	441a      	add	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	68da      	ldr	r2, [r3, #12]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	429a      	cmp	r2, r3
 801246a:	d303      	bcc.n	8012474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	68d9      	ldr	r1, [r3, #12]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801247c:	461a      	mov	r2, r3
 801247e:	6838      	ldr	r0, [r7, #0]
 8012480:	f002 fb21 	bl	8014ac6 <memcpy>
	}
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012494:	f001 f9c2 	bl	801381c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801249e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124a0:	e011      	b.n	80124c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d012      	beq.n	80124d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	3324      	adds	r3, #36	@ 0x24
 80124ae:	4618      	mov	r0, r3
 80124b0:	f000 fcec 	bl	8012e8c <xTaskRemoveFromEventList>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d001      	beq.n	80124be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80124ba:	f000 fdcb 	bl	8013054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80124be:	7bfb      	ldrb	r3, [r7, #15]
 80124c0:	3b01      	subs	r3, #1
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	dce9      	bgt.n	80124a2 <prvUnlockQueue+0x16>
 80124ce:	e000      	b.n	80124d2 <prvUnlockQueue+0x46>
					break;
 80124d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	22ff      	movs	r2, #255	@ 0xff
 80124d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80124da:	f001 f9d5 	bl	8013888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80124de:	f001 f99d 	bl	801381c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80124e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124ea:	e011      	b.n	8012510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	691b      	ldr	r3, [r3, #16]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d012      	beq.n	801251a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	3310      	adds	r3, #16
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 fcc7 	bl	8012e8c <xTaskRemoveFromEventList>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d001      	beq.n	8012508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012504:	f000 fda6 	bl	8013054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	3b01      	subs	r3, #1
 801250c:	b2db      	uxtb	r3, r3
 801250e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012514:	2b00      	cmp	r3, #0
 8012516:	dce9      	bgt.n	80124ec <prvUnlockQueue+0x60>
 8012518:	e000      	b.n	801251c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801251a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	22ff      	movs	r2, #255	@ 0xff
 8012520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012524:	f001 f9b0 	bl	8013888 <vPortExitCritical>
}
 8012528:	bf00      	nop
 801252a:	3710      	adds	r7, #16
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012538:	f001 f970 	bl	801381c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012540:	2b00      	cmp	r3, #0
 8012542:	d102      	bne.n	801254a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012544:	2301      	movs	r3, #1
 8012546:	60fb      	str	r3, [r7, #12]
 8012548:	e001      	b.n	801254e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801254a:	2300      	movs	r3, #0
 801254c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801254e:	f001 f99b 	bl	8013888 <vPortExitCritical>

	return xReturn;
 8012552:	68fb      	ldr	r3, [r7, #12]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012564:	f001 f95a 	bl	801381c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012570:	429a      	cmp	r2, r3
 8012572:	d102      	bne.n	801257a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012574:	2301      	movs	r3, #1
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	e001      	b.n	801257e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801257a:	2300      	movs	r3, #0
 801257c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801257e:	f001 f983 	bl	8013888 <vPortExitCritical>

	return xReturn;
 8012582:	68fb      	ldr	r3, [r7, #12]
}
 8012584:	4618      	mov	r0, r3
 8012586:	3710      	adds	r7, #16
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801258c:	b580      	push	{r7, lr}
 801258e:	b08e      	sub	sp, #56	@ 0x38
 8012590:	af04      	add	r7, sp, #16
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	60b9      	str	r1, [r7, #8]
 8012596:	607a      	str	r2, [r7, #4]
 8012598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801259a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10d      	bne.n	80125bc <xTaskCreateStatic+0x30>
	__asm volatile
 80125a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a4:	b672      	cpsid	i
 80125a6:	f383 8811 	msr	BASEPRI, r3
 80125aa:	f3bf 8f6f 	isb	sy
 80125ae:	f3bf 8f4f 	dsb	sy
 80125b2:	b662      	cpsie	i
 80125b4:	623b      	str	r3, [r7, #32]
}
 80125b6:	bf00      	nop
 80125b8:	bf00      	nop
 80125ba:	e7fd      	b.n	80125b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80125bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10d      	bne.n	80125de <xTaskCreateStatic+0x52>
	__asm volatile
 80125c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125c6:	b672      	cpsid	i
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	b662      	cpsie	i
 80125d6:	61fb      	str	r3, [r7, #28]
}
 80125d8:	bf00      	nop
 80125da:	bf00      	nop
 80125dc:	e7fd      	b.n	80125da <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80125de:	2358      	movs	r3, #88	@ 0x58
 80125e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	2b58      	cmp	r3, #88	@ 0x58
 80125e6:	d00d      	beq.n	8012604 <xTaskCreateStatic+0x78>
	__asm volatile
 80125e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125ec:	b672      	cpsid	i
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	b662      	cpsie	i
 80125fc:	61bb      	str	r3, [r7, #24]
}
 80125fe:	bf00      	nop
 8012600:	bf00      	nop
 8012602:	e7fd      	b.n	8012600 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012608:	2b00      	cmp	r3, #0
 801260a:	d01e      	beq.n	801264a <xTaskCreateStatic+0xbe>
 801260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801260e:	2b00      	cmp	r3, #0
 8012610:	d01b      	beq.n	801264a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012614:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801261a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801261e:	2202      	movs	r2, #2
 8012620:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012624:	2300      	movs	r3, #0
 8012626:	9303      	str	r3, [sp, #12]
 8012628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262a:	9302      	str	r3, [sp, #8]
 801262c:	f107 0314 	add.w	r3, r7, #20
 8012630:	9301      	str	r3, [sp, #4]
 8012632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	68b9      	ldr	r1, [r7, #8]
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f000 f850 	bl	80126e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012644:	f000 f8e2 	bl	801280c <prvAddNewTaskToReadyList>
 8012648:	e001      	b.n	801264e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801264e:	697b      	ldr	r3, [r7, #20]
	}
 8012650:	4618      	mov	r0, r3
 8012652:	3728      	adds	r7, #40	@ 0x28
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012658:	b580      	push	{r7, lr}
 801265a:	b08c      	sub	sp, #48	@ 0x30
 801265c:	af04      	add	r7, sp, #16
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	4613      	mov	r3, r2
 8012666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012668:	88fb      	ldrh	r3, [r7, #6]
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	4618      	mov	r0, r3
 801266e:	f001 fa03 	bl	8013a78 <pvPortMalloc>
 8012672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00e      	beq.n	8012698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801267a:	2058      	movs	r0, #88	@ 0x58
 801267c:	f001 f9fc 	bl	8013a78 <pvPortMalloc>
 8012680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d003      	beq.n	8012690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	631a      	str	r2, [r3, #48]	@ 0x30
 801268e:	e005      	b.n	801269c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012690:	6978      	ldr	r0, [r7, #20]
 8012692:	f001 fac3 	bl	8013c1c <vPortFree>
 8012696:	e001      	b.n	801269c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012698:	2300      	movs	r3, #0
 801269a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d017      	beq.n	80126d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	2200      	movs	r2, #0
 80126a6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80126aa:	88fa      	ldrh	r2, [r7, #6]
 80126ac:	2300      	movs	r3, #0
 80126ae:	9303      	str	r3, [sp, #12]
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	9302      	str	r3, [sp, #8]
 80126b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b6:	9301      	str	r3, [sp, #4]
 80126b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	68b9      	ldr	r1, [r7, #8]
 80126c0:	68f8      	ldr	r0, [r7, #12]
 80126c2:	f000 f80e 	bl	80126e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126c6:	69f8      	ldr	r0, [r7, #28]
 80126c8:	f000 f8a0 	bl	801280c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80126cc:	2301      	movs	r3, #1
 80126ce:	61bb      	str	r3, [r7, #24]
 80126d0:	e002      	b.n	80126d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80126d2:	f04f 33ff 	mov.w	r3, #4294967295
 80126d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80126d8:	69bb      	ldr	r3, [r7, #24]
	}
 80126da:	4618      	mov	r0, r3
 80126dc:	3720      	adds	r7, #32
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b088      	sub	sp, #32
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	60f8      	str	r0, [r7, #12]
 80126ea:	60b9      	str	r1, [r7, #8]
 80126ec:	607a      	str	r2, [r7, #4]
 80126ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80126f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	461a      	mov	r2, r3
 80126fa:	21a5      	movs	r1, #165	@ 0xa5
 80126fc:	f002 f958 	bl	80149b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012704:	6879      	ldr	r1, [r7, #4]
 8012706:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801270a:	440b      	add	r3, r1
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	f023 0307 	bic.w	r3, r3, #7
 8012718:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	f003 0307 	and.w	r3, r3, #7
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00d      	beq.n	8012740 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8012724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012728:	b672      	cpsid	i
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	b662      	cpsie	i
 8012738:	617b      	str	r3, [r7, #20]
}
 801273a:	bf00      	nop
 801273c:	bf00      	nop
 801273e:	e7fd      	b.n	801273c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d01f      	beq.n	8012786 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012746:	2300      	movs	r3, #0
 8012748:	61fb      	str	r3, [r7, #28]
 801274a:	e012      	b.n	8012772 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801274c:	68ba      	ldr	r2, [r7, #8]
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	4413      	add	r3, r2
 8012752:	7819      	ldrb	r1, [r3, #0]
 8012754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	4413      	add	r3, r2
 801275a:	3334      	adds	r3, #52	@ 0x34
 801275c:	460a      	mov	r2, r1
 801275e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012760:	68ba      	ldr	r2, [r7, #8]
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	4413      	add	r3, r2
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d006      	beq.n	801277a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	3301      	adds	r3, #1
 8012770:	61fb      	str	r3, [r7, #28]
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	2b0f      	cmp	r3, #15
 8012776:	d9e9      	bls.n	801274c <prvInitialiseNewTask+0x6a>
 8012778:	e000      	b.n	801277c <prvInitialiseNewTask+0x9a>
			{
				break;
 801277a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277e:	2200      	movs	r2, #0
 8012780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012784:	e003      	b.n	801278e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012788:	2200      	movs	r2, #0
 801278a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012790:	2b06      	cmp	r3, #6
 8012792:	d901      	bls.n	8012798 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012794:	2306      	movs	r3, #6
 8012796:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801279c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127a2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80127a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a6:	2200      	movs	r2, #0
 80127a8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80127aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ac:	3304      	adds	r3, #4
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7ff f8d4 	bl	801195c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80127b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b6:	3318      	adds	r3, #24
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ff f8cf 	bl	801195c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80127be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c6:	f1c3 0207 	rsb	r2, r3, #7
 80127ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80127ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80127d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d6:	2200      	movs	r2, #0
 80127d8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80127da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127dc:	2200      	movs	r2, #0
 80127de:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e2:	2200      	movs	r2, #0
 80127e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127e8:	683a      	ldr	r2, [r7, #0]
 80127ea:	68f9      	ldr	r1, [r7, #12]
 80127ec:	69b8      	ldr	r0, [r7, #24]
 80127ee:	f000 ff09 	bl	8013604 <pxPortInitialiseStack>
 80127f2:	4602      	mov	r2, r0
 80127f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80127f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80127fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012802:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012804:	bf00      	nop
 8012806:	3720      	adds	r7, #32
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012814:	f001 f802 	bl	801381c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012818:	4b2a      	ldr	r3, [pc, #168]	@ (80128c4 <prvAddNewTaskToReadyList+0xb8>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	3301      	adds	r3, #1
 801281e:	4a29      	ldr	r2, [pc, #164]	@ (80128c4 <prvAddNewTaskToReadyList+0xb8>)
 8012820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012822:	4b29      	ldr	r3, [pc, #164]	@ (80128c8 <prvAddNewTaskToReadyList+0xbc>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d109      	bne.n	801283e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801282a:	4a27      	ldr	r2, [pc, #156]	@ (80128c8 <prvAddNewTaskToReadyList+0xbc>)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012830:	4b24      	ldr	r3, [pc, #144]	@ (80128c4 <prvAddNewTaskToReadyList+0xb8>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d110      	bne.n	801285a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012838:	f000 fc32 	bl	80130a0 <prvInitialiseTaskLists>
 801283c:	e00d      	b.n	801285a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801283e:	4b23      	ldr	r3, [pc, #140]	@ (80128cc <prvAddNewTaskToReadyList+0xc0>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d109      	bne.n	801285a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012846:	4b20      	ldr	r3, [pc, #128]	@ (80128c8 <prvAddNewTaskToReadyList+0xbc>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012850:	429a      	cmp	r2, r3
 8012852:	d802      	bhi.n	801285a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012854:	4a1c      	ldr	r2, [pc, #112]	@ (80128c8 <prvAddNewTaskToReadyList+0xbc>)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801285a:	4b1d      	ldr	r3, [pc, #116]	@ (80128d0 <prvAddNewTaskToReadyList+0xc4>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	3301      	adds	r3, #1
 8012860:	4a1b      	ldr	r2, [pc, #108]	@ (80128d0 <prvAddNewTaskToReadyList+0xc4>)
 8012862:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012868:	2201      	movs	r2, #1
 801286a:	409a      	lsls	r2, r3
 801286c:	4b19      	ldr	r3, [pc, #100]	@ (80128d4 <prvAddNewTaskToReadyList+0xc8>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4313      	orrs	r3, r2
 8012872:	4a18      	ldr	r2, [pc, #96]	@ (80128d4 <prvAddNewTaskToReadyList+0xc8>)
 8012874:	6013      	str	r3, [r2, #0]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801287a:	4613      	mov	r3, r2
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	4413      	add	r3, r2
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	4a15      	ldr	r2, [pc, #84]	@ (80128d8 <prvAddNewTaskToReadyList+0xcc>)
 8012884:	441a      	add	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	3304      	adds	r3, #4
 801288a:	4619      	mov	r1, r3
 801288c:	4610      	mov	r0, r2
 801288e:	f7ff f872 	bl	8011976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012892:	f000 fff9 	bl	8013888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012896:	4b0d      	ldr	r3, [pc, #52]	@ (80128cc <prvAddNewTaskToReadyList+0xc0>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d00e      	beq.n	80128bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801289e:	4b0a      	ldr	r3, [pc, #40]	@ (80128c8 <prvAddNewTaskToReadyList+0xbc>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d207      	bcs.n	80128bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80128ac:	4b0b      	ldr	r3, [pc, #44]	@ (80128dc <prvAddNewTaskToReadyList+0xd0>)
 80128ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128b2:	601a      	str	r2, [r3, #0]
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128bc:	bf00      	nop
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	20000e48 	.word	0x20000e48
 80128c8:	20000d48 	.word	0x20000d48
 80128cc:	20000e54 	.word	0x20000e54
 80128d0:	20000e64 	.word	0x20000e64
 80128d4:	20000e50 	.word	0x20000e50
 80128d8:	20000d4c 	.word	0x20000d4c
 80128dc:	e000ed04 	.word	0xe000ed04

080128e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80128e8:	2300      	movs	r3, #0
 80128ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d01a      	beq.n	8012928 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80128f2:	4b15      	ldr	r3, [pc, #84]	@ (8012948 <vTaskDelay+0x68>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00d      	beq.n	8012916 <vTaskDelay+0x36>
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128fe:	b672      	cpsid	i
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	b662      	cpsie	i
 801290e:	60bb      	str	r3, [r7, #8]
}
 8012910:	bf00      	nop
 8012912:	bf00      	nop
 8012914:	e7fd      	b.n	8012912 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012916:	f000 f881 	bl	8012a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801291a:	2100      	movs	r1, #0
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 fe0b 	bl	8013538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012922:	f000 f889 	bl	8012a38 <xTaskResumeAll>
 8012926:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d107      	bne.n	801293e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801292e:	4b07      	ldr	r3, [pc, #28]	@ (801294c <vTaskDelay+0x6c>)
 8012930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012934:	601a      	str	r2, [r3, #0]
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801293e:	bf00      	nop
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20000e70 	.word	0x20000e70
 801294c:	e000ed04 	.word	0xe000ed04

08012950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08a      	sub	sp, #40	@ 0x28
 8012954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012956:	2300      	movs	r3, #0
 8012958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801295a:	2300      	movs	r3, #0
 801295c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801295e:	463a      	mov	r2, r7
 8012960:	1d39      	adds	r1, r7, #4
 8012962:	f107 0308 	add.w	r3, r7, #8
 8012966:	4618      	mov	r0, r3
 8012968:	f7ee f9d2 	bl	8000d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	68ba      	ldr	r2, [r7, #8]
 8012972:	9202      	str	r2, [sp, #8]
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	2300      	movs	r3, #0
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	2300      	movs	r3, #0
 801297c:	460a      	mov	r2, r1
 801297e:	4921      	ldr	r1, [pc, #132]	@ (8012a04 <vTaskStartScheduler+0xb4>)
 8012980:	4821      	ldr	r0, [pc, #132]	@ (8012a08 <vTaskStartScheduler+0xb8>)
 8012982:	f7ff fe03 	bl	801258c <xTaskCreateStatic>
 8012986:	4603      	mov	r3, r0
 8012988:	4a20      	ldr	r2, [pc, #128]	@ (8012a0c <vTaskStartScheduler+0xbc>)
 801298a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801298c:	4b1f      	ldr	r3, [pc, #124]	@ (8012a0c <vTaskStartScheduler+0xbc>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012994:	2301      	movs	r3, #1
 8012996:	617b      	str	r3, [r7, #20]
 8012998:	e001      	b.n	801299e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801299a:	2300      	movs	r3, #0
 801299c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d118      	bne.n	80129d6 <vTaskStartScheduler+0x86>
	__asm volatile
 80129a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129a8:	b672      	cpsid	i
 80129aa:	f383 8811 	msr	BASEPRI, r3
 80129ae:	f3bf 8f6f 	isb	sy
 80129b2:	f3bf 8f4f 	dsb	sy
 80129b6:	b662      	cpsie	i
 80129b8:	613b      	str	r3, [r7, #16]
}
 80129ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80129bc:	4b14      	ldr	r3, [pc, #80]	@ (8012a10 <vTaskStartScheduler+0xc0>)
 80129be:	f04f 32ff 	mov.w	r2, #4294967295
 80129c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80129c4:	4b13      	ldr	r3, [pc, #76]	@ (8012a14 <vTaskStartScheduler+0xc4>)
 80129c6:	2201      	movs	r2, #1
 80129c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80129ca:	4b13      	ldr	r3, [pc, #76]	@ (8012a18 <vTaskStartScheduler+0xc8>)
 80129cc:	2200      	movs	r2, #0
 80129ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80129d0:	f000 fea6 	bl	8013720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80129d4:	e011      	b.n	80129fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129dc:	d10d      	bne.n	80129fa <vTaskStartScheduler+0xaa>
	__asm volatile
 80129de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129e2:	b672      	cpsid	i
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	b662      	cpsie	i
 80129f2:	60fb      	str	r3, [r7, #12]
}
 80129f4:	bf00      	nop
 80129f6:	bf00      	nop
 80129f8:	e7fd      	b.n	80129f6 <vTaskStartScheduler+0xa6>
}
 80129fa:	bf00      	nop
 80129fc:	3718      	adds	r7, #24
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	08014ee8 	.word	0x08014ee8
 8012a08:	0801306d 	.word	0x0801306d
 8012a0c:	20000e6c 	.word	0x20000e6c
 8012a10:	20000e68 	.word	0x20000e68
 8012a14:	20000e54 	.word	0x20000e54
 8012a18:	20000e4c 	.word	0x20000e4c

08012a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012a20:	4b04      	ldr	r3, [pc, #16]	@ (8012a34 <vTaskSuspendAll+0x18>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	3301      	adds	r3, #1
 8012a26:	4a03      	ldr	r2, [pc, #12]	@ (8012a34 <vTaskSuspendAll+0x18>)
 8012a28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012a2a:	bf00      	nop
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr
 8012a34:	20000e70 	.word	0x20000e70

08012a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012a42:	2300      	movs	r3, #0
 8012a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012a46:	4b43      	ldr	r3, [pc, #268]	@ (8012b54 <xTaskResumeAll+0x11c>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10d      	bne.n	8012a6a <xTaskResumeAll+0x32>
	__asm volatile
 8012a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a52:	b672      	cpsid	i
 8012a54:	f383 8811 	msr	BASEPRI, r3
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	f3bf 8f4f 	dsb	sy
 8012a60:	b662      	cpsie	i
 8012a62:	603b      	str	r3, [r7, #0]
}
 8012a64:	bf00      	nop
 8012a66:	bf00      	nop
 8012a68:	e7fd      	b.n	8012a66 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012a6a:	f000 fed7 	bl	801381c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012a6e:	4b39      	ldr	r3, [pc, #228]	@ (8012b54 <xTaskResumeAll+0x11c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	3b01      	subs	r3, #1
 8012a74:	4a37      	ldr	r2, [pc, #220]	@ (8012b54 <xTaskResumeAll+0x11c>)
 8012a76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a78:	4b36      	ldr	r3, [pc, #216]	@ (8012b54 <xTaskResumeAll+0x11c>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d161      	bne.n	8012b44 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012a80:	4b35      	ldr	r3, [pc, #212]	@ (8012b58 <xTaskResumeAll+0x120>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d05d      	beq.n	8012b44 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a88:	e02e      	b.n	8012ae8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a8a:	4b34      	ldr	r3, [pc, #208]	@ (8012b5c <xTaskResumeAll+0x124>)
 8012a8c:	68db      	ldr	r3, [r3, #12]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	3318      	adds	r3, #24
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fe ffca 	bl	8011a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	3304      	adds	r3, #4
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fe ffc5 	bl	8011a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aaa:	2201      	movs	r2, #1
 8012aac:	409a      	lsls	r2, r3
 8012aae:	4b2c      	ldr	r3, [pc, #176]	@ (8012b60 <xTaskResumeAll+0x128>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8012b60 <xTaskResumeAll+0x128>)
 8012ab6:	6013      	str	r3, [r2, #0]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012abc:	4613      	mov	r3, r2
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	4413      	add	r3, r2
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	4a27      	ldr	r2, [pc, #156]	@ (8012b64 <xTaskResumeAll+0x12c>)
 8012ac6:	441a      	add	r2, r3
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	3304      	adds	r3, #4
 8012acc:	4619      	mov	r1, r3
 8012ace:	4610      	mov	r0, r2
 8012ad0:	f7fe ff51 	bl	8011976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ad8:	4b23      	ldr	r3, [pc, #140]	@ (8012b68 <xTaskResumeAll+0x130>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d302      	bcc.n	8012ae8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012ae2:	4b22      	ldr	r3, [pc, #136]	@ (8012b6c <xTaskResumeAll+0x134>)
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b5c <xTaskResumeAll+0x124>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d1cc      	bne.n	8012a8a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012af6:	f000 fb73 	bl	80131e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012afa:	4b1d      	ldr	r3, [pc, #116]	@ (8012b70 <xTaskResumeAll+0x138>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d010      	beq.n	8012b28 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012b06:	f000 f859 	bl	8012bbc <xTaskIncrementTick>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d002      	beq.n	8012b16 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012b10:	4b16      	ldr	r3, [pc, #88]	@ (8012b6c <xTaskResumeAll+0x134>)
 8012b12:	2201      	movs	r2, #1
 8012b14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1f1      	bne.n	8012b06 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012b22:	4b13      	ldr	r3, [pc, #76]	@ (8012b70 <xTaskResumeAll+0x138>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012b28:	4b10      	ldr	r3, [pc, #64]	@ (8012b6c <xTaskResumeAll+0x134>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d009      	beq.n	8012b44 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012b34:	4b0f      	ldr	r3, [pc, #60]	@ (8012b74 <xTaskResumeAll+0x13c>)
 8012b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b3a:	601a      	str	r2, [r3, #0]
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b44:	f000 fea0 	bl	8013888 <vPortExitCritical>

	return xAlreadyYielded;
 8012b48:	68bb      	ldr	r3, [r7, #8]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	20000e70 	.word	0x20000e70
 8012b58:	20000e48 	.word	0x20000e48
 8012b5c:	20000e08 	.word	0x20000e08
 8012b60:	20000e50 	.word	0x20000e50
 8012b64:	20000d4c 	.word	0x20000d4c
 8012b68:	20000d48 	.word	0x20000d48
 8012b6c:	20000e5c 	.word	0x20000e5c
 8012b70:	20000e58 	.word	0x20000e58
 8012b74:	e000ed04 	.word	0xe000ed04

08012b78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012b7e:	4b05      	ldr	r3, [pc, #20]	@ (8012b94 <xTaskGetTickCount+0x1c>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012b84:	687b      	ldr	r3, [r7, #4]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	370c      	adds	r7, #12
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	20000e4c 	.word	0x20000e4c

08012b98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b9e:	f000 ff25 	bl	80139ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012ba6:	4b04      	ldr	r3, [pc, #16]	@ (8012bb8 <xTaskGetTickCountFromISR+0x20>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bac:	683b      	ldr	r3, [r7, #0]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	20000e4c 	.word	0x20000e4c

08012bbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b086      	sub	sp, #24
 8012bc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bc6:	4b50      	ldr	r3, [pc, #320]	@ (8012d08 <xTaskIncrementTick+0x14c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f040 808b 	bne.w	8012ce6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8012d0c <xTaskIncrementTick+0x150>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8012d0c <xTaskIncrementTick+0x150>)
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d123      	bne.n	8012c2c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012be4:	4b4a      	ldr	r3, [pc, #296]	@ (8012d10 <xTaskIncrementTick+0x154>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d00d      	beq.n	8012c0a <xTaskIncrementTick+0x4e>
	__asm volatile
 8012bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bf2:	b672      	cpsid	i
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	b662      	cpsie	i
 8012c02:	603b      	str	r3, [r7, #0]
}
 8012c04:	bf00      	nop
 8012c06:	bf00      	nop
 8012c08:	e7fd      	b.n	8012c06 <xTaskIncrementTick+0x4a>
 8012c0a:	4b41      	ldr	r3, [pc, #260]	@ (8012d10 <xTaskIncrementTick+0x154>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	60fb      	str	r3, [r7, #12]
 8012c10:	4b40      	ldr	r3, [pc, #256]	@ (8012d14 <xTaskIncrementTick+0x158>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	4a3e      	ldr	r2, [pc, #248]	@ (8012d10 <xTaskIncrementTick+0x154>)
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	4a3e      	ldr	r2, [pc, #248]	@ (8012d14 <xTaskIncrementTick+0x158>)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	6013      	str	r3, [r2, #0]
 8012c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8012d18 <xTaskIncrementTick+0x15c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	3301      	adds	r3, #1
 8012c24:	4a3c      	ldr	r2, [pc, #240]	@ (8012d18 <xTaskIncrementTick+0x15c>)
 8012c26:	6013      	str	r3, [r2, #0]
 8012c28:	f000 fada 	bl	80131e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8012d1c <xTaskIncrementTick+0x160>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	693a      	ldr	r2, [r7, #16]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d348      	bcc.n	8012cc8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c36:	4b36      	ldr	r3, [pc, #216]	@ (8012d10 <xTaskIncrementTick+0x154>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d104      	bne.n	8012c4a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c40:	4b36      	ldr	r3, [pc, #216]	@ (8012d1c <xTaskIncrementTick+0x160>)
 8012c42:	f04f 32ff 	mov.w	r2, #4294967295
 8012c46:	601a      	str	r2, [r3, #0]
					break;
 8012c48:	e03e      	b.n	8012cc8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c4a:	4b31      	ldr	r3, [pc, #196]	@ (8012d10 <xTaskIncrementTick+0x154>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	68db      	ldr	r3, [r3, #12]
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012c5a:	693a      	ldr	r2, [r7, #16]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d203      	bcs.n	8012c6a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012c62:	4a2e      	ldr	r2, [pc, #184]	@ (8012d1c <xTaskIncrementTick+0x160>)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012c68:	e02e      	b.n	8012cc8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	3304      	adds	r3, #4
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe fede 	bl	8011a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d004      	beq.n	8012c86 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	3318      	adds	r3, #24
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fe fed5 	bl	8011a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	409a      	lsls	r2, r3
 8012c8e:	4b24      	ldr	r3, [pc, #144]	@ (8012d20 <xTaskIncrementTick+0x164>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4313      	orrs	r3, r2
 8012c94:	4a22      	ldr	r2, [pc, #136]	@ (8012d20 <xTaskIncrementTick+0x164>)
 8012c96:	6013      	str	r3, [r2, #0]
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	009b      	lsls	r3, r3, #2
 8012ca0:	4413      	add	r3, r2
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8012d24 <xTaskIncrementTick+0x168>)
 8012ca6:	441a      	add	r2, r3
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	3304      	adds	r3, #4
 8012cac:	4619      	mov	r1, r3
 8012cae:	4610      	mov	r0, r2
 8012cb0:	f7fe fe61 	bl	8011976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8012d28 <xTaskIncrementTick+0x16c>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d3b9      	bcc.n	8012c36 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012cc6:	e7b6      	b.n	8012c36 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012cc8:	4b17      	ldr	r3, [pc, #92]	@ (8012d28 <xTaskIncrementTick+0x16c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cce:	4915      	ldr	r1, [pc, #84]	@ (8012d24 <xTaskIncrementTick+0x168>)
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	440b      	add	r3, r1
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d907      	bls.n	8012cf0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	617b      	str	r3, [r7, #20]
 8012ce4:	e004      	b.n	8012cf0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012ce6:	4b11      	ldr	r3, [pc, #68]	@ (8012d2c <xTaskIncrementTick+0x170>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	3301      	adds	r3, #1
 8012cec:	4a0f      	ldr	r2, [pc, #60]	@ (8012d2c <xTaskIncrementTick+0x170>)
 8012cee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8012d30 <xTaskIncrementTick+0x174>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012cfc:	697b      	ldr	r3, [r7, #20]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3718      	adds	r7, #24
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	20000e70 	.word	0x20000e70
 8012d0c:	20000e4c 	.word	0x20000e4c
 8012d10:	20000e00 	.word	0x20000e00
 8012d14:	20000e04 	.word	0x20000e04
 8012d18:	20000e60 	.word	0x20000e60
 8012d1c:	20000e68 	.word	0x20000e68
 8012d20:	20000e50 	.word	0x20000e50
 8012d24:	20000d4c 	.word	0x20000d4c
 8012d28:	20000d48 	.word	0x20000d48
 8012d2c:	20000e58 	.word	0x20000e58
 8012d30:	20000e5c 	.word	0x20000e5c

08012d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b088      	sub	sp, #32
 8012d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8012e28 <vTaskSwitchContext+0xf4>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d003      	beq.n	8012d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012d42:	4b3a      	ldr	r3, [pc, #232]	@ (8012e2c <vTaskSwitchContext+0xf8>)
 8012d44:	2201      	movs	r2, #1
 8012d46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012d48:	e069      	b.n	8012e1e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8012d4a:	4b38      	ldr	r3, [pc, #224]	@ (8012e2c <vTaskSwitchContext+0xf8>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012d50:	4b37      	ldr	r3, [pc, #220]	@ (8012e30 <vTaskSwitchContext+0xfc>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8012d5c:	61bb      	str	r3, [r7, #24]
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	69ba      	ldr	r2, [r7, #24]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d111      	bne.n	8012d8c <vTaskSwitchContext+0x58>
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	69ba      	ldr	r2, [r7, #24]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d10b      	bne.n	8012d8c <vTaskSwitchContext+0x58>
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	3308      	adds	r3, #8
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	69ba      	ldr	r2, [r7, #24]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d105      	bne.n	8012d8c <vTaskSwitchContext+0x58>
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	330c      	adds	r3, #12
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	69ba      	ldr	r2, [r7, #24]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d008      	beq.n	8012d9e <vTaskSwitchContext+0x6a>
 8012d8c:	4b28      	ldr	r3, [pc, #160]	@ (8012e30 <vTaskSwitchContext+0xfc>)
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	4b27      	ldr	r3, [pc, #156]	@ (8012e30 <vTaskSwitchContext+0xfc>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	3334      	adds	r3, #52	@ 0x34
 8012d96:	4619      	mov	r1, r3
 8012d98:	4610      	mov	r0, r2
 8012d9a:	f7ed ffa6 	bl	8000cea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d9e:	4b25      	ldr	r3, [pc, #148]	@ (8012e34 <vTaskSwitchContext+0x100>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	fab3 f383 	clz	r3, r3
 8012daa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012dac:	7afb      	ldrb	r3, [r7, #11]
 8012dae:	f1c3 031f 	rsb	r3, r3, #31
 8012db2:	617b      	str	r3, [r7, #20]
 8012db4:	4920      	ldr	r1, [pc, #128]	@ (8012e38 <vTaskSwitchContext+0x104>)
 8012db6:	697a      	ldr	r2, [r7, #20]
 8012db8:	4613      	mov	r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	4413      	add	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	440b      	add	r3, r1
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d10d      	bne.n	8012de4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8012dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dcc:	b672      	cpsid	i
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	b662      	cpsie	i
 8012ddc:	607b      	str	r3, [r7, #4]
}
 8012dde:	bf00      	nop
 8012de0:	bf00      	nop
 8012de2:	e7fd      	b.n	8012de0 <vTaskSwitchContext+0xac>
 8012de4:	697a      	ldr	r2, [r7, #20]
 8012de6:	4613      	mov	r3, r2
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	4413      	add	r3, r2
 8012dec:	009b      	lsls	r3, r3, #2
 8012dee:	4a12      	ldr	r2, [pc, #72]	@ (8012e38 <vTaskSwitchContext+0x104>)
 8012df0:	4413      	add	r3, r2
 8012df2:	613b      	str	r3, [r7, #16]
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	685a      	ldr	r2, [r3, #4]
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	605a      	str	r2, [r3, #4]
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	685a      	ldr	r2, [r3, #4]
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	3308      	adds	r3, #8
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d104      	bne.n	8012e14 <vTaskSwitchContext+0xe0>
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	685a      	ldr	r2, [r3, #4]
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	605a      	str	r2, [r3, #4]
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	4a05      	ldr	r2, [pc, #20]	@ (8012e30 <vTaskSwitchContext+0xfc>)
 8012e1c:	6013      	str	r3, [r2, #0]
}
 8012e1e:	bf00      	nop
 8012e20:	3720      	adds	r7, #32
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	20000e70 	.word	0x20000e70
 8012e2c:	20000e5c 	.word	0x20000e5c
 8012e30:	20000d48 	.word	0x20000d48
 8012e34:	20000e50 	.word	0x20000e50
 8012e38:	20000d4c 	.word	0x20000d4c

08012e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b084      	sub	sp, #16
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d10d      	bne.n	8012e68 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e50:	b672      	cpsid	i
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	b662      	cpsie	i
 8012e60:	60fb      	str	r3, [r7, #12]
}
 8012e62:	bf00      	nop
 8012e64:	bf00      	nop
 8012e66:	e7fd      	b.n	8012e64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e68:	4b07      	ldr	r3, [pc, #28]	@ (8012e88 <vTaskPlaceOnEventList+0x4c>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	3318      	adds	r3, #24
 8012e6e:	4619      	mov	r1, r3
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7fe fda4 	bl	80119be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012e76:	2101      	movs	r1, #1
 8012e78:	6838      	ldr	r0, [r7, #0]
 8012e7a:	f000 fb5d 	bl	8013538 <prvAddCurrentTaskToDelayedList>
}
 8012e7e:	bf00      	nop
 8012e80:	3710      	adds	r7, #16
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	20000d48 	.word	0x20000d48

08012e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b086      	sub	sp, #24
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d10d      	bne.n	8012ebe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8012ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ea6:	b672      	cpsid	i
 8012ea8:	f383 8811 	msr	BASEPRI, r3
 8012eac:	f3bf 8f6f 	isb	sy
 8012eb0:	f3bf 8f4f 	dsb	sy
 8012eb4:	b662      	cpsie	i
 8012eb6:	60fb      	str	r3, [r7, #12]
}
 8012eb8:	bf00      	nop
 8012eba:	bf00      	nop
 8012ebc:	e7fd      	b.n	8012eba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	3318      	adds	r3, #24
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fe fdb4 	bl	8011a30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8012f40 <xTaskRemoveFromEventList+0xb4>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d11c      	bne.n	8012f0a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7fe fdab 	bl	8011a30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ede:	2201      	movs	r2, #1
 8012ee0:	409a      	lsls	r2, r3
 8012ee2:	4b18      	ldr	r3, [pc, #96]	@ (8012f44 <xTaskRemoveFromEventList+0xb8>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	4313      	orrs	r3, r2
 8012ee8:	4a16      	ldr	r2, [pc, #88]	@ (8012f44 <xTaskRemoveFromEventList+0xb8>)
 8012eea:	6013      	str	r3, [r2, #0]
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	4a13      	ldr	r2, [pc, #76]	@ (8012f48 <xTaskRemoveFromEventList+0xbc>)
 8012efa:	441a      	add	r2, r3
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	3304      	adds	r3, #4
 8012f00:	4619      	mov	r1, r3
 8012f02:	4610      	mov	r0, r2
 8012f04:	f7fe fd37 	bl	8011976 <vListInsertEnd>
 8012f08:	e005      	b.n	8012f16 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	3318      	adds	r3, #24
 8012f0e:	4619      	mov	r1, r3
 8012f10:	480e      	ldr	r0, [pc, #56]	@ (8012f4c <xTaskRemoveFromEventList+0xc0>)
 8012f12:	f7fe fd30 	bl	8011976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8012f50 <xTaskRemoveFromEventList+0xc4>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d905      	bls.n	8012f30 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012f24:	2301      	movs	r3, #1
 8012f26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012f28:	4b0a      	ldr	r3, [pc, #40]	@ (8012f54 <xTaskRemoveFromEventList+0xc8>)
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	601a      	str	r2, [r3, #0]
 8012f2e:	e001      	b.n	8012f34 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012f30:	2300      	movs	r3, #0
 8012f32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012f34:	697b      	ldr	r3, [r7, #20]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3718      	adds	r7, #24
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20000e70 	.word	0x20000e70
 8012f44:	20000e50 	.word	0x20000e50
 8012f48:	20000d4c 	.word	0x20000d4c
 8012f4c:	20000e08 	.word	0x20000e08
 8012f50:	20000d48 	.word	0x20000d48
 8012f54:	20000e5c 	.word	0x20000e5c

08012f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012f60:	4b06      	ldr	r3, [pc, #24]	@ (8012f7c <vTaskInternalSetTimeOutState+0x24>)
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012f68:	4b05      	ldr	r3, [pc, #20]	@ (8012f80 <vTaskInternalSetTimeOutState+0x28>)
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	605a      	str	r2, [r3, #4]
}
 8012f70:	bf00      	nop
 8012f72:	370c      	adds	r7, #12
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr
 8012f7c:	20000e60 	.word	0x20000e60
 8012f80:	20000e4c 	.word	0x20000e4c

08012f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d10d      	bne.n	8012fb0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f98:	b672      	cpsid	i
 8012f9a:	f383 8811 	msr	BASEPRI, r3
 8012f9e:	f3bf 8f6f 	isb	sy
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	b662      	cpsie	i
 8012fa8:	613b      	str	r3, [r7, #16]
}
 8012faa:	bf00      	nop
 8012fac:	bf00      	nop
 8012fae:	e7fd      	b.n	8012fac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d10d      	bne.n	8012fd2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fba:	b672      	cpsid	i
 8012fbc:	f383 8811 	msr	BASEPRI, r3
 8012fc0:	f3bf 8f6f 	isb	sy
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	b662      	cpsie	i
 8012fca:	60fb      	str	r3, [r7, #12]
}
 8012fcc:	bf00      	nop
 8012fce:	bf00      	nop
 8012fd0:	e7fd      	b.n	8012fce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8012fd2:	f000 fc23 	bl	801381c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012fd6:	4b1d      	ldr	r3, [pc, #116]	@ (801304c <xTaskCheckForTimeOut+0xc8>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	69ba      	ldr	r2, [r7, #24]
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fee:	d102      	bne.n	8012ff6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	e023      	b.n	801303e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	4b15      	ldr	r3, [pc, #84]	@ (8013050 <xTaskCheckForTimeOut+0xcc>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d007      	beq.n	8013012 <xTaskCheckForTimeOut+0x8e>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	429a      	cmp	r2, r3
 801300a:	d302      	bcc.n	8013012 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801300c:	2301      	movs	r3, #1
 801300e:	61fb      	str	r3, [r7, #28]
 8013010:	e015      	b.n	801303e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	697a      	ldr	r2, [r7, #20]
 8013018:	429a      	cmp	r2, r3
 801301a:	d20b      	bcs.n	8013034 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	1ad2      	subs	r2, r2, r3
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f7ff ff95 	bl	8012f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801302e:	2300      	movs	r3, #0
 8013030:	61fb      	str	r3, [r7, #28]
 8013032:	e004      	b.n	801303e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801303a:	2301      	movs	r3, #1
 801303c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801303e:	f000 fc23 	bl	8013888 <vPortExitCritical>

	return xReturn;
 8013042:	69fb      	ldr	r3, [r7, #28]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3720      	adds	r7, #32
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	20000e4c 	.word	0x20000e4c
 8013050:	20000e60 	.word	0x20000e60

08013054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013054:	b480      	push	{r7}
 8013056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013058:	4b03      	ldr	r3, [pc, #12]	@ (8013068 <vTaskMissedYield+0x14>)
 801305a:	2201      	movs	r2, #1
 801305c:	601a      	str	r2, [r3, #0]
}
 801305e:	bf00      	nop
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr
 8013068:	20000e5c 	.word	0x20000e5c

0801306c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013074:	f000 f854 	bl	8013120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013078:	4b07      	ldr	r3, [pc, #28]	@ (8013098 <prvIdleTask+0x2c>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2b01      	cmp	r3, #1
 801307e:	d907      	bls.n	8013090 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013080:	4b06      	ldr	r3, [pc, #24]	@ (801309c <prvIdleTask+0x30>)
 8013082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013086:	601a      	str	r2, [r3, #0]
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013090:	f7ed fe24 	bl	8000cdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013094:	e7ee      	b.n	8013074 <prvIdleTask+0x8>
 8013096:	bf00      	nop
 8013098:	20000d4c 	.word	0x20000d4c
 801309c:	e000ed04 	.word	0xe000ed04

080130a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80130a6:	2300      	movs	r3, #0
 80130a8:	607b      	str	r3, [r7, #4]
 80130aa:	e00c      	b.n	80130c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	4613      	mov	r3, r2
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	4413      	add	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4a12      	ldr	r2, [pc, #72]	@ (8013100 <prvInitialiseTaskLists+0x60>)
 80130b8:	4413      	add	r3, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7fe fc2e 	bl	801191c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	3301      	adds	r3, #1
 80130c4:	607b      	str	r3, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b06      	cmp	r3, #6
 80130ca:	d9ef      	bls.n	80130ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80130cc:	480d      	ldr	r0, [pc, #52]	@ (8013104 <prvInitialiseTaskLists+0x64>)
 80130ce:	f7fe fc25 	bl	801191c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80130d2:	480d      	ldr	r0, [pc, #52]	@ (8013108 <prvInitialiseTaskLists+0x68>)
 80130d4:	f7fe fc22 	bl	801191c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80130d8:	480c      	ldr	r0, [pc, #48]	@ (801310c <prvInitialiseTaskLists+0x6c>)
 80130da:	f7fe fc1f 	bl	801191c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80130de:	480c      	ldr	r0, [pc, #48]	@ (8013110 <prvInitialiseTaskLists+0x70>)
 80130e0:	f7fe fc1c 	bl	801191c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80130e4:	480b      	ldr	r0, [pc, #44]	@ (8013114 <prvInitialiseTaskLists+0x74>)
 80130e6:	f7fe fc19 	bl	801191c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80130ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013118 <prvInitialiseTaskLists+0x78>)
 80130ec:	4a05      	ldr	r2, [pc, #20]	@ (8013104 <prvInitialiseTaskLists+0x64>)
 80130ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80130f0:	4b0a      	ldr	r3, [pc, #40]	@ (801311c <prvInitialiseTaskLists+0x7c>)
 80130f2:	4a05      	ldr	r2, [pc, #20]	@ (8013108 <prvInitialiseTaskLists+0x68>)
 80130f4:	601a      	str	r2, [r3, #0]
}
 80130f6:	bf00      	nop
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20000d4c 	.word	0x20000d4c
 8013104:	20000dd8 	.word	0x20000dd8
 8013108:	20000dec 	.word	0x20000dec
 801310c:	20000e08 	.word	0x20000e08
 8013110:	20000e1c 	.word	0x20000e1c
 8013114:	20000e34 	.word	0x20000e34
 8013118:	20000e00 	.word	0x20000e00
 801311c:	20000e04 	.word	0x20000e04

08013120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013126:	e019      	b.n	801315c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013128:	f000 fb78 	bl	801381c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801312c:	4b10      	ldr	r3, [pc, #64]	@ (8013170 <prvCheckTasksWaitingTermination+0x50>)
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	3304      	adds	r3, #4
 8013138:	4618      	mov	r0, r3
 801313a:	f7fe fc79 	bl	8011a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801313e:	4b0d      	ldr	r3, [pc, #52]	@ (8013174 <prvCheckTasksWaitingTermination+0x54>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	3b01      	subs	r3, #1
 8013144:	4a0b      	ldr	r2, [pc, #44]	@ (8013174 <prvCheckTasksWaitingTermination+0x54>)
 8013146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013148:	4b0b      	ldr	r3, [pc, #44]	@ (8013178 <prvCheckTasksWaitingTermination+0x58>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	3b01      	subs	r3, #1
 801314e:	4a0a      	ldr	r2, [pc, #40]	@ (8013178 <prvCheckTasksWaitingTermination+0x58>)
 8013150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013152:	f000 fb99 	bl	8013888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 f810 	bl	801317c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801315c:	4b06      	ldr	r3, [pc, #24]	@ (8013178 <prvCheckTasksWaitingTermination+0x58>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d1e1      	bne.n	8013128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013164:	bf00      	nop
 8013166:	bf00      	nop
 8013168:	3708      	adds	r7, #8
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	20000e1c 	.word	0x20000e1c
 8013174:	20000e48 	.word	0x20000e48
 8013178:	20000e30 	.word	0x20000e30

0801317c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801318a:	2b00      	cmp	r3, #0
 801318c:	d108      	bne.n	80131a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013192:	4618      	mov	r0, r3
 8013194:	f000 fd42 	bl	8013c1c <vPortFree>
				vPortFree( pxTCB );
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f000 fd3f 	bl	8013c1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801319e:	e01b      	b.n	80131d8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80131a6:	2b01      	cmp	r3, #1
 80131a8:	d103      	bne.n	80131b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 fd36 	bl	8013c1c <vPortFree>
	}
 80131b0:	e012      	b.n	80131d8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80131b8:	2b02      	cmp	r3, #2
 80131ba:	d00d      	beq.n	80131d8 <prvDeleteTCB+0x5c>
	__asm volatile
 80131bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131c0:	b672      	cpsid	i
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	b662      	cpsie	i
 80131d0:	60fb      	str	r3, [r7, #12]
}
 80131d2:	bf00      	nop
 80131d4:	bf00      	nop
 80131d6:	e7fd      	b.n	80131d4 <prvDeleteTCB+0x58>
	}
 80131d8:	bf00      	nop
 80131da:	3710      	adds	r7, #16
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013218 <prvResetNextTaskUnblockTime+0x38>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d104      	bne.n	80131fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80131f0:	4b0a      	ldr	r3, [pc, #40]	@ (801321c <prvResetNextTaskUnblockTime+0x3c>)
 80131f2:	f04f 32ff 	mov.w	r2, #4294967295
 80131f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80131f8:	e008      	b.n	801320c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131fa:	4b07      	ldr	r3, [pc, #28]	@ (8013218 <prvResetNextTaskUnblockTime+0x38>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	68db      	ldr	r3, [r3, #12]
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	4a04      	ldr	r2, [pc, #16]	@ (801321c <prvResetNextTaskUnblockTime+0x3c>)
 801320a:	6013      	str	r3, [r2, #0]
}
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr
 8013218:	20000e00 	.word	0x20000e00
 801321c:	20000e68 	.word	0x20000e68

08013220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013226:	4b0b      	ldr	r3, [pc, #44]	@ (8013254 <xTaskGetSchedulerState+0x34>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d102      	bne.n	8013234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801322e:	2301      	movs	r3, #1
 8013230:	607b      	str	r3, [r7, #4]
 8013232:	e008      	b.n	8013246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013234:	4b08      	ldr	r3, [pc, #32]	@ (8013258 <xTaskGetSchedulerState+0x38>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d102      	bne.n	8013242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801323c:	2302      	movs	r3, #2
 801323e:	607b      	str	r3, [r7, #4]
 8013240:	e001      	b.n	8013246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013242:	2300      	movs	r3, #0
 8013244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013246:	687b      	ldr	r3, [r7, #4]
	}
 8013248:	4618      	mov	r0, r3
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	20000e54 	.word	0x20000e54
 8013258:	20000e70 	.word	0x20000e70

0801325c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013268:	2300      	movs	r3, #0
 801326a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d074      	beq.n	801335c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013272:	4b3d      	ldr	r3, [pc, #244]	@ (8013368 <xTaskPriorityDisinherit+0x10c>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	693a      	ldr	r2, [r7, #16]
 8013278:	429a      	cmp	r2, r3
 801327a:	d00d      	beq.n	8013298 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013280:	b672      	cpsid	i
 8013282:	f383 8811 	msr	BASEPRI, r3
 8013286:	f3bf 8f6f 	isb	sy
 801328a:	f3bf 8f4f 	dsb	sy
 801328e:	b662      	cpsie	i
 8013290:	60fb      	str	r3, [r7, #12]
}
 8013292:	bf00      	nop
 8013294:	bf00      	nop
 8013296:	e7fd      	b.n	8013294 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10d      	bne.n	80132bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a4:	b672      	cpsid	i
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
 80132b2:	b662      	cpsie	i
 80132b4:	60bb      	str	r3, [r7, #8]
}
 80132b6:	bf00      	nop
 80132b8:	bf00      	nop
 80132ba:	e7fd      	b.n	80132b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132c0:	1e5a      	subs	r2, r3, #1
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d044      	beq.n	801335c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d140      	bne.n	801335c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	3304      	adds	r3, #4
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fe fba6 	bl	8011a30 <uxListRemove>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d115      	bne.n	8013316 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ee:	491f      	ldr	r1, [pc, #124]	@ (801336c <xTaskPriorityDisinherit+0x110>)
 80132f0:	4613      	mov	r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	4413      	add	r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	440b      	add	r3, r1
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d10a      	bne.n	8013316 <xTaskPriorityDisinherit+0xba>
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013304:	2201      	movs	r2, #1
 8013306:	fa02 f303 	lsl.w	r3, r2, r3
 801330a:	43da      	mvns	r2, r3
 801330c:	4b18      	ldr	r3, [pc, #96]	@ (8013370 <xTaskPriorityDisinherit+0x114>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4013      	ands	r3, r2
 8013312:	4a17      	ldr	r2, [pc, #92]	@ (8013370 <xTaskPriorityDisinherit+0x114>)
 8013314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013322:	f1c3 0207 	rsb	r2, r3, #7
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801332e:	2201      	movs	r2, #1
 8013330:	409a      	lsls	r2, r3
 8013332:	4b0f      	ldr	r3, [pc, #60]	@ (8013370 <xTaskPriorityDisinherit+0x114>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4313      	orrs	r3, r2
 8013338:	4a0d      	ldr	r2, [pc, #52]	@ (8013370 <xTaskPriorityDisinherit+0x114>)
 801333a:	6013      	str	r3, [r2, #0]
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013340:	4613      	mov	r3, r2
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	4413      	add	r3, r2
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	4a08      	ldr	r2, [pc, #32]	@ (801336c <xTaskPriorityDisinherit+0x110>)
 801334a:	441a      	add	r2, r3
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	3304      	adds	r3, #4
 8013350:	4619      	mov	r1, r3
 8013352:	4610      	mov	r0, r2
 8013354:	f7fe fb0f 	bl	8011976 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013358:	2301      	movs	r3, #1
 801335a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801335c:	697b      	ldr	r3, [r7, #20]
	}
 801335e:	4618      	mov	r0, r3
 8013360:	3718      	adds	r7, #24
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	20000d48 	.word	0x20000d48
 801336c:	20000d4c 	.word	0x20000d4c
 8013370:	20000e50 	.word	0x20000e50

08013374 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8013374:	b580      	push	{r7, lr}
 8013376:	b084      	sub	sp, #16
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801337e:	f000 fa4d 	bl	801381c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8013382:	4b1e      	ldr	r3, [pc, #120]	@ (80133fc <ulTaskNotifyTake+0x88>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013388:	2b00      	cmp	r3, #0
 801338a:	d113      	bne.n	80133b4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801338c:	4b1b      	ldr	r3, [pc, #108]	@ (80133fc <ulTaskNotifyTake+0x88>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2201      	movs	r2, #1
 8013392:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00b      	beq.n	80133b4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801339c:	2101      	movs	r1, #1
 801339e:	6838      	ldr	r0, [r7, #0]
 80133a0:	f000 f8ca 	bl	8013538 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80133a4:	4b16      	ldr	r3, [pc, #88]	@ (8013400 <ulTaskNotifyTake+0x8c>)
 80133a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133aa:	601a      	str	r2, [r3, #0]
 80133ac:	f3bf 8f4f 	dsb	sy
 80133b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80133b4:	f000 fa68 	bl	8013888 <vPortExitCritical>

		taskENTER_CRITICAL();
 80133b8:	f000 fa30 	bl	801381c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80133bc:	4b0f      	ldr	r3, [pc, #60]	@ (80133fc <ulTaskNotifyTake+0x88>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133c2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00c      	beq.n	80133e4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d004      	beq.n	80133da <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80133d0:	4b0a      	ldr	r3, [pc, #40]	@ (80133fc <ulTaskNotifyTake+0x88>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2200      	movs	r2, #0
 80133d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80133d8:	e004      	b.n	80133e4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80133da:	4b08      	ldr	r3, [pc, #32]	@ (80133fc <ulTaskNotifyTake+0x88>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	68fa      	ldr	r2, [r7, #12]
 80133e0:	3a01      	subs	r2, #1
 80133e2:	651a      	str	r2, [r3, #80]	@ 0x50
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80133e4:	4b05      	ldr	r3, [pc, #20]	@ (80133fc <ulTaskNotifyTake+0x88>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2200      	movs	r2, #0
 80133ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		}
		taskEXIT_CRITICAL();
 80133ee:	f000 fa4b 	bl	8013888 <vPortExitCritical>

		return ulReturn;
 80133f2:	68fb      	ldr	r3, [r7, #12]
	}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3710      	adds	r7, #16
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	20000d48 	.word	0x20000d48
 8013400:	e000ed04 	.word	0xe000ed04

08013404 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013404:	b580      	push	{r7, lr}
 8013406:	b08a      	sub	sp, #40	@ 0x28
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d10d      	bne.n	8013430 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 8013414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013418:	b672      	cpsid	i
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	b662      	cpsie	i
 8013428:	61bb      	str	r3, [r7, #24]
}
 801342a:	bf00      	nop
 801342c:	bf00      	nop
 801342e:	e7fd      	b.n	801342c <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013430:	f000 fadc 	bl	80139ec <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8013438:	f3ef 8211 	mrs	r2, BASEPRI
 801343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013440:	b672      	cpsid	i
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	b662      	cpsie	i
 8013450:	617a      	str	r2, [r7, #20]
 8013452:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013454:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013456:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801345a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801345e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013462:	2202      	movs	r2, #2
 8013464:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8013468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801346c:	1c5a      	adds	r2, r3, #1
 801346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013470:	651a      	str	r2, [r3, #80]	@ 0x50

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013472:	7ffb      	ldrb	r3, [r7, #31]
 8013474:	2b01      	cmp	r3, #1
 8013476:	d148      	bne.n	801350a <vTaskNotifyGiveFromISR+0x106>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00d      	beq.n	801349c <vTaskNotifyGiveFromISR+0x98>
	__asm volatile
 8013480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013484:	b672      	cpsid	i
 8013486:	f383 8811 	msr	BASEPRI, r3
 801348a:	f3bf 8f6f 	isb	sy
 801348e:	f3bf 8f4f 	dsb	sy
 8013492:	b662      	cpsie	i
 8013494:	60fb      	str	r3, [r7, #12]
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	e7fd      	b.n	8013498 <vTaskNotifyGiveFromISR+0x94>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801349c:	4b20      	ldr	r3, [pc, #128]	@ (8013520 <vTaskNotifyGiveFromISR+0x11c>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d11c      	bne.n	80134de <vTaskNotifyGiveFromISR+0xda>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80134a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134a6:	3304      	adds	r3, #4
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7fe fac1 	bl	8011a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b2:	2201      	movs	r2, #1
 80134b4:	409a      	lsls	r2, r3
 80134b6:	4b1b      	ldr	r3, [pc, #108]	@ (8013524 <vTaskNotifyGiveFromISR+0x120>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	4313      	orrs	r3, r2
 80134bc:	4a19      	ldr	r2, [pc, #100]	@ (8013524 <vTaskNotifyGiveFromISR+0x120>)
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134c4:	4613      	mov	r3, r2
 80134c6:	009b      	lsls	r3, r3, #2
 80134c8:	4413      	add	r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4a16      	ldr	r2, [pc, #88]	@ (8013528 <vTaskNotifyGiveFromISR+0x124>)
 80134ce:	441a      	add	r2, r3
 80134d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d2:	3304      	adds	r3, #4
 80134d4:	4619      	mov	r1, r3
 80134d6:	4610      	mov	r0, r2
 80134d8:	f7fe fa4d 	bl	8011976 <vListInsertEnd>
 80134dc:	e005      	b.n	80134ea <vTaskNotifyGiveFromISR+0xe6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80134de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e0:	3318      	adds	r3, #24
 80134e2:	4619      	mov	r1, r3
 80134e4:	4811      	ldr	r0, [pc, #68]	@ (801352c <vTaskNotifyGiveFromISR+0x128>)
 80134e6:	f7fe fa46 	bl	8011976 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ee:	4b10      	ldr	r3, [pc, #64]	@ (8013530 <vTaskNotifyGiveFromISR+0x12c>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d908      	bls.n	801350a <vTaskNotifyGiveFromISR+0x106>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d002      	beq.n	8013504 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2201      	movs	r2, #1
 8013502:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013504:	4b0b      	ldr	r3, [pc, #44]	@ (8013534 <vTaskNotifyGiveFromISR+0x130>)
 8013506:	2201      	movs	r2, #1
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	6a3b      	ldr	r3, [r7, #32]
 801350c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	f383 8811 	msr	BASEPRI, r3
}
 8013514:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8013516:	bf00      	nop
 8013518:	3728      	adds	r7, #40	@ 0x28
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	20000e70 	.word	0x20000e70
 8013524:	20000e50 	.word	0x20000e50
 8013528:	20000d4c 	.word	0x20000d4c
 801352c:	20000e08 	.word	0x20000e08
 8013530:	20000d48 	.word	0x20000d48
 8013534:	20000e5c 	.word	0x20000e5c

08013538 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013542:	4b29      	ldr	r3, [pc, #164]	@ (80135e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013548:	4b28      	ldr	r3, [pc, #160]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	3304      	adds	r3, #4
 801354e:	4618      	mov	r0, r3
 8013550:	f7fe fa6e 	bl	8011a30 <uxListRemove>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10b      	bne.n	8013572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801355a:	4b24      	ldr	r3, [pc, #144]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013560:	2201      	movs	r2, #1
 8013562:	fa02 f303 	lsl.w	r3, r2, r3
 8013566:	43da      	mvns	r2, r3
 8013568:	4b21      	ldr	r3, [pc, #132]	@ (80135f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	4013      	ands	r3, r2
 801356e:	4a20      	ldr	r2, [pc, #128]	@ (80135f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013578:	d10a      	bne.n	8013590 <prvAddCurrentTaskToDelayedList+0x58>
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d007      	beq.n	8013590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013580:	4b1a      	ldr	r3, [pc, #104]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	3304      	adds	r3, #4
 8013586:	4619      	mov	r1, r3
 8013588:	481a      	ldr	r0, [pc, #104]	@ (80135f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801358a:	f7fe f9f4 	bl	8011976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801358e:	e026      	b.n	80135de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4413      	add	r3, r2
 8013596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013598:	4b14      	ldr	r3, [pc, #80]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80135a0:	68ba      	ldr	r2, [r7, #8]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d209      	bcs.n	80135bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80135a8:	4b13      	ldr	r3, [pc, #76]	@ (80135f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	4b0f      	ldr	r3, [pc, #60]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	3304      	adds	r3, #4
 80135b2:	4619      	mov	r1, r3
 80135b4:	4610      	mov	r0, r2
 80135b6:	f7fe fa02 	bl	80119be <vListInsert>
}
 80135ba:	e010      	b.n	80135de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80135bc:	4b0f      	ldr	r3, [pc, #60]	@ (80135fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80135be:	681a      	ldr	r2, [r3, #0]
 80135c0:	4b0a      	ldr	r3, [pc, #40]	@ (80135ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	3304      	adds	r3, #4
 80135c6:	4619      	mov	r1, r3
 80135c8:	4610      	mov	r0, r2
 80135ca:	f7fe f9f8 	bl	80119be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80135ce:	4b0c      	ldr	r3, [pc, #48]	@ (8013600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	68ba      	ldr	r2, [r7, #8]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d202      	bcs.n	80135de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80135d8:	4a09      	ldr	r2, [pc, #36]	@ (8013600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	6013      	str	r3, [r2, #0]
}
 80135de:	bf00      	nop
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	20000e4c 	.word	0x20000e4c
 80135ec:	20000d48 	.word	0x20000d48
 80135f0:	20000e50 	.word	0x20000e50
 80135f4:	20000e34 	.word	0x20000e34
 80135f8:	20000e04 	.word	0x20000e04
 80135fc:	20000e00 	.word	0x20000e00
 8013600:	20000e68 	.word	0x20000e68

08013604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013604:	b480      	push	{r7}
 8013606:	b085      	sub	sp, #20
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3b04      	subs	r3, #4
 8013614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801361c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	3b04      	subs	r3, #4
 8013622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	f023 0201 	bic.w	r2, r3, #1
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	3b04      	subs	r3, #4
 8013632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013634:	4a0c      	ldr	r2, [pc, #48]	@ (8013668 <pxPortInitialiseStack+0x64>)
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	3b14      	subs	r3, #20
 801363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	3b04      	subs	r3, #4
 801364a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f06f 0202 	mvn.w	r2, #2
 8013652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	3b20      	subs	r3, #32
 8013658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801365a:	68fb      	ldr	r3, [r7, #12]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3714      	adds	r7, #20
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr
 8013668:	0801366d 	.word	0x0801366d

0801366c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801366c:	b480      	push	{r7}
 801366e:	b085      	sub	sp, #20
 8013670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013672:	2300      	movs	r3, #0
 8013674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013676:	4b15      	ldr	r3, [pc, #84]	@ (80136cc <prvTaskExitError+0x60>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801367e:	d00d      	beq.n	801369c <prvTaskExitError+0x30>
	__asm volatile
 8013680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013684:	b672      	cpsid	i
 8013686:	f383 8811 	msr	BASEPRI, r3
 801368a:	f3bf 8f6f 	isb	sy
 801368e:	f3bf 8f4f 	dsb	sy
 8013692:	b662      	cpsie	i
 8013694:	60fb      	str	r3, [r7, #12]
}
 8013696:	bf00      	nop
 8013698:	bf00      	nop
 801369a:	e7fd      	b.n	8013698 <prvTaskExitError+0x2c>
	__asm volatile
 801369c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136a0:	b672      	cpsid	i
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	b662      	cpsie	i
 80136b0:	60bb      	str	r3, [r7, #8]
}
 80136b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80136b4:	bf00      	nop
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d0fc      	beq.n	80136b6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80136bc:	bf00      	nop
 80136be:	bf00      	nop
 80136c0:	3714      	adds	r7, #20
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop
 80136cc:	2000002c 	.word	0x2000002c

080136d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80136d0:	4b07      	ldr	r3, [pc, #28]	@ (80136f0 <pxCurrentTCBConst2>)
 80136d2:	6819      	ldr	r1, [r3, #0]
 80136d4:	6808      	ldr	r0, [r1, #0]
 80136d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136da:	f380 8809 	msr	PSP, r0
 80136de:	f3bf 8f6f 	isb	sy
 80136e2:	f04f 0000 	mov.w	r0, #0
 80136e6:	f380 8811 	msr	BASEPRI, r0
 80136ea:	4770      	bx	lr
 80136ec:	f3af 8000 	nop.w

080136f0 <pxCurrentTCBConst2>:
 80136f0:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80136f4:	bf00      	nop
 80136f6:	bf00      	nop

080136f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80136f8:	4808      	ldr	r0, [pc, #32]	@ (801371c <prvPortStartFirstTask+0x24>)
 80136fa:	6800      	ldr	r0, [r0, #0]
 80136fc:	6800      	ldr	r0, [r0, #0]
 80136fe:	f380 8808 	msr	MSP, r0
 8013702:	f04f 0000 	mov.w	r0, #0
 8013706:	f380 8814 	msr	CONTROL, r0
 801370a:	b662      	cpsie	i
 801370c:	b661      	cpsie	f
 801370e:	f3bf 8f4f 	dsb	sy
 8013712:	f3bf 8f6f 	isb	sy
 8013716:	df00      	svc	0
 8013718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801371a:	bf00      	nop
 801371c:	e000ed08 	.word	0xe000ed08

08013720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013726:	4b37      	ldr	r3, [pc, #220]	@ (8013804 <xPortStartScheduler+0xe4>)
 8013728:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	b2db      	uxtb	r3, r3
 8013730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	22ff      	movs	r2, #255	@ 0xff
 8013736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	b2db      	uxtb	r3, r3
 801373e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013740:	78fb      	ldrb	r3, [r7, #3]
 8013742:	b2db      	uxtb	r3, r3
 8013744:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013748:	b2da      	uxtb	r2, r3
 801374a:	4b2f      	ldr	r3, [pc, #188]	@ (8013808 <xPortStartScheduler+0xe8>)
 801374c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801374e:	4b2f      	ldr	r3, [pc, #188]	@ (801380c <xPortStartScheduler+0xec>)
 8013750:	2207      	movs	r2, #7
 8013752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013754:	e009      	b.n	801376a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013756:	4b2d      	ldr	r3, [pc, #180]	@ (801380c <xPortStartScheduler+0xec>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	3b01      	subs	r3, #1
 801375c:	4a2b      	ldr	r2, [pc, #172]	@ (801380c <xPortStartScheduler+0xec>)
 801375e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013760:	78fb      	ldrb	r3, [r7, #3]
 8013762:	b2db      	uxtb	r3, r3
 8013764:	005b      	lsls	r3, r3, #1
 8013766:	b2db      	uxtb	r3, r3
 8013768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801376a:	78fb      	ldrb	r3, [r7, #3]
 801376c:	b2db      	uxtb	r3, r3
 801376e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013772:	2b80      	cmp	r3, #128	@ 0x80
 8013774:	d0ef      	beq.n	8013756 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013776:	4b25      	ldr	r3, [pc, #148]	@ (801380c <xPortStartScheduler+0xec>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f1c3 0307 	rsb	r3, r3, #7
 801377e:	2b04      	cmp	r3, #4
 8013780:	d00d      	beq.n	801379e <xPortStartScheduler+0x7e>
	__asm volatile
 8013782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013786:	b672      	cpsid	i
 8013788:	f383 8811 	msr	BASEPRI, r3
 801378c:	f3bf 8f6f 	isb	sy
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	b662      	cpsie	i
 8013796:	60bb      	str	r3, [r7, #8]
}
 8013798:	bf00      	nop
 801379a:	bf00      	nop
 801379c:	e7fd      	b.n	801379a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801379e:	4b1b      	ldr	r3, [pc, #108]	@ (801380c <xPortStartScheduler+0xec>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	021b      	lsls	r3, r3, #8
 80137a4:	4a19      	ldr	r2, [pc, #100]	@ (801380c <xPortStartScheduler+0xec>)
 80137a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80137a8:	4b18      	ldr	r3, [pc, #96]	@ (801380c <xPortStartScheduler+0xec>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80137b0:	4a16      	ldr	r2, [pc, #88]	@ (801380c <xPortStartScheduler+0xec>)
 80137b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	b2da      	uxtb	r2, r3
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80137bc:	4b14      	ldr	r3, [pc, #80]	@ (8013810 <xPortStartScheduler+0xf0>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a13      	ldr	r2, [pc, #76]	@ (8013810 <xPortStartScheduler+0xf0>)
 80137c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80137c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80137c8:	4b11      	ldr	r3, [pc, #68]	@ (8013810 <xPortStartScheduler+0xf0>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4a10      	ldr	r2, [pc, #64]	@ (8013810 <xPortStartScheduler+0xf0>)
 80137ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80137d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80137d4:	f000 f8dc 	bl	8013990 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80137d8:	4b0e      	ldr	r3, [pc, #56]	@ (8013814 <xPortStartScheduler+0xf4>)
 80137da:	2200      	movs	r2, #0
 80137dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80137de:	f000 f8fb 	bl	80139d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80137e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013818 <xPortStartScheduler+0xf8>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4a0c      	ldr	r2, [pc, #48]	@ (8013818 <xPortStartScheduler+0xf8>)
 80137e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80137ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80137ee:	f7ff ff83 	bl	80136f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80137f2:	f7ff fa9f 	bl	8012d34 <vTaskSwitchContext>
	prvTaskExitError();
 80137f6:	f7ff ff39 	bl	801366c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80137fa:	2300      	movs	r3, #0
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3710      	adds	r7, #16
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	e000e400 	.word	0xe000e400
 8013808:	20000e74 	.word	0x20000e74
 801380c:	20000e78 	.word	0x20000e78
 8013810:	e000ed20 	.word	0xe000ed20
 8013814:	2000002c 	.word	0x2000002c
 8013818:	e000ef34 	.word	0xe000ef34

0801381c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
	__asm volatile
 8013822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013826:	b672      	cpsid	i
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	b662      	cpsie	i
 8013836:	607b      	str	r3, [r7, #4]
}
 8013838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801383a:	4b11      	ldr	r3, [pc, #68]	@ (8013880 <vPortEnterCritical+0x64>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	3301      	adds	r3, #1
 8013840:	4a0f      	ldr	r2, [pc, #60]	@ (8013880 <vPortEnterCritical+0x64>)
 8013842:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013844:	4b0e      	ldr	r3, [pc, #56]	@ (8013880 <vPortEnterCritical+0x64>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b01      	cmp	r3, #1
 801384a:	d112      	bne.n	8013872 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801384c:	4b0d      	ldr	r3, [pc, #52]	@ (8013884 <vPortEnterCritical+0x68>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	b2db      	uxtb	r3, r3
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00d      	beq.n	8013872 <vPortEnterCritical+0x56>
	__asm volatile
 8013856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801385a:	b672      	cpsid	i
 801385c:	f383 8811 	msr	BASEPRI, r3
 8013860:	f3bf 8f6f 	isb	sy
 8013864:	f3bf 8f4f 	dsb	sy
 8013868:	b662      	cpsie	i
 801386a:	603b      	str	r3, [r7, #0]
}
 801386c:	bf00      	nop
 801386e:	bf00      	nop
 8013870:	e7fd      	b.n	801386e <vPortEnterCritical+0x52>
	}
}
 8013872:	bf00      	nop
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	2000002c 	.word	0x2000002c
 8013884:	e000ed04 	.word	0xe000ed04

08013888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013888:	b480      	push	{r7}
 801388a:	b083      	sub	sp, #12
 801388c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801388e:	4b13      	ldr	r3, [pc, #76]	@ (80138dc <vPortExitCritical+0x54>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d10d      	bne.n	80138b2 <vPortExitCritical+0x2a>
	__asm volatile
 8013896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801389a:	b672      	cpsid	i
 801389c:	f383 8811 	msr	BASEPRI, r3
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	b662      	cpsie	i
 80138aa:	607b      	str	r3, [r7, #4]
}
 80138ac:	bf00      	nop
 80138ae:	bf00      	nop
 80138b0:	e7fd      	b.n	80138ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80138b2:	4b0a      	ldr	r3, [pc, #40]	@ (80138dc <vPortExitCritical+0x54>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	4a08      	ldr	r2, [pc, #32]	@ (80138dc <vPortExitCritical+0x54>)
 80138ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80138bc:	4b07      	ldr	r3, [pc, #28]	@ (80138dc <vPortExitCritical+0x54>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d105      	bne.n	80138d0 <vPortExitCritical+0x48>
 80138c4:	2300      	movs	r3, #0
 80138c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	f383 8811 	msr	BASEPRI, r3
}
 80138ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80138d0:	bf00      	nop
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr
 80138dc:	2000002c 	.word	0x2000002c

080138e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80138e0:	f3ef 8009 	mrs	r0, PSP
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	4b15      	ldr	r3, [pc, #84]	@ (8013940 <pxCurrentTCBConst>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	f01e 0f10 	tst.w	lr, #16
 80138f0:	bf08      	it	eq
 80138f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80138f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fa:	6010      	str	r0, [r2, #0]
 80138fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013904:	b672      	cpsid	i
 8013906:	f380 8811 	msr	BASEPRI, r0
 801390a:	f3bf 8f4f 	dsb	sy
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	b662      	cpsie	i
 8013914:	f7ff fa0e 	bl	8012d34 <vTaskSwitchContext>
 8013918:	f04f 0000 	mov.w	r0, #0
 801391c:	f380 8811 	msr	BASEPRI, r0
 8013920:	bc09      	pop	{r0, r3}
 8013922:	6819      	ldr	r1, [r3, #0]
 8013924:	6808      	ldr	r0, [r1, #0]
 8013926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392a:	f01e 0f10 	tst.w	lr, #16
 801392e:	bf08      	it	eq
 8013930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013934:	f380 8809 	msr	PSP, r0
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop

08013940 <pxCurrentTCBConst>:
 8013940:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013944:	bf00      	nop
 8013946:	bf00      	nop

08013948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
	__asm volatile
 801394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013952:	b672      	cpsid	i
 8013954:	f383 8811 	msr	BASEPRI, r3
 8013958:	f3bf 8f6f 	isb	sy
 801395c:	f3bf 8f4f 	dsb	sy
 8013960:	b662      	cpsie	i
 8013962:	607b      	str	r3, [r7, #4]
}
 8013964:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013966:	f7ff f929 	bl	8012bbc <xTaskIncrementTick>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d003      	beq.n	8013978 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013970:	4b06      	ldr	r3, [pc, #24]	@ (801398c <SysTick_Handler+0x44>)
 8013972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013976:	601a      	str	r2, [r3, #0]
 8013978:	2300      	movs	r3, #0
 801397a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	f383 8811 	msr	BASEPRI, r3
}
 8013982:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013984:	bf00      	nop
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	e000ed04 	.word	0xe000ed04

08013990 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013990:	b480      	push	{r7}
 8013992:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013994:	4b0b      	ldr	r3, [pc, #44]	@ (80139c4 <vPortSetupTimerInterrupt+0x34>)
 8013996:	2200      	movs	r2, #0
 8013998:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801399a:	4b0b      	ldr	r3, [pc, #44]	@ (80139c8 <vPortSetupTimerInterrupt+0x38>)
 801399c:	2200      	movs	r2, #0
 801399e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80139a0:	4b0a      	ldr	r3, [pc, #40]	@ (80139cc <vPortSetupTimerInterrupt+0x3c>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4a0a      	ldr	r2, [pc, #40]	@ (80139d0 <vPortSetupTimerInterrupt+0x40>)
 80139a6:	fba2 2303 	umull	r2, r3, r2, r3
 80139aa:	099b      	lsrs	r3, r3, #6
 80139ac:	4a09      	ldr	r2, [pc, #36]	@ (80139d4 <vPortSetupTimerInterrupt+0x44>)
 80139ae:	3b01      	subs	r3, #1
 80139b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80139b2:	4b04      	ldr	r3, [pc, #16]	@ (80139c4 <vPortSetupTimerInterrupt+0x34>)
 80139b4:	2207      	movs	r2, #7
 80139b6:	601a      	str	r2, [r3, #0]
}
 80139b8:	bf00      	nop
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	e000e010 	.word	0xe000e010
 80139c8:	e000e018 	.word	0xe000e018
 80139cc:	20000000 	.word	0x20000000
 80139d0:	10624dd3 	.word	0x10624dd3
 80139d4:	e000e014 	.word	0xe000e014

080139d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80139d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80139e8 <vPortEnableVFP+0x10>
 80139dc:	6801      	ldr	r1, [r0, #0]
 80139de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80139e2:	6001      	str	r1, [r0, #0]
 80139e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80139e6:	bf00      	nop
 80139e8:	e000ed88 	.word	0xe000ed88

080139ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80139ec:	b480      	push	{r7}
 80139ee:	b085      	sub	sp, #20
 80139f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80139f2:	f3ef 8305 	mrs	r3, IPSR
 80139f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2b0f      	cmp	r3, #15
 80139fc:	d917      	bls.n	8013a2e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80139fe:	4a1a      	ldr	r2, [pc, #104]	@ (8013a68 <vPortValidateInterruptPriority+0x7c>)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013a08:	4b18      	ldr	r3, [pc, #96]	@ (8013a6c <vPortValidateInterruptPriority+0x80>)
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	7afa      	ldrb	r2, [r7, #11]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d20d      	bcs.n	8013a2e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a16:	b672      	cpsid	i
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	b662      	cpsie	i
 8013a26:	607b      	str	r3, [r7, #4]
}
 8013a28:	bf00      	nop
 8013a2a:	bf00      	nop
 8013a2c:	e7fd      	b.n	8013a2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013a2e:	4b10      	ldr	r3, [pc, #64]	@ (8013a70 <vPortValidateInterruptPriority+0x84>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013a36:	4b0f      	ldr	r3, [pc, #60]	@ (8013a74 <vPortValidateInterruptPriority+0x88>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d90d      	bls.n	8013a5a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a42:	b672      	cpsid	i
 8013a44:	f383 8811 	msr	BASEPRI, r3
 8013a48:	f3bf 8f6f 	isb	sy
 8013a4c:	f3bf 8f4f 	dsb	sy
 8013a50:	b662      	cpsie	i
 8013a52:	603b      	str	r3, [r7, #0]
}
 8013a54:	bf00      	nop
 8013a56:	bf00      	nop
 8013a58:	e7fd      	b.n	8013a56 <vPortValidateInterruptPriority+0x6a>
	}
 8013a5a:	bf00      	nop
 8013a5c:	3714      	adds	r7, #20
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	e000e3f0 	.word	0xe000e3f0
 8013a6c:	20000e74 	.word	0x20000e74
 8013a70:	e000ed0c 	.word	0xe000ed0c
 8013a74:	20000e78 	.word	0x20000e78

08013a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b08a      	sub	sp, #40	@ 0x28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a80:	2300      	movs	r3, #0
 8013a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a84:	f7fe ffca 	bl	8012a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a88:	4b5f      	ldr	r3, [pc, #380]	@ (8013c08 <pvPortMalloc+0x190>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d101      	bne.n	8013a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a90:	f000 f924 	bl	8013cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a94:	4b5d      	ldr	r3, [pc, #372]	@ (8013c0c <pvPortMalloc+0x194>)
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	4013      	ands	r3, r2
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f040 8094 	bne.w	8013bca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d020      	beq.n	8013aea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013aa8:	2208      	movs	r2, #8
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	4413      	add	r3, r2
 8013aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f003 0307 	and.w	r3, r3, #7
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d017      	beq.n	8013aea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f023 0307 	bic.w	r3, r3, #7
 8013ac0:	3308      	adds	r3, #8
 8013ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f003 0307 	and.w	r3, r3, #7
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00d      	beq.n	8013aea <pvPortMalloc+0x72>
	__asm volatile
 8013ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ad2:	b672      	cpsid	i
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	b662      	cpsie	i
 8013ae2:	617b      	str	r3, [r7, #20]
}
 8013ae4:	bf00      	nop
 8013ae6:	bf00      	nop
 8013ae8:	e7fd      	b.n	8013ae6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d06c      	beq.n	8013bca <pvPortMalloc+0x152>
 8013af0:	4b47      	ldr	r3, [pc, #284]	@ (8013c10 <pvPortMalloc+0x198>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d867      	bhi.n	8013bca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013afa:	4b46      	ldr	r3, [pc, #280]	@ (8013c14 <pvPortMalloc+0x19c>)
 8013afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013afe:	4b45      	ldr	r3, [pc, #276]	@ (8013c14 <pvPortMalloc+0x19c>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013b04:	e004      	b.n	8013b10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d903      	bls.n	8013b22 <pvPortMalloc+0xaa>
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1f1      	bne.n	8013b06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013b22:	4b39      	ldr	r3, [pc, #228]	@ (8013c08 <pvPortMalloc+0x190>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d04e      	beq.n	8013bca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013b2c:	6a3b      	ldr	r3, [r7, #32]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2208      	movs	r2, #8
 8013b32:	4413      	add	r3, r2
 8013b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b38:	681a      	ldr	r2, [r3, #0]
 8013b3a:	6a3b      	ldr	r3, [r7, #32]
 8013b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	1ad2      	subs	r2, r2, r3
 8013b46:	2308      	movs	r3, #8
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d922      	bls.n	8013b94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	4413      	add	r3, r2
 8013b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	f003 0307 	and.w	r3, r3, #7
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00d      	beq.n	8013b7c <pvPortMalloc+0x104>
	__asm volatile
 8013b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b64:	b672      	cpsid	i
 8013b66:	f383 8811 	msr	BASEPRI, r3
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	b662      	cpsie	i
 8013b74:	613b      	str	r3, [r7, #16]
}
 8013b76:	bf00      	nop
 8013b78:	bf00      	nop
 8013b7a:	e7fd      	b.n	8013b78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b7e:	685a      	ldr	r2, [r3, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	1ad2      	subs	r2, r2, r3
 8013b84:	69bb      	ldr	r3, [r7, #24]
 8013b86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b8e:	69b8      	ldr	r0, [r7, #24]
 8013b90:	f000 f906 	bl	8013da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b94:	4b1e      	ldr	r3, [pc, #120]	@ (8013c10 <pvPortMalloc+0x198>)
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	1ad3      	subs	r3, r2, r3
 8013b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8013c10 <pvPortMalloc+0x198>)
 8013ba0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8013c10 <pvPortMalloc+0x198>)
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8013c18 <pvPortMalloc+0x1a0>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d203      	bcs.n	8013bb6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013bae:	4b18      	ldr	r3, [pc, #96]	@ (8013c10 <pvPortMalloc+0x198>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	4a19      	ldr	r2, [pc, #100]	@ (8013c18 <pvPortMalloc+0x1a0>)
 8013bb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb8:	685a      	ldr	r2, [r3, #4]
 8013bba:	4b14      	ldr	r3, [pc, #80]	@ (8013c0c <pvPortMalloc+0x194>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	431a      	orrs	r2, r3
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013bca:	f7fe ff35 	bl	8012a38 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d101      	bne.n	8013bd8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013bd4:	f7ed f894 	bl	8000d00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	f003 0307 	and.w	r3, r3, #7
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00d      	beq.n	8013bfe <pvPortMalloc+0x186>
	__asm volatile
 8013be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013be6:	b672      	cpsid	i
 8013be8:	f383 8811 	msr	BASEPRI, r3
 8013bec:	f3bf 8f6f 	isb	sy
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	b662      	cpsie	i
 8013bf6:	60fb      	str	r3, [r7, #12]
}
 8013bf8:	bf00      	nop
 8013bfa:	bf00      	nop
 8013bfc:	e7fd      	b.n	8013bfa <pvPortMalloc+0x182>
	return pvReturn;
 8013bfe:	69fb      	ldr	r3, [r7, #28]
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3728      	adds	r7, #40	@ 0x28
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	20008e84 	.word	0x20008e84
 8013c0c:	20008e90 	.word	0x20008e90
 8013c10:	20008e88 	.word	0x20008e88
 8013c14:	20008e7c 	.word	0x20008e7c
 8013c18:	20008e8c 	.word	0x20008e8c

08013c1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b086      	sub	sp, #24
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d04e      	beq.n	8013ccc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013c2e:	2308      	movs	r3, #8
 8013c30:	425b      	negs	r3, r3
 8013c32:	697a      	ldr	r2, [r7, #20]
 8013c34:	4413      	add	r3, r2
 8013c36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	685a      	ldr	r2, [r3, #4]
 8013c40:	4b24      	ldr	r3, [pc, #144]	@ (8013cd4 <vPortFree+0xb8>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	4013      	ands	r3, r2
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10d      	bne.n	8013c66 <vPortFree+0x4a>
	__asm volatile
 8013c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c4e:	b672      	cpsid	i
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	b662      	cpsie	i
 8013c5e:	60fb      	str	r3, [r7, #12]
}
 8013c60:	bf00      	nop
 8013c62:	bf00      	nop
 8013c64:	e7fd      	b.n	8013c62 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d00d      	beq.n	8013c8a <vPortFree+0x6e>
	__asm volatile
 8013c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c72:	b672      	cpsid	i
 8013c74:	f383 8811 	msr	BASEPRI, r3
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	f3bf 8f4f 	dsb	sy
 8013c80:	b662      	cpsie	i
 8013c82:	60bb      	str	r3, [r7, #8]
}
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop
 8013c88:	e7fd      	b.n	8013c86 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	685a      	ldr	r2, [r3, #4]
 8013c8e:	4b11      	ldr	r3, [pc, #68]	@ (8013cd4 <vPortFree+0xb8>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4013      	ands	r3, r2
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d019      	beq.n	8013ccc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d115      	bne.n	8013ccc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	685a      	ldr	r2, [r3, #4]
 8013ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8013cd4 <vPortFree+0xb8>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	43db      	mvns	r3, r3
 8013caa:	401a      	ands	r2, r3
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013cb0:	f7fe feb4 	bl	8012a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	685a      	ldr	r2, [r3, #4]
 8013cb8:	4b07      	ldr	r3, [pc, #28]	@ (8013cd8 <vPortFree+0xbc>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	4a06      	ldr	r2, [pc, #24]	@ (8013cd8 <vPortFree+0xbc>)
 8013cc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013cc2:	6938      	ldr	r0, [r7, #16]
 8013cc4:	f000 f86c 	bl	8013da0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013cc8:	f7fe feb6 	bl	8012a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013ccc:	bf00      	nop
 8013cce:	3718      	adds	r7, #24
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	20008e90 	.word	0x20008e90
 8013cd8:	20008e88 	.word	0x20008e88

08013cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b085      	sub	sp, #20
 8013ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013ce8:	4b27      	ldr	r3, [pc, #156]	@ (8013d88 <prvHeapInit+0xac>)
 8013cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f003 0307 	and.w	r3, r3, #7
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d00c      	beq.n	8013d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	3307      	adds	r3, #7
 8013cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f023 0307 	bic.w	r3, r3, #7
 8013d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013d04:	68ba      	ldr	r2, [r7, #8]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8013d88 <prvHeapInit+0xac>)
 8013d0c:	4413      	add	r3, r2
 8013d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013d14:	4a1d      	ldr	r2, [pc, #116]	@ (8013d8c <prvHeapInit+0xb0>)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8013d8c <prvHeapInit+0xb0>)
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	68ba      	ldr	r2, [r7, #8]
 8013d24:	4413      	add	r3, r2
 8013d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013d28:	2208      	movs	r2, #8
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	1a9b      	subs	r3, r3, r2
 8013d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f023 0307 	bic.w	r3, r3, #7
 8013d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	4a15      	ldr	r2, [pc, #84]	@ (8013d90 <prvHeapInit+0xb4>)
 8013d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013d3e:	4b14      	ldr	r3, [pc, #80]	@ (8013d90 <prvHeapInit+0xb4>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2200      	movs	r2, #0
 8013d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013d46:	4b12      	ldr	r3, [pc, #72]	@ (8013d90 <prvHeapInit+0xb4>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	1ad2      	subs	r2, r2, r3
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8013d90 <prvHeapInit+0xb4>)
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	4a0a      	ldr	r2, [pc, #40]	@ (8013d94 <prvHeapInit+0xb8>)
 8013d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	4a09      	ldr	r2, [pc, #36]	@ (8013d98 <prvHeapInit+0xbc>)
 8013d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d74:	4b09      	ldr	r3, [pc, #36]	@ (8013d9c <prvHeapInit+0xc0>)
 8013d76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013d7a:	601a      	str	r2, [r3, #0]
}
 8013d7c:	bf00      	nop
 8013d7e:	3714      	adds	r7, #20
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	20000e7c 	.word	0x20000e7c
 8013d8c:	20008e7c 	.word	0x20008e7c
 8013d90:	20008e84 	.word	0x20008e84
 8013d94:	20008e8c 	.word	0x20008e8c
 8013d98:	20008e88 	.word	0x20008e88
 8013d9c:	20008e90 	.word	0x20008e90

08013da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013da0:	b480      	push	{r7}
 8013da2:	b085      	sub	sp, #20
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013da8:	4b28      	ldr	r3, [pc, #160]	@ (8013e4c <prvInsertBlockIntoFreeList+0xac>)
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	e002      	b.n	8013db4 <prvInsertBlockIntoFreeList+0x14>
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d8f7      	bhi.n	8013dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	4413      	add	r3, r2
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d108      	bne.n	8013de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	685a      	ldr	r2, [r3, #4]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	441a      	add	r2, r3
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	441a      	add	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d118      	bne.n	8013e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	4b15      	ldr	r3, [pc, #84]	@ (8013e50 <prvInsertBlockIntoFreeList+0xb0>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d00d      	beq.n	8013e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685a      	ldr	r2, [r3, #4]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	441a      	add	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	601a      	str	r2, [r3, #0]
 8013e1c:	e008      	b.n	8013e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8013e50 <prvInsertBlockIntoFreeList+0xb0>)
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	601a      	str	r2, [r3, #0]
 8013e26:	e003      	b.n	8013e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d002      	beq.n	8013e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e3e:	bf00      	nop
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	20008e7c 	.word	0x20008e7c
 8013e50:	20008e84 	.word	0x20008e84

08013e54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013e58:	2201      	movs	r2, #1
 8013e5a:	490e      	ldr	r1, [pc, #56]	@ (8013e94 <MX_USB_HOST_Init+0x40>)
 8013e5c:	480e      	ldr	r0, [pc, #56]	@ (8013e98 <MX_USB_HOST_Init+0x44>)
 8013e5e:	f7fb fc61 	bl	800f724 <USBH_Init>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d001      	beq.n	8013e6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013e68:	f7ed fdb0 	bl	80019cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013e6c:	490b      	ldr	r1, [pc, #44]	@ (8013e9c <MX_USB_HOST_Init+0x48>)
 8013e6e:	480a      	ldr	r0, [pc, #40]	@ (8013e98 <MX_USB_HOST_Init+0x44>)
 8013e70:	f7fb fd2d 	bl	800f8ce <USBH_RegisterClass>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d001      	beq.n	8013e7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013e7a:	f7ed fda7 	bl	80019cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013e7e:	4806      	ldr	r0, [pc, #24]	@ (8013e98 <MX_USB_HOST_Init+0x44>)
 8013e80:	f7fb fdb1 	bl	800f9e6 <USBH_Start>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013e8a:	f7ed fd9f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013e8e:	bf00      	nop
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	08013ea1 	.word	0x08013ea1
 8013e98:	20008e94 	.word	0x20008e94
 8013e9c:	2000000c 	.word	0x2000000c

08013ea0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b083      	sub	sp, #12
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013eac:	78fb      	ldrb	r3, [r7, #3]
 8013eae:	3b01      	subs	r3, #1
 8013eb0:	2b04      	cmp	r3, #4
 8013eb2:	d819      	bhi.n	8013ee8 <USBH_UserProcess+0x48>
 8013eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8013ebc <USBH_UserProcess+0x1c>)
 8013eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eba:	bf00      	nop
 8013ebc:	08013ee9 	.word	0x08013ee9
 8013ec0:	08013ed9 	.word	0x08013ed9
 8013ec4:	08013ee9 	.word	0x08013ee9
 8013ec8:	08013ee1 	.word	0x08013ee1
 8013ecc:	08013ed1 	.word	0x08013ed1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013ed0:	4b09      	ldr	r3, [pc, #36]	@ (8013ef8 <USBH_UserProcess+0x58>)
 8013ed2:	2203      	movs	r2, #3
 8013ed4:	701a      	strb	r2, [r3, #0]
  break;
 8013ed6:	e008      	b.n	8013eea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013ed8:	4b07      	ldr	r3, [pc, #28]	@ (8013ef8 <USBH_UserProcess+0x58>)
 8013eda:	2202      	movs	r2, #2
 8013edc:	701a      	strb	r2, [r3, #0]
  break;
 8013ede:	e004      	b.n	8013eea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013ee0:	4b05      	ldr	r3, [pc, #20]	@ (8013ef8 <USBH_UserProcess+0x58>)
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	701a      	strb	r2, [r3, #0]
  break;
 8013ee6:	e000      	b.n	8013eea <USBH_UserProcess+0x4a>

  default:
  break;
 8013ee8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013eea:	bf00      	nop
 8013eec:	370c      	adds	r7, #12
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop
 8013ef8:	20009278 	.word	0x20009278

08013efc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b08a      	sub	sp, #40	@ 0x28
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f04:	f107 0314 	add.w	r3, r7, #20
 8013f08:	2200      	movs	r2, #0
 8013f0a:	601a      	str	r2, [r3, #0]
 8013f0c:	605a      	str	r2, [r3, #4]
 8013f0e:	609a      	str	r2, [r3, #8]
 8013f10:	60da      	str	r2, [r3, #12]
 8013f12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013f1c:	d13c      	bne.n	8013f98 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f1e:	4b20      	ldr	r3, [pc, #128]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f22:	4a1f      	ldr	r2, [pc, #124]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f24:	f043 0301 	orr.w	r3, r3, #1
 8013f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8013f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f2e:	f003 0301 	and.w	r3, r3, #1
 8013f32:	613b      	str	r3, [r7, #16]
 8013f34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8013f36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8013f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f3c:	2302      	movs	r3, #2
 8013f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f40:	2300      	movs	r3, #0
 8013f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f44:	2303      	movs	r3, #3
 8013f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013f48:	230a      	movs	r3, #10
 8013f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f4c:	f107 0314 	add.w	r3, r7, #20
 8013f50:	4619      	mov	r1, r3
 8013f52:	4814      	ldr	r0, [pc, #80]	@ (8013fa4 <HAL_HCD_MspInit+0xa8>)
 8013f54:	f7f0 fb98 	bl	8004688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013f58:	4b11      	ldr	r3, [pc, #68]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f5c:	4a10      	ldr	r2, [pc, #64]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f62:	6353      	str	r3, [r2, #52]	@ 0x34
 8013f64:	4b0e      	ldr	r3, [pc, #56]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f6c:	60fb      	str	r3, [r7, #12]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	4b0b      	ldr	r3, [pc, #44]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f74:	4a0a      	ldr	r2, [pc, #40]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013f7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8013f7c:	4b08      	ldr	r3, [pc, #32]	@ (8013fa0 <HAL_HCD_MspInit+0xa4>)
 8013f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013f84:	60bb      	str	r3, [r7, #8]
 8013f86:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013f88:	2200      	movs	r2, #0
 8013f8a:	2105      	movs	r1, #5
 8013f8c:	2043      	movs	r0, #67	@ 0x43
 8013f8e:	f7ef fb7f 	bl	8003690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013f92:	2043      	movs	r0, #67	@ 0x43
 8013f94:	f7ef fb98 	bl	80036c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013f98:	bf00      	nop
 8013f9a:	3728      	adds	r7, #40	@ 0x28
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	40023800 	.word	0x40023800
 8013fa4:	40020000 	.word	0x40020000

08013fa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fc f9c7 	bl	801034a <USBH_LL_IncTimer>
}
 8013fbc:	bf00      	nop
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fc fa0b 	bl	80103ee <USBH_LL_Connect>
}
 8013fd8:	bf00      	nop
 8013fda:	3708      	adds	r7, #8
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7fc fa20 	bl	8010434 <USBH_LL_Disconnect>
}
 8013ff4:	bf00      	nop
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	460b      	mov	r3, r1
 8014006:	70fb      	strb	r3, [r7, #3]
 8014008:	4613      	mov	r3, r2
 801400a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014012:	4618      	mov	r0, r3
 8014014:	f7fc fa55 	bl	80104c2 <USBH_LL_NotifyURBChange>
#endif
}
 8014018:	bf00      	nop
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801402e:	4618      	mov	r0, r3
 8014030:	f7fc f9b5 	bl	801039e <USBH_LL_PortEnabled>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801404a:	4618      	mov	r0, r3
 801404c:	f7fc f9c1 	bl	80103d2 <USBH_LL_PortDisabled>
}
 8014050:	bf00      	nop
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014066:	2b01      	cmp	r3, #1
 8014068:	d12a      	bne.n	80140c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801406a:	4a18      	ldr	r2, [pc, #96]	@ (80140cc <USBH_LL_Init+0x74>)
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4a15      	ldr	r2, [pc, #84]	@ (80140cc <USBH_LL_Init+0x74>)
 8014076:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801407a:	4b14      	ldr	r3, [pc, #80]	@ (80140cc <USBH_LL_Init+0x74>)
 801407c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8014080:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8014082:	4b12      	ldr	r3, [pc, #72]	@ (80140cc <USBH_LL_Init+0x74>)
 8014084:	2208      	movs	r2, #8
 8014086:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014088:	4b10      	ldr	r3, [pc, #64]	@ (80140cc <USBH_LL_Init+0x74>)
 801408a:	2201      	movs	r2, #1
 801408c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801408e:	4b0f      	ldr	r3, [pc, #60]	@ (80140cc <USBH_LL_Init+0x74>)
 8014090:	2200      	movs	r2, #0
 8014092:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8014094:	4b0d      	ldr	r3, [pc, #52]	@ (80140cc <USBH_LL_Init+0x74>)
 8014096:	2202      	movs	r2, #2
 8014098:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801409a:	4b0c      	ldr	r3, [pc, #48]	@ (80140cc <USBH_LL_Init+0x74>)
 801409c:	2200      	movs	r2, #0
 801409e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80140a0:	480a      	ldr	r0, [pc, #40]	@ (80140cc <USBH_LL_Init+0x74>)
 80140a2:	f7f0 fce8 	bl	8004a76 <HAL_HCD_Init>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d001      	beq.n	80140b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80140ac:	f7ed fc8e 	bl	80019cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80140b0:	4806      	ldr	r0, [pc, #24]	@ (80140cc <USBH_LL_Init+0x74>)
 80140b2:	f7f1 f949 	bl	8005348 <HAL_HCD_GetCurrentFrame>
 80140b6:	4603      	mov	r3, r0
 80140b8:	4619      	mov	r1, r3
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7fc f936 	bl	801032c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	2000927c 	.word	0x2000927c

080140d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140d8:	2300      	movs	r3, #0
 80140da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7f1 f8b6 	bl	8005258 <HAL_HCD_Start>
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f000 f95e 	bl	80143b4 <USBH_Get_USB_Status>
 80140f8:	4603      	mov	r3, r0
 80140fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80140fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3710      	adds	r7, #16
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}

08014106 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014106:	b580      	push	{r7, lr}
 8014108:	b084      	sub	sp, #16
 801410a:	af00      	add	r7, sp, #0
 801410c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801410e:	2300      	movs	r3, #0
 8014110:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014112:	2300      	movs	r3, #0
 8014114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801411c:	4618      	mov	r0, r3
 801411e:	f7f1 f8be 	bl	800529e <HAL_HCD_Stop>
 8014122:	4603      	mov	r3, r0
 8014124:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014126:	7bfb      	ldrb	r3, [r7, #15]
 8014128:	4618      	mov	r0, r3
 801412a:	f000 f943 	bl	80143b4 <USBH_Get_USB_Status>
 801412e:	4603      	mov	r3, r0
 8014130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014132:	7bbb      	ldrb	r3, [r7, #14]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014144:	2301      	movs	r3, #1
 8014146:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801414e:	4618      	mov	r0, r3
 8014150:	f7f1 f908 	bl	8005364 <HAL_HCD_GetCurrentSpeed>
 8014154:	4603      	mov	r3, r0
 8014156:	2b02      	cmp	r3, #2
 8014158:	d00c      	beq.n	8014174 <USBH_LL_GetSpeed+0x38>
 801415a:	2b02      	cmp	r3, #2
 801415c:	d80d      	bhi.n	801417a <USBH_LL_GetSpeed+0x3e>
 801415e:	2b00      	cmp	r3, #0
 8014160:	d002      	beq.n	8014168 <USBH_LL_GetSpeed+0x2c>
 8014162:	2b01      	cmp	r3, #1
 8014164:	d003      	beq.n	801416e <USBH_LL_GetSpeed+0x32>
 8014166:	e008      	b.n	801417a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014168:	2300      	movs	r3, #0
 801416a:	73fb      	strb	r3, [r7, #15]
    break;
 801416c:	e008      	b.n	8014180 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801416e:	2301      	movs	r3, #1
 8014170:	73fb      	strb	r3, [r7, #15]
    break;
 8014172:	e005      	b.n	8014180 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014174:	2302      	movs	r3, #2
 8014176:	73fb      	strb	r3, [r7, #15]
    break;
 8014178:	e002      	b.n	8014180 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801417a:	2301      	movs	r3, #1
 801417c:	73fb      	strb	r3, [r7, #15]
    break;
 801417e:	bf00      	nop
  }
  return  speed;
 8014180:	7bfb      	ldrb	r3, [r7, #15]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801418a:	b580      	push	{r7, lr}
 801418c:	b084      	sub	sp, #16
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014192:	2300      	movs	r3, #0
 8014194:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014196:	2300      	movs	r3, #0
 8014198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7f1 f899 	bl	80052d8 <HAL_HCD_ResetPort>
 80141a6:	4603      	mov	r3, r0
 80141a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80141aa:	7bfb      	ldrb	r3, [r7, #15]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f000 f901 	bl	80143b4 <USBH_Get_USB_Status>
 80141b2:	4603      	mov	r3, r0
 80141b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3710      	adds	r7, #16
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80141d2:	78fa      	ldrb	r2, [r7, #3]
 80141d4:	4611      	mov	r1, r2
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7f1 f8a1 	bl	800531e <HAL_HCD_HC_GetXferCount>
 80141dc:	4603      	mov	r3, r0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80141e6:	b590      	push	{r4, r7, lr}
 80141e8:	b089      	sub	sp, #36	@ 0x24
 80141ea:	af04      	add	r7, sp, #16
 80141ec:	6078      	str	r0, [r7, #4]
 80141ee:	4608      	mov	r0, r1
 80141f0:	4611      	mov	r1, r2
 80141f2:	461a      	mov	r2, r3
 80141f4:	4603      	mov	r3, r0
 80141f6:	70fb      	strb	r3, [r7, #3]
 80141f8:	460b      	mov	r3, r1
 80141fa:	70bb      	strb	r3, [r7, #2]
 80141fc:	4613      	mov	r3, r2
 80141fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014200:	2300      	movs	r3, #0
 8014202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014204:	2300      	movs	r3, #0
 8014206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801420e:	787c      	ldrb	r4, [r7, #1]
 8014210:	78ba      	ldrb	r2, [r7, #2]
 8014212:	78f9      	ldrb	r1, [r7, #3]
 8014214:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014216:	9302      	str	r3, [sp, #8]
 8014218:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801421c:	9301      	str	r3, [sp, #4]
 801421e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	4623      	mov	r3, r4
 8014226:	f7f0 fc8d 	bl	8004b44 <HAL_HCD_HC_Init>
 801422a:	4603      	mov	r3, r0
 801422c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801422e:	7bfb      	ldrb	r3, [r7, #15]
 8014230:	4618      	mov	r0, r3
 8014232:	f000 f8bf 	bl	80143b4 <USBH_Get_USB_Status>
 8014236:	4603      	mov	r3, r0
 8014238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801423a:	7bbb      	ldrb	r3, [r7, #14]
}
 801423c:	4618      	mov	r0, r3
 801423e:	3714      	adds	r7, #20
 8014240:	46bd      	mov	sp, r7
 8014242:	bd90      	pop	{r4, r7, pc}

08014244 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	460b      	mov	r3, r1
 801424e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014250:	2300      	movs	r3, #0
 8014252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014254:	2300      	movs	r3, #0
 8014256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801425e:	78fa      	ldrb	r2, [r7, #3]
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f7f0 fd26 	bl	8004cb4 <HAL_HCD_HC_Halt>
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	4618      	mov	r0, r3
 8014270:	f000 f8a0 	bl	80143b4 <USBH_Get_USB_Status>
 8014274:	4603      	mov	r3, r0
 8014276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014278:	7bbb      	ldrb	r3, [r7, #14]
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8014282:	b590      	push	{r4, r7, lr}
 8014284:	b089      	sub	sp, #36	@ 0x24
 8014286:	af04      	add	r7, sp, #16
 8014288:	6078      	str	r0, [r7, #4]
 801428a:	4608      	mov	r0, r1
 801428c:	4611      	mov	r1, r2
 801428e:	461a      	mov	r2, r3
 8014290:	4603      	mov	r3, r0
 8014292:	70fb      	strb	r3, [r7, #3]
 8014294:	460b      	mov	r3, r1
 8014296:	70bb      	strb	r3, [r7, #2]
 8014298:	4613      	mov	r3, r2
 801429a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801429c:	2300      	movs	r3, #0
 801429e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80142a0:	2300      	movs	r3, #0
 80142a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80142aa:	787c      	ldrb	r4, [r7, #1]
 80142ac:	78ba      	ldrb	r2, [r7, #2]
 80142ae:	78f9      	ldrb	r1, [r7, #3]
 80142b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80142b4:	9303      	str	r3, [sp, #12]
 80142b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142b8:	9302      	str	r3, [sp, #8]
 80142ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142bc:	9301      	str	r3, [sp, #4]
 80142be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142c2:	9300      	str	r3, [sp, #0]
 80142c4:	4623      	mov	r3, r4
 80142c6:	f7f0 fd19 	bl	8004cfc <HAL_HCD_HC_SubmitRequest>
 80142ca:	4603      	mov	r3, r0
 80142cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80142ce:	7bfb      	ldrb	r3, [r7, #15]
 80142d0:	4618      	mov	r0, r3
 80142d2:	f000 f86f 	bl	80143b4 <USBH_Get_USB_Status>
 80142d6:	4603      	mov	r3, r0
 80142d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142da:	7bbb      	ldrb	r3, [r7, #14]
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3714      	adds	r7, #20
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd90      	pop	{r4, r7, pc}

080142e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	460b      	mov	r3, r1
 80142ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80142f6:	78fa      	ldrb	r2, [r7, #3]
 80142f8:	4611      	mov	r1, r2
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7f0 fffa 	bl	80052f4 <HAL_HCD_HC_GetURBState>
 8014300:	4603      	mov	r3, r0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3708      	adds	r7, #8
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}

0801430a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801430a:	b580      	push	{r7, lr}
 801430c:	b082      	sub	sp, #8
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
 8014312:	460b      	mov	r3, r1
 8014314:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801431c:	2b01      	cmp	r3, #1
 801431e:	d103      	bne.n	8014328 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014320:	78fb      	ldrb	r3, [r7, #3]
 8014322:	4618      	mov	r0, r3
 8014324:	f000 f872 	bl	801440c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014328:	20c8      	movs	r0, #200	@ 0xc8
 801432a:	f7ee fe41 	bl	8002fb0 <HAL_Delay>
  return USBH_OK;
 801432e:	2300      	movs	r3, #0
}
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	70fb      	strb	r3, [r7, #3]
 8014344:	4613      	mov	r3, r2
 8014346:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801434e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014350:	78fa      	ldrb	r2, [r7, #3]
 8014352:	68f9      	ldr	r1, [r7, #12]
 8014354:	4613      	mov	r3, r2
 8014356:	011b      	lsls	r3, r3, #4
 8014358:	1a9b      	subs	r3, r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	440b      	add	r3, r1
 801435e:	3317      	adds	r3, #23
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d00a      	beq.n	801437c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014366:	78fa      	ldrb	r2, [r7, #3]
 8014368:	68f9      	ldr	r1, [r7, #12]
 801436a:	4613      	mov	r3, r2
 801436c:	011b      	lsls	r3, r3, #4
 801436e:	1a9b      	subs	r3, r3, r2
 8014370:	009b      	lsls	r3, r3, #2
 8014372:	440b      	add	r3, r1
 8014374:	333c      	adds	r3, #60	@ 0x3c
 8014376:	78ba      	ldrb	r2, [r7, #2]
 8014378:	701a      	strb	r2, [r3, #0]
 801437a:	e009      	b.n	8014390 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801437c:	78fa      	ldrb	r2, [r7, #3]
 801437e:	68f9      	ldr	r1, [r7, #12]
 8014380:	4613      	mov	r3, r2
 8014382:	011b      	lsls	r3, r3, #4
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	440b      	add	r3, r1
 801438a:	333d      	adds	r3, #61	@ 0x3d
 801438c:	78ba      	ldrb	r2, [r7, #2]
 801438e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014390:	2300      	movs	r3, #0
}
 8014392:	4618      	mov	r0, r3
 8014394:	3714      	adds	r7, #20
 8014396:	46bd      	mov	sp, r7
 8014398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439c:	4770      	bx	lr

0801439e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801439e:	b580      	push	{r7, lr}
 80143a0:	b082      	sub	sp, #8
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7ee fe02 	bl	8002fb0 <HAL_Delay>
}
 80143ac:	bf00      	nop
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80143b4:	b480      	push	{r7}
 80143b6:	b085      	sub	sp, #20
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	4603      	mov	r3, r0
 80143bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80143c2:	79fb      	ldrb	r3, [r7, #7]
 80143c4:	2b03      	cmp	r3, #3
 80143c6:	d817      	bhi.n	80143f8 <USBH_Get_USB_Status+0x44>
 80143c8:	a201      	add	r2, pc, #4	@ (adr r2, 80143d0 <USBH_Get_USB_Status+0x1c>)
 80143ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ce:	bf00      	nop
 80143d0:	080143e1 	.word	0x080143e1
 80143d4:	080143e7 	.word	0x080143e7
 80143d8:	080143ed 	.word	0x080143ed
 80143dc:	080143f3 	.word	0x080143f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80143e0:	2300      	movs	r3, #0
 80143e2:	73fb      	strb	r3, [r7, #15]
    break;
 80143e4:	e00b      	b.n	80143fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80143e6:	2302      	movs	r3, #2
 80143e8:	73fb      	strb	r3, [r7, #15]
    break;
 80143ea:	e008      	b.n	80143fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80143ec:	2301      	movs	r3, #1
 80143ee:	73fb      	strb	r3, [r7, #15]
    break;
 80143f0:	e005      	b.n	80143fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80143f2:	2302      	movs	r3, #2
 80143f4:	73fb      	strb	r3, [r7, #15]
    break;
 80143f6:	e002      	b.n	80143fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80143f8:	2302      	movs	r3, #2
 80143fa:	73fb      	strb	r3, [r7, #15]
    break;
 80143fc:	bf00      	nop
  }
  return usb_status;
 80143fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014400:	4618      	mov	r0, r3
 8014402:	3714      	adds	r7, #20
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b084      	sub	sp, #16
 8014410:	af00      	add	r7, sp, #0
 8014412:	4603      	mov	r3, r0
 8014414:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014416:	79fb      	ldrb	r3, [r7, #7]
 8014418:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801441a:	79fb      	ldrb	r3, [r7, #7]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d102      	bne.n	8014426 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8014420:	2300      	movs	r3, #0
 8014422:	73fb      	strb	r3, [r7, #15]
 8014424:	e001      	b.n	801442a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8014426:	2301      	movs	r3, #1
 8014428:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801442a:	7bfb      	ldrb	r3, [r7, #15]
 801442c:	461a      	mov	r2, r3
 801442e:	2120      	movs	r1, #32
 8014430:	4803      	ldr	r0, [pc, #12]	@ (8014440 <MX_DriverVbusFS+0x34>)
 8014432:	f7f0 faed 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8014436:	bf00      	nop
 8014438:	3710      	adds	r7, #16
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	40020c00 	.word	0x40020c00

08014444 <malloc>:
 8014444:	4b02      	ldr	r3, [pc, #8]	@ (8014450 <malloc+0xc>)
 8014446:	4601      	mov	r1, r0
 8014448:	6818      	ldr	r0, [r3, #0]
 801444a:	f000 b82d 	b.w	80144a8 <_malloc_r>
 801444e:	bf00      	nop
 8014450:	2000003c 	.word	0x2000003c

08014454 <free>:
 8014454:	4b02      	ldr	r3, [pc, #8]	@ (8014460 <free+0xc>)
 8014456:	4601      	mov	r1, r0
 8014458:	6818      	ldr	r0, [r3, #0]
 801445a:	f000 bb43 	b.w	8014ae4 <_free_r>
 801445e:	bf00      	nop
 8014460:	2000003c 	.word	0x2000003c

08014464 <sbrk_aligned>:
 8014464:	b570      	push	{r4, r5, r6, lr}
 8014466:	4e0f      	ldr	r6, [pc, #60]	@ (80144a4 <sbrk_aligned+0x40>)
 8014468:	460c      	mov	r4, r1
 801446a:	6831      	ldr	r1, [r6, #0]
 801446c:	4605      	mov	r5, r0
 801446e:	b911      	cbnz	r1, 8014476 <sbrk_aligned+0x12>
 8014470:	f000 fada 	bl	8014a28 <_sbrk_r>
 8014474:	6030      	str	r0, [r6, #0]
 8014476:	4621      	mov	r1, r4
 8014478:	4628      	mov	r0, r5
 801447a:	f000 fad5 	bl	8014a28 <_sbrk_r>
 801447e:	1c43      	adds	r3, r0, #1
 8014480:	d103      	bne.n	801448a <sbrk_aligned+0x26>
 8014482:	f04f 34ff 	mov.w	r4, #4294967295
 8014486:	4620      	mov	r0, r4
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	1cc4      	adds	r4, r0, #3
 801448c:	f024 0403 	bic.w	r4, r4, #3
 8014490:	42a0      	cmp	r0, r4
 8014492:	d0f8      	beq.n	8014486 <sbrk_aligned+0x22>
 8014494:	1a21      	subs	r1, r4, r0
 8014496:	4628      	mov	r0, r5
 8014498:	f000 fac6 	bl	8014a28 <_sbrk_r>
 801449c:	3001      	adds	r0, #1
 801449e:	d1f2      	bne.n	8014486 <sbrk_aligned+0x22>
 80144a0:	e7ef      	b.n	8014482 <sbrk_aligned+0x1e>
 80144a2:	bf00      	nop
 80144a4:	2000965c 	.word	0x2000965c

080144a8 <_malloc_r>:
 80144a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144ac:	1ccd      	adds	r5, r1, #3
 80144ae:	f025 0503 	bic.w	r5, r5, #3
 80144b2:	3508      	adds	r5, #8
 80144b4:	2d0c      	cmp	r5, #12
 80144b6:	bf38      	it	cc
 80144b8:	250c      	movcc	r5, #12
 80144ba:	2d00      	cmp	r5, #0
 80144bc:	4606      	mov	r6, r0
 80144be:	db01      	blt.n	80144c4 <_malloc_r+0x1c>
 80144c0:	42a9      	cmp	r1, r5
 80144c2:	d904      	bls.n	80144ce <_malloc_r+0x26>
 80144c4:	230c      	movs	r3, #12
 80144c6:	6033      	str	r3, [r6, #0]
 80144c8:	2000      	movs	r0, #0
 80144ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80145a4 <_malloc_r+0xfc>
 80144d2:	f000 f869 	bl	80145a8 <__malloc_lock>
 80144d6:	f8d8 3000 	ldr.w	r3, [r8]
 80144da:	461c      	mov	r4, r3
 80144dc:	bb44      	cbnz	r4, 8014530 <_malloc_r+0x88>
 80144de:	4629      	mov	r1, r5
 80144e0:	4630      	mov	r0, r6
 80144e2:	f7ff ffbf 	bl	8014464 <sbrk_aligned>
 80144e6:	1c43      	adds	r3, r0, #1
 80144e8:	4604      	mov	r4, r0
 80144ea:	d158      	bne.n	801459e <_malloc_r+0xf6>
 80144ec:	f8d8 4000 	ldr.w	r4, [r8]
 80144f0:	4627      	mov	r7, r4
 80144f2:	2f00      	cmp	r7, #0
 80144f4:	d143      	bne.n	801457e <_malloc_r+0xd6>
 80144f6:	2c00      	cmp	r4, #0
 80144f8:	d04b      	beq.n	8014592 <_malloc_r+0xea>
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	4639      	mov	r1, r7
 80144fe:	4630      	mov	r0, r6
 8014500:	eb04 0903 	add.w	r9, r4, r3
 8014504:	f000 fa90 	bl	8014a28 <_sbrk_r>
 8014508:	4581      	cmp	r9, r0
 801450a:	d142      	bne.n	8014592 <_malloc_r+0xea>
 801450c:	6821      	ldr	r1, [r4, #0]
 801450e:	1a6d      	subs	r5, r5, r1
 8014510:	4629      	mov	r1, r5
 8014512:	4630      	mov	r0, r6
 8014514:	f7ff ffa6 	bl	8014464 <sbrk_aligned>
 8014518:	3001      	adds	r0, #1
 801451a:	d03a      	beq.n	8014592 <_malloc_r+0xea>
 801451c:	6823      	ldr	r3, [r4, #0]
 801451e:	442b      	add	r3, r5
 8014520:	6023      	str	r3, [r4, #0]
 8014522:	f8d8 3000 	ldr.w	r3, [r8]
 8014526:	685a      	ldr	r2, [r3, #4]
 8014528:	bb62      	cbnz	r2, 8014584 <_malloc_r+0xdc>
 801452a:	f8c8 7000 	str.w	r7, [r8]
 801452e:	e00f      	b.n	8014550 <_malloc_r+0xa8>
 8014530:	6822      	ldr	r2, [r4, #0]
 8014532:	1b52      	subs	r2, r2, r5
 8014534:	d420      	bmi.n	8014578 <_malloc_r+0xd0>
 8014536:	2a0b      	cmp	r2, #11
 8014538:	d917      	bls.n	801456a <_malloc_r+0xc2>
 801453a:	1961      	adds	r1, r4, r5
 801453c:	42a3      	cmp	r3, r4
 801453e:	6025      	str	r5, [r4, #0]
 8014540:	bf18      	it	ne
 8014542:	6059      	strne	r1, [r3, #4]
 8014544:	6863      	ldr	r3, [r4, #4]
 8014546:	bf08      	it	eq
 8014548:	f8c8 1000 	streq.w	r1, [r8]
 801454c:	5162      	str	r2, [r4, r5]
 801454e:	604b      	str	r3, [r1, #4]
 8014550:	4630      	mov	r0, r6
 8014552:	f000 f82f 	bl	80145b4 <__malloc_unlock>
 8014556:	f104 000b 	add.w	r0, r4, #11
 801455a:	1d23      	adds	r3, r4, #4
 801455c:	f020 0007 	bic.w	r0, r0, #7
 8014560:	1ac2      	subs	r2, r0, r3
 8014562:	bf1c      	itt	ne
 8014564:	1a1b      	subne	r3, r3, r0
 8014566:	50a3      	strne	r3, [r4, r2]
 8014568:	e7af      	b.n	80144ca <_malloc_r+0x22>
 801456a:	6862      	ldr	r2, [r4, #4]
 801456c:	42a3      	cmp	r3, r4
 801456e:	bf0c      	ite	eq
 8014570:	f8c8 2000 	streq.w	r2, [r8]
 8014574:	605a      	strne	r2, [r3, #4]
 8014576:	e7eb      	b.n	8014550 <_malloc_r+0xa8>
 8014578:	4623      	mov	r3, r4
 801457a:	6864      	ldr	r4, [r4, #4]
 801457c:	e7ae      	b.n	80144dc <_malloc_r+0x34>
 801457e:	463c      	mov	r4, r7
 8014580:	687f      	ldr	r7, [r7, #4]
 8014582:	e7b6      	b.n	80144f2 <_malloc_r+0x4a>
 8014584:	461a      	mov	r2, r3
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	42a3      	cmp	r3, r4
 801458a:	d1fb      	bne.n	8014584 <_malloc_r+0xdc>
 801458c:	2300      	movs	r3, #0
 801458e:	6053      	str	r3, [r2, #4]
 8014590:	e7de      	b.n	8014550 <_malloc_r+0xa8>
 8014592:	230c      	movs	r3, #12
 8014594:	6033      	str	r3, [r6, #0]
 8014596:	4630      	mov	r0, r6
 8014598:	f000 f80c 	bl	80145b4 <__malloc_unlock>
 801459c:	e794      	b.n	80144c8 <_malloc_r+0x20>
 801459e:	6005      	str	r5, [r0, #0]
 80145a0:	e7d6      	b.n	8014550 <_malloc_r+0xa8>
 80145a2:	bf00      	nop
 80145a4:	20009660 	.word	0x20009660

080145a8 <__malloc_lock>:
 80145a8:	4801      	ldr	r0, [pc, #4]	@ (80145b0 <__malloc_lock+0x8>)
 80145aa:	f000 ba8a 	b.w	8014ac2 <__retarget_lock_acquire_recursive>
 80145ae:	bf00      	nop
 80145b0:	200097a4 	.word	0x200097a4

080145b4 <__malloc_unlock>:
 80145b4:	4801      	ldr	r0, [pc, #4]	@ (80145bc <__malloc_unlock+0x8>)
 80145b6:	f000 ba85 	b.w	8014ac4 <__retarget_lock_release_recursive>
 80145ba:	bf00      	nop
 80145bc:	200097a4 	.word	0x200097a4

080145c0 <std>:
 80145c0:	2300      	movs	r3, #0
 80145c2:	b510      	push	{r4, lr}
 80145c4:	4604      	mov	r4, r0
 80145c6:	e9c0 3300 	strd	r3, r3, [r0]
 80145ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145ce:	6083      	str	r3, [r0, #8]
 80145d0:	8181      	strh	r1, [r0, #12]
 80145d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80145d4:	81c2      	strh	r2, [r0, #14]
 80145d6:	6183      	str	r3, [r0, #24]
 80145d8:	4619      	mov	r1, r3
 80145da:	2208      	movs	r2, #8
 80145dc:	305c      	adds	r0, #92	@ 0x5c
 80145de:	f000 f9e7 	bl	80149b0 <memset>
 80145e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014618 <std+0x58>)
 80145e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80145e6:	4b0d      	ldr	r3, [pc, #52]	@ (801461c <std+0x5c>)
 80145e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80145ea:	4b0d      	ldr	r3, [pc, #52]	@ (8014620 <std+0x60>)
 80145ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80145ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014624 <std+0x64>)
 80145f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80145f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014628 <std+0x68>)
 80145f4:	6224      	str	r4, [r4, #32]
 80145f6:	429c      	cmp	r4, r3
 80145f8:	d006      	beq.n	8014608 <std+0x48>
 80145fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145fe:	4294      	cmp	r4, r2
 8014600:	d002      	beq.n	8014608 <std+0x48>
 8014602:	33d0      	adds	r3, #208	@ 0xd0
 8014604:	429c      	cmp	r4, r3
 8014606:	d105      	bne.n	8014614 <std+0x54>
 8014608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014610:	f000 ba56 	b.w	8014ac0 <__retarget_lock_init_recursive>
 8014614:	bd10      	pop	{r4, pc}
 8014616:	bf00      	nop
 8014618:	08014801 	.word	0x08014801
 801461c:	08014823 	.word	0x08014823
 8014620:	0801485b 	.word	0x0801485b
 8014624:	0801487f 	.word	0x0801487f
 8014628:	20009664 	.word	0x20009664

0801462c <stdio_exit_handler>:
 801462c:	4a02      	ldr	r2, [pc, #8]	@ (8014638 <stdio_exit_handler+0xc>)
 801462e:	4903      	ldr	r1, [pc, #12]	@ (801463c <stdio_exit_handler+0x10>)
 8014630:	4803      	ldr	r0, [pc, #12]	@ (8014640 <stdio_exit_handler+0x14>)
 8014632:	f000 b869 	b.w	8014708 <_fwalk_sglue>
 8014636:	bf00      	nop
 8014638:	20000030 	.word	0x20000030
 801463c:	08014c81 	.word	0x08014c81
 8014640:	20000040 	.word	0x20000040

08014644 <cleanup_stdio>:
 8014644:	6841      	ldr	r1, [r0, #4]
 8014646:	4b0c      	ldr	r3, [pc, #48]	@ (8014678 <cleanup_stdio+0x34>)
 8014648:	4299      	cmp	r1, r3
 801464a:	b510      	push	{r4, lr}
 801464c:	4604      	mov	r4, r0
 801464e:	d001      	beq.n	8014654 <cleanup_stdio+0x10>
 8014650:	f000 fb16 	bl	8014c80 <_fflush_r>
 8014654:	68a1      	ldr	r1, [r4, #8]
 8014656:	4b09      	ldr	r3, [pc, #36]	@ (801467c <cleanup_stdio+0x38>)
 8014658:	4299      	cmp	r1, r3
 801465a:	d002      	beq.n	8014662 <cleanup_stdio+0x1e>
 801465c:	4620      	mov	r0, r4
 801465e:	f000 fb0f 	bl	8014c80 <_fflush_r>
 8014662:	68e1      	ldr	r1, [r4, #12]
 8014664:	4b06      	ldr	r3, [pc, #24]	@ (8014680 <cleanup_stdio+0x3c>)
 8014666:	4299      	cmp	r1, r3
 8014668:	d004      	beq.n	8014674 <cleanup_stdio+0x30>
 801466a:	4620      	mov	r0, r4
 801466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014670:	f000 bb06 	b.w	8014c80 <_fflush_r>
 8014674:	bd10      	pop	{r4, pc}
 8014676:	bf00      	nop
 8014678:	20009664 	.word	0x20009664
 801467c:	200096cc 	.word	0x200096cc
 8014680:	20009734 	.word	0x20009734

08014684 <global_stdio_init.part.0>:
 8014684:	b510      	push	{r4, lr}
 8014686:	4b0b      	ldr	r3, [pc, #44]	@ (80146b4 <global_stdio_init.part.0+0x30>)
 8014688:	4c0b      	ldr	r4, [pc, #44]	@ (80146b8 <global_stdio_init.part.0+0x34>)
 801468a:	4a0c      	ldr	r2, [pc, #48]	@ (80146bc <global_stdio_init.part.0+0x38>)
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	4620      	mov	r0, r4
 8014690:	2200      	movs	r2, #0
 8014692:	2104      	movs	r1, #4
 8014694:	f7ff ff94 	bl	80145c0 <std>
 8014698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801469c:	2201      	movs	r2, #1
 801469e:	2109      	movs	r1, #9
 80146a0:	f7ff ff8e 	bl	80145c0 <std>
 80146a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80146a8:	2202      	movs	r2, #2
 80146aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146ae:	2112      	movs	r1, #18
 80146b0:	f7ff bf86 	b.w	80145c0 <std>
 80146b4:	2000979c 	.word	0x2000979c
 80146b8:	20009664 	.word	0x20009664
 80146bc:	0801462d 	.word	0x0801462d

080146c0 <__sfp_lock_acquire>:
 80146c0:	4801      	ldr	r0, [pc, #4]	@ (80146c8 <__sfp_lock_acquire+0x8>)
 80146c2:	f000 b9fe 	b.w	8014ac2 <__retarget_lock_acquire_recursive>
 80146c6:	bf00      	nop
 80146c8:	200097a5 	.word	0x200097a5

080146cc <__sfp_lock_release>:
 80146cc:	4801      	ldr	r0, [pc, #4]	@ (80146d4 <__sfp_lock_release+0x8>)
 80146ce:	f000 b9f9 	b.w	8014ac4 <__retarget_lock_release_recursive>
 80146d2:	bf00      	nop
 80146d4:	200097a5 	.word	0x200097a5

080146d8 <__sinit>:
 80146d8:	b510      	push	{r4, lr}
 80146da:	4604      	mov	r4, r0
 80146dc:	f7ff fff0 	bl	80146c0 <__sfp_lock_acquire>
 80146e0:	6a23      	ldr	r3, [r4, #32]
 80146e2:	b11b      	cbz	r3, 80146ec <__sinit+0x14>
 80146e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146e8:	f7ff bff0 	b.w	80146cc <__sfp_lock_release>
 80146ec:	4b04      	ldr	r3, [pc, #16]	@ (8014700 <__sinit+0x28>)
 80146ee:	6223      	str	r3, [r4, #32]
 80146f0:	4b04      	ldr	r3, [pc, #16]	@ (8014704 <__sinit+0x2c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d1f5      	bne.n	80146e4 <__sinit+0xc>
 80146f8:	f7ff ffc4 	bl	8014684 <global_stdio_init.part.0>
 80146fc:	e7f2      	b.n	80146e4 <__sinit+0xc>
 80146fe:	bf00      	nop
 8014700:	08014645 	.word	0x08014645
 8014704:	2000979c 	.word	0x2000979c

08014708 <_fwalk_sglue>:
 8014708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801470c:	4607      	mov	r7, r0
 801470e:	4688      	mov	r8, r1
 8014710:	4614      	mov	r4, r2
 8014712:	2600      	movs	r6, #0
 8014714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014718:	f1b9 0901 	subs.w	r9, r9, #1
 801471c:	d505      	bpl.n	801472a <_fwalk_sglue+0x22>
 801471e:	6824      	ldr	r4, [r4, #0]
 8014720:	2c00      	cmp	r4, #0
 8014722:	d1f7      	bne.n	8014714 <_fwalk_sglue+0xc>
 8014724:	4630      	mov	r0, r6
 8014726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801472a:	89ab      	ldrh	r3, [r5, #12]
 801472c:	2b01      	cmp	r3, #1
 801472e:	d907      	bls.n	8014740 <_fwalk_sglue+0x38>
 8014730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014734:	3301      	adds	r3, #1
 8014736:	d003      	beq.n	8014740 <_fwalk_sglue+0x38>
 8014738:	4629      	mov	r1, r5
 801473a:	4638      	mov	r0, r7
 801473c:	47c0      	blx	r8
 801473e:	4306      	orrs	r6, r0
 8014740:	3568      	adds	r5, #104	@ 0x68
 8014742:	e7e9      	b.n	8014718 <_fwalk_sglue+0x10>

08014744 <_puts_r>:
 8014744:	6a03      	ldr	r3, [r0, #32]
 8014746:	b570      	push	{r4, r5, r6, lr}
 8014748:	6884      	ldr	r4, [r0, #8]
 801474a:	4605      	mov	r5, r0
 801474c:	460e      	mov	r6, r1
 801474e:	b90b      	cbnz	r3, 8014754 <_puts_r+0x10>
 8014750:	f7ff ffc2 	bl	80146d8 <__sinit>
 8014754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014756:	07db      	lsls	r3, r3, #31
 8014758:	d405      	bmi.n	8014766 <_puts_r+0x22>
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	0598      	lsls	r0, r3, #22
 801475e:	d402      	bmi.n	8014766 <_puts_r+0x22>
 8014760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014762:	f000 f9ae 	bl	8014ac2 <__retarget_lock_acquire_recursive>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	0719      	lsls	r1, r3, #28
 801476a:	d502      	bpl.n	8014772 <_puts_r+0x2e>
 801476c:	6923      	ldr	r3, [r4, #16]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d135      	bne.n	80147de <_puts_r+0x9a>
 8014772:	4621      	mov	r1, r4
 8014774:	4628      	mov	r0, r5
 8014776:	f000 f8c5 	bl	8014904 <__swsetup_r>
 801477a:	b380      	cbz	r0, 80147de <_puts_r+0x9a>
 801477c:	f04f 35ff 	mov.w	r5, #4294967295
 8014780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014782:	07da      	lsls	r2, r3, #31
 8014784:	d405      	bmi.n	8014792 <_puts_r+0x4e>
 8014786:	89a3      	ldrh	r3, [r4, #12]
 8014788:	059b      	lsls	r3, r3, #22
 801478a:	d402      	bmi.n	8014792 <_puts_r+0x4e>
 801478c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801478e:	f000 f999 	bl	8014ac4 <__retarget_lock_release_recursive>
 8014792:	4628      	mov	r0, r5
 8014794:	bd70      	pop	{r4, r5, r6, pc}
 8014796:	2b00      	cmp	r3, #0
 8014798:	da04      	bge.n	80147a4 <_puts_r+0x60>
 801479a:	69a2      	ldr	r2, [r4, #24]
 801479c:	429a      	cmp	r2, r3
 801479e:	dc17      	bgt.n	80147d0 <_puts_r+0x8c>
 80147a0:	290a      	cmp	r1, #10
 80147a2:	d015      	beq.n	80147d0 <_puts_r+0x8c>
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	6022      	str	r2, [r4, #0]
 80147aa:	7019      	strb	r1, [r3, #0]
 80147ac:	68a3      	ldr	r3, [r4, #8]
 80147ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147b2:	3b01      	subs	r3, #1
 80147b4:	60a3      	str	r3, [r4, #8]
 80147b6:	2900      	cmp	r1, #0
 80147b8:	d1ed      	bne.n	8014796 <_puts_r+0x52>
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	da11      	bge.n	80147e2 <_puts_r+0x9e>
 80147be:	4622      	mov	r2, r4
 80147c0:	210a      	movs	r1, #10
 80147c2:	4628      	mov	r0, r5
 80147c4:	f000 f85f 	bl	8014886 <__swbuf_r>
 80147c8:	3001      	adds	r0, #1
 80147ca:	d0d7      	beq.n	801477c <_puts_r+0x38>
 80147cc:	250a      	movs	r5, #10
 80147ce:	e7d7      	b.n	8014780 <_puts_r+0x3c>
 80147d0:	4622      	mov	r2, r4
 80147d2:	4628      	mov	r0, r5
 80147d4:	f000 f857 	bl	8014886 <__swbuf_r>
 80147d8:	3001      	adds	r0, #1
 80147da:	d1e7      	bne.n	80147ac <_puts_r+0x68>
 80147dc:	e7ce      	b.n	801477c <_puts_r+0x38>
 80147de:	3e01      	subs	r6, #1
 80147e0:	e7e4      	b.n	80147ac <_puts_r+0x68>
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	1c5a      	adds	r2, r3, #1
 80147e6:	6022      	str	r2, [r4, #0]
 80147e8:	220a      	movs	r2, #10
 80147ea:	701a      	strb	r2, [r3, #0]
 80147ec:	e7ee      	b.n	80147cc <_puts_r+0x88>
	...

080147f0 <puts>:
 80147f0:	4b02      	ldr	r3, [pc, #8]	@ (80147fc <puts+0xc>)
 80147f2:	4601      	mov	r1, r0
 80147f4:	6818      	ldr	r0, [r3, #0]
 80147f6:	f7ff bfa5 	b.w	8014744 <_puts_r>
 80147fa:	bf00      	nop
 80147fc:	2000003c 	.word	0x2000003c

08014800 <__sread>:
 8014800:	b510      	push	{r4, lr}
 8014802:	460c      	mov	r4, r1
 8014804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014808:	f000 f8fc 	bl	8014a04 <_read_r>
 801480c:	2800      	cmp	r0, #0
 801480e:	bfab      	itete	ge
 8014810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014812:	89a3      	ldrhlt	r3, [r4, #12]
 8014814:	181b      	addge	r3, r3, r0
 8014816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801481a:	bfac      	ite	ge
 801481c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801481e:	81a3      	strhlt	r3, [r4, #12]
 8014820:	bd10      	pop	{r4, pc}

08014822 <__swrite>:
 8014822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014826:	461f      	mov	r7, r3
 8014828:	898b      	ldrh	r3, [r1, #12]
 801482a:	05db      	lsls	r3, r3, #23
 801482c:	4605      	mov	r5, r0
 801482e:	460c      	mov	r4, r1
 8014830:	4616      	mov	r6, r2
 8014832:	d505      	bpl.n	8014840 <__swrite+0x1e>
 8014834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014838:	2302      	movs	r3, #2
 801483a:	2200      	movs	r2, #0
 801483c:	f000 f8d0 	bl	80149e0 <_lseek_r>
 8014840:	89a3      	ldrh	r3, [r4, #12]
 8014842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801484a:	81a3      	strh	r3, [r4, #12]
 801484c:	4632      	mov	r2, r6
 801484e:	463b      	mov	r3, r7
 8014850:	4628      	mov	r0, r5
 8014852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014856:	f000 b8f7 	b.w	8014a48 <_write_r>

0801485a <__sseek>:
 801485a:	b510      	push	{r4, lr}
 801485c:	460c      	mov	r4, r1
 801485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014862:	f000 f8bd 	bl	80149e0 <_lseek_r>
 8014866:	1c43      	adds	r3, r0, #1
 8014868:	89a3      	ldrh	r3, [r4, #12]
 801486a:	bf15      	itete	ne
 801486c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801486e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014876:	81a3      	strheq	r3, [r4, #12]
 8014878:	bf18      	it	ne
 801487a:	81a3      	strhne	r3, [r4, #12]
 801487c:	bd10      	pop	{r4, pc}

0801487e <__sclose>:
 801487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014882:	f000 b89d 	b.w	80149c0 <_close_r>

08014886 <__swbuf_r>:
 8014886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014888:	460e      	mov	r6, r1
 801488a:	4614      	mov	r4, r2
 801488c:	4605      	mov	r5, r0
 801488e:	b118      	cbz	r0, 8014898 <__swbuf_r+0x12>
 8014890:	6a03      	ldr	r3, [r0, #32]
 8014892:	b90b      	cbnz	r3, 8014898 <__swbuf_r+0x12>
 8014894:	f7ff ff20 	bl	80146d8 <__sinit>
 8014898:	69a3      	ldr	r3, [r4, #24]
 801489a:	60a3      	str	r3, [r4, #8]
 801489c:	89a3      	ldrh	r3, [r4, #12]
 801489e:	071a      	lsls	r2, r3, #28
 80148a0:	d501      	bpl.n	80148a6 <__swbuf_r+0x20>
 80148a2:	6923      	ldr	r3, [r4, #16]
 80148a4:	b943      	cbnz	r3, 80148b8 <__swbuf_r+0x32>
 80148a6:	4621      	mov	r1, r4
 80148a8:	4628      	mov	r0, r5
 80148aa:	f000 f82b 	bl	8014904 <__swsetup_r>
 80148ae:	b118      	cbz	r0, 80148b8 <__swbuf_r+0x32>
 80148b0:	f04f 37ff 	mov.w	r7, #4294967295
 80148b4:	4638      	mov	r0, r7
 80148b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	6922      	ldr	r2, [r4, #16]
 80148bc:	1a98      	subs	r0, r3, r2
 80148be:	6963      	ldr	r3, [r4, #20]
 80148c0:	b2f6      	uxtb	r6, r6
 80148c2:	4283      	cmp	r3, r0
 80148c4:	4637      	mov	r7, r6
 80148c6:	dc05      	bgt.n	80148d4 <__swbuf_r+0x4e>
 80148c8:	4621      	mov	r1, r4
 80148ca:	4628      	mov	r0, r5
 80148cc:	f000 f9d8 	bl	8014c80 <_fflush_r>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	d1ed      	bne.n	80148b0 <__swbuf_r+0x2a>
 80148d4:	68a3      	ldr	r3, [r4, #8]
 80148d6:	3b01      	subs	r3, #1
 80148d8:	60a3      	str	r3, [r4, #8]
 80148da:	6823      	ldr	r3, [r4, #0]
 80148dc:	1c5a      	adds	r2, r3, #1
 80148de:	6022      	str	r2, [r4, #0]
 80148e0:	701e      	strb	r6, [r3, #0]
 80148e2:	6962      	ldr	r2, [r4, #20]
 80148e4:	1c43      	adds	r3, r0, #1
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d004      	beq.n	80148f4 <__swbuf_r+0x6e>
 80148ea:	89a3      	ldrh	r3, [r4, #12]
 80148ec:	07db      	lsls	r3, r3, #31
 80148ee:	d5e1      	bpl.n	80148b4 <__swbuf_r+0x2e>
 80148f0:	2e0a      	cmp	r6, #10
 80148f2:	d1df      	bne.n	80148b4 <__swbuf_r+0x2e>
 80148f4:	4621      	mov	r1, r4
 80148f6:	4628      	mov	r0, r5
 80148f8:	f000 f9c2 	bl	8014c80 <_fflush_r>
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d0d9      	beq.n	80148b4 <__swbuf_r+0x2e>
 8014900:	e7d6      	b.n	80148b0 <__swbuf_r+0x2a>
	...

08014904 <__swsetup_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4b29      	ldr	r3, [pc, #164]	@ (80149ac <__swsetup_r+0xa8>)
 8014908:	4605      	mov	r5, r0
 801490a:	6818      	ldr	r0, [r3, #0]
 801490c:	460c      	mov	r4, r1
 801490e:	b118      	cbz	r0, 8014918 <__swsetup_r+0x14>
 8014910:	6a03      	ldr	r3, [r0, #32]
 8014912:	b90b      	cbnz	r3, 8014918 <__swsetup_r+0x14>
 8014914:	f7ff fee0 	bl	80146d8 <__sinit>
 8014918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801491c:	0719      	lsls	r1, r3, #28
 801491e:	d422      	bmi.n	8014966 <__swsetup_r+0x62>
 8014920:	06da      	lsls	r2, r3, #27
 8014922:	d407      	bmi.n	8014934 <__swsetup_r+0x30>
 8014924:	2209      	movs	r2, #9
 8014926:	602a      	str	r2, [r5, #0]
 8014928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801492c:	81a3      	strh	r3, [r4, #12]
 801492e:	f04f 30ff 	mov.w	r0, #4294967295
 8014932:	e033      	b.n	801499c <__swsetup_r+0x98>
 8014934:	0758      	lsls	r0, r3, #29
 8014936:	d512      	bpl.n	801495e <__swsetup_r+0x5a>
 8014938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801493a:	b141      	cbz	r1, 801494e <__swsetup_r+0x4a>
 801493c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014940:	4299      	cmp	r1, r3
 8014942:	d002      	beq.n	801494a <__swsetup_r+0x46>
 8014944:	4628      	mov	r0, r5
 8014946:	f000 f8cd 	bl	8014ae4 <_free_r>
 801494a:	2300      	movs	r3, #0
 801494c:	6363      	str	r3, [r4, #52]	@ 0x34
 801494e:	89a3      	ldrh	r3, [r4, #12]
 8014950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014954:	81a3      	strh	r3, [r4, #12]
 8014956:	2300      	movs	r3, #0
 8014958:	6063      	str	r3, [r4, #4]
 801495a:	6923      	ldr	r3, [r4, #16]
 801495c:	6023      	str	r3, [r4, #0]
 801495e:	89a3      	ldrh	r3, [r4, #12]
 8014960:	f043 0308 	orr.w	r3, r3, #8
 8014964:	81a3      	strh	r3, [r4, #12]
 8014966:	6923      	ldr	r3, [r4, #16]
 8014968:	b94b      	cbnz	r3, 801497e <__swsetup_r+0x7a>
 801496a:	89a3      	ldrh	r3, [r4, #12]
 801496c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014974:	d003      	beq.n	801497e <__swsetup_r+0x7a>
 8014976:	4621      	mov	r1, r4
 8014978:	4628      	mov	r0, r5
 801497a:	f000 f9cf 	bl	8014d1c <__smakebuf_r>
 801497e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014982:	f013 0201 	ands.w	r2, r3, #1
 8014986:	d00a      	beq.n	801499e <__swsetup_r+0x9a>
 8014988:	2200      	movs	r2, #0
 801498a:	60a2      	str	r2, [r4, #8]
 801498c:	6962      	ldr	r2, [r4, #20]
 801498e:	4252      	negs	r2, r2
 8014990:	61a2      	str	r2, [r4, #24]
 8014992:	6922      	ldr	r2, [r4, #16]
 8014994:	b942      	cbnz	r2, 80149a8 <__swsetup_r+0xa4>
 8014996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801499a:	d1c5      	bne.n	8014928 <__swsetup_r+0x24>
 801499c:	bd38      	pop	{r3, r4, r5, pc}
 801499e:	0799      	lsls	r1, r3, #30
 80149a0:	bf58      	it	pl
 80149a2:	6962      	ldrpl	r2, [r4, #20]
 80149a4:	60a2      	str	r2, [r4, #8]
 80149a6:	e7f4      	b.n	8014992 <__swsetup_r+0x8e>
 80149a8:	2000      	movs	r0, #0
 80149aa:	e7f7      	b.n	801499c <__swsetup_r+0x98>
 80149ac:	2000003c 	.word	0x2000003c

080149b0 <memset>:
 80149b0:	4402      	add	r2, r0
 80149b2:	4603      	mov	r3, r0
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d100      	bne.n	80149ba <memset+0xa>
 80149b8:	4770      	bx	lr
 80149ba:	f803 1b01 	strb.w	r1, [r3], #1
 80149be:	e7f9      	b.n	80149b4 <memset+0x4>

080149c0 <_close_r>:
 80149c0:	b538      	push	{r3, r4, r5, lr}
 80149c2:	4d06      	ldr	r5, [pc, #24]	@ (80149dc <_close_r+0x1c>)
 80149c4:	2300      	movs	r3, #0
 80149c6:	4604      	mov	r4, r0
 80149c8:	4608      	mov	r0, r1
 80149ca:	602b      	str	r3, [r5, #0]
 80149cc:	f7ed fce5 	bl	800239a <_close>
 80149d0:	1c43      	adds	r3, r0, #1
 80149d2:	d102      	bne.n	80149da <_close_r+0x1a>
 80149d4:	682b      	ldr	r3, [r5, #0]
 80149d6:	b103      	cbz	r3, 80149da <_close_r+0x1a>
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	bd38      	pop	{r3, r4, r5, pc}
 80149dc:	200097a0 	.word	0x200097a0

080149e0 <_lseek_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d07      	ldr	r5, [pc, #28]	@ (8014a00 <_lseek_r+0x20>)
 80149e4:	4604      	mov	r4, r0
 80149e6:	4608      	mov	r0, r1
 80149e8:	4611      	mov	r1, r2
 80149ea:	2200      	movs	r2, #0
 80149ec:	602a      	str	r2, [r5, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	f7ed fcfa 	bl	80023e8 <_lseek>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_lseek_r+0x1e>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_lseek_r+0x1e>
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	200097a0 	.word	0x200097a0

08014a04 <_read_r>:
 8014a04:	b538      	push	{r3, r4, r5, lr}
 8014a06:	4d07      	ldr	r5, [pc, #28]	@ (8014a24 <_read_r+0x20>)
 8014a08:	4604      	mov	r4, r0
 8014a0a:	4608      	mov	r0, r1
 8014a0c:	4611      	mov	r1, r2
 8014a0e:	2200      	movs	r2, #0
 8014a10:	602a      	str	r2, [r5, #0]
 8014a12:	461a      	mov	r2, r3
 8014a14:	f7ed fc88 	bl	8002328 <_read>
 8014a18:	1c43      	adds	r3, r0, #1
 8014a1a:	d102      	bne.n	8014a22 <_read_r+0x1e>
 8014a1c:	682b      	ldr	r3, [r5, #0]
 8014a1e:	b103      	cbz	r3, 8014a22 <_read_r+0x1e>
 8014a20:	6023      	str	r3, [r4, #0]
 8014a22:	bd38      	pop	{r3, r4, r5, pc}
 8014a24:	200097a0 	.word	0x200097a0

08014a28 <_sbrk_r>:
 8014a28:	b538      	push	{r3, r4, r5, lr}
 8014a2a:	4d06      	ldr	r5, [pc, #24]	@ (8014a44 <_sbrk_r+0x1c>)
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4604      	mov	r4, r0
 8014a30:	4608      	mov	r0, r1
 8014a32:	602b      	str	r3, [r5, #0]
 8014a34:	f7ed fce6 	bl	8002404 <_sbrk>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d102      	bne.n	8014a42 <_sbrk_r+0x1a>
 8014a3c:	682b      	ldr	r3, [r5, #0]
 8014a3e:	b103      	cbz	r3, 8014a42 <_sbrk_r+0x1a>
 8014a40:	6023      	str	r3, [r4, #0]
 8014a42:	bd38      	pop	{r3, r4, r5, pc}
 8014a44:	200097a0 	.word	0x200097a0

08014a48 <_write_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4d07      	ldr	r5, [pc, #28]	@ (8014a68 <_write_r+0x20>)
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	4608      	mov	r0, r1
 8014a50:	4611      	mov	r1, r2
 8014a52:	2200      	movs	r2, #0
 8014a54:	602a      	str	r2, [r5, #0]
 8014a56:	461a      	mov	r2, r3
 8014a58:	f7ed fc83 	bl	8002362 <_write>
 8014a5c:	1c43      	adds	r3, r0, #1
 8014a5e:	d102      	bne.n	8014a66 <_write_r+0x1e>
 8014a60:	682b      	ldr	r3, [r5, #0]
 8014a62:	b103      	cbz	r3, 8014a66 <_write_r+0x1e>
 8014a64:	6023      	str	r3, [r4, #0]
 8014a66:	bd38      	pop	{r3, r4, r5, pc}
 8014a68:	200097a0 	.word	0x200097a0

08014a6c <__errno>:
 8014a6c:	4b01      	ldr	r3, [pc, #4]	@ (8014a74 <__errno+0x8>)
 8014a6e:	6818      	ldr	r0, [r3, #0]
 8014a70:	4770      	bx	lr
 8014a72:	bf00      	nop
 8014a74:	2000003c 	.word	0x2000003c

08014a78 <__libc_init_array>:
 8014a78:	b570      	push	{r4, r5, r6, lr}
 8014a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8014ab0 <__libc_init_array+0x38>)
 8014a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8014ab4 <__libc_init_array+0x3c>)
 8014a7e:	1b64      	subs	r4, r4, r5
 8014a80:	10a4      	asrs	r4, r4, #2
 8014a82:	2600      	movs	r6, #0
 8014a84:	42a6      	cmp	r6, r4
 8014a86:	d109      	bne.n	8014a9c <__libc_init_array+0x24>
 8014a88:	4d0b      	ldr	r5, [pc, #44]	@ (8014ab8 <__libc_init_array+0x40>)
 8014a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8014abc <__libc_init_array+0x44>)
 8014a8c:	f000 f9a4 	bl	8014dd8 <_init>
 8014a90:	1b64      	subs	r4, r4, r5
 8014a92:	10a4      	asrs	r4, r4, #2
 8014a94:	2600      	movs	r6, #0
 8014a96:	42a6      	cmp	r6, r4
 8014a98:	d105      	bne.n	8014aa6 <__libc_init_array+0x2e>
 8014a9a:	bd70      	pop	{r4, r5, r6, pc}
 8014a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014aa0:	4798      	blx	r3
 8014aa2:	3601      	adds	r6, #1
 8014aa4:	e7ee      	b.n	8014a84 <__libc_init_array+0xc>
 8014aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014aaa:	4798      	blx	r3
 8014aac:	3601      	adds	r6, #1
 8014aae:	e7f2      	b.n	8014a96 <__libc_init_array+0x1e>
 8014ab0:	08014f24 	.word	0x08014f24
 8014ab4:	08014f24 	.word	0x08014f24
 8014ab8:	08014f24 	.word	0x08014f24
 8014abc:	08014f28 	.word	0x08014f28

08014ac0 <__retarget_lock_init_recursive>:
 8014ac0:	4770      	bx	lr

08014ac2 <__retarget_lock_acquire_recursive>:
 8014ac2:	4770      	bx	lr

08014ac4 <__retarget_lock_release_recursive>:
 8014ac4:	4770      	bx	lr

08014ac6 <memcpy>:
 8014ac6:	440a      	add	r2, r1
 8014ac8:	4291      	cmp	r1, r2
 8014aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ace:	d100      	bne.n	8014ad2 <memcpy+0xc>
 8014ad0:	4770      	bx	lr
 8014ad2:	b510      	push	{r4, lr}
 8014ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014adc:	4291      	cmp	r1, r2
 8014ade:	d1f9      	bne.n	8014ad4 <memcpy+0xe>
 8014ae0:	bd10      	pop	{r4, pc}
	...

08014ae4 <_free_r>:
 8014ae4:	b538      	push	{r3, r4, r5, lr}
 8014ae6:	4605      	mov	r5, r0
 8014ae8:	2900      	cmp	r1, #0
 8014aea:	d041      	beq.n	8014b70 <_free_r+0x8c>
 8014aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014af0:	1f0c      	subs	r4, r1, #4
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	bfb8      	it	lt
 8014af6:	18e4      	addlt	r4, r4, r3
 8014af8:	f7ff fd56 	bl	80145a8 <__malloc_lock>
 8014afc:	4a1d      	ldr	r2, [pc, #116]	@ (8014b74 <_free_r+0x90>)
 8014afe:	6813      	ldr	r3, [r2, #0]
 8014b00:	b933      	cbnz	r3, 8014b10 <_free_r+0x2c>
 8014b02:	6063      	str	r3, [r4, #4]
 8014b04:	6014      	str	r4, [r2, #0]
 8014b06:	4628      	mov	r0, r5
 8014b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b0c:	f7ff bd52 	b.w	80145b4 <__malloc_unlock>
 8014b10:	42a3      	cmp	r3, r4
 8014b12:	d908      	bls.n	8014b26 <_free_r+0x42>
 8014b14:	6820      	ldr	r0, [r4, #0]
 8014b16:	1821      	adds	r1, r4, r0
 8014b18:	428b      	cmp	r3, r1
 8014b1a:	bf01      	itttt	eq
 8014b1c:	6819      	ldreq	r1, [r3, #0]
 8014b1e:	685b      	ldreq	r3, [r3, #4]
 8014b20:	1809      	addeq	r1, r1, r0
 8014b22:	6021      	streq	r1, [r4, #0]
 8014b24:	e7ed      	b.n	8014b02 <_free_r+0x1e>
 8014b26:	461a      	mov	r2, r3
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	b10b      	cbz	r3, 8014b30 <_free_r+0x4c>
 8014b2c:	42a3      	cmp	r3, r4
 8014b2e:	d9fa      	bls.n	8014b26 <_free_r+0x42>
 8014b30:	6811      	ldr	r1, [r2, #0]
 8014b32:	1850      	adds	r0, r2, r1
 8014b34:	42a0      	cmp	r0, r4
 8014b36:	d10b      	bne.n	8014b50 <_free_r+0x6c>
 8014b38:	6820      	ldr	r0, [r4, #0]
 8014b3a:	4401      	add	r1, r0
 8014b3c:	1850      	adds	r0, r2, r1
 8014b3e:	4283      	cmp	r3, r0
 8014b40:	6011      	str	r1, [r2, #0]
 8014b42:	d1e0      	bne.n	8014b06 <_free_r+0x22>
 8014b44:	6818      	ldr	r0, [r3, #0]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	6053      	str	r3, [r2, #4]
 8014b4a:	4408      	add	r0, r1
 8014b4c:	6010      	str	r0, [r2, #0]
 8014b4e:	e7da      	b.n	8014b06 <_free_r+0x22>
 8014b50:	d902      	bls.n	8014b58 <_free_r+0x74>
 8014b52:	230c      	movs	r3, #12
 8014b54:	602b      	str	r3, [r5, #0]
 8014b56:	e7d6      	b.n	8014b06 <_free_r+0x22>
 8014b58:	6820      	ldr	r0, [r4, #0]
 8014b5a:	1821      	adds	r1, r4, r0
 8014b5c:	428b      	cmp	r3, r1
 8014b5e:	bf04      	itt	eq
 8014b60:	6819      	ldreq	r1, [r3, #0]
 8014b62:	685b      	ldreq	r3, [r3, #4]
 8014b64:	6063      	str	r3, [r4, #4]
 8014b66:	bf04      	itt	eq
 8014b68:	1809      	addeq	r1, r1, r0
 8014b6a:	6021      	streq	r1, [r4, #0]
 8014b6c:	6054      	str	r4, [r2, #4]
 8014b6e:	e7ca      	b.n	8014b06 <_free_r+0x22>
 8014b70:	bd38      	pop	{r3, r4, r5, pc}
 8014b72:	bf00      	nop
 8014b74:	20009660 	.word	0x20009660

08014b78 <__sflush_r>:
 8014b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b80:	0716      	lsls	r6, r2, #28
 8014b82:	4605      	mov	r5, r0
 8014b84:	460c      	mov	r4, r1
 8014b86:	d454      	bmi.n	8014c32 <__sflush_r+0xba>
 8014b88:	684b      	ldr	r3, [r1, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	dc02      	bgt.n	8014b94 <__sflush_r+0x1c>
 8014b8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	dd48      	ble.n	8014c26 <__sflush_r+0xae>
 8014b94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	d045      	beq.n	8014c26 <__sflush_r+0xae>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014ba0:	682f      	ldr	r7, [r5, #0]
 8014ba2:	6a21      	ldr	r1, [r4, #32]
 8014ba4:	602b      	str	r3, [r5, #0]
 8014ba6:	d030      	beq.n	8014c0a <__sflush_r+0x92>
 8014ba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014baa:	89a3      	ldrh	r3, [r4, #12]
 8014bac:	0759      	lsls	r1, r3, #29
 8014bae:	d505      	bpl.n	8014bbc <__sflush_r+0x44>
 8014bb0:	6863      	ldr	r3, [r4, #4]
 8014bb2:	1ad2      	subs	r2, r2, r3
 8014bb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014bb6:	b10b      	cbz	r3, 8014bbc <__sflush_r+0x44>
 8014bb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014bba:	1ad2      	subs	r2, r2, r3
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014bc0:	6a21      	ldr	r1, [r4, #32]
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	47b0      	blx	r6
 8014bc6:	1c43      	adds	r3, r0, #1
 8014bc8:	89a3      	ldrh	r3, [r4, #12]
 8014bca:	d106      	bne.n	8014bda <__sflush_r+0x62>
 8014bcc:	6829      	ldr	r1, [r5, #0]
 8014bce:	291d      	cmp	r1, #29
 8014bd0:	d82b      	bhi.n	8014c2a <__sflush_r+0xb2>
 8014bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8014c7c <__sflush_r+0x104>)
 8014bd4:	410a      	asrs	r2, r1
 8014bd6:	07d6      	lsls	r6, r2, #31
 8014bd8:	d427      	bmi.n	8014c2a <__sflush_r+0xb2>
 8014bda:	2200      	movs	r2, #0
 8014bdc:	6062      	str	r2, [r4, #4]
 8014bde:	04d9      	lsls	r1, r3, #19
 8014be0:	6922      	ldr	r2, [r4, #16]
 8014be2:	6022      	str	r2, [r4, #0]
 8014be4:	d504      	bpl.n	8014bf0 <__sflush_r+0x78>
 8014be6:	1c42      	adds	r2, r0, #1
 8014be8:	d101      	bne.n	8014bee <__sflush_r+0x76>
 8014bea:	682b      	ldr	r3, [r5, #0]
 8014bec:	b903      	cbnz	r3, 8014bf0 <__sflush_r+0x78>
 8014bee:	6560      	str	r0, [r4, #84]	@ 0x54
 8014bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014bf2:	602f      	str	r7, [r5, #0]
 8014bf4:	b1b9      	cbz	r1, 8014c26 <__sflush_r+0xae>
 8014bf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014bfa:	4299      	cmp	r1, r3
 8014bfc:	d002      	beq.n	8014c04 <__sflush_r+0x8c>
 8014bfe:	4628      	mov	r0, r5
 8014c00:	f7ff ff70 	bl	8014ae4 <_free_r>
 8014c04:	2300      	movs	r3, #0
 8014c06:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c08:	e00d      	b.n	8014c26 <__sflush_r+0xae>
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	47b0      	blx	r6
 8014c10:	4602      	mov	r2, r0
 8014c12:	1c50      	adds	r0, r2, #1
 8014c14:	d1c9      	bne.n	8014baa <__sflush_r+0x32>
 8014c16:	682b      	ldr	r3, [r5, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d0c6      	beq.n	8014baa <__sflush_r+0x32>
 8014c1c:	2b1d      	cmp	r3, #29
 8014c1e:	d001      	beq.n	8014c24 <__sflush_r+0xac>
 8014c20:	2b16      	cmp	r3, #22
 8014c22:	d11e      	bne.n	8014c62 <__sflush_r+0xea>
 8014c24:	602f      	str	r7, [r5, #0]
 8014c26:	2000      	movs	r0, #0
 8014c28:	e022      	b.n	8014c70 <__sflush_r+0xf8>
 8014c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c2e:	b21b      	sxth	r3, r3
 8014c30:	e01b      	b.n	8014c6a <__sflush_r+0xf2>
 8014c32:	690f      	ldr	r7, [r1, #16]
 8014c34:	2f00      	cmp	r7, #0
 8014c36:	d0f6      	beq.n	8014c26 <__sflush_r+0xae>
 8014c38:	0793      	lsls	r3, r2, #30
 8014c3a:	680e      	ldr	r6, [r1, #0]
 8014c3c:	bf08      	it	eq
 8014c3e:	694b      	ldreq	r3, [r1, #20]
 8014c40:	600f      	str	r7, [r1, #0]
 8014c42:	bf18      	it	ne
 8014c44:	2300      	movne	r3, #0
 8014c46:	eba6 0807 	sub.w	r8, r6, r7
 8014c4a:	608b      	str	r3, [r1, #8]
 8014c4c:	f1b8 0f00 	cmp.w	r8, #0
 8014c50:	dde9      	ble.n	8014c26 <__sflush_r+0xae>
 8014c52:	6a21      	ldr	r1, [r4, #32]
 8014c54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014c56:	4643      	mov	r3, r8
 8014c58:	463a      	mov	r2, r7
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	47b0      	blx	r6
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	dc08      	bgt.n	8014c74 <__sflush_r+0xfc>
 8014c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c6a:	81a3      	strh	r3, [r4, #12]
 8014c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c74:	4407      	add	r7, r0
 8014c76:	eba8 0800 	sub.w	r8, r8, r0
 8014c7a:	e7e7      	b.n	8014c4c <__sflush_r+0xd4>
 8014c7c:	dfbffffe 	.word	0xdfbffffe

08014c80 <_fflush_r>:
 8014c80:	b538      	push	{r3, r4, r5, lr}
 8014c82:	690b      	ldr	r3, [r1, #16]
 8014c84:	4605      	mov	r5, r0
 8014c86:	460c      	mov	r4, r1
 8014c88:	b913      	cbnz	r3, 8014c90 <_fflush_r+0x10>
 8014c8a:	2500      	movs	r5, #0
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	b118      	cbz	r0, 8014c9a <_fflush_r+0x1a>
 8014c92:	6a03      	ldr	r3, [r0, #32]
 8014c94:	b90b      	cbnz	r3, 8014c9a <_fflush_r+0x1a>
 8014c96:	f7ff fd1f 	bl	80146d8 <__sinit>
 8014c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d0f3      	beq.n	8014c8a <_fflush_r+0xa>
 8014ca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014ca4:	07d0      	lsls	r0, r2, #31
 8014ca6:	d404      	bmi.n	8014cb2 <_fflush_r+0x32>
 8014ca8:	0599      	lsls	r1, r3, #22
 8014caa:	d402      	bmi.n	8014cb2 <_fflush_r+0x32>
 8014cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014cae:	f7ff ff08 	bl	8014ac2 <__retarget_lock_acquire_recursive>
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	f7ff ff5f 	bl	8014b78 <__sflush_r>
 8014cba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014cbc:	07da      	lsls	r2, r3, #31
 8014cbe:	4605      	mov	r5, r0
 8014cc0:	d4e4      	bmi.n	8014c8c <_fflush_r+0xc>
 8014cc2:	89a3      	ldrh	r3, [r4, #12]
 8014cc4:	059b      	lsls	r3, r3, #22
 8014cc6:	d4e1      	bmi.n	8014c8c <_fflush_r+0xc>
 8014cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014cca:	f7ff fefb 	bl	8014ac4 <__retarget_lock_release_recursive>
 8014cce:	e7dd      	b.n	8014c8c <_fflush_r+0xc>

08014cd0 <__swhatbuf_r>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	460c      	mov	r4, r1
 8014cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cd8:	2900      	cmp	r1, #0
 8014cda:	b096      	sub	sp, #88	@ 0x58
 8014cdc:	4615      	mov	r5, r2
 8014cde:	461e      	mov	r6, r3
 8014ce0:	da0d      	bge.n	8014cfe <__swhatbuf_r+0x2e>
 8014ce2:	89a3      	ldrh	r3, [r4, #12]
 8014ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014ce8:	f04f 0100 	mov.w	r1, #0
 8014cec:	bf14      	ite	ne
 8014cee:	2340      	movne	r3, #64	@ 0x40
 8014cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	6031      	str	r1, [r6, #0]
 8014cf8:	602b      	str	r3, [r5, #0]
 8014cfa:	b016      	add	sp, #88	@ 0x58
 8014cfc:	bd70      	pop	{r4, r5, r6, pc}
 8014cfe:	466a      	mov	r2, sp
 8014d00:	f000 f848 	bl	8014d94 <_fstat_r>
 8014d04:	2800      	cmp	r0, #0
 8014d06:	dbec      	blt.n	8014ce2 <__swhatbuf_r+0x12>
 8014d08:	9901      	ldr	r1, [sp, #4]
 8014d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014d12:	4259      	negs	r1, r3
 8014d14:	4159      	adcs	r1, r3
 8014d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014d1a:	e7eb      	b.n	8014cf4 <__swhatbuf_r+0x24>

08014d1c <__smakebuf_r>:
 8014d1c:	898b      	ldrh	r3, [r1, #12]
 8014d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d20:	079d      	lsls	r5, r3, #30
 8014d22:	4606      	mov	r6, r0
 8014d24:	460c      	mov	r4, r1
 8014d26:	d507      	bpl.n	8014d38 <__smakebuf_r+0x1c>
 8014d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	6123      	str	r3, [r4, #16]
 8014d30:	2301      	movs	r3, #1
 8014d32:	6163      	str	r3, [r4, #20]
 8014d34:	b003      	add	sp, #12
 8014d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d38:	ab01      	add	r3, sp, #4
 8014d3a:	466a      	mov	r2, sp
 8014d3c:	f7ff ffc8 	bl	8014cd0 <__swhatbuf_r>
 8014d40:	9f00      	ldr	r7, [sp, #0]
 8014d42:	4605      	mov	r5, r0
 8014d44:	4639      	mov	r1, r7
 8014d46:	4630      	mov	r0, r6
 8014d48:	f7ff fbae 	bl	80144a8 <_malloc_r>
 8014d4c:	b948      	cbnz	r0, 8014d62 <__smakebuf_r+0x46>
 8014d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d52:	059a      	lsls	r2, r3, #22
 8014d54:	d4ee      	bmi.n	8014d34 <__smakebuf_r+0x18>
 8014d56:	f023 0303 	bic.w	r3, r3, #3
 8014d5a:	f043 0302 	orr.w	r3, r3, #2
 8014d5e:	81a3      	strh	r3, [r4, #12]
 8014d60:	e7e2      	b.n	8014d28 <__smakebuf_r+0xc>
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	6020      	str	r0, [r4, #0]
 8014d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d6a:	81a3      	strh	r3, [r4, #12]
 8014d6c:	9b01      	ldr	r3, [sp, #4]
 8014d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d72:	b15b      	cbz	r3, 8014d8c <__smakebuf_r+0x70>
 8014d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f000 f81d 	bl	8014db8 <_isatty_r>
 8014d7e:	b128      	cbz	r0, 8014d8c <__smakebuf_r+0x70>
 8014d80:	89a3      	ldrh	r3, [r4, #12]
 8014d82:	f023 0303 	bic.w	r3, r3, #3
 8014d86:	f043 0301 	orr.w	r3, r3, #1
 8014d8a:	81a3      	strh	r3, [r4, #12]
 8014d8c:	89a3      	ldrh	r3, [r4, #12]
 8014d8e:	431d      	orrs	r5, r3
 8014d90:	81a5      	strh	r5, [r4, #12]
 8014d92:	e7cf      	b.n	8014d34 <__smakebuf_r+0x18>

08014d94 <_fstat_r>:
 8014d94:	b538      	push	{r3, r4, r5, lr}
 8014d96:	4d07      	ldr	r5, [pc, #28]	@ (8014db4 <_fstat_r+0x20>)
 8014d98:	2300      	movs	r3, #0
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	4608      	mov	r0, r1
 8014d9e:	4611      	mov	r1, r2
 8014da0:	602b      	str	r3, [r5, #0]
 8014da2:	f7ed fb06 	bl	80023b2 <_fstat>
 8014da6:	1c43      	adds	r3, r0, #1
 8014da8:	d102      	bne.n	8014db0 <_fstat_r+0x1c>
 8014daa:	682b      	ldr	r3, [r5, #0]
 8014dac:	b103      	cbz	r3, 8014db0 <_fstat_r+0x1c>
 8014dae:	6023      	str	r3, [r4, #0]
 8014db0:	bd38      	pop	{r3, r4, r5, pc}
 8014db2:	bf00      	nop
 8014db4:	200097a0 	.word	0x200097a0

08014db8 <_isatty_r>:
 8014db8:	b538      	push	{r3, r4, r5, lr}
 8014dba:	4d06      	ldr	r5, [pc, #24]	@ (8014dd4 <_isatty_r+0x1c>)
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	4604      	mov	r4, r0
 8014dc0:	4608      	mov	r0, r1
 8014dc2:	602b      	str	r3, [r5, #0]
 8014dc4:	f7ed fb05 	bl	80023d2 <_isatty>
 8014dc8:	1c43      	adds	r3, r0, #1
 8014dca:	d102      	bne.n	8014dd2 <_isatty_r+0x1a>
 8014dcc:	682b      	ldr	r3, [r5, #0]
 8014dce:	b103      	cbz	r3, 8014dd2 <_isatty_r+0x1a>
 8014dd0:	6023      	str	r3, [r4, #0]
 8014dd2:	bd38      	pop	{r3, r4, r5, pc}
 8014dd4:	200097a0 	.word	0x200097a0

08014dd8 <_init>:
 8014dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dda:	bf00      	nop
 8014ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dde:	bc08      	pop	{r3}
 8014de0:	469e      	mov	lr, r3
 8014de2:	4770      	bx	lr

08014de4 <_fini>:
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	bf00      	nop
 8014de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dea:	bc08      	pop	{r3}
 8014dec:	469e      	mov	lr, r3
 8014dee:	4770      	bx	lr
