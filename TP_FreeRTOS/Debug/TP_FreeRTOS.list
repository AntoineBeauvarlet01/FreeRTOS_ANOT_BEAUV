
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08014180  08014180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014228  08014228  000161c0  2**0
                  CONTENTS
  4 .ARM          00000008  08014228  08014228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014230  08014230  000161c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014230  08014230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014234  08014234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08014238  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  080142b8  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08014358  00016120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000095d4  200001c0  080143f8  000161c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20009794  080143f8  00016794  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040306  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a124  00000000  00000000  000564f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003388  00000000  00000000  00060620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000277e  00000000  00000000  000639a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a0c1  00000000  00000000  00066126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e9e2  00000000  00000000  000a01e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128e2e  00000000  00000000  000eebc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002179f7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d900  00000000  00000000  00217a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  0022533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014168 	.word	0x08014168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08014168 	.word	0x08014168

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC3_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC3_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC3_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC3_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC3_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC3_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC3_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000562:	f002 fc05 	bl	8002d70 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800056c:	f001 f958 	bl	8001820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000570:	2304      	movs	r3, #4
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000582:	f002 fc39 	bl	8002df8 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800058c:	f001 f948 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001dc 	.word	0x200001dc
 800059c:	40012200 	.word	0x40012200
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x74>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d124      	bne.n	8000610 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80005f6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80005fa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <HAL_ADC_MspInit+0x7c>)
 800060c:	f003 fef8 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40012200 	.word	0x40012200
 800061c:	40023800 	.word	0x40023800
 8000620:	40021400 	.word	0x40021400

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f002 ff05 	bl	800345c <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f001 f8e2 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000224 	.word	0x20000224
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_DCMI_Init+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f6:	f002 ffa3 	bl	8003640 <HAL_DCMI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000700:	f001 f88e 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000248 	.word	0x20000248
 800070c:	50050000 	.word	0x50050000

08000710 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	@ 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a50      	ldr	r2, [pc, #320]	@ (8000870 <HAL_DCMI_MspInit+0x160>)
 800072e:	4293      	cmp	r3, r2
 8000730:	f040 809a 	bne.w	8000868 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000734:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000738:	4a4e      	ldr	r2, [pc, #312]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000740:	4b4c      	ldr	r3, [pc, #304]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a48      	ldr	r2, [pc, #288]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
 8000758:	4b46      	ldr	r3, [pc, #280]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000770:	4b40      	ldr	r3, [pc, #256]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
 8000788:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800079a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a0:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d4:	230d      	movs	r3, #13
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	@ (8000878 <HAL_DCMI_MspInit+0x168>)
 80007e0:	f003 fe0e 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80007e4:	2308      	movs	r3, #8
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f4:	230d      	movs	r3, #13
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	@ (800087c <HAL_DCMI_MspInit+0x16c>)
 8000800:	f003 fdfe 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000816:	230d      	movs	r3, #13
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <HAL_DCMI_MspInit+0x170>)
 8000822:	f003 fded 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000826:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <HAL_DCMI_MspInit+0x174>)
 8000844:	f003 fddc 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000848:	2350      	movs	r3, #80	@ 0x50
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000858:	230d      	movs	r3, #13
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_DCMI_MspInit+0x178>)
 8000864:	f003 fdcc 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3738      	adds	r7, #56	@ 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	50050000 	.word	0x50050000
 8000874:	40023800 	.word	0x40023800
 8000878:	40021000 	.word	0x40021000
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021800 	.word	0x40021800
 8000884:	40021c00 	.word	0x40021c00
 8000888:	40020000 	.word	0x40020000

0800088c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <MX_DMA2D_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008c2:	f003 f863 	bl	800398c <HAL_DMA2D_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008cc:	f000 ffa8 	bl	8001820 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d0:	2101      	movs	r1, #1
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008d4:	f003 f9b4 	bl	8003c40 <HAL_DMA2D_ConfigLayer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 ff9f 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000298 	.word	0x20000298
 80008ec:	4002b000 	.word	0x4002b000

080008f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_DMA2D_MspInit+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	205a      	movs	r0, #90	@ 0x5a
 8000920:	f002 fd72 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000924:	205a      	movs	r0, #90	@ 0x5a
 8000926:	f002 fd8b 	bl	8003440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	4002b000 	.word	0x4002b000
 8000938:	40023800 	.word	0x40023800

0800093c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <MX_ETH_Init+0x88>)
 8000944:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000954:	22e1      	movs	r2, #225	@ 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_ETH_Init+0x84>)
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800096e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000976:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_ETH_Init+0x84>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_ETH_Init+0x90>)
 800097c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <MX_ETH_Init+0x94>)
 8000982:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000986:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800098a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x84>)
 800098e:	f003 f9e9 	bl	8003d64 <HAL_ETH_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 ff42 	bl	8001820 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a2:	f013 fb45 	bl	8014030 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a8:	2221      	movs	r2, #33	@ 0x21
 80009aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000310 	.word	0x20000310
 80009c4:	40028000 	.word	0x40028000
 80009c8:	200003c0 	.word	0x200003c0
 80009cc:	20000120 	.word	0x20000120
 80009d0:	20000080 	.word	0x20000080
 80009d4:	200002d8 	.word	0x200002d8

080009d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <HAL_ETH_MspInit+0x11c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d178      	bne.n	8000aec <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009fa:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3e      	ldr	r2, [pc, #248]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a8a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <HAL_ETH_MspInit+0x124>)
 8000aa8:	f003 fcaa 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aac:	2332      	movs	r3, #50	@ 0x32
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <HAL_ETH_MspInit+0x128>)
 8000ac8:	f003 fc9a 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000acc:	2386      	movs	r3, #134	@ 0x86
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_ETH_MspInit+0x12c>)
 8000ae8:	f003 fc8a 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40028000 	.word	0x40028000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <MX_FMC_Init+0x9c>)
 8000b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b8a:	f009 fd08 	bl	800a59e <HAL_SDRAM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b94:	f000 fe44 	bl	8001820 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003c8 	.word	0x200003c8
 8000ba4:	a0000140 	.word	0xa0000140

08000ba8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d16d      	bne.n	8000ca0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bce:	4a37      	ldr	r2, [pc, #220]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000be2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000be6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482c      	ldr	r0, [pc, #176]	@ (8000cb0 <HAL_FMC_MspInit+0x108>)
 8000bfe:	f003 fbff 	bl	8004400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <HAL_FMC_MspInit+0x10c>)
 8000c1e:	f003 fbef 	bl	8004400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <HAL_FMC_MspInit+0x110>)
 8000c3e:	f003 fbdf 	bl	8004400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_FMC_MspInit+0x114>)
 8000c5e:	f003 fbcf 	bl	8004400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	@ 0x28
 8000c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_FMC_MspInit+0x118>)
 8000c7c:	f003 fbc0 	bl	8004400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c80:	2308      	movs	r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c90:	230c      	movs	r3, #12
 8000c92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <HAL_FMC_MspInit+0x11c>)
 8000c9a:	f003 fbb1 	bl	8004400 <HAL_GPIO_Init>
 8000c9e:	e000      	b.n	8000ca2 <HAL_FMC_MspInit+0xfa>
    return;
 8000ca0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200003fc 	.word	0x200003fc
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021400 	.word	0x40021400
 8000cc0:	40021c00 	.word	0x40021c00
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cd0:	f7ff ff6a 	bl	8000ba8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <vApplicationGetIdleTaskMemory+0x30>)
 8000d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000404 	.word	0x20000404
 8000d40:	2000045c 	.word	0x2000045c

08000d44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_FREERTOS_Init+0x30>)
 8000d4c:	1d3c      	adds	r4, r7, #4
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f010 fab7 	bl	80112d4 <osThreadCreate>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <MX_FREERTOS_Init+0x34>)
 8000d6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	0801418c 	.word	0x0801418c
 8000d78:	20000400 	.word	0x20000400

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d84:	f012 fd9e 	bl	80138c4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f010 faef 	bl	801136c <osDelay>
 8000d8e:	e7fb      	b.n	8000d88 <StartDefaultTask+0xc>

08000d90 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	@ 0x40
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4aaf      	ldr	r2, [pc, #700]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4bad      	ldr	r3, [pc, #692]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	4baa      	ldr	r3, [pc, #680]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4aa9      	ldr	r2, [pc, #676]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4ba7      	ldr	r3, [pc, #668]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4aa3      	ldr	r2, [pc, #652]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4ba1      	ldr	r3, [pc, #644]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b9e      	ldr	r3, [pc, #632]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a9d      	ldr	r2, [pc, #628]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b98      	ldr	r3, [pc, #608]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a97      	ldr	r2, [pc, #604]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b95      	ldr	r3, [pc, #596]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b92      	ldr	r3, [pc, #584]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e36:	4b8c      	ldr	r3, [pc, #560]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4e:	4b86      	ldr	r3, [pc, #536]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a85      	ldr	r2, [pc, #532]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b83      	ldr	r3, [pc, #524]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e66:	4b80      	ldr	r3, [pc, #512]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b7d      	ldr	r3, [pc, #500]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a79      	ldr	r2, [pc, #484]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b77      	ldr	r3, [pc, #476]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a73      	ldr	r2, [pc, #460]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b71      	ldr	r3, [pc, #452]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	486e      	ldr	r0, [pc, #440]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000eb4:	f003 fc68 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	210e      	movs	r1, #14
 8000ebc:	486c      	ldr	r0, [pc, #432]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ebe:	f003 fc63 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	486b      	ldr	r0, [pc, #428]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000ec8:	f003 fc5e 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed2:	4867      	ldr	r0, [pc, #412]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ed4:	f003 fc58 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ede:	4866      	ldr	r0, [pc, #408]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ee0:	f003 fc52 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21c8      	movs	r1, #200	@ 0xc8
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <MX_GPIO_Init+0x2ec>)
 8000eea:	f003 fc4d 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	485f      	ldr	r0, [pc, #380]	@ (8001080 <MX_GPIO_Init+0x2f0>)
 8000f02:	f003 fa7d 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f06:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4858      	ldr	r0, [pc, #352]	@ (8001084 <MX_GPIO_Init+0x2f4>)
 8000f24:	f003 fa6c 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4852      	ldr	r0, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x2f8>)
 8000f3e:	f003 fa5f 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f58:	f003 fa52 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	483e      	ldr	r0, [pc, #248]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f74:	f003 fa44 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000f78:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000f92:	f003 fa35 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4838      	ldr	r0, [pc, #224]	@ (800108c <MX_GPIO_Init+0x2fc>)
 8000fac:	f003 fa28 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482b      	ldr	r0, [pc, #172]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f003 fa1a 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4823      	ldr	r0, [pc, #140]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000fe0:	f003 fa0e 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f003 fa01 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8001018:	f003 f9f2 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8001032:	f003 f9e5 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800103c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 800104e:	f003 f9d7 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x300>
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40022000 	.word	0x40022000
 8001074:	40022800 	.word	0x40022800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40021800 	.word	0x40021800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020400 	.word	0x40020400
 8001088:	40022400 	.word	0x40022400
 800108c:	40020800 	.word	0x40020800
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <MX_GPIO_Init+0x3ac>)
 800109a:	f003 f9b1 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800109e:	23c8      	movs	r3, #200	@ 0xc8
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4822      	ldr	r0, [pc, #136]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010b6:	f003 f9a3 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010ba:	2305      	movs	r3, #5
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ca:	230a      	movs	r3, #10
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <MX_GPIO_Init+0x3b4>)
 80010d6:	f003 f993 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010ee:	f003 f987 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010f2:	2328      	movs	r3, #40	@ 0x28
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001102:	230a      	movs	r3, #10
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_GPIO_Init+0x3b8>)
 800110e:	f003 f977 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001112:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001124:	2305      	movs	r3, #5
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_GPIO_Init+0x3bc>)
 8001130:	f003 f966 	bl	8004400 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	@ 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40021800 	.word	0x40021800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C1_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f005 fc30 	bl	80069f0 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fb43 	bl	8001820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f005 fcc3 	bl	8006b28 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb3a 	bl	8001820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f005 fd05 	bl	8006bbe <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fb31 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000065c 	.word	0x2000065c
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_I2C3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <MX_I2C3_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_I2C3_Init+0x74>)
 800120c:	f005 fbf0 	bl	80069f0 <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fb03 	bl	8001820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <MX_I2C3_Init+0x74>)
 800121e:	f005 fc83 	bl	8006b28 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 fafa 	bl	8001820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001230:	f005 fcc5 	bl	8006bbe <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 faf1 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200006b0 	.word	0x200006b0
 8001248:	40005c00 	.word	0x40005c00
 800124c:	00c0eaff 	.word	0x00c0eaff

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	@ 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f012 fedd 	bl	8014030 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a44      	ldr	r2, [pc, #272]	@ (800138c <HAL_I2C_MspInit+0x13c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13d      	bne.n	80012fc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fe2a 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129a:	f000 fac1 	bl	8001820 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80012b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012da:	4619      	mov	r1, r3
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <HAL_I2C_MspInit+0x144>)
 80012de:	f003 f88f 	bl	8004400 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012fa:	e042      	b.n	8001382 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_I2C_MspInit+0x148>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d13d      	bne.n	8001382 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f006 fde6 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001322:	f000 fa7d 	bl	8001820 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800133e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <HAL_I2C_MspInit+0x14c>)
 8001366:	f003 f84b 	bl	8004400 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	@ 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40005c00 	.word	0x40005c00
 800139c:	40021c00 	.word	0x40021c00

080013a0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2234      	movs	r2, #52	@ 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f012 fe3f 	bl	8014030 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013b4:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <MX_LTDC_Init+0x100>)
 80013b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013b8:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d2:	2228      	movs	r2, #40	@ 0x28
 80013d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d8:	2209      	movs	r2, #9
 80013da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013de:	2235      	movs	r2, #53	@ 0x35
 80013e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ea:	f240 2215 	movw	r2, #533	@ 0x215
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013f2:	f240 121b 	movw	r2, #283	@ 0x11b
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013fa:	f240 2235 	movw	r2, #565	@ 0x235
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001402:	f240 121d 	movw	r2, #285	@ 0x11d
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_LTDC_Init+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_LTDC_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001420:	481e      	ldr	r0, [pc, #120]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001422:	f005 fc19 	bl	8006c58 <HAL_LTDC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 f9f8 	bl	8001820 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001434:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001438:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800143e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001442:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001448:	23ff      	movs	r3, #255	@ 0xff
 800144a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001450:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001454:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800145a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001460:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001466:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001486:	f005 fd79 	bl	8006f7c <HAL_LTDC_ConfigLayer>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001490:	f000 f9c6 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000704 	.word	0x20000704
 80014a0:	40016800 	.word	0x40016800

080014a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <HAL_LTDC_MspInit+0x174>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 80a3 	bne.w	800160e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c8:	4b54      	ldr	r3, [pc, #336]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	4a53      	ldr	r2, [pc, #332]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001510:	4b42      	ldr	r3, [pc, #264]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a41      	ldr	r2, [pc, #260]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	6313      	str	r3, [r2, #48]	@ 0x30
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a35      	ldr	r2, [pc, #212]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b33      	ldr	r3, [pc, #204]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001558:	2310      	movs	r3, #16
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001568:	230e      	movs	r3, #14
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <HAL_LTDC_MspInit+0x17c>)
 8001574:	f002 ff44 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001578:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800158a:	230e      	movs	r3, #14
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <HAL_LTDC_MspInit+0x180>)
 8001596:	f002 ff33 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800159a:	23f7      	movs	r3, #247	@ 0xf7
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015aa:	230e      	movs	r3, #14
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	@ (8001628 <HAL_LTDC_MspInit+0x184>)
 80015b6:	f002 ff23 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015cc:	2309      	movs	r3, #9
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <HAL_LTDC_MspInit+0x188>)
 80015d8:	f002 ff12 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015dc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ee:	230e      	movs	r3, #14
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <HAL_LTDC_MspInit+0x18c>)
 80015fa:	f002 ff01 	bl	8004400 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2058      	movs	r0, #88	@ 0x58
 8001604:	f001 ff00 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001608:	2058      	movs	r0, #88	@ 0x58
 800160a:	f001 ff19 	bl	8003440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	@ 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40016800 	.word	0x40016800
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40022400 	.word	0x40022400
 8001628:	40022800 	.word	0x40022800
 800162c:	40021800 	.word	0x40021800
 8001630:	40022000 	.word	0x40022000

08001634 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001638:	f001 fb49 	bl	8002cce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800163c:	f000 f83a 	bl	80016b4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001640:	f000 f8aa 	bl	8001798 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001644:	f7ff fba4 	bl	8000d90 <MX_GPIO_Init>
	MX_ADC3_Init();
 8001648:	f7fe ff5a 	bl	8000500 <MX_ADC3_Init>
	MX_CRC_Init();
 800164c:	f7fe ffea 	bl	8000624 <MX_CRC_Init>
	MX_DCMI_Init();
 8001650:	f7ff f82a 	bl	80006a8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001654:	f7ff f91a 	bl	800088c <MX_DMA2D_Init>
	MX_ETH_Init();
 8001658:	f7ff f970 	bl	800093c <MX_ETH_Init>
	MX_FMC_Init();
 800165c:	f7ff fa54 	bl	8000b08 <MX_FMC_Init>
	MX_I2C1_Init();
 8001660:	f7ff fd76 	bl	8001150 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001664:	f7ff fdb4 	bl	80011d0 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001668:	f7ff fe9a 	bl	80013a0 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800166c:	f000 f8de 	bl	800182c <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001670:	f000 f998 	bl	80019a4 <MX_RTC_Init>
	MX_SAI2_Init();
 8001674:	f000 fa68 	bl	8001b48 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001678:	f000 fb78 	bl	8001d6c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 800167c:	f000 fbfa 	bl	8001e74 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8001680:	f000 fdc4 	bl	800220c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001684:	f000 fe6e 	bl	8002364 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001688:	f000 fee2 	bl	8002450 <MX_TIM3_Init>
	MX_TIM5_Init();
 800168c:	f000 ff58 	bl	8002540 <MX_TIM5_Init>
	MX_TIM8_Init();
 8001690:	f000 ffce 	bl	8002630 <MX_TIM8_Init>
	MX_TIM12_Init();
 8001694:	f001 f820 	bl	80026d8 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8001698:	f001 f9c0 	bl	8002a1c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800169c:	f001 f9ee 	bl	8002a7c <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80016a0:	f00d f842 	bl	800e728 <MX_FATFS_Init>
	//	Error_Handler();
	//}

	//xTaskCreate(task_led_bouton, "Task LED Bouton", TASK_LED_BOUTON_STACK_DEPTH, NULL, TASK_LED_BOUTON_PRIORITY, NULL);

	vTaskStartScheduler(); // Appelle l'OS (avec une fonction freertos)
 80016a4:	f010 ff6c 	bl	8012580 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80016a8:	f7ff fb4c 	bl	8000d44 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80016ac:	f00f fdef 	bl	801128e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <main+0x7c>

080016b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	@ 0x50
 80016b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2230      	movs	r2, #48	@ 0x30
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f012 fcb4 	bl	8014030 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80016d8:	f005 fe28 	bl	800732c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <SystemClock_Config+0xdc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001790 <SystemClock_Config+0xdc>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e8:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <SystemClock_Config+0xdc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <SystemClock_Config+0xe0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <SystemClock_Config+0xe0>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <SystemClock_Config+0xe0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800170c:	2309      	movs	r3, #9
 800170e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001722:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001724:	2319      	movs	r3, #25
 8001726:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001728:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001732:	2309      	movs	r3, #9
 8001734:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4618      	mov	r0, r3
 800173c:	f005 ff18 	bl	8007570 <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001746:	f000 f86b 	bl	8001820 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800174a:	f005 fdff 	bl	800734c <HAL_PWREx_EnableOverDrive>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001754:	f000 f864 	bl	8001820 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001768:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2106      	movs	r1, #6
 8001776:	4618      	mov	r0, r3
 8001778:	f006 f99e 	bl	8007ab8 <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8001782:	f000 f84d 	bl	8001820 <Error_Handler>
	}
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	@ 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0a2      	sub	sp, #136	@ 0x88
 800179c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2284      	movs	r2, #132	@ 0x84
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f012 fc43 	bl	8014030 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <PeriphCommonClock_Config+0x60>)
 80017ac:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017b2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017b4:	2305      	movs	r3, #5
 80017b6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017bc:	2303      	movs	r3, #3
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80017ca:	2300      	movs	r3, #0
 80017cc:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80017d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fb82 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 80017ea:	f000 f819 	bl	8001820 <Error_Handler>
	}
}
 80017ee:	bf00      	nop
 80017f0:	3788      	adds	r7, #136	@ 0x88
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	00b00008 	.word	0x00b00008

080017fc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800180e:	f001 fa6b 	bl	8002ce8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40001000 	.word	0x40001000

08001820 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <Error_Handler+0x8>

0800182c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001832:	4a13      	ldr	r2, [pc, #76]	@ (8001880 <MX_QUADSPI_Init+0x54>)
 8001834:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001838:	2201      	movs	r2, #1
 800183a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_QUADSPI_Init+0x50>)
 800183e:	2204      	movs	r2, #4
 8001840:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001844:	2210      	movs	r2, #16
 8001846:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <MX_QUADSPI_Init+0x50>)
 800184a:	2218      	movs	r2, #24
 800184c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001850:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001854:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800185c:	4b07      	ldr	r3, [pc, #28]	@ (800187c <MX_QUADSPI_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <MX_QUADSPI_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_QUADSPI_Init+0x50>)
 800186a:	f005 fdbf 	bl	80073ec <HAL_QSPI_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001874:	f7ff ffd4 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200007ac 	.word	0x200007ac
 8001880:	a0001000 	.word	0xa0001000

08001884 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	@ 0x30
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001990 <HAL_QSPI_MspInit+0x10c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d170      	bne.n	8001988 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80018b2:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	4b35      	ldr	r3, [pc, #212]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a34      	ldr	r2, [pc, #208]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a2e      	ldr	r2, [pc, #184]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a28      	ldr	r2, [pc, #160]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_QSPI_MspInit+0x110>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001906:	2304      	movs	r3, #4
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001916:	2309      	movs	r3, #9
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481d      	ldr	r0, [pc, #116]	@ (8001998 <HAL_QSPI_MspInit+0x114>)
 8001922:	f002 fd6d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001926:	2340      	movs	r3, #64	@ 0x40
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001936:	230a      	movs	r3, #10
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4816      	ldr	r0, [pc, #88]	@ (800199c <HAL_QSPI_MspInit+0x118>)
 8001942:	f002 fd5d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001946:	2304      	movs	r3, #4
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001956:	2309      	movs	r3, #9
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	480e      	ldr	r0, [pc, #56]	@ (800199c <HAL_QSPI_MspInit+0x118>)
 8001962:	f002 fd4d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001966:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001978:	2309      	movs	r3, #9
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <HAL_QSPI_MspInit+0x11c>)
 8001984:	f002 fd3c 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	@ 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	a0001000 	.word	0xa0001000
 8001994:	40023800 	.word	0x40023800
 8001998:	40021000 	.word	0x40021000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020c00 	.word	0x40020c00

080019a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80019be:	463b      	mov	r3, r7
 80019c0:	2228      	movs	r2, #40	@ 0x28
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f012 fb33 	bl	8014030 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ca:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019cc:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <MX_RTC_Init+0x144>)
 80019ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019d0:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019d8:	227f      	movs	r2, #127	@ 0x7f
 80019da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019dc:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019de:	22ff      	movs	r2, #255	@ 0xff
 80019e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019e2:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019e8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019f4:	483b      	ldr	r0, [pc, #236]	@ (8001ae4 <MX_RTC_Init+0x140>)
 80019f6:	f006 ffa7 	bl	8008948 <HAL_RTC_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a00:	f7ff ff0e 	bl	8001820 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	482f      	ldr	r0, [pc, #188]	@ (8001ae4 <MX_RTC_Init+0x140>)
 8001a28:	f007 f812 	bl	8008a50 <HAL_RTC_SetTime>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a32:	f7ff fef5 	bl	8001820 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a52:	2201      	movs	r2, #1
 8001a54:	4619      	mov	r1, r3
 8001a56:	4823      	ldr	r0, [pc, #140]	@ (8001ae4 <MX_RTC_Init+0x140>)
 8001a58:	f007 f894 	bl	8008b84 <HAL_RTC_SetDate>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001a62:	f7ff fedd 	bl	8001820 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4811      	ldr	r0, [pc, #68]	@ (8001ae4 <MX_RTC_Init+0x140>)
 8001a9e:	f007 f8f5 	bl	8008c8c <HAL_RTC_SetAlarm>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001aa8:	f7ff feba 	bl	8001820 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <MX_RTC_Init+0x140>)
 8001aba:	f007 f8e7 	bl	8008c8c <HAL_RTC_SetAlarm>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001ac4:	f7ff feac 	bl	8001820 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	2100      	movs	r1, #0
 8001acc:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_RTC_Init+0x140>)
 8001ace:	f007 faa7 	bl	8009020 <HAL_RTCEx_SetTimeStamp>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001ad8:	f7ff fea2 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3740      	adds	r7, #64	@ 0x40
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200007f8 	.word	0x200007f8
 8001ae8:	40002800 	.word	0x40002800

08001aec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0a4      	sub	sp, #144	@ 0x90
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2284      	movs	r2, #132	@ 0x84
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 fa97 	bl	8014030 <memset>
  if(rtcHandle->Instance==RTC)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_RTC_MspInit+0x54>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d114      	bne.n	8001b36 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 f9e4 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001b26:	f7ff fe7b 	bl	8001820 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_RTC_MspInit+0x58>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_RTC_MspInit+0x58>)
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b34:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3790      	adds	r7, #144	@ 0x90
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40002800 	.word	0x40002800
 8001b44:	40023800 	.word	0x40023800

08001b48 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <MX_SAI2_Init+0x140>)
 8001b50:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b52:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b58:	4b4a      	ldr	r3, [pc, #296]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b60:	2240      	movs	r2, #64	@ 0x40
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b70:	4b44      	ldr	r3, [pc, #272]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b7c:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b82:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b88:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b8a:	4a40      	ldr	r2, [pc, #256]	@ (8001c8c <MX_SAI2_Init+0x144>)
 8001b8c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b94:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ba0:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001ba8:	2208      	movs	r2, #8
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001bac:	4b35      	ldr	r3, [pc, #212]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bb2:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bbe:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bdc:	4829      	ldr	r0, [pc, #164]	@ (8001c84 <MX_SAI2_Init+0x13c>)
 8001bde:	f007 fa87 	bl	80090f0 <HAL_SAI_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001be8:	f7ff fe1a 	bl	8001820 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001bec:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001bee:	4a29      	ldr	r2, [pc, #164]	@ (8001c94 <MX_SAI2_Init+0x14c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c00:	2240      	movs	r2, #64	@ 0x40
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_SAI2_Init+0x148>)
 8001c72:	f007 fa3d 	bl	80090f0 <HAL_SAI_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c7c:	f7ff fdd0 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000818 	.word	0x20000818
 8001c88:	40015c04 	.word	0x40015c04
 8001c8c:	0002ee00 	.word	0x0002ee00
 8001c90:	2000089c 	.word	0x2000089c
 8001c94:	40015c24 	.word	0x40015c24

08001c98 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d54 <HAL_SAI_MspInit+0xbc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d124      	bne.n	8001cf4 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001caa:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10b      	bne.n	8001cca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001cb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001cca:	4b23      	ldr	r3, [pc, #140]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a21      	ldr	r2, [pc, #132]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001cd2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001cd4:	23f0      	movs	r3, #240	@ 0xf0
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	481c      	ldr	r0, [pc, #112]	@ (8001d60 <HAL_SAI_MspInit+0xc8>)
 8001cf0:	f002 fb86 	bl	8004400 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <HAL_SAI_MspInit+0xcc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d125      	bne.n	8001d4a <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10b      	bne.n	8001d1e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_SAI_MspInit+0xc4>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <HAL_SAI_MspInit+0xc0>)
 8001d26:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <HAL_SAI_MspInit+0xd0>)
 8001d46:	f002 fb5b 	bl	8004400 <HAL_GPIO_Init>

    }
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40015c04 	.word	0x40015c04
 8001d58:	20000920 	.word	0x20000920
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40015c24 	.word	0x40015c24
 8001d68:	40021800 	.word	0x40021800

08001d6c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <MX_SDMMC1_SD_Init+0x40>)
 8001d74:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <MX_SDMMC1_SD_Init+0x3c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000924 	.word	0x20000924
 8001dac:	40012c00 	.word	0x40012c00

08001db0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	@ (8001e64 <HAL_SD_MspInit+0xb4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d144      	bne.n	8001e5c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a18      	ldr	r2, [pc, #96]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <HAL_SD_MspInit+0xb8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e1a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e1e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <HAL_SD_MspInit+0xbc>)
 8001e38:	f002 fae2 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <HAL_SD_MspInit+0xc0>)
 8001e58:	f002 fad2 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	@ 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00

08001e74 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e7a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001e7e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_SPDIFRX_Init+0x5c>)
 8001ebe:	f008 fba3 	bl	800a608 <HAL_SPDIFRX_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001ec8:	f7ff fcaa 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200009a8 	.word	0x200009a8

08001ed4 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0aa      	sub	sp, #168	@ 0xa8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	2284      	movs	r2, #132	@ 0x84
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f012 f89b 	bl	8014030 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001f02:	d143      	bne.n	8001f8c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f0a:	2364      	movs	r3, #100	@ 0x64
 8001f0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 ffe0 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f2e:	f7ff fc77 	bl	8001820 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f84:	4619      	mov	r1, r3
 8001f86:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <HAL_SPDIFRX_MspInit+0xc4>)
 8001f88:	f002 fa3a 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	37a8      	adds	r7, #168	@ 0xa8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f001 fa15 	bl	8003408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	@ 0x38
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ffc:	4b33      	ldr	r3, [pc, #204]	@ (80020cc <HAL_InitTick+0xe0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_InitTick+0xe0>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6413      	str	r3, [r2, #64]	@ 0x40
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_InitTick+0xe0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f005 ff30 	bl	8007e84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800202e:	f005 ff01 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 8002032:	6378      	str	r0, [r7, #52]	@ 0x34
 8002034:	e004      	b.n	8002040 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002036:	f005 fefd 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800203a:	4603      	mov	r3, r0
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002042:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <HAL_InitTick+0xe4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	3b01      	subs	r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800204e:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_InitTick+0xe8>)
 8002050:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <HAL_InitTick+0xec>)
 8002052:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002054:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <HAL_InitTick+0xe8>)
 8002056:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800205a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_InitTick+0xe8>)
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_InitTick+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_InitTick+0xe8>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_InitTick+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002074:	4817      	ldr	r0, [pc, #92]	@ (80020d4 <HAL_InitTick+0xe8>)
 8002076:	f008 fb23 	bl	800a6c0 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11b      	bne.n	80020c0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002088:	4812      	ldr	r0, [pc, #72]	@ (80020d4 <HAL_InitTick+0xe8>)
 800208a:	f008 fb71 	bl	800a770 <HAL_TIM_Base_Start_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800209c:	2036      	movs	r0, #54	@ 0x36
 800209e:	f001 f9cf 	bl	8003440 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d808      	bhi.n	80020ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	2036      	movs	r0, #54	@ 0x36
 80020ae:	f001 f9ab 	bl	8003408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_InitTick+0xf0>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e002      	b.n	80020c0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3738      	adds	r7, #56	@ 0x38
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	200009f4 	.word	0x200009f4
 80020d8:	40001000 	.word	0x40001000
 80020dc:	20000004 	.word	0x20000004

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <NMI_Handler+0x4>

080020e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <MemManage_Handler+0x4>

080020f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <UsageFault_Handler+0x4>

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <USART1_IRQHandler+0x10>)
 800211e:	f009 fc1f 	bl	800b960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000c0c 	.word	0x20000c0c

0800212c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM6_DAC_IRQHandler+0x10>)
 8002132:	f008 fbec 	bl	800a90e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200009f4 	.word	0x200009f4

08002140 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <OTG_FS_IRQHandler+0x10>)
 8002146:	f002 fe19 	bl	8004d7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000926c 	.word	0x2000926c

08002154 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <LTDC_IRQHandler+0x10>)
 800215a:	f004 fe4d 	bl	8006df8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000704 	.word	0x20000704

08002168 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <DMA2D_IRQHandler+0x10>)
 800216e:	f001 fc57 	bl	8003a20 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000298 	.word	0x20000298

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f011 ff58 	bl	8014060 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20050000 	.word	0x20050000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	20000a40 	.word	0x20000a40
 80021e4:	20009798 	.word	0x20009798

080021e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <SystemInit+0x20>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <SystemInit+0x20>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09a      	sub	sp, #104	@ 0x68
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	615a      	str	r2, [r3, #20]
 800223e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	222c      	movs	r2, #44	@ 0x2c
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f011 fef2 	bl	8014030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800224c:	4b43      	ldr	r3, [pc, #268]	@ (800235c <MX_TIM1_Init+0x150>)
 800224e:	4a44      	ldr	r2, [pc, #272]	@ (8002360 <MX_TIM1_Init+0x154>)
 8002250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <MX_TIM1_Init+0x150>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b40      	ldr	r3, [pc, #256]	@ (800235c <MX_TIM1_Init+0x150>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800225e:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <MX_TIM1_Init+0x150>)
 8002260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <MX_TIM1_Init+0x150>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <MX_TIM1_Init+0x150>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <MX_TIM1_Init+0x150>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002278:	4838      	ldr	r0, [pc, #224]	@ (800235c <MX_TIM1_Init+0x150>)
 800227a:	f008 fa21 	bl	800a6c0 <HAL_TIM_Base_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002284:	f7ff facc 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800228e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002292:	4619      	mov	r1, r3
 8002294:	4831      	ldr	r0, [pc, #196]	@ (800235c <MX_TIM1_Init+0x150>)
 8002296:	f008 fd55 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022a0:	f7ff fabe 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022a4:	482d      	ldr	r0, [pc, #180]	@ (800235c <MX_TIM1_Init+0x150>)
 80022a6:	f008 fadb 	bl	800a860 <HAL_TIM_PWM_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80022b0:	f7ff fab6 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022c4:	4619      	mov	r1, r3
 80022c6:	4825      	ldr	r0, [pc, #148]	@ (800235c <MX_TIM1_Init+0x150>)
 80022c8:	f009 f9d2 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80022d2:	f7ff faa5 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d6:	2360      	movs	r3, #96	@ 0x60
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022de:	2300      	movs	r3, #0
 80022e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022f6:	2200      	movs	r2, #0
 80022f8:	4619      	mov	r1, r3
 80022fa:	4818      	ldr	r0, [pc, #96]	@ (800235c <MX_TIM1_Init+0x150>)
 80022fc:	f008 fc0e 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002306:	f7ff fa8b 	bl	8001820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800231e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800232c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	@ (800235c <MX_TIM1_Init+0x150>)
 8002340:	f009 fa24 	bl	800b78c <HAL_TIMEx_ConfigBreakDeadTime>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800234a:	f7ff fa69 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800234e:	4803      	ldr	r0, [pc, #12]	@ (800235c <MX_TIM1_Init+0x150>)
 8002350:	f000 fa96 	bl	8002880 <HAL_TIM_MspPostInit>

}
 8002354:	bf00      	nop
 8002356:	3768      	adds	r7, #104	@ 0x68
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000a44 	.word	0x20000a44
 8002360:	40010000 	.word	0x40010000

08002364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	@ 0x38
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002396:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <MX_TIM2_Init+0xe8>)
 8002398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800239c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800239e:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b29      	ldr	r3, [pc, #164]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023aa:	4b28      	ldr	r3, [pc, #160]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b2:	4b26      	ldr	r3, [pc, #152]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b24      	ldr	r3, [pc, #144]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023c0:	f008 f97e 	bl	800a6c0 <HAL_TIM_Base_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80023ca:	f7ff fa29 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023d8:	4619      	mov	r1, r3
 80023da:	481c      	ldr	r0, [pc, #112]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023dc:	f008 fcb2 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80023e6:	f7ff fa1b 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023ea:	4818      	ldr	r0, [pc, #96]	@ (800244c <MX_TIM2_Init+0xe8>)
 80023ec:	f008 fa38 	bl	800a860 <HAL_TIM_PWM_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023f6:	f7ff fa13 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	4810      	ldr	r0, [pc, #64]	@ (800244c <MX_TIM2_Init+0xe8>)
 800240a:	f009 f931 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002414:	f7ff fa04 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002418:	2360      	movs	r3, #96	@ 0x60
 800241a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002428:	463b      	mov	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	4807      	ldr	r0, [pc, #28]	@ (800244c <MX_TIM2_Init+0xe8>)
 8002430:	f008 fb74 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800243a:	f7ff f9f1 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800243e:	4803      	ldr	r0, [pc, #12]	@ (800244c <MX_TIM2_Init+0xe8>)
 8002440:	f000 fa1e 	bl	8002880 <HAL_TIM_MspPostInit>

}
 8002444:	bf00      	nop
 8002446:	3738      	adds	r7, #56	@ 0x38
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000a90 	.word	0x20000a90

08002450 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	@ 0x38
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <MX_TIM3_Init+0xe8>)
 8002484:	4a2d      	ldr	r2, [pc, #180]	@ (800253c <MX_TIM3_Init+0xec>)
 8002486:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <MX_TIM3_Init+0xe8>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <MX_TIM3_Init+0xe8>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <MX_TIM3_Init+0xe8>)
 8002496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800249a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <MX_TIM3_Init+0xe8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <MX_TIM3_Init+0xe8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024a8:	4823      	ldr	r0, [pc, #140]	@ (8002538 <MX_TIM3_Init+0xe8>)
 80024aa:	f008 f909 	bl	800a6c0 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80024b4:	f7ff f9b4 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024c2:	4619      	mov	r1, r3
 80024c4:	481c      	ldr	r0, [pc, #112]	@ (8002538 <MX_TIM3_Init+0xe8>)
 80024c6:	f008 fc3d 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80024d0:	f7ff f9a6 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024d4:	4818      	ldr	r0, [pc, #96]	@ (8002538 <MX_TIM3_Init+0xe8>)
 80024d6:	f008 f9c3 	bl	800a860 <HAL_TIM_PWM_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024e0:	f7ff f99e 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	4811      	ldr	r0, [pc, #68]	@ (8002538 <MX_TIM3_Init+0xe8>)
 80024f4:	f009 f8bc 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024fe:	f7ff f98f 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002502:	2360      	movs	r3, #96	@ 0x60
 8002504:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	4619      	mov	r1, r3
 8002518:	4807      	ldr	r0, [pc, #28]	@ (8002538 <MX_TIM3_Init+0xe8>)
 800251a:	f008 faff 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002524:	f7ff f97c 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002528:	4803      	ldr	r0, [pc, #12]	@ (8002538 <MX_TIM3_Init+0xe8>)
 800252a:	f000 f9a9 	bl	8002880 <HAL_TIM_MspPostInit>

}
 800252e:	bf00      	nop
 8002530:	3738      	adds	r7, #56	@ 0x38
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000adc 	.word	0x20000adc
 800253c:	40000400 	.word	0x40000400

08002540 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	@ 0x38
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002572:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <MX_TIM5_Init+0xe8>)
 8002574:	4a2d      	ldr	r2, [pc, #180]	@ (800262c <MX_TIM5_Init+0xec>)
 8002576:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002578:	4b2b      	ldr	r3, [pc, #172]	@ (8002628 <MX_TIM5_Init+0xe8>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <MX_TIM5_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002584:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <MX_TIM5_Init+0xe8>)
 8002586:	f04f 32ff 	mov.w	r2, #4294967295
 800258a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <MX_TIM5_Init+0xe8>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <MX_TIM5_Init+0xe8>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002598:	4823      	ldr	r0, [pc, #140]	@ (8002628 <MX_TIM5_Init+0xe8>)
 800259a:	f008 f891 	bl	800a6c0 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80025a4:	f7ff f93c 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025b2:	4619      	mov	r1, r3
 80025b4:	481c      	ldr	r0, [pc, #112]	@ (8002628 <MX_TIM5_Init+0xe8>)
 80025b6:	f008 fbc5 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80025c0:	f7ff f92e 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025c4:	4818      	ldr	r0, [pc, #96]	@ (8002628 <MX_TIM5_Init+0xe8>)
 80025c6:	f008 f94b 	bl	800a860 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80025d0:	f7ff f926 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4811      	ldr	r0, [pc, #68]	@ (8002628 <MX_TIM5_Init+0xe8>)
 80025e4:	f009 f844 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80025ee:	f7ff f917 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	@ 0x60
 80025f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002602:	463b      	mov	r3, r7
 8002604:	220c      	movs	r2, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	@ (8002628 <MX_TIM5_Init+0xe8>)
 800260a:	f008 fa87 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002614:	f7ff f904 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <MX_TIM5_Init+0xe8>)
 800261a:	f000 f931 	bl	8002880 <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3738      	adds	r7, #56	@ 0x38
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000b28 	.word	0x20000b28
 800262c:	40000c00 	.word	0x40000c00

08002630 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <MX_TIM8_Init+0xa4>)
 8002652:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002654:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002666:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800267a:	4815      	ldr	r0, [pc, #84]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 800267c:	f008 f820 	bl	800a6c0 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002686:	f7ff f8cb 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	480e      	ldr	r0, [pc, #56]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 8002698:	f008 fb54 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80026a2:	f7ff f8bd 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <MX_TIM8_Init+0xa0>)
 80026b8:	f008 ffda 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80026c2:	f7ff f8ad 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000b74 	.word	0x20000b74
 80026d4:	40010400 	.word	0x40010400

080026d8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <MX_TIM12_Init+0x84>)
 80026f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <MX_TIM12_Init+0x88>)
 80026f4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80026f6:	4b19      	ldr	r3, [pc, #100]	@ (800275c <MX_TIM12_Init+0x84>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b17      	ldr	r3, [pc, #92]	@ (800275c <MX_TIM12_Init+0x84>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <MX_TIM12_Init+0x84>)
 8002704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002708:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <MX_TIM12_Init+0x84>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <MX_TIM12_Init+0x84>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002716:	4811      	ldr	r0, [pc, #68]	@ (800275c <MX_TIM12_Init+0x84>)
 8002718:	f008 f8a2 	bl	800a860 <HAL_TIM_PWM_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002722:	f7ff f87d 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002726:	2360      	movs	r3, #96	@ 0x60
 8002728:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	4619      	mov	r1, r3
 800273c:	4807      	ldr	r0, [pc, #28]	@ (800275c <MX_TIM12_Init+0x84>)
 800273e:	f008 f9ed 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002748:	f7ff f86a 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800274c:	4803      	ldr	r0, [pc, #12]	@ (800275c <MX_TIM12_Init+0x84>)
 800274e:	f000 f897 	bl	8002880 <HAL_TIM_MspPostInit>

}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000bc0 	.word	0x20000bc0
 8002760:	40001800 	.word	0x40001800

08002764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_TIM_Base_MspInit+0xc8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10c      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6453      	str	r3, [r2, #68]	@ 0x44
 8002782:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800278e:	e046      	b.n	800281e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d10c      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	69bb      	ldr	r3, [r7, #24]
}
 80027b2:	e034      	b.n	800281e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <HAL_TIM_Base_MspInit+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10c      	bne.n	80027d8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
}
 80027d6:	e022      	b.n	800281e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <HAL_TIM_Base_MspInit+0xd4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10c      	bne.n	80027fc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
}
 80027fa:	e010      	b.n	800281e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <HAL_TIM_Base_MspInit+0xd8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10b      	bne.n	800281e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6453      	str	r3, [r2, #68]	@ 0x44
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_TIM_Base_MspInit+0xcc>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
}
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40023800 	.word	0x40023800
 8002834:	40000400 	.word	0x40000400
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40010400 	.word	0x40010400

08002840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <HAL_TIM_PWM_MspInit+0x38>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10b      	bne.n	800286a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_TIM_PWM_MspInit+0x3c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_TIM_PWM_MspInit+0x3c>)
 8002858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_TIM_PWM_MspInit+0x3c>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40001800 	.word	0x40001800
 800287c:	40023800 	.word	0x40023800

08002880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	@ 0x30
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a56      	ldr	r2, [pc, #344]	@ (80029f8 <HAL_TIM_MspPostInit+0x178>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11d      	bne.n	80028de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b56      	ldr	r3, [pc, #344]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a55      	ldr	r2, [pc, #340]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	484a      	ldr	r0, [pc, #296]	@ (8002a00 <HAL_TIM_MspPostInit+0x180>)
 80028d8:	f001 fd92 	bl	8004400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028dc:	e087      	b.n	80029ee <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d11d      	bne.n	8002924 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	4a43      	ldr	r2, [pc, #268]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f4:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002912:	2301      	movs	r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	4838      	ldr	r0, [pc, #224]	@ (8002a00 <HAL_TIM_MspPostInit+0x180>)
 800291e:	f001 fd6f 	bl	8004400 <HAL_GPIO_Init>
}
 8002922:	e064      	b.n	80029ee <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a36      	ldr	r2, [pc, #216]	@ (8002a04 <HAL_TIM_MspPostInit+0x184>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11c      	bne.n	8002968 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	4b33      	ldr	r3, [pc, #204]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a32      	ldr	r2, [pc, #200]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002946:	2310      	movs	r3, #16
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002956:	2302      	movs	r3, #2
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	4619      	mov	r1, r3
 8002960:	4829      	ldr	r0, [pc, #164]	@ (8002a08 <HAL_TIM_MspPostInit+0x188>)
 8002962:	f001 fd4d 	bl	8004400 <HAL_GPIO_Init>
}
 8002966:	e042      	b.n	80029ee <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <HAL_TIM_MspPostInit+0x18c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d11c      	bne.n	80029ac <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800299a:	2302      	movs	r3, #2
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	4619      	mov	r1, r3
 80029a4:	481a      	ldr	r0, [pc, #104]	@ (8002a10 <HAL_TIM_MspPostInit+0x190>)
 80029a6:	f001 fd2b 	bl	8004400 <HAL_GPIO_Init>
}
 80029aa:	e020      	b.n	80029ee <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <HAL_TIM_MspPostInit+0x194>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d11b      	bne.n	80029ee <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80029bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_TIM_MspPostInit+0x17c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029de:	2309      	movs	r3, #9
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	480b      	ldr	r0, [pc, #44]	@ (8002a18 <HAL_TIM_MspPostInit+0x198>)
 80029ea:	f001 fd09 	bl	8004400 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3730      	adds	r7, #48	@ 0x30
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40001800 	.word	0x40001800
 8002a18:	40021c00 	.word	0x40021c00

08002a1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a22:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <MX_USART1_UART_Init+0x5c>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	@ (8002a74 <MX_USART1_UART_Init+0x58>)
 8002a60:	f008 ff30 	bl	800b8c4 <HAL_UART_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a6a:	f7fe fed9 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000c0c 	.word	0x20000c0c
 8002a78:	40011000 	.word	0x40011000

08002a7c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <MX_USART6_UART_Init+0x5c>)
 8002a84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a86:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <MX_USART6_UART_Init+0x58>)
 8002ac0:	f008 ff00 	bl	800b8c4 <HAL_UART_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002aca:	f7fe fea9 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000c94 	.word	0x20000c94
 8002ad8:	40011400 	.word	0x40011400

08002adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0ae      	sub	sp, #184	@ 0xb8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af4:	f107 0320 	add.w	r3, r7, #32
 8002af8:	2284      	movs	r2, #132	@ 0x84
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f011 fa97 	bl	8014030 <memset>
  if(uartHandle->Instance==USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <HAL_UART_MspInit+0x188>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d165      	bne.n	8002bd8 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b0c:	2340      	movs	r3, #64	@ 0x40
 8002b0e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b10:	2300      	movs	r3, #0
 8002b12:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 f9e5 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b24:	f7fe fe7c 	bl	8001820 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b28:	4b4f      	ldr	r3, [pc, #316]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b34:	4b4c      	ldr	r3, [pc, #304]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a48      	ldr	r2, [pc, #288]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4c:	4b46      	ldr	r3, [pc, #280]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b64:	4b40      	ldr	r3, [pc, #256]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b88:	2307      	movs	r3, #7
 8002b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4835      	ldr	r0, [pc, #212]	@ (8002c6c <HAL_UART_MspInit+0x190>)
 8002b96:	f001 fc33 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	482b      	ldr	r0, [pc, #172]	@ (8002c70 <HAL_UART_MspInit+0x194>)
 8002bc2:	f001 fc1d 	bl	8004400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2105      	movs	r1, #5
 8002bca:	2025      	movs	r0, #37	@ 0x25
 8002bcc:	f000 fc1c 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd0:	2025      	movs	r0, #37	@ 0x25
 8002bd2:	f000 fc35 	bl	8003440 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002bd6:	e040      	b.n	8002c5a <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	@ (8002c74 <HAL_UART_MspInit+0x198>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d13b      	bne.n	8002c5a <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002be6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002be8:	2300      	movs	r3, #0
 8002bea:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bec:	f107 0320 	add.w	r3, r7, #32
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f005 f979 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002bfc:	f7fe fe10 	bl	8001820 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c00:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c06:	f043 0320 	orr.w	r3, r3, #32
 8002c0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0c:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c24:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_UART_MspInit+0x18c>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002c30:	23c0      	movs	r3, #192	@ 0xc0
 8002c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c48:	2308      	movs	r3, #8
 8002c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4808      	ldr	r0, [pc, #32]	@ (8002c78 <HAL_UART_MspInit+0x19c>)
 8002c56:	f001 fbd3 	bl	8004400 <HAL_GPIO_Init>
}
 8002c5a:	bf00      	nop
 8002c5c:	37b8      	adds	r7, #184	@ 0xb8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40011400 	.word	0x40011400
 8002c78:	40020800 	.word	0x40020800

08002c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c80:	f7ff fab2 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	@ (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f011 f9df 	bl	801406c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cae:	f7fe fcc1 	bl	8001634 <main>
  bx  lr    
 8002cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002cc0:	08014238 	.word	0x08014238
  ldr r2, =_sbss
 8002cc4:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002cc8:	20009794 	.word	0x20009794

08002ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC_IRQHandler>

08002cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f000 fb8d 	bl	80033f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd8:	200f      	movs	r0, #15
 8002cda:	f7ff f987 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cde:	f7ff f95d 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_IncTick+0x20>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_IncTick+0x24>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <HAL_IncTick+0x24>)
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	20000d1c 	.word	0x20000d1c

08002d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return uwTick;
 8002d14:	4b03      	ldr	r3, [pc, #12]	@ (8002d24 <HAL_GetTick+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000d1c 	.word	0x20000d1c

08002d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff ffee 	bl	8002d10 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d005      	beq.n	8002d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_Delay+0x44>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4e:	bf00      	nop
 8002d50:	f7ff ffde 	bl	8002d10 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8f7      	bhi.n	8002d50 <HAL_Delay+0x28>
  {
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000008 	.word	0x20000008

08002d70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e031      	b.n	8002dea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fc08 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_ADC_Init+0x84>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f970 	bl	80030a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dda:	e001      	b.n	8002de0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	ffffeefd 	.word	0xffffeefd

08002df8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1c>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e136      	b.n	8003082 <HAL_ADC_ConfigChannel+0x28a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d93a      	bls.n	8002e9a <HAL_ADC_ConfigChannel+0xa2>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e2c:	d035      	beq.n	8002e9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68d9      	ldr	r1, [r3, #12]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	2207      	movs	r2, #7
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a8d      	ldr	r2, [pc, #564]	@ (8003090 <HAL_ADC_ConfigChannel+0x298>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10a      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	061a      	lsls	r2, r3, #24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e72:	e035      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68d9      	ldr	r1, [r3, #12]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e98:	e022      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6919      	ldr	r1, [r3, #16]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	400a      	ands	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4403      	add	r3, r0
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d824      	bhi.n	8002f32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b05      	subs	r3, #5
 8002efa:	221f      	movs	r2, #31
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b05      	subs	r3, #5
 8002f24:	fa00 f203 	lsl.w	r2, r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f30:	e04c      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d824      	bhi.n	8002f84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b23      	subs	r3, #35	@ 0x23
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b23      	subs	r3, #35	@ 0x23
 8002f76:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f82:	e023      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	3b41      	subs	r3, #65	@ 0x41
 8002f96:	221f      	movs	r2, #31
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b41      	subs	r3, #65	@ 0x41
 8002fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <HAL_ADC_ConfigChannel+0x29c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1f4>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002fea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <HAL_ADC_ConfigChannel+0x29c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10f      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x21e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d10b      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003004:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003008:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800300a:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003014:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <HAL_ADC_ConfigChannel+0x29c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d12b      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x280>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <HAL_ADC_ConfigChannel+0x298>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <HAL_ADC_ConfigChannel+0x23a>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b11      	cmp	r3, #17
 8003030:	d122      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a18      	ldr	r2, [pc, #96]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003038:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800303c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003044:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003048:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a10      	ldr	r2, [pc, #64]	@ (8003090 <HAL_ADC_ConfigChannel+0x298>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d111      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_ADC_ConfigChannel+0x2a4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a11      	ldr	r2, [pc, #68]	@ (80030a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9a      	lsrs	r2, r3, #18
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800306a:	e002      	b.n	8003072 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3b01      	subs	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	10000012 	.word	0x10000012
 8003094:	40012000 	.word	0x40012000
 8003098:	40012300 	.word	0x40012300
 800309c:	20000000 	.word	0x20000000
 80030a0:	431bde83 	.word	0x431bde83

080030a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030ac:	4b78      	ldr	r3, [pc, #480]	@ (8003290 <ADC_Init+0x1ec>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a77      	ldr	r2, [pc, #476]	@ (8003290 <ADC_Init+0x1ec>)
 80030b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80030b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80030b8:	4b75      	ldr	r3, [pc, #468]	@ (8003290 <ADC_Init+0x1ec>)
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4973      	ldr	r1, [pc, #460]	@ (8003290 <ADC_Init+0x1ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	4a58      	ldr	r2, [pc, #352]	@ (8003294 <ADC_Init+0x1f0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e00f      	b.n	800319e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800318c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800319c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0202 	bic.w	r2, r2, #2
 80031ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	005a      	lsls	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01b      	beq.n	8003204 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	3b01      	subs	r3, #1
 80031f8:	035a      	lsls	r2, r3, #13
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e007      	b.n	8003214 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	3b01      	subs	r3, #1
 8003230:	051a      	lsls	r2, r3, #20
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003256:	025a      	lsls	r2, r3, #9
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	029a      	lsls	r2, r3, #10
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012300 	.word	0x40012300
 8003294:	0f000001 	.word	0x0f000001

08003298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b4:	4013      	ands	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	05fa0000 	.word	0x05fa0000

080032e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <__NVIC_GetPriorityGrouping+0x18>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0307 	and.w	r3, r3, #7
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db0b      	blt.n	8003326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4907      	ldr	r1, [pc, #28]	@ (8003334 <__NVIC_EnableIRQ+0x38>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2001      	movs	r0, #1
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	@ (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff4c 	bl	8003298 <__NVIC_SetPriorityGrouping>
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800341a:	f7ff ff61 	bl	80032e0 <__NVIC_GetPriorityGrouping>
 800341e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	6978      	ldr	r0, [r7, #20]
 8003426:	f7ff ffb1 	bl	800338c <NVIC_EncodePriority>
 800342a:	4602      	mov	r2, r0
 800342c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff80 	bl	8003338 <__NVIC_SetPriority>
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff54 	bl	80032fc <__NVIC_EnableIRQ>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e054      	b.n	8003518 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7f5b      	ldrb	r3, [r3, #29]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f8f2 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a22      	ldr	r2, [pc, #136]	@ (8003520 <HAL_CRC_Init+0xc4>)
 8003498:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0218 	bic.w	r2, r2, #24
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	e00c      	b.n	80034c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f834 	bl	8003524 <HAL_CRCEx_Polynomial_Set>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e028      	b.n	8003518 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	795b      	ldrb	r3, [r3, #5]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295
 80034d6:	611a      	str	r2, [r3, #16]
 80034d8:	e004      	b.n	80034e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6912      	ldr	r2, [r2, #16]
 80034e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	04c11db7 	.word	0x04c11db7

08003524 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003534:	231f      	movs	r3, #31
 8003536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
 8003546:	e063      	b.n	8003610 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003548:	bf00      	nop
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	613a      	str	r2, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_CRCEx_Polynomial_Set+0x44>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b18      	cmp	r3, #24
 800356c:	d846      	bhi.n	80035fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003603 	.word	0x08003603
 8003578:	080035fd 	.word	0x080035fd
 800357c:	080035fd 	.word	0x080035fd
 8003580:	080035fd 	.word	0x080035fd
 8003584:	080035fd 	.word	0x080035fd
 8003588:	080035fd 	.word	0x080035fd
 800358c:	080035fd 	.word	0x080035fd
 8003590:	080035fd 	.word	0x080035fd
 8003594:	080035f1 	.word	0x080035f1
 8003598:	080035fd 	.word	0x080035fd
 800359c:	080035fd 	.word	0x080035fd
 80035a0:	080035fd 	.word	0x080035fd
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	080035fd 	.word	0x080035fd
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	080035fd 	.word	0x080035fd
 80035bc:	080035fd 	.word	0x080035fd
 80035c0:	080035fd 	.word	0x080035fd
 80035c4:	080035fd 	.word	0x080035fd
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	080035fd 	.word	0x080035fd
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	080035d9 	.word	0x080035d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d913      	bls.n	8003606 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035e2:	e010      	b.n	8003606 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d90f      	bls.n	800360a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035ee:	e00c      	b.n	800360a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d90b      	bls.n	800360e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035fa:	e008      	b.n	800360e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003600:	e006      	b.n	8003610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003602:	bf00      	nop
 8003604:	e004      	b.n	8003610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800360e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 0118 	bic.w	r1, r3, #24
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e069      	b.n	8003726 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd f856 	bl	8000710 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b2a      	ldr	r3, [pc, #168]	@ (8003730 <HAL_DCMI_Init+0xf0>)
 8003686:	400b      	ands	r3, r1
 8003688:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800369e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80036aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80036c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80036ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d112      	bne.n	8003706 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7f5b      	ldrb	r3, [r3, #29]
 80036ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7f9b      	ldrb	r3, [r3, #30]
 80036f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7fdb      	ldrb	r3, [r3, #31]
 80036fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003702:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003704:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 021e 	orr.w	r2, r2, #30
 8003714:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	ffe0f007 	.word	0xffe0f007

08003734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_DMA_Start_IT+0x26>
 8003756:	2302      	movs	r3, #2
 8003758:	e048      	b.n	80037ec <HAL_DMA_Start_IT+0xb8>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d137      	bne.n	80037de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f8d4 	bl	8003930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	223f      	movs	r2, #63	@ 0x3f
 800378e:	409a      	lsls	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0216 	orr.w	r2, r2, #22
 80037a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0208 	orr.w	r2, r2, #8
 80037ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e005      	b.n	80037ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003800:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003802:	f7ff fa85 	bl	8002d10 <HAL_GetTick>
 8003806:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d008      	beq.n	8003826 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e052      	b.n	80038cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0216 	bic.w	r2, r2, #22
 8003834:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003844:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <HAL_DMA_Abort+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0208 	bic.w	r2, r2, #8
 8003864:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003876:	e013      	b.n	80038a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003878:	f7ff fa4a 	bl	8002d10 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b05      	cmp	r3, #5
 8003884:	d90c      	bls.n	80038a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2203      	movs	r2, #3
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e015      	b.n	80038cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e4      	bne.n	8003878 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	223f      	movs	r2, #63	@ 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2280      	movs	r2, #128	@ 0x80
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00c      	b.n	800390c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2205      	movs	r2, #5
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800394c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d108      	bne.n	8003970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396e:	e007      	b.n	8003980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e039      	b.n	8003a12 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fc ff9c 	bl	80008f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039dc:	f023 0107 	bic.w	r1, r3, #7
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <HAL_DMA2D_Init+0x90>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d1      	ldr	r1, [r2, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	ffffc000 	.word	0xffffc000

08003a20 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d026      	beq.n	8003a90 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d021      	beq.n	8003a90 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2204      	movs	r2, #4
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d026      	beq.n	8003ae8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	f043 0202 	orr.w	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2204      	movs	r2, #4
 8003acc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d026      	beq.n	8003b40 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d021      	beq.n	8003b40 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f853 	bl	8003c18 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d024      	beq.n	8003bc6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01f      	beq.n	8003bc6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b94:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01f      	beq.n	8003c10 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01a      	beq.n	8003c10 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003be8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f80e 	bl	8003c2c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_DMA2D_ConfigLayer+0x20>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e079      	b.n	8003d54 <HAL_DMA2D_ConfigLayer+0x114>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	3318      	adds	r3, #24
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c8a:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b0a      	cmp	r3, #10
 8003c94:	d003      	beq.n	8003c9e <HAL_DMA2D_ConfigLayer+0x5e>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b09      	cmp	r3, #9
 8003c9c:	d107      	bne.n	8003cae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e005      	b.n	8003cba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d120      	bne.n	8003d02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	ea02 0103 	and.w	r1, r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b0a      	cmp	r3, #10
 8003ce8:	d003      	beq.n	8003cf2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b09      	cmp	r3, #9
 8003cf0:	d127      	bne.n	8003d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d00:	e01f      	b.n	8003d42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	ea02 0103 	and.w	r1, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b0a      	cmp	r3, #10
 8003d2a:	d003      	beq.n	8003d34 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d106      	bne.n	8003d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	ff03000f 	.word	0xff03000f

08003d64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e086      	b.n	8003e84 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2223      	movs	r2, #35	@ 0x23
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fc fe25 	bl	80009d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <HAL_ETH_Init+0x128>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	4a3e      	ldr	r2, [pc, #248]	@ (8003e8c <HAL_ETH_Init+0x128>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <HAL_ETH_Init+0x128>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003da6:	4b3a      	ldr	r3, [pc, #232]	@ (8003e90 <HAL_ETH_Init+0x12c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a39      	ldr	r2, [pc, #228]	@ (8003e90 <HAL_ETH_Init+0x12c>)
 8003dac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003db0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003db2:	4b37      	ldr	r3, [pc, #220]	@ (8003e90 <HAL_ETH_Init+0x12c>)
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4935      	ldr	r1, [pc, #212]	@ (8003e90 <HAL_ETH_Init+0x12c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003dc0:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <HAL_ETH_Init+0x12c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ddc:	f7fe ff98 	bl	8002d10 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003de2:	e011      	b.n	8003e08 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003de4:	f7fe ff94 	bl	8002d10 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003df2:	d909      	bls.n	8003e08 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2204      	movs	r2, #4
 8003df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	22e0      	movs	r2, #224	@ 0xe0
 8003e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e03d      	b.n	8003e84 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e4      	bne.n	8003de4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f97a 	bl	8004114 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa25 	bl	8004270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa7b 	bl	8004322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	461a      	mov	r2, r3
 8003e32:	2100      	movs	r1, #0
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9e3 	bl	8004200 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <HAL_ETH_Init+0x130>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003e6e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40013800 	.word	0x40013800
 8003e94:	00020060 	.word	0x00020060

08003e98 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4b53      	ldr	r3, [pc, #332]	@ (8003ffc <ETH_SetMACConfig+0x164>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	7b9b      	ldrb	r3, [r3, #14]
 8003eb6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	7c12      	ldrb	r2, [r2, #16]
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d102      	bne.n	8003ec6 <ETH_SetMACConfig+0x2e>
 8003ec0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ec4:	e000      	b.n	8003ec8 <ETH_SetMACConfig+0x30>
 8003ec6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003ec8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	7c52      	ldrb	r2, [r2, #17]
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	d102      	bne.n	8003ed8 <ETH_SetMACConfig+0x40>
 8003ed2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003ed6:	e000      	b.n	8003eda <ETH_SetMACConfig+0x42>
 8003ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003eda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	7fdb      	ldrb	r3, [r3, #31]
 8003ee6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ee8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	7f92      	ldrb	r2, [r2, #30]
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	d102      	bne.n	8003efe <ETH_SetMACConfig+0x66>
 8003ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003efc:	e000      	b.n	8003f00 <ETH_SetMACConfig+0x68>
 8003efe:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	7f1b      	ldrb	r3, [r3, #28]
 8003f06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	791b      	ldrb	r3, [r3, #4]
 8003f14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	d102      	bne.n	8003f28 <ETH_SetMACConfig+0x90>
 8003f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f26:	e000      	b.n	8003f2a <ETH_SetMACConfig+0x92>
 8003f28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	7bdb      	ldrb	r3, [r3, #15]
 8003f30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f42:	4313      	orrs	r3, r2
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fe fee4 	bl	8002d28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d101      	bne.n	8003f8e <ETH_SetMACConfig+0xf6>
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	e000      	b.n	8003f90 <ETH_SetMACConfig+0xf8>
 8003f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003f9e:	2a01      	cmp	r2, #1
 8003fa0:	d101      	bne.n	8003fa6 <ETH_SetMACConfig+0x10e>
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	e000      	b.n	8003fa8 <ETH_SetMACConfig+0x110>
 8003fa6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003fb0:	2a01      	cmp	r2, #1
 8003fb2:	d101      	bne.n	8003fb8 <ETH_SetMACConfig+0x120>
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	e000      	b.n	8003fba <ETH_SetMACConfig+0x122>
 8003fb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	d101      	bne.n	8003fca <ETH_SetMACConfig+0x132>
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	e000      	b.n	8003fcc <ETH_SetMACConfig+0x134>
 8003fca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fe fe9f 	bl	8002d28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	fd20810f 	.word	0xfd20810f

08004000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <ETH_SetDMAConfig+0x110>)
 800401a:	4013      	ands	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	7b1b      	ldrb	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <ETH_SetDMAConfig+0x2c>
 8004026:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800402a:	e000      	b.n	800402e <ETH_SetDMAConfig+0x2e>
 800402c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	7b5b      	ldrb	r3, [r3, #13]
 8004032:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004034:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	7f52      	ldrb	r2, [r2, #29]
 800403a:	2a00      	cmp	r2, #0
 800403c:	d102      	bne.n	8004044 <ETH_SetDMAConfig+0x44>
 800403e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004042:	e000      	b.n	8004046 <ETH_SetDMAConfig+0x46>
 8004044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	7b9b      	ldrb	r3, [r3, #14]
 800404c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800404e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	7f1b      	ldrb	r3, [r3, #28]
 800405a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800405c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	7f9b      	ldrb	r3, [r3, #30]
 8004062:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004064:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800406a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004072:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004074:	4313      	orrs	r3, r2
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004084:	461a      	mov	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004096:	2001      	movs	r0, #1
 8004098:	f7fe fe46 	bl	8002d28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	791b      	ldrb	r3, [r3, #4]
 80040ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80040ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80040ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7fe fe17 	bl	8002d28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	f8de3f23 	.word	0xf8de3f23

08004114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0a6      	sub	sp, #152	@ 0x98
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004128:	2300      	movs	r3, #0
 800412a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004156:	2300      	movs	r3, #0
 8004158:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004160:	2300      	movs	r3, #0
 8004162:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800417c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800418e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fe7f 	bl	8003e98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800419a:	2301      	movs	r3, #1
 800419c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800419e:	2301      	movs	r3, #1
 80041a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041d4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041da:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff05 	bl	8004000 <ETH_SetDMAConfig>
}
 80041f6:	bf00      	nop
 80041f8:	3798      	adds	r7, #152	@ 0x98
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3305      	adds	r3, #5
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	3204      	adds	r2, #4
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <ETH_MACAddressConfig+0x68>)
 8004222:	4413      	add	r3, r2
 8004224:	461a      	mov	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3303      	adds	r3, #3
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	061a      	lsls	r2, r3, #24
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3302      	adds	r3, #2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3301      	adds	r3, #1
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	4313      	orrs	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <ETH_MACAddressConfig+0x6c>)
 8004252:	4413      	add	r3, r2
 8004254:	461a      	mov	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40028040 	.word	0x40028040
 800426c:	40028044 	.word	0x40028044

08004270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e03e      	b.n	80042fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	3206      	adds	r2, #6
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d80c      	bhi.n	80042e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e004      	b.n	80042ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d9bd      	bls.n	800427e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004314:	611a      	str	r2, [r3, #16]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e048      	b.n	80043c2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6919      	ldr	r1, [r3, #16]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800436c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	3212      	adds	r2, #18
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d80c      	bhi.n	80043b2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6919      	ldr	r1, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	461a      	mov	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e004      	b.n	80043bc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d9b3      	bls.n	8004330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f2:	60da      	str	r2, [r3, #12]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e175      	b.n	800470c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004420:	2201      	movs	r2, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 8164 	bne.w	8004706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d005      	beq.n	8004456 <HAL_GPIO_Init+0x56>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d130      	bne.n	80044b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448c:	2201      	movs	r2, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 0201 	and.w	r2, r3, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d017      	beq.n	80044f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80be 	beq.w	8004706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <HAL_GPIO_Init+0x324>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	4a65      	ldr	r2, [pc, #404]	@ (8004724 <HAL_GPIO_Init+0x324>)
 8004590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004594:	6453      	str	r3, [r2, #68]	@ 0x44
 8004596:	4b63      	ldr	r3, [pc, #396]	@ (8004724 <HAL_GPIO_Init+0x324>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045a2:	4a61      	ldr	r2, [pc, #388]	@ (8004728 <HAL_GPIO_Init+0x328>)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_GPIO_Init+0x32c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d037      	beq.n	800463e <HAL_GPIO_Init+0x23e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_GPIO_Init+0x330>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d031      	beq.n	800463a <HAL_GPIO_Init+0x23a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a56      	ldr	r2, [pc, #344]	@ (8004734 <HAL_GPIO_Init+0x334>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <HAL_GPIO_Init+0x236>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a55      	ldr	r2, [pc, #340]	@ (8004738 <HAL_GPIO_Init+0x338>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d025      	beq.n	8004632 <HAL_GPIO_Init+0x232>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a54      	ldr	r2, [pc, #336]	@ (800473c <HAL_GPIO_Init+0x33c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01f      	beq.n	800462e <HAL_GPIO_Init+0x22e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a53      	ldr	r2, [pc, #332]	@ (8004740 <HAL_GPIO_Init+0x340>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d019      	beq.n	800462a <HAL_GPIO_Init+0x22a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a52      	ldr	r2, [pc, #328]	@ (8004744 <HAL_GPIO_Init+0x344>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_GPIO_Init+0x226>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a51      	ldr	r2, [pc, #324]	@ (8004748 <HAL_GPIO_Init+0x348>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_GPIO_Init+0x222>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a50      	ldr	r2, [pc, #320]	@ (800474c <HAL_GPIO_Init+0x34c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_GPIO_Init+0x21e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4f      	ldr	r2, [pc, #316]	@ (8004750 <HAL_GPIO_Init+0x350>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_GPIO_Init+0x21a>
 8004616:	2309      	movs	r3, #9
 8004618:	e012      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800461a:	230a      	movs	r3, #10
 800461c:	e010      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800461e:	2308      	movs	r3, #8
 8004620:	e00e      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004622:	2307      	movs	r3, #7
 8004624:	e00c      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004626:	2306      	movs	r3, #6
 8004628:	e00a      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800462a:	2305      	movs	r3, #5
 800462c:	e008      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800462e:	2304      	movs	r3, #4
 8004630:	e006      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004632:	2303      	movs	r3, #3
 8004634:	e004      	b.n	8004640 <HAL_GPIO_Init+0x240>
 8004636:	2302      	movs	r3, #2
 8004638:	e002      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_GPIO_Init+0x240>
 800463e:	2300      	movs	r3, #0
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f002 0203 	and.w	r2, r2, #3
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	4093      	lsls	r3, r2
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004650:	4935      	ldr	r1, [pc, #212]	@ (8004728 <HAL_GPIO_Init+0x328>)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3302      	adds	r3, #2
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800465e:	4b3d      	ldr	r3, [pc, #244]	@ (8004754 <HAL_GPIO_Init+0x354>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004682:	4a34      	ldr	r2, [pc, #208]	@ (8004754 <HAL_GPIO_Init+0x354>)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004688:	4b32      	ldr	r3, [pc, #200]	@ (8004754 <HAL_GPIO_Init+0x354>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046ac:	4a29      	ldr	r2, [pc, #164]	@ (8004754 <HAL_GPIO_Init+0x354>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046b2:	4b28      	ldr	r3, [pc, #160]	@ (8004754 <HAL_GPIO_Init+0x354>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <HAL_GPIO_Init+0x354>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <HAL_GPIO_Init+0x354>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004700:	4a14      	ldr	r2, [pc, #80]	@ (8004754 <HAL_GPIO_Init+0x354>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	f67f ae86 	bls.w	8004420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3724      	adds	r7, #36	@ 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	40013800 	.word	0x40013800
 800472c:	40020000 	.word	0x40020000
 8004730:	40020400 	.word	0x40020400
 8004734:	40020800 	.word	0x40020800
 8004738:	40020c00 	.word	0x40020c00
 800473c:	40021000 	.word	0x40021000
 8004740:	40021400 	.word	0x40021400
 8004744:	40021800 	.word	0x40021800
 8004748:	40021c00 	.word	0x40021c00
 800474c:	40022000 	.word	0x40022000
 8004750:	40022400 	.word	0x40022400
 8004754:	40013c00 	.word	0x40013c00

08004758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e001      	b.n	800477a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
 8004794:	4613      	mov	r3, r2
 8004796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047a4:	e003      	b.n	80047ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	041a      	lsls	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af02      	add	r7, sp, #8
 80047c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e059      	b.n	8004880 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f00f f8c0 	bl	801396c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2203      	movs	r2, #3
 80047f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047fa:	d102      	bne.n	8004802 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f008 fea1 	bl	800d54e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7c1a      	ldrb	r2, [r3, #16]
 8004814:	f88d 2000 	strb.w	r2, [sp]
 8004818:	3304      	adds	r3, #4
 800481a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800481c:	f008 fe2c 	bl	800d478 <USB_CoreInit>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e026      	b.n	8004880 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f008 fe99 	bl	800d570 <USB_SetCurrentMode>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e017      	b.n	8004880 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7c1a      	ldrb	r2, [r3, #16]
 8004858:	f88d 2000 	strb.w	r2, [sp]
 800485c:	3304      	adds	r3, #4
 800485e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004860:	f009 f83c 	bl	800d8dc <USB_HostInit>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e004      	b.n	8004880 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b08b      	sub	sp, #44	@ 0x2c
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4603      	mov	r3, r0
 8004898:	70fb      	strb	r3, [r7, #3]
 800489a:	460b      	mov	r3, r1
 800489c:	70bb      	strb	r3, [r7, #2]
 800489e:	4613      	mov	r3, r2
 80048a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80048a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048a4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_HCD_HC_Init+0x2c>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e09d      	b.n	80049f0 <HAL_HCD_HC_Init+0x168>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3319      	adds	r3, #25
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3314      	adds	r3, #20
 80048e0:	787a      	ldrb	r2, [r7, #1]
 80048e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3315      	adds	r3, #21
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	3326      	adds	r3, #38	@ 0x26
 8004908:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800490c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	78bb      	ldrb	r3, [r7, #2]
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	b2d8      	uxtb	r0, r3
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3316      	adds	r3, #22
 8004926:	4602      	mov	r2, r0
 8004928:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fbc8 	bl	80050c4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da0a      	bge.n	8004952 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	3317      	adds	r3, #23
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e009      	b.n	8004966 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3317      	adds	r3, #23
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f009 f90e 	bl	800db8c <USB_GetHostSpeed>
 8004970:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10b      	bne.n	8004992 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800497a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_HCD_HC_Init+0x10a>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2bbc      	cmp	r3, #188	@ 0xbc
 800498c:	d901      	bls.n	8004992 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800498e:	23bc      	movs	r3, #188	@ 0xbc
 8004990:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3318      	adds	r3, #24
 80049a2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80049a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	b298      	uxth	r0, r3
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	3328      	adds	r3, #40	@ 0x28
 80049bc:	4602      	mov	r2, r0
 80049be:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	787c      	ldrb	r4, [r7, #1]
 80049ca:	78ba      	ldrb	r2, [r7, #2]
 80049cc:	78f9      	ldrb	r1, [r7, #3]
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	4623      	mov	r3, r4
 80049de:	f009 f8fd 	bl	800dbdc <USB_HC_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}

080049f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_HCD_HC_Halt+0x1e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e00f      	b.n	8004a36 <HAL_HCD_HC_Halt+0x3e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f009 fc8f 	bl	800e34a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	70fb      	strb	r3, [r7, #3]
 8004a52:	460b      	mov	r3, r1
 8004a54:	70bb      	strb	r3, [r7, #2]
 8004a56:	4613      	mov	r3, r2
 8004a58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3317      	adds	r3, #23
 8004a6a:	78ba      	ldrb	r2, [r7, #2]
 8004a6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3326      	adds	r3, #38	@ 0x26
 8004a7e:	787a      	ldrb	r2, [r7, #1]
 8004a80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004a82:	7c3b      	ldrb	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d114      	bne.n	8004ab2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	332a      	adds	r3, #42	@ 0x2a
 8004a98:	2203      	movs	r2, #3
 8004a9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3319      	adds	r3, #25
 8004aac:	7f3a      	ldrb	r2, [r7, #28]
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e009      	b.n	8004ac6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	332a      	adds	r3, #42	@ 0x2a
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ac6:	787b      	ldrb	r3, [r7, #1]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	f200 8102 	bhi.w	8004cd2 <HAL_HCD_HC_SubmitRequest+0x292>
 8004ace:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004cbd 	.word	0x08004cbd
 8004adc:	08004ba9 	.word	0x08004ba9
 8004ae0:	08004c33 	.word	0x08004c33
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004ae4:	7c3b      	ldrb	r3, [r7, #16]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	f040 80f5 	bne.w	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004aec:	78bb      	ldrb	r3, [r7, #2]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d12d      	bne.n	8004b4e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004af2:	8b3b      	ldrh	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	333d      	adds	r3, #61	@ 0x3d
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	333d      	adds	r3, #61	@ 0x3d
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	332a      	adds	r3, #42	@ 0x2a
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004b36:	e0ce      	b.n	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	332a      	adds	r3, #42	@ 0x2a
 8004b48:	2202      	movs	r2, #2
 8004b4a:	701a      	strb	r2, [r3, #0]
      break;
 8004b4c:	e0c3      	b.n	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	331a      	adds	r3, #26
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	f040 80b8 	bne.w	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	333c      	adds	r3, #60	@ 0x3c
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	332a      	adds	r3, #42	@ 0x2a
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
      break;
 8004b90:	e0a1      	b.n	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	332a      	adds	r3, #42	@ 0x2a
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	701a      	strb	r2, [r3, #0]
      break;
 8004ba6:	e096      	b.n	8004cd6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004ba8:	78bb      	ldrb	r3, [r7, #2]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d120      	bne.n	8004bf0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	333d      	adds	r3, #61	@ 0x3d
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	332a      	adds	r3, #42	@ 0x2a
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bd8:	e07e      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	332a      	adds	r3, #42	@ 0x2a
 8004bea:	2202      	movs	r2, #2
 8004bec:	701a      	strb	r2, [r3, #0]
      break;
 8004bee:	e073      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	333c      	adds	r3, #60	@ 0x3c
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	332a      	adds	r3, #42	@ 0x2a
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e05d      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	332a      	adds	r3, #42	@ 0x2a
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	701a      	strb	r2, [r3, #0]
      break;
 8004c30:	e052      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c32:	78bb      	ldrb	r3, [r7, #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d120      	bne.n	8004c7a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	333d      	adds	r3, #61	@ 0x3d
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	332a      	adds	r3, #42	@ 0x2a
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c62:	e039      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	332a      	adds	r3, #42	@ 0x2a
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
      break;
 8004c78:	e02e      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	333c      	adds	r3, #60	@ 0x3c
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	332a      	adds	r3, #42	@ 0x2a
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
      break;
 8004ca4:	e018      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	332a      	adds	r3, #42	@ 0x2a
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	701a      	strb	r2, [r3, #0]
      break;
 8004cba:	e00d      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	332a      	adds	r3, #42	@ 0x2a
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
      break;
 8004cd0:	e002      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004cd6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	332c      	adds	r3, #44	@ 0x2c
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	8b39      	ldrh	r1, [r7, #24]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4403      	add	r3, r0
 8004cfc:	3334      	adds	r3, #52	@ 0x34
 8004cfe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	334c      	adds	r3, #76	@ 0x4c
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	3338      	adds	r3, #56	@ 0x38
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3315      	adds	r3, #21
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	334d      	adds	r3, #77	@ 0x4d
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	3310      	adds	r3, #16
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	1d19      	adds	r1, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	799b      	ldrb	r3, [r3, #6]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f009 f862 	bl	800de34 <USB_HC_StartXfer>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f008 fd62 	bl	800d85c <USB_GetMode>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	f040 80fb 	bne.w	8004f96 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 fd25 	bl	800d7f4 <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80f1 	beq.w	8004f94 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f008 fd1c 	bl	800d7f4 <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc6:	d104      	bne.n	8004dd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f008 fd0c 	bl	800d7f4 <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004de6:	d104      	bne.n	8004df2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f008 fcfc 	bl	800d7f4 <USB_ReadInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e06:	d104      	bne.n	8004e12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f008 fcec 	bl	800d7f4 <USB_ReadInterrupts>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d103      	bne.n	8004e2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f008 fcde 	bl	800d7f4 <USB_ReadInterrupts>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e42:	d120      	bne.n	8004e86 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e5e:	2110      	movs	r1, #16
 8004e60:	6938      	ldr	r0, [r7, #16]
 8004e62:	f008 fbd1 	bl	800d608 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e66:	6938      	ldr	r0, [r7, #16]
 8004e68:	f008 fc00 	bl	800d66c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7a5b      	ldrb	r3, [r3, #9]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d105      	bne.n	8004e80 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f008 fde6 	bl	800da4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f00e fde5 	bl	8013a50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f008 fcb2 	bl	800d7f4 <USB_ReadInterrupts>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e9a:	d102      	bne.n	8004ea2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 fd33 	bl	8006908 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f008 fca4 	bl	800d7f4 <USB_ReadInterrupts>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d106      	bne.n	8004ec4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f00e fdae 	bl	8013a18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f008 fc93 	bl	800d7f4 <USB_ReadInterrupts>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ed8:	d139      	bne.n	8004f4e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f009 fa22 	bl	800e328 <USB_HC_ReadInterrupt>
 8004ee4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e025      	b.n	8004f38 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d018      	beq.n	8004f32 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f16:	d106      	bne.n	8004f26 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f905 	bl	800512e <HCD_HC_IN_IRQHandler>
 8004f24:	e005      	b.n	8004f32 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 ff67 	bl	8005e00 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3301      	adds	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	795b      	ldrb	r3, [r3, #5]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d3d3      	bcc.n	8004eec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f008 fc4e 	bl	800d7f4 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d101      	bne.n	8004f66 <HAL_HCD_IRQHandler+0x1ea>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_HCD_IRQHandler+0x1ec>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d014      	beq.n	8004f96 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0210 	bic.w	r2, r2, #16
 8004f7a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fbe4 	bl	800674a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0210 	orr.w	r2, r2, #16
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	e000      	b.n	8004f96 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004f94:	bf00      	nop
    }
  }
}
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_HCD_Start+0x16>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e013      	b.n	8004fda <HAL_HCD_Start+0x3e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f008 fdaa 	bl	800db1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f008 faae 	bl	800d52c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_HCD_Stop+0x16>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e00d      	b.n	8005014 <HAL_HCD_Stop+0x32>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f009 fafd 	bl	800e604 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f008 fd4c 	bl	800dac6 <USB_ResetPort>
 800502e:	4603      	mov	r3, r0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	334c      	adds	r3, #76	@ 0x4c
 8005054:	781b      	ldrb	r3, [r3, #0]
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3338      	adds	r3, #56	@ 0x38
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f008 fd8e 	bl	800dbba <USB_GetCurrentFrame>
 800509e:	4603      	mov	r3, r0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f008 fd69 	bl	800db8c <USB_GetHostSpeed>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	331a      	adds	r3, #26
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	331b      	adds	r3, #27
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3325      	adds	r3, #37	@ 0x25
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	3324      	adds	r3, #36	@ 0x24
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f008 fb64 	bl	800d81a <USB_ReadChInterrupts>
 8005152:	4603      	mov	r3, r0
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d11a      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005168:	461a      	mov	r2, r3
 800516a:	2304      	movs	r3, #4
 800516c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	334d      	adds	r3, #77	@ 0x4d
 800517e:	2207      	movs	r2, #7
 8005180:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f009 f8dd 	bl	800e34a <USB_HC_Halt>
 8005190:	e09e      	b.n	80052d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f008 fb3d 	bl	800d81a <USB_ReadChInterrupts>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051aa:	d11b      	bne.n	80051e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b8:	461a      	mov	r2, r3
 80051ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	334d      	adds	r3, #77	@ 0x4d
 80051d0:	2208      	movs	r2, #8
 80051d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f009 f8b4 	bl	800e34a <USB_HC_Halt>
 80051e2:	e075      	b.n	80052d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f008 fb14 	bl	800d81a <USB_ReadChInterrupts>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d11a      	bne.n	8005232 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	2308      	movs	r3, #8
 800520c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	334d      	adds	r3, #77	@ 0x4d
 800521e:	2206      	movs	r2, #6
 8005220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f009 f88d 	bl	800e34a <USB_HC_Halt>
 8005230:	e04e      	b.n	80052d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f008 faed 	bl	800d81a <USB_ReadChInterrupts>
 8005240:	4603      	mov	r3, r0
 8005242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524a:	d11b      	bne.n	8005284 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005258:	461a      	mov	r2, r3
 800525a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800525e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334d      	adds	r3, #77	@ 0x4d
 8005270:	2209      	movs	r2, #9
 8005272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f009 f864 	bl	800e34a <USB_HC_Halt>
 8005282:	e025      	b.n	80052d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f008 fac4 	bl	800d81a <USB_ReadChInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b80      	cmp	r3, #128	@ 0x80
 800529a:	d119      	bne.n	80052d0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a8:	461a      	mov	r2, r3
 80052aa:	2380      	movs	r3, #128	@ 0x80
 80052ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	334d      	adds	r3, #77	@ 0x4d
 80052be:	2207      	movs	r2, #7
 80052c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f009 f83d 	bl	800e34a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f008 fa9e 	bl	800d81a <USB_ReadChInterrupts>
 80052de:	4603      	mov	r3, r0
 80052e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e8:	d112      	bne.n	8005310 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f009 f829 	bl	800e34a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800530a:	6093      	str	r3, [r2, #8]
 800530c:	f000 bd75 	b.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f008 fa7e 	bl	800d81a <USB_ReadChInterrupts>
 800531e:	4603      	mov	r3, r0
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 8128 	bne.w	800557a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005336:	461a      	mov	r2, r3
 8005338:	2320      	movs	r3, #32
 800533a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	331b      	adds	r3, #27
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d119      	bne.n	8005386 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	331b      	adds	r3, #27
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	440a      	add	r2, r1
 800537c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005384:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	799b      	ldrb	r3, [r3, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01b      	beq.n	80053c6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	3330      	adds	r3, #48	@ 0x30
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	1ac9      	subs	r1, r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4403      	add	r3, r0
 80053c2:	3338      	adds	r3, #56	@ 0x38
 80053c4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	334d      	adds	r3, #77	@ 0x4d
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	3344      	adds	r3, #68	@ 0x44
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fa:	461a      	mov	r2, r3
 80053fc:	2301      	movs	r3, #1
 80053fe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3326      	adds	r3, #38	@ 0x26
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3326      	adds	r3, #38	@ 0x26
 8005426:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005428:	2b02      	cmp	r3, #2
 800542a:	d110      	bne.n	800544e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f008 ff88 	bl	800e34a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005446:	461a      	mov	r2, r3
 8005448:	2310      	movs	r3, #16
 800544a:	6093      	str	r3, [r2, #8]
 800544c:	e03d      	b.n	80054ca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3326      	adds	r3, #38	@ 0x26
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d00a      	beq.n	800547a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3326      	adds	r3, #38	@ 0x26
 8005474:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005476:	2b01      	cmp	r3, #1
 8005478:	d127      	bne.n	80054ca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	440a      	add	r2, r1
 8005490:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005494:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005498:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	334c      	adds	r3, #76	@ 0x4c
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	334c      	adds	r3, #76	@ 0x4c
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f00e fad1 	bl	8013a6c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	799b      	ldrb	r3, [r3, #6]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d13b      	bne.n	800554a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	3338      	adds	r3, #56	@ 0x38
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	3328      	adds	r3, #40	@ 0x28
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	440b      	add	r3, r1
 80054f8:	1e59      	subs	r1, r3, #1
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4403      	add	r3, r0
 8005508:	3328      	adds	r3, #40	@ 0x28
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8470 	beq.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	333c      	adds	r3, #60	@ 0x3c
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	f083 0301 	eor.w	r3, r3, #1
 8005532:	b2d8      	uxtb	r0, r3
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	333c      	adds	r3, #60	@ 0x3c
 8005542:	4602      	mov	r2, r0
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	f000 bc58 	b.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	333c      	adds	r3, #60	@ 0x3c
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2d8      	uxtb	r0, r3
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	333c      	adds	r3, #60	@ 0x3c
 8005572:	4602      	mov	r2, r0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	f000 bc40 	b.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f008 f949 	bl	800d81a <USB_ReadChInterrupts>
 8005588:	4603      	mov	r3, r0
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d131      	bne.n	80055f6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559e:	461a      	mov	r2, r3
 80055a0:	2320      	movs	r3, #32
 80055a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	331a      	adds	r3, #26
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	f040 841f 	bne.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	331b      	adds	r3, #27
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	334d      	adds	r3, #77	@ 0x4d
 80055e0:	2203      	movs	r2, #3
 80055e2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f008 feac 	bl	800e34a <USB_HC_Halt>
 80055f2:	f000 bc02 	b.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f008 f90b 	bl	800d81a <USB_ReadChInterrupts>
 8005604:	4603      	mov	r3, r0
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	f040 8305 	bne.w	8005c1a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561c:	461a      	mov	r2, r3
 800561e:	2302      	movs	r3, #2
 8005620:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	334d      	adds	r3, #77	@ 0x4d
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d114      	bne.n	8005662 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334d      	adds	r3, #77	@ 0x4d
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	334c      	adds	r3, #76	@ 0x4c
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e2cc      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334d      	adds	r3, #77	@ 0x4d
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b06      	cmp	r3, #6
 8005676:	d114      	bne.n	80056a2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	334d      	adds	r3, #77	@ 0x4d
 8005688:	2202      	movs	r2, #2
 800568a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	334c      	adds	r3, #76	@ 0x4c
 800569c:	2205      	movs	r2, #5
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e2ac      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334d      	adds	r3, #77	@ 0x4d
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b07      	cmp	r3, #7
 80056b6:	d00b      	beq.n	80056d0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	334d      	adds	r3, #77	@ 0x4d
 80056c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	f040 80a6 	bne.w	800581c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	334d      	adds	r3, #77	@ 0x4d
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3344      	adds	r3, #68	@ 0x44
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4403      	add	r3, r0
 8005704:	3344      	adds	r3, #68	@ 0x44
 8005706:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3344      	adds	r3, #68	@ 0x44
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d943      	bls.n	80057a6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3344      	adds	r3, #68	@ 0x44
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	331a      	adds	r3, #26
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d123      	bne.n	8005790 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	331b      	adds	r3, #27
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	331c      	adds	r3, #28
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	440a      	add	r2, r1
 8005786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800578a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	334c      	adds	r3, #76	@ 0x4c
 80057a0:	2204      	movs	r2, #4
 80057a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057a4:	e229      	b.n	8005bfa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	334c      	adds	r3, #76	@ 0x4c
 80057b6:	2202      	movs	r2, #2
 80057b8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3326      	adds	r3, #38	@ 0x26
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3326      	adds	r3, #38	@ 0x26
 80057e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	f040 8209 	bne.w	8005bfa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005806:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005814:	461a      	mov	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800581a:	e1ee      	b.n	8005bfa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	334d      	adds	r3, #77	@ 0x4d
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b05      	cmp	r3, #5
 8005830:	f040 80c8 	bne.w	80059c4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	334d      	adds	r3, #77	@ 0x4d
 8005844:	2202      	movs	r2, #2
 8005846:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	331b      	adds	r3, #27
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	f040 81ce 	bne.w	8005bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3326      	adds	r3, #38	@ 0x26
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b03      	cmp	r3, #3
 8005874:	d16b      	bne.n	800594e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3348      	adds	r3, #72	@ 0x48
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4403      	add	r3, r0
 8005896:	3348      	adds	r3, #72	@ 0x48
 8005898:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3348      	adds	r3, #72	@ 0x48
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d943      	bls.n	8005938 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3348      	adds	r3, #72	@ 0x48
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	331b      	adds	r3, #27
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	3344      	adds	r3, #68	@ 0x44
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d809      	bhi.n	8005902 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	331c      	adds	r3, #28
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	440a      	add	r2, r1
 8005918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800591c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005920:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	334c      	adds	r3, #76	@ 0x4c
 8005932:	2204      	movs	r2, #4
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e014      	b.n	8005962 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	334c      	adds	r3, #76	@ 0x4c
 8005948:	2202      	movs	r2, #2
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	e009      	b.n	8005962 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	334c      	adds	r3, #76	@ 0x4c
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3326      	adds	r3, #38	@ 0x26
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	3326      	adds	r3, #38	@ 0x26
 8005988:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800598a:	2b02      	cmp	r3, #2
 800598c:	f040 8136 	bne.w	8005bfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059bc:	461a      	mov	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e11b      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	334d      	adds	r3, #77	@ 0x4d
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	f040 8081 	bne.w	8005ade <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	334d      	adds	r3, #77	@ 0x4d
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	331b      	adds	r3, #27
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	f040 80fa 	bne.w	8005bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	334c      	adds	r3, #76	@ 0x4c
 8005a18:	2202      	movs	r2, #2
 8005a1a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a76:	f023 0320 	bic.w	r3, r3, #32
 8005a7a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	3326      	adds	r3, #38	@ 0x26
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005a92:	78fa      	ldrb	r2, [r7, #3]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3326      	adds	r3, #38	@ 0x26
 8005aa2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	f040 80a9 	bne.w	8005bfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ac0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ac8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e08e      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	334d      	adds	r3, #77	@ 0x4d
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d143      	bne.n	8005b7c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	334d      	adds	r3, #77	@ 0x4d
 8005b04:	2202      	movs	r2, #2
 8005b06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	334c      	adds	r3, #76	@ 0x4c
 8005b18:	2202      	movs	r2, #2
 8005b1a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3326      	adds	r3, #38	@ 0x26
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3326      	adds	r3, #38	@ 0x26
 8005b42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d159      	bne.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b74:	461a      	mov	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e03f      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005b7c:	78fa      	ldrb	r2, [r7, #3]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	334d      	adds	r3, #77	@ 0x4d
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d126      	bne.n	8005be0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	334d      	adds	r3, #77	@ 0x4d
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3344      	adds	r3, #68	@ 0x44
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4403      	add	r3, r0
 8005bc6:	3344      	adds	r3, #68	@ 0x44
 8005bc8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	334c      	adds	r3, #76	@ 0x4c
 8005bda:	2204      	movs	r2, #4
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e00d      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	334d      	adds	r3, #77	@ 0x4d
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	f000 8100 	beq.w	8005df8 <HCD_HC_IN_IRQHandler+0xcca>
 8005bf8:	e000      	b.n	8005bfc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	334c      	adds	r3, #76	@ 0x4c
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f00d ff2a 	bl	8013a6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c18:	e0ef      	b.n	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f007 fdf9 	bl	800d81a <USB_ReadChInterrupts>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d12f      	bne.n	8005c92 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	334d      	adds	r3, #77	@ 0x4d
 8005c54:	2205      	movs	r2, #5
 8005c56:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	331a      	adds	r3, #26
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3344      	adds	r3, #68	@ 0x44
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f008 fb5d 	bl	800e34a <USB_HC_Halt>
 8005c90:	e0b3      	b.n	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f007 fdbd 	bl	800d81a <USB_ReadChInterrupts>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	f040 80a7 	bne.w	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3326      	adds	r3, #38	@ 0x26
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d11b      	bne.n	8005cfa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3344      	adds	r3, #68	@ 0x44
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	334d      	adds	r3, #77	@ 0x4d
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f008 fb29 	bl	800e34a <USB_HC_Halt>
 8005cf8:	e03f      	b.n	8005d7a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3326      	adds	r3, #38	@ 0x26
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3326      	adds	r3, #38	@ 0x26
 8005d20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d129      	bne.n	8005d7a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3344      	adds	r3, #68	@ 0x44
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	799b      	ldrb	r3, [r3, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HCD_HC_IN_IRQHandler+0xc2a>
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	331b      	adds	r3, #27
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d110      	bne.n	8005d7a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	334d      	adds	r3, #77	@ 0x4d
 8005d68:	2204      	movs	r2, #4
 8005d6a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f008 fae8 	bl	800e34a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	331b      	adds	r3, #27
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d129      	bne.n	8005de4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	331b      	adds	r3, #27
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dde:	f043 0320 	orr.w	r3, r3, #32
 8005de2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df0:	461a      	mov	r2, r3
 8005df2:	2310      	movs	r3, #16
 8005df4:	6093      	str	r3, [r2, #8]
 8005df6:	e000      	b.n	8005dfa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005df8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f007 fcfb 	bl	800d81a <USB_ReadChInterrupts>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d11b      	bne.n	8005e66 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	334d      	adds	r3, #77	@ 0x4d
 8005e50:	2207      	movs	r2, #7
 8005e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f008 fa74 	bl	800e34a <USB_HC_Halt>
 8005e62:	f000 bc6f 	b.w	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f007 fcd3 	bl	800d81a <USB_ReadChInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	f040 8082 	bne.w	8005f84 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2320      	movs	r3, #32
 8005e90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3319      	adds	r3, #25
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d124      	bne.n	8005ef2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3319      	adds	r3, #25
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	334c      	adds	r3, #76	@ 0x4c
 8005ecc:	2202      	movs	r2, #2
 8005ece:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	334d      	adds	r3, #77	@ 0x4d
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f008 fa2c 	bl	800e34a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	331a      	adds	r3, #26
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	f040 841d 	bne.w	8006744 <HCD_HC_OUT_IRQHandler+0x944>
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	331b      	adds	r3, #27
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f040 8411 	bne.w	8006744 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	3326      	adds	r3, #38	@ 0x26
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d009      	beq.n	8005f4c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	331b      	adds	r3, #27
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	334d      	adds	r3, #77	@ 0x4d
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f008 f9ee 	bl	800e34a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3344      	adds	r3, #68	@ 0x44
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e3df      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f007 fc44 	bl	800d81a <USB_ReadChInterrupts>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d111      	bne.n	8005fc2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005faa:	461a      	mov	r2, r3
 8005fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fb0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f008 f9c5 	bl	800e34a <USB_HC_Halt>
 8005fc0:	e3c0      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f007 fc25 	bl	800d81a <USB_ReadChInterrupts>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d168      	bne.n	80060ac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3344      	adds	r3, #68	@ 0x44
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f007 fc0f 	bl	800d81a <USB_ReadChInterrupts>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d112      	bne.n	800602c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3319      	adds	r3, #25
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	2340      	movs	r3, #64	@ 0x40
 800602a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	331b      	adds	r3, #27
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d019      	beq.n	8006076 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	331b      	adds	r3, #27
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	440a      	add	r2, r1
 800606c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006074:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006082:	461a      	mov	r2, r3
 8006084:	2301      	movs	r3, #1
 8006086:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	334d      	adds	r3, #77	@ 0x4d
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f008 f950 	bl	800e34a <USB_HC_Halt>
 80060aa:	e34b      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f007 fbb0 	bl	800d81a <USB_ReadChInterrupts>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b40      	cmp	r3, #64	@ 0x40
 80060c2:	d139      	bne.n	8006138 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	334d      	adds	r3, #77	@ 0x4d
 80060d4:	2205      	movs	r2, #5
 80060d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	331a      	adds	r3, #26
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3319      	adds	r3, #25
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	3344      	adds	r3, #68	@ 0x44
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	4611      	mov	r1, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f008 f913 	bl	800e34a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006130:	461a      	mov	r2, r3
 8006132:	2340      	movs	r3, #64	@ 0x40
 8006134:	6093      	str	r3, [r2, #8]
 8006136:	e305      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f007 fb6a 	bl	800d81a <USB_ReadChInterrupts>
 8006146:	4603      	mov	r3, r0
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b08      	cmp	r3, #8
 800614e:	d11a      	bne.n	8006186 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615c:	461a      	mov	r2, r3
 800615e:	2308      	movs	r3, #8
 8006160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	334d      	adds	r3, #77	@ 0x4d
 8006172:	2206      	movs	r2, #6
 8006174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f008 f8e3 	bl	800e34a <USB_HC_Halt>
 8006184:	e2de      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f007 fb43 	bl	800d81a <USB_ReadChInterrupts>
 8006194:	4603      	mov	r3, r0
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b10      	cmp	r3, #16
 800619c:	d144      	bne.n	8006228 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3344      	adds	r3, #68	@ 0x44
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	334d      	adds	r3, #77	@ 0x4d
 80061c2:	2204      	movs	r2, #4
 80061c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	3319      	adds	r3, #25
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d114      	bne.n	8006206 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	3318      	adds	r3, #24
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3319      	adds	r3, #25
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f008 f89b 	bl	800e34a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006220:	461a      	mov	r2, r3
 8006222:	2310      	movs	r3, #16
 8006224:	6093      	str	r3, [r2, #8]
 8006226:	e28d      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f007 faf2 	bl	800d81a <USB_ReadChInterrupts>
 8006236:	4603      	mov	r3, r0
 8006238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623c:	2b80      	cmp	r3, #128	@ 0x80
 800623e:	d169      	bne.n	8006314 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	799b      	ldrb	r3, [r3, #6]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	334d      	adds	r3, #77	@ 0x4d
 8006258:	2207      	movs	r2, #7
 800625a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f008 f870 	bl	800e34a <USB_HC_Halt>
 800626a:	e049      	b.n	8006300 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	3344      	adds	r3, #68	@ 0x44
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4403      	add	r3, r0
 800628c:	3344      	adds	r3, #68	@ 0x44
 800628e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3344      	adds	r3, #68	@ 0x44
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d922      	bls.n	80062ec <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	3344      	adds	r3, #68	@ 0x44
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80062ba:	78fa      	ldrb	r2, [r7, #3]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	334c      	adds	r3, #76	@ 0x4c
 80062ca:	2204      	movs	r2, #4
 80062cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	334c      	adds	r3, #76	@ 0x4c
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f00d fbc1 	bl	8013a6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80062ea:	e009      	b.n	8006300 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	334c      	adds	r3, #76	@ 0x4c
 80062fc:	2202      	movs	r2, #2
 80062fe:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	461a      	mov	r2, r3
 800630e:	2380      	movs	r3, #128	@ 0x80
 8006310:	6093      	str	r3, [r2, #8]
 8006312:	e217      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	4611      	mov	r1, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f007 fa7c 	bl	800d81a <USB_ReadChInterrupts>
 8006322:	4603      	mov	r3, r0
 8006324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632c:	d11b      	bne.n	8006366 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	334d      	adds	r3, #77	@ 0x4d
 800633e:	2209      	movs	r2, #9
 8006340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f007 fffd 	bl	800e34a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	461a      	mov	r2, r3
 800635e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006362:	6093      	str	r3, [r2, #8]
 8006364:	e1ee      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4611      	mov	r1, r2
 800636e:	4618      	mov	r0, r3
 8006370:	f007 fa53 	bl	800d81a <USB_ReadChInterrupts>
 8006374:	4603      	mov	r3, r0
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	f040 81df 	bne.w	800673e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638c:	461a      	mov	r2, r3
 800638e:	2302      	movs	r3, #2
 8006390:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006392:	78fa      	ldrb	r2, [r7, #3]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	334d      	adds	r3, #77	@ 0x4d
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 8093 	bne.w	80064d0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	334d      	adds	r3, #77	@ 0x4d
 80063ba:	2202      	movs	r2, #2
 80063bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	334c      	adds	r3, #76	@ 0x4c
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3326      	adds	r3, #38	@ 0x26
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d00b      	beq.n	8006400 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	3326      	adds	r3, #38	@ 0x26
 80063f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	f040 8190 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	799b      	ldrb	r3, [r3, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d115      	bne.n	8006434 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	333d      	adds	r3, #61	@ 0x3d
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	f083 0301 	eor.w	r3, r3, #1
 8006420:	b2d8      	uxtb	r0, r3
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	333d      	adds	r3, #61	@ 0x3d
 8006430:	4602      	mov	r2, r0
 8006432:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	799b      	ldrb	r3, [r3, #6]
 8006438:	2b01      	cmp	r3, #1
 800643a:	f040 8171 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	3334      	adds	r3, #52	@ 0x34
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8165 	beq.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	3334      	adds	r3, #52	@ 0x34
 8006466:	6819      	ldr	r1, [r3, #0]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4403      	add	r3, r0
 8006476:	3328      	adds	r3, #40	@ 0x28
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	440b      	add	r3, r1
 800647c:	1e59      	subs	r1, r3, #1
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4403      	add	r3, r0
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	fbb1 f3f3 	udiv	r3, r1, r3
 8006494:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 813f 	beq.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	333d      	adds	r3, #61	@ 0x3d
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	f083 0301 	eor.w	r3, r3, #1
 80064ba:	b2d8      	uxtb	r0, r3
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	333d      	adds	r3, #61	@ 0x3d
 80064ca:	4602      	mov	r2, r0
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e127      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80064d0:	78fa      	ldrb	r2, [r7, #3]
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	334d      	adds	r3, #77	@ 0x4d
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d120      	bne.n	8006528 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	334d      	adds	r3, #77	@ 0x4d
 80064f6:	2202      	movs	r2, #2
 80064f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80064fa:	78fa      	ldrb	r2, [r7, #3]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	331b      	adds	r3, #27
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 8107 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	334c      	adds	r3, #76	@ 0x4c
 8006522:	2202      	movs	r2, #2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e0fb      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	334d      	adds	r3, #77	@ 0x4d
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b04      	cmp	r3, #4
 800653c:	d13a      	bne.n	80065b4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	334d      	adds	r3, #77	@ 0x4d
 800654e:	2202      	movs	r2, #2
 8006550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	334c      	adds	r3, #76	@ 0x4c
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	331b      	adds	r3, #27
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 80d1 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	331b      	adds	r3, #27
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b0:	6053      	str	r3, [r2, #4]
 80065b2:	e0b5      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	334d      	adds	r3, #77	@ 0x4d
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b05      	cmp	r3, #5
 80065c8:	d114      	bne.n	80065f4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	334d      	adds	r3, #77	@ 0x4d
 80065da:	2202      	movs	r2, #2
 80065dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	334c      	adds	r3, #76	@ 0x4c
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e095      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	334d      	adds	r3, #77	@ 0x4d
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b06      	cmp	r3, #6
 8006608:	d114      	bne.n	8006634 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	334d      	adds	r3, #77	@ 0x4d
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800661e:	78fa      	ldrb	r2, [r7, #3]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	334c      	adds	r3, #76	@ 0x4c
 800662e:	2205      	movs	r2, #5
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e075      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	334d      	adds	r3, #77	@ 0x4d
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b07      	cmp	r3, #7
 8006648:	d00a      	beq.n	8006660 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	334d      	adds	r3, #77	@ 0x4d
 800665a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800665c:	2b09      	cmp	r3, #9
 800665e:	d170      	bne.n	8006742 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	334d      	adds	r3, #77	@ 0x4d
 8006670:	2202      	movs	r2, #2
 8006672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	3344      	adds	r3, #68	@ 0x44
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4403      	add	r3, r0
 8006694:	3344      	adds	r3, #68	@ 0x44
 8006696:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	3344      	adds	r3, #68	@ 0x44
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d914      	bls.n	80066d8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3344      	adds	r3, #68	@ 0x44
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	334c      	adds	r3, #76	@ 0x4c
 80066d2:	2204      	movs	r2, #4
 80066d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066d6:	e022      	b.n	800671e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	334c      	adds	r3, #76	@ 0x4c
 80066e8:	2202      	movs	r2, #2
 80066ea:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006702:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800670a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006718:	461a      	mov	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800671e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	334c      	adds	r3, #76	@ 0x4c
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f00d f998 	bl	8013a6c <HAL_HCD_HC_NotifyURBChange_Callback>
 800673c:	e002      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006742:	bf00      	nop
  }
}
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b08a      	sub	sp, #40	@ 0x28
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	0c5b      	lsrs	r3, r3, #17
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800677e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d004      	beq.n	8006790 <HCD_RXQLVL_IRQHandler+0x46>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b05      	cmp	r3, #5
 800678a:	f000 80b6 	beq.w	80068fa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800678e:	e0b7      	b.n	8006900 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80b3 	beq.w	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4613      	mov	r3, r2
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	332c      	adds	r3, #44	@ 0x2c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80a7 	beq.w	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4613      	mov	r3, r2
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	3338      	adds	r3, #56	@ 0x38
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	18d1      	adds	r1, r2, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4613      	mov	r3, r2
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4403      	add	r3, r0
 80067d4:	3334      	adds	r3, #52	@ 0x34
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4299      	cmp	r1, r3
 80067da:	f200 8083 	bhi.w	80068e4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	4613      	mov	r3, r2
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	332c      	adds	r3, #44	@ 0x2c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	b292      	uxth	r2, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	f006 ffa3 	bl	800d744 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4613      	mov	r3, r2
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	332c      	adds	r3, #44	@ 0x2c
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	18d1      	adds	r1, r2, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4613      	mov	r3, r2
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4403      	add	r3, r0
 8006822:	332c      	adds	r3, #44	@ 0x2c
 8006824:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4613      	mov	r3, r2
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3338      	adds	r3, #56	@ 0x38
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	18d1      	adds	r1, r2, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4613      	mov	r3, r2
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4403      	add	r3, r0
 800684a:	3338      	adds	r3, #56	@ 0x38
 800684c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	0cdb      	lsrs	r3, r3, #19
 800685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006862:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4613      	mov	r3, r2
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3328      	adds	r3, #40	@ 0x28
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4293      	cmp	r3, r2
 800687c:	d13f      	bne.n	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d03c      	beq.n	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800689a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4613      	mov	r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	333c      	adds	r3, #60	@ 0x3c
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f083 0301 	eor.w	r3, r3, #1
 80068cc:	b2d8      	uxtb	r0, r3
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4613      	mov	r3, r2
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	333c      	adds	r3, #60	@ 0x3c
 80068de:	4602      	mov	r2, r0
 80068e0:	701a      	strb	r2, [r3, #0]
      break;
 80068e2:	e00c      	b.n	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4613      	mov	r3, r2
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	334c      	adds	r3, #76	@ 0x4c
 80068f4:	2204      	movs	r2, #4
 80068f6:	701a      	strb	r2, [r3, #0]
      break;
 80068f8:	e001      	b.n	80068fe <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80068fe:	bf00      	nop
  }
}
 8006900:	bf00      	nop
 8006902:	3728      	adds	r7, #40	@ 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006934:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b02      	cmp	r3, #2
 800693e:	d10b      	bne.n	8006958 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f00d f872 	bl	8013a34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f043 0302 	orr.w	r3, r3, #2
 8006956:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d132      	bne.n	80069c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b04      	cmp	r3, #4
 8006972:	d126      	bne.n	80069c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7a5b      	ldrb	r3, [r3, #9]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d113      	bne.n	80069a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006986:	d106      	bne.n	8006996 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2102      	movs	r1, #2
 800698e:	4618      	mov	r0, r3
 8006990:	f007 f85c 	bl	800da4c <USB_InitFSLSPClkSel>
 8006994:	e011      	b.n	80069ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2101      	movs	r1, #1
 800699c:	4618      	mov	r0, r3
 800699e:	f007 f855 	bl	800da4c <USB_InitFSLSPClkSel>
 80069a2:	e00a      	b.n	80069ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	79db      	ldrb	r3, [r3, #7]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d106      	bne.n	80069ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069b2:	461a      	mov	r2, r3
 80069b4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80069b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f00d f868 	bl	8013a90 <HAL_HCD_PortEnabled_Callback>
 80069c0:	e002      	b.n	80069c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f00d f872 	bl	8013aac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d103      	bne.n	80069da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6013      	str	r3, [r2, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e08b      	b.n	8006b1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fa fc1a 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	@ 0x24
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d107      	bne.n	8006a6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	e006      	b.n	8006a78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d108      	bne.n	8006a92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	e007      	b.n	8006aa2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6859      	ldr	r1, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <HAL_I2C_Init+0x134>)
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ac0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	02008000 	.word	0x02008000

08006b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d138      	bne.n	8006bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e032      	b.n	8006bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2224      	movs	r2, #36	@ 0x24
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6819      	ldr	r1, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e000      	b.n	8006bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d139      	bne.n	8006c48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e033      	b.n	8006c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2224      	movs	r2, #36	@ 0x24
 8006bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0201 	bic.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e0bf      	b.n	8006dea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fa fc10 	bl	80014a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6999      	ldr	r1, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6899      	ldr	r1, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b4a      	ldr	r3, [pc, #296]	@ (8006df4 <HAL_LTDC_Init+0x19c>)
 8006ccc:	400b      	ands	r3, r1
 8006cce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68d9      	ldr	r1, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8006df4 <HAL_LTDC_Init+0x19c>)
 8006cfa:	400b      	ands	r3, r1
 8006cfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68d9      	ldr	r1, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1a      	ldr	r2, [r3, #32]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6919      	ldr	r1, [r3, #16]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b33      	ldr	r3, [pc, #204]	@ (8006df4 <HAL_LTDC_Init+0x19c>)
 8006d28:	400b      	ands	r3, r1
 8006d2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6919      	ldr	r1, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6959      	ldr	r1, [r3, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b27      	ldr	r3, [pc, #156]	@ (8006df4 <HAL_LTDC_Init+0x19c>)
 8006d56:	400b      	ands	r3, r1
 8006d58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6959      	ldr	r1, [r3, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0206 	orr.w	r2, r2, #6
 8006dc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	f000f800 	.word	0xf000f800

08006df8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d023      	beq.n	8006e62 <HAL_LTDC_IRQHandler+0x6a>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01e      	beq.n	8006e62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0204 	bic.w	r2, r2, #4
 8006e32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e42:	f043 0201 	orr.w	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f86f 	bl	8006f40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d023      	beq.n	8006eb4 <HAL_LTDC_IRQHandler+0xbc>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01e      	beq.n	8006eb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0202 	bic.w	r2, r2, #2
 8006e84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e94:	f043 0202 	orr.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f846 	bl	8006f40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01b      	beq.n	8006ef6 <HAL_LTDC_IRQHandler+0xfe>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d016      	beq.n	8006ef6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2201      	movs	r2, #1
 8006ede:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f82f 	bl	8006f54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <HAL_LTDC_IRQHandler+0x140>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0208 	bic.w	r2, r2, #8
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2208      	movs	r2, #8
 8006f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f818 	bl	8006f68 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f7c:	b5b0      	push	{r4, r5, r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_LTDC_ConfigLayer+0x1a>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e02c      	b.n	8006ff0 <HAL_LTDC_ConfigLayer+0x74>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2134      	movs	r1, #52	@ 0x34
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4614      	mov	r4, r2
 8006fba:	461d      	mov	r5, r3
 8006fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f811 	bl	8006ff8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bdb0      	pop	{r4, r5, r7, pc}

08006ff8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	@ 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007014:	4413      	add	r3, r2
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	01db      	lsls	r3, r3, #7
 8007024:	4413      	add	r3, r2
 8007026:	3384      	adds	r3, #132	@ 0x84
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	4611      	mov	r1, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	01d2      	lsls	r2, r2, #7
 8007034:	440a      	add	r2, r1
 8007036:	3284      	adds	r2, #132	@ 0x84
 8007038:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800703c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800704e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007050:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	01db      	lsls	r3, r3, #7
 800705c:	440b      	add	r3, r1
 800705e:	3384      	adds	r3, #132	@ 0x84
 8007060:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007066:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007076:	4413      	add	r3, r2
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	01db      	lsls	r3, r3, #7
 8007086:	4413      	add	r3, r2
 8007088:	3384      	adds	r3, #132	@ 0x84
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	4611      	mov	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	01d2      	lsls	r2, r2, #7
 8007096:	440a      	add	r2, r1
 8007098:	3284      	adds	r2, #132	@ 0x84
 800709a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800709e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ae:	4413      	add	r3, r2
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	01db      	lsls	r3, r3, #7
 80070bc:	440b      	add	r3, r1
 80070be:	3384      	adds	r3, #132	@ 0x84
 80070c0:	4619      	mov	r1, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	01db      	lsls	r3, r3, #7
 80070d2:	4413      	add	r3, r2
 80070d4:	3384      	adds	r3, #132	@ 0x84
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	4611      	mov	r1, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	01d2      	lsls	r2, r2, #7
 80070e2:	440a      	add	r2, r1
 80070e4:	3284      	adds	r2, #132	@ 0x84
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	01db      	lsls	r3, r3, #7
 80070f6:	4413      	add	r3, r2
 80070f8:	3384      	adds	r3, #132	@ 0x84
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	01db      	lsls	r3, r3, #7
 8007128:	4413      	add	r3, r2
 800712a:	3384      	adds	r3, #132	@ 0x84
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	01db      	lsls	r3, r3, #7
 8007138:	4413      	add	r3, r2
 800713a:	3384      	adds	r3, #132	@ 0x84
 800713c:	461a      	mov	r2, r3
 800713e:	2300      	movs	r3, #0
 8007140:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007148:	461a      	mov	r2, r3
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	431a      	orrs	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	01db      	lsls	r3, r3, #7
 800715c:	440b      	add	r3, r1
 800715e:	3384      	adds	r3, #132	@ 0x84
 8007160:	4619      	mov	r1, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	01db      	lsls	r3, r3, #7
 8007172:	4413      	add	r3, r2
 8007174:	3384      	adds	r3, #132	@ 0x84
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	4611      	mov	r1, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	01d2      	lsls	r2, r2, #7
 8007182:	440a      	add	r2, r1
 8007184:	3284      	adds	r2, #132	@ 0x84
 8007186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800718a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	01db      	lsls	r3, r3, #7
 8007196:	4413      	add	r3, r2
 8007198:	3384      	adds	r3, #132	@ 0x84
 800719a:	461a      	mov	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	01db      	lsls	r3, r3, #7
 80071ac:	4413      	add	r3, r2
 80071ae:	3384      	adds	r3, #132	@ 0x84
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4619      	mov	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	01db      	lsls	r3, r3, #7
 80071bc:	440b      	add	r3, r1
 80071be:	3384      	adds	r3, #132	@ 0x84
 80071c0:	4619      	mov	r1, r3
 80071c2:	4b58      	ldr	r3, [pc, #352]	@ (8007324 <LTDC_SetConfig+0x32c>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	68f9      	ldr	r1, [r7, #12]
 80071d2:	6809      	ldr	r1, [r1, #0]
 80071d4:	4608      	mov	r0, r1
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	01c9      	lsls	r1, r1, #7
 80071da:	4401      	add	r1, r0
 80071dc:	3184      	adds	r1, #132	@ 0x84
 80071de:	4313      	orrs	r3, r2
 80071e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	01db      	lsls	r3, r3, #7
 80071ec:	4413      	add	r3, r2
 80071ee:	3384      	adds	r3, #132	@ 0x84
 80071f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	4413      	add	r3, r2
 80071fe:	3384      	adds	r3, #132	@ 0x84
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	4413      	add	r3, r2
 8007212:	3384      	adds	r3, #132	@ 0x84
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007224:	2304      	movs	r3, #4
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e01b      	b.n	8007262 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d102      	bne.n	8007238 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007232:	2303      	movs	r3, #3
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e014      	b.n	8007262 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d00b      	beq.n	8007258 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007244:	2b02      	cmp	r3, #2
 8007246:	d007      	beq.n	8007258 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800724c:	2b03      	cmp	r3, #3
 800724e:	d003      	beq.n	8007258 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007254:	2b07      	cmp	r3, #7
 8007256:	d102      	bne.n	800725e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007258:	2302      	movs	r3, #2
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e001      	b.n	8007262 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	4413      	add	r3, r2
 800726e:	3384      	adds	r3, #132	@ 0x84
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	4611      	mov	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	01d2      	lsls	r2, r2, #7
 800727c:	440a      	add	r2, r1
 800727e:	3284      	adds	r2, #132	@ 0x84
 8007280:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007284:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80072a4:	68f9      	ldr	r1, [r7, #12]
 80072a6:	6809      	ldr	r1, [r1, #0]
 80072a8:	4608      	mov	r0, r1
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	01c9      	lsls	r1, r1, #7
 80072ae:	4401      	add	r1, r0
 80072b0:	3184      	adds	r1, #132	@ 0x84
 80072b2:	4313      	orrs	r3, r2
 80072b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	4413      	add	r3, r2
 80072c2:	3384      	adds	r3, #132	@ 0x84
 80072c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	01db      	lsls	r3, r3, #7
 80072d0:	440b      	add	r3, r1
 80072d2:	3384      	adds	r3, #132	@ 0x84
 80072d4:	4619      	mov	r1, r3
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <LTDC_SetConfig+0x330>)
 80072d8:	4013      	ands	r3, r2
 80072da:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	01db      	lsls	r3, r3, #7
 80072e6:	4413      	add	r3, r2
 80072e8:	3384      	adds	r3, #132	@ 0x84
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	01db      	lsls	r3, r3, #7
 80072fc:	4413      	add	r3, r2
 80072fe:	3384      	adds	r3, #132	@ 0x84
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	4611      	mov	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	01d2      	lsls	r2, r2, #7
 800730c:	440a      	add	r2, r1
 800730e:	3284      	adds	r2, #132	@ 0x84
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6013      	str	r3, [r2, #0]
}
 8007316:	bf00      	nop
 8007318:	3724      	adds	r7, #36	@ 0x24
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	fffff8f8 	.word	0xfffff8f8
 8007328:	fffff800 	.word	0xfffff800

0800732c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a04      	ldr	r2, [pc, #16]	@ (8007348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800733a:	6013      	str	r3, [r2, #0]
}
 800733c:	bf00      	nop
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40007000 	.word	0x40007000

0800734c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007356:	4b23      	ldr	r3, [pc, #140]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007360:	6413      	str	r3, [r2, #64]	@ 0x40
 8007362:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800736e:	4b1e      	ldr	r3, [pc, #120]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007378:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800737a:	f7fb fcc9 	bl	8002d10 <HAL_GetTick>
 800737e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007380:	e009      	b.n	8007396 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007382:	f7fb fcc5 	bl	8002d10 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007390:	d901      	bls.n	8007396 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e022      	b.n	80073dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007396:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a2:	d1ee      	bne.n	8007382 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a0f      	ldr	r2, [pc, #60]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b0:	f7fb fcae 	bl	8002d10 <HAL_GetTick>
 80073b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073b6:	e009      	b.n	80073cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073b8:	f7fb fcaa 	bl	8002d10 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073c6:	d901      	bls.n	80073cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e007      	b.n	80073dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073cc:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d8:	d1ee      	bne.n	80073b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40007000 	.word	0x40007000

080073ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80073f4:	f7fb fc8c 	bl	8002d10 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e067      	b.n	80074d4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fa fa33 	bl	8001884 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800741e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f85e 	bl	80074e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	021a      	lsls	r2, r3, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	2120      	movs	r1, #32
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f856 	bl	8007500 <QSPI_WaitFlagStateUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d135      	bne.n	80074ca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_QSPI_Init+0xf0>)
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6852      	ldr	r2, [r2, #4]
 800746c:	0611      	lsls	r1, r2, #24
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68d2      	ldr	r2, [r2, #12]
 8007472:	4311      	orrs	r1, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	69d2      	ldr	r2, [r2, #28]
 8007478:	4311      	orrs	r1, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6a12      	ldr	r2, [r2, #32]
 800747e:	4311      	orrs	r1, r2
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	430b      	orrs	r3, r1
 8007486:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b14      	ldr	r3, [pc, #80]	@ (80074e0 <HAL_QSPI_Init+0xf4>)
 8007490:	4013      	ands	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6912      	ldr	r2, [r2, #16]
 8007496:	0411      	lsls	r1, r2, #16
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6952      	ldr	r2, [r2, #20]
 800749c:	4311      	orrs	r1, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6992      	ldr	r2, [r2, #24]
 80074a2:	4311      	orrs	r1, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	00ffff2f 	.word	0x00ffff2f
 80074e0:	ffe0f8fe 	.word	0xffe0f8fe

080074e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007510:	e01a      	b.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d016      	beq.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fb fbf9 	bl	8002d10 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10b      	bne.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753c:	f043 0201 	orr.w	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e00e      	b.n	8007566 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	429a      	cmp	r2, r3
 8007562:	d1d6      	bne.n	8007512 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e291      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8087 	beq.w	80076a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007594:	4b96      	ldr	r3, [pc, #600]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	2b04      	cmp	r3, #4
 800759e:	d00c      	beq.n	80075ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a0:	4b93      	ldr	r3, [pc, #588]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d112      	bne.n	80075d2 <HAL_RCC_OscConfig+0x62>
 80075ac:	4b90      	ldr	r3, [pc, #576]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ba:	4b8d      	ldr	r3, [pc, #564]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d06c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x130>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d168      	bne.n	80076a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e26b      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075da:	d106      	bne.n	80075ea <HAL_RCC_OscConfig+0x7a>
 80075dc:	4b84      	ldr	r3, [pc, #528]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a83      	ldr	r2, [pc, #524]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e02e      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0x9c>
 80075f2:	4b7f      	ldr	r3, [pc, #508]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a7e      	ldr	r2, [pc, #504]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b7c      	ldr	r3, [pc, #496]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a7b      	ldr	r2, [pc, #492]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e01d      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007614:	d10c      	bne.n	8007630 <HAL_RCC_OscConfig+0xc0>
 8007616:	4b76      	ldr	r3, [pc, #472]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a75      	ldr	r2, [pc, #468]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800761c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b73      	ldr	r3, [pc, #460]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a72      	ldr	r2, [pc, #456]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	e00b      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 8007630:	4b6f      	ldr	r3, [pc, #444]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6e      	ldr	r2, [pc, #440]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b6c      	ldr	r3, [pc, #432]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6b      	ldr	r2, [pc, #428]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d013      	beq.n	8007678 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fb5e 	bl	8002d10 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007658:	f7fb fb5a 	bl	8002d10 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	@ 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e21f      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	4b61      	ldr	r3, [pc, #388]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0xe8>
 8007676:	e014      	b.n	80076a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fb fb4a 	bl	8002d10 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007680:	f7fb fb46 	bl	8002d10 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b64      	cmp	r3, #100	@ 0x64
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e20b      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007692:	4b57      	ldr	r3, [pc, #348]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x110>
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d069      	beq.n	8007782 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ae:	4b50      	ldr	r3, [pc, #320]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ba:	4b4d      	ldr	r3, [pc, #308]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 030c 	and.w	r3, r3, #12
 80076c2:	2b08      	cmp	r3, #8
 80076c4:	d11c      	bne.n	8007700 <HAL_RCC_OscConfig+0x190>
 80076c6:	4b4a      	ldr	r3, [pc, #296]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d116      	bne.n	8007700 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d2:	4b47      	ldr	r3, [pc, #284]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_RCC_OscConfig+0x17a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d001      	beq.n	80076ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e1df      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ea:	4b41      	ldr	r3, [pc, #260]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	493d      	ldr	r1, [pc, #244]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076fe:	e040      	b.n	8007782 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d023      	beq.n	8007750 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007708:	4b39      	ldr	r3, [pc, #228]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a38      	ldr	r2, [pc, #224]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fb fafc 	bl	8002d10 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fb faf8 	bl	8002d10 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e1bd      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773a:	4b2d      	ldr	r3, [pc, #180]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4929      	ldr	r1, [pc, #164]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800774a:	4313      	orrs	r3, r2
 800774c:	600b      	str	r3, [r1, #0]
 800774e:	e018      	b.n	8007782 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007750:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fb fad8 	bl	8002d10 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007764:	f7fb fad4 	bl	8002d10 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e199      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007776:	4b1e      	ldr	r3, [pc, #120]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d038      	beq.n	8007800 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d019      	beq.n	80077ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007796:	4b16      	ldr	r3, [pc, #88]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779a:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a2:	f7fb fab5 	bl	8002d10 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077aa:	f7fb fab1 	bl	8002d10 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e176      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077bc:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <HAL_RCC_OscConfig+0x23a>
 80077c8:	e01a      	b.n	8007800 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ce:	4a08      	ldr	r2, [pc, #32]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d6:	f7fb fa9b 	bl	8002d10 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077de:	f7fb fa97 	bl	8002d10 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d903      	bls.n	80077f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e15c      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
 80077f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f4:	4b91      	ldr	r3, [pc, #580]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1ee      	bne.n	80077de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80a4 	beq.w	8007956 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800780e:	4b8b      	ldr	r3, [pc, #556]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800781a:	4b88      	ldr	r3, [pc, #544]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	4a87      	ldr	r2, [pc, #540]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007824:	6413      	str	r3, [r2, #64]	@ 0x40
 8007826:	4b85      	ldr	r3, [pc, #532]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782e:	60bb      	str	r3, [r7, #8]
 8007830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007836:	4b82      	ldr	r3, [pc, #520]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783e:	2b00      	cmp	r3, #0
 8007840:	d118      	bne.n	8007874 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007842:	4b7f      	ldr	r3, [pc, #508]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a7e      	ldr	r2, [pc, #504]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784e:	f7fb fa5f 	bl	8002d10 <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007854:	e008      	b.n	8007868 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007856:	f7fb fa5b 	bl	8002d10 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b64      	cmp	r3, #100	@ 0x64
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e120      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007868:	4b75      	ldr	r3, [pc, #468]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d106      	bne.n	800788a <HAL_RCC_OscConfig+0x31a>
 800787c:	4b6f      	ldr	r3, [pc, #444]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007880:	4a6e      	ldr	r2, [pc, #440]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	@ 0x70
 8007888:	e02d      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0x33c>
 8007892:	4b6a      	ldr	r3, [pc, #424]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	4a69      	ldr	r2, [pc, #420]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	6713      	str	r3, [r2, #112]	@ 0x70
 800789e:	4b67      	ldr	r3, [pc, #412]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	4a66      	ldr	r2, [pc, #408]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078a4:	f023 0304 	bic.w	r3, r3, #4
 80078a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078aa:	e01c      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d10c      	bne.n	80078ce <HAL_RCC_OscConfig+0x35e>
 80078b4:	4b61      	ldr	r3, [pc, #388]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	4a60      	ldr	r2, [pc, #384]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078ba:	f043 0304 	orr.w	r3, r3, #4
 80078be:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c0:	4b5e      	ldr	r3, [pc, #376]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80078cc:	e00b      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 80078ce:	4b5b      	ldr	r3, [pc, #364]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d2:	4a5a      	ldr	r2, [pc, #360]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078da:	4b58      	ldr	r3, [pc, #352]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	4a57      	ldr	r2, [pc, #348]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078e0:	f023 0304 	bic.w	r3, r3, #4
 80078e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d015      	beq.n	800791a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fb fa0f 	bl	8002d10 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f4:	e00a      	b.n	800790c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f6:	f7fb fa0b 	bl	8002d10 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007904:	4293      	cmp	r3, r2
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e0ce      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800790c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800790e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0ee      	beq.n	80078f6 <HAL_RCC_OscConfig+0x386>
 8007918:	e014      	b.n	8007944 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791a:	f7fb f9f9 	bl	8002d10 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007920:	e00a      	b.n	8007938 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fb f9f5 	bl	8002d10 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e0b8      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ee      	bne.n	8007922 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800794a:	4b3c      	ldr	r3, [pc, #240]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	4a3b      	ldr	r2, [pc, #236]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007954:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80a4 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007960:	4b36      	ldr	r3, [pc, #216]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b08      	cmp	r3, #8
 800796a:	d06b      	beq.n	8007a44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d149      	bne.n	8007a08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007974:	4b31      	ldr	r3, [pc, #196]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a30      	ldr	r2, [pc, #192]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800797a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800797e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007980:	f7fb f9c6 	bl	8002d10 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007988:	f7fb f9c2 	bl	8002d10 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e087      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799a:	4b28      	ldr	r3, [pc, #160]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69da      	ldr	r2, [r3, #28]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	019b      	lsls	r3, r3, #6
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	3b01      	subs	r3, #1
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	4313      	orrs	r3, r2
 80079cc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079d4:	4b19      	ldr	r3, [pc, #100]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fb f996 	bl	8002d10 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fb f992 	bl	8002d10 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e057      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fa:	4b10      	ldr	r3, [pc, #64]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0x478>
 8007a06:	e04f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a08:	4b0c      	ldr	r3, [pc, #48]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a14:	f7fb f97c 	bl	8002d10 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a1c:	f7fb f978 	bl	8002d10 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e03d      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	4b03      	ldr	r3, [pc, #12]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f0      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4ac>
 8007a3a:	e035      	b.n	8007aa8 <HAL_RCC_OscConfig+0x538>
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a44:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab4 <HAL_RCC_OscConfig+0x544>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d028      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d121      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d11a      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d111      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d001      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40023800 	.word	0x40023800

08007ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0d0      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d910      	bls.n	8007b00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b67      	ldr	r3, [pc, #412]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 020f 	bic.w	r2, r3, #15
 8007ae6:	4965      	ldr	r1, [pc, #404]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aee:	4b63      	ldr	r3, [pc, #396]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0b8      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d020      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b18:	4b59      	ldr	r3, [pc, #356]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b30:	4b53      	ldr	r3, [pc, #332]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	4a52      	ldr	r2, [pc, #328]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b3c:	4b50      	ldr	r3, [pc, #320]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	494d      	ldr	r1, [pc, #308]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d040      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d107      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	4b47      	ldr	r3, [pc, #284]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d115      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e07f      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7a:	4b41      	ldr	r3, [pc, #260]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e073      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e06b      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b9a:	4b39      	ldr	r3, [pc, #228]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0203 	bic.w	r2, r3, #3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4936      	ldr	r1, [pc, #216]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bac:	f7fb f8b0 	bl	8002d10 <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb2:	e00a      	b.n	8007bca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb4:	f7fb f8ac 	bl	8002d10 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e053      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	4b2d      	ldr	r3, [pc, #180]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 020c 	and.w	r2, r3, #12
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d1eb      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d210      	bcs.n	8007c0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bea:	4b24      	ldr	r3, [pc, #144]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f023 020f 	bic.w	r2, r3, #15
 8007bf2:	4922      	ldr	r1, [pc, #136]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfa:	4b20      	ldr	r3, [pc, #128]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d001      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e032      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c18:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4916      	ldr	r1, [pc, #88]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c36:	4b12      	ldr	r3, [pc, #72]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	490e      	ldr	r1, [pc, #56]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c4a:	f000 f821 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	091b      	lsrs	r3, r3, #4
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	490a      	ldr	r1, [pc, #40]	@ (8007c84 <HAL_RCC_ClockConfig+0x1cc>)
 8007c5c:	5ccb      	ldrb	r3, [r1, r3]
 8007c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c62:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <HAL_RCC_ClockConfig+0x1d0>)
 8007c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <HAL_RCC_ClockConfig+0x1d4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fa f9be 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023c00 	.word	0x40023c00
 8007c80:	40023800 	.word	0x40023800
 8007c84:	080141fc 	.word	0x080141fc
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	20000004 	.word	0x20000004

08007c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c94:	b090      	sub	sp, #64	@ 0x40
 8007c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca8:	4b59      	ldr	r3, [pc, #356]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 030c 	and.w	r3, r3, #12
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d00d      	beq.n	8007cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	f200 80a1 	bhi.w	8007dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d003      	beq.n	8007cca <HAL_RCC_GetSysClockFreq+0x3a>
 8007cc2:	e09b      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cc4:	4b53      	ldr	r3, [pc, #332]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cc8:	e09b      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cca:	4b53      	ldr	r3, [pc, #332]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cce:	e098      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cda:	4b4d      	ldr	r3, [pc, #308]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d028      	beq.n	8007d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	2200      	movs	r2, #0
 8007cee:	623b      	str	r3, [r7, #32]
 8007cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4b47      	ldr	r3, [pc, #284]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cfc:	fb03 f201 	mul.w	r2, r3, r1
 8007d00:	2300      	movs	r3, #0
 8007d02:	fb00 f303 	mul.w	r3, r0, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	4a43      	ldr	r2, [pc, #268]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8007d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d10:	460a      	mov	r2, r1
 8007d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d16:	4413      	add	r3, r2
 8007d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	61fa      	str	r2, [r7, #28]
 8007d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d2a:	f7f8 fa71 	bl	8000210 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4613      	mov	r3, r2
 8007d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d36:	e053      	b.n	8007de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d38:	4b35      	ldr	r3, [pc, #212]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	099b      	lsrs	r3, r3, #6
 8007d3e:	2200      	movs	r2, #0
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	617a      	str	r2, [r7, #20]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d4a:	f04f 0b00 	mov.w	fp, #0
 8007d4e:	4652      	mov	r2, sl
 8007d50:	465b      	mov	r3, fp
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f04f 0100 	mov.w	r1, #0
 8007d5a:	0159      	lsls	r1, r3, #5
 8007d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d60:	0150      	lsls	r0, r2, #5
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	ebb2 080a 	subs.w	r8, r2, sl
 8007d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d82:	ebb2 0408 	subs.w	r4, r2, r8
 8007d86:	eb63 0509 	sbc.w	r5, r3, r9
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	00eb      	lsls	r3, r5, #3
 8007d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d98:	00e2      	lsls	r2, r4, #3
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	461d      	mov	r5, r3
 8007d9e:	eb14 030a 	adds.w	r3, r4, sl
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	eb45 030b 	adc.w	r3, r5, fp
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007db6:	4629      	mov	r1, r5
 8007db8:	028b      	lsls	r3, r1, #10
 8007dba:	4621      	mov	r1, r4
 8007dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	028a      	lsls	r2, r1, #10
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dca:	2200      	movs	r2, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
 8007dce:	60fa      	str	r2, [r7, #12]
 8007dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dd4:	f7f8 fa1c 	bl	8000210 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4613      	mov	r3, r2
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007de0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	3301      	adds	r3, #1
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dfa:	e002      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dfc:	4b05      	ldr	r3, [pc, #20]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3740      	adds	r7, #64	@ 0x40
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	40023800 	.word	0x40023800
 8007e14:	00f42400 	.word	0x00f42400
 8007e18:	017d7840 	.word	0x017d7840

08007e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e20:	4b03      	ldr	r3, [pc, #12]	@ (8007e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e22:	681b      	ldr	r3, [r3, #0]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000000 	.word	0x20000000

08007e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e38:	f7ff fff0 	bl	8007e1c <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	0a9b      	lsrs	r3, r3, #10
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	@ (8007e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40023800 	.word	0x40023800
 8007e58:	0801420c 	.word	0x0801420c

08007e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e60:	f7ff ffdc 	bl	8007e1c <HAL_RCC_GetHCLKFreq>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0b5b      	lsrs	r3, r3, #13
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	4903      	ldr	r1, [pc, #12]	@ (8007e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e72:	5ccb      	ldrb	r3, [r1, r3]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	0801420c 	.word	0x0801420c

08007e84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220f      	movs	r2, #15
 8007e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e94:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0203 	and.w	r2, r3, #3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007eac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007eb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ec6:	4b07      	ldr	r3, [pc, #28]	@ (8007ee4 <HAL_RCC_GetClockConfig+0x60>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	40023c00 	.word	0x40023c00

08007ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f10:	4b69      	ldr	r3, [pc, #420]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a68      	ldr	r2, [pc, #416]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f1a:	6093      	str	r3, [r2, #8]
 8007f1c:	4b66      	ldr	r3, [pc, #408]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f24:	4964      	ldr	r1, [pc, #400]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f42:	4b5d      	ldr	r3, [pc, #372]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f50:	4959      	ldr	r1, [pc, #356]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f60:	d101      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	494a      	ldr	r1, [pc, #296]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 808b 	beq.w	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	4a39      	ldr	r2, [pc, #228]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fd8:	4b37      	ldr	r3, [pc, #220]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fe4:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a34      	ldr	r2, [pc, #208]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff0:	f7fa fe8e 	bl	8002d10 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff8:	f7fa fe8a 	bl	8002d10 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	@ 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e357      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800800a:	4b2c      	ldr	r3, [pc, #176]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008016:	4b28      	ldr	r3, [pc, #160]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800801e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d035      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d02e      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008034:	4b20      	ldr	r3, [pc, #128]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800803c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800803e:	4b1e      	ldr	r3, [pc, #120]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	4a1d      	ldr	r2, [pc, #116]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008048:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800804a:	4b1b      	ldr	r3, [pc, #108]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008054:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008056:	4a18      	ldr	r2, [pc, #96]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800805c:	4b16      	ldr	r3, [pc, #88]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b01      	cmp	r3, #1
 8008066:	d114      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fa fe52 	bl	8002d10 <HAL_GetTick>
 800806c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800806e:	e00a      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008070:	f7fa fe4e 	bl	8002d10 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e319      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0ee      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800809a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800809e:	d111      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080a0:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080ae:	400b      	ands	r3, r1
 80080b0:	4901      	ldr	r1, [pc, #4]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	608b      	str	r3, [r1, #8]
 80080b6:	e00b      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080b8:	40023800 	.word	0x40023800
 80080bc:	40007000 	.word	0x40007000
 80080c0:	0ffffcff 	.word	0x0ffffcff
 80080c4:	4baa      	ldr	r3, [pc, #680]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4aa9      	ldr	r2, [pc, #676]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080ce:	6093      	str	r3, [r2, #8]
 80080d0:	4ba7      	ldr	r3, [pc, #668]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080dc:	49a4      	ldr	r1, [pc, #656]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f4:	4a9e      	ldr	r2, [pc, #632]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008100:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008108:	4999      	ldr	r1, [pc, #612]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800811c:	4b94      	ldr	r3, [pc, #592]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008122:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812a:	4991      	ldr	r1, [pc, #580]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800813e:	4b8c      	ldr	r3, [pc, #560]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800814c:	4988      	ldr	r1, [pc, #544]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008160:	4b83      	ldr	r3, [pc, #524]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800816e:	4980      	ldr	r1, [pc, #512]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008182:	4b7b      	ldr	r3, [pc, #492]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008190:	4977      	ldr	r1, [pc, #476]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081a4:	4b72      	ldr	r3, [pc, #456]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f023 0203 	bic.w	r2, r3, #3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b2:	496f      	ldr	r1, [pc, #444]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f023 020c 	bic.w	r2, r3, #12
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d4:	4966      	ldr	r1, [pc, #408]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081e8:	4b61      	ldr	r3, [pc, #388]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f6:	495e      	ldr	r1, [pc, #376]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800820a:	4b59      	ldr	r3, [pc, #356]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008218:	4955      	ldr	r1, [pc, #340]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800822c:	4b50      	ldr	r3, [pc, #320]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	494d      	ldr	r1, [pc, #308]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800824e:	4b48      	ldr	r3, [pc, #288]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008254:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825c:	4944      	ldr	r1, [pc, #272]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008270:	4b3f      	ldr	r3, [pc, #252]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800827e:	493c      	ldr	r1, [pc, #240]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008292:	4b37      	ldr	r3, [pc, #220]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a0:	4933      	ldr	r1, [pc, #204]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082b4:	4b2e      	ldr	r3, [pc, #184]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c2:	492b      	ldr	r1, [pc, #172]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d011      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082d6:	4b26      	ldr	r3, [pc, #152]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e4:	4922      	ldr	r1, [pc, #136]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f4:	d101      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008316:	4b16      	ldr	r3, [pc, #88]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008324:	4912      	ldr	r1, [pc, #72]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008338:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800833e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	4909      	ldr	r1, [pc, #36]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d006      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80d9 	beq.w	8008516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008364:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a01      	ldr	r2, [pc, #4]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800836a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800836e:	e001      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008370:	40023800 	.word	0x40023800
 8008374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008376:	f7fa fccb 	bl	8002d10 <HAL_GetTick>
 800837a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800837c:	e008      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800837e:	f7fa fcc7 	bl	8002d10 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b64      	cmp	r3, #100	@ 0x64
 800838a:	d901      	bls.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e194      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008390:	4b6c      	ldr	r3, [pc, #432]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f0      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d021      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11d      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083b0:	4b64      	ldr	r3, [pc, #400]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083b6:	0c1b      	lsrs	r3, r3, #16
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083be:	4b61      	ldr	r3, [pc, #388]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c4:	0e1b      	lsrs	r3, r3, #24
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	019a      	lsls	r2, r3, #6
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	041b      	lsls	r3, r3, #16
 80083d6:	431a      	orrs	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	071b      	lsls	r3, r3, #28
 80083e4:	4957      	ldr	r1, [pc, #348]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008400:	d00a      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02e      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008416:	d129      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008418:	4b4a      	ldr	r3, [pc, #296]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008426:	4b47      	ldr	r3, [pc, #284]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800842c:	0f1b      	lsrs	r3, r3, #28
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	019a      	lsls	r2, r3, #6
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	431a      	orrs	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	493d      	ldr	r1, [pc, #244]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008454:	4b3b      	ldr	r3, [pc, #236]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800845a:	f023 021f 	bic.w	r2, r3, #31
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008462:	3b01      	subs	r3, #1
 8008464:	4937      	ldr	r1, [pc, #220]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01d      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008478:	4b32      	ldr	r3, [pc, #200]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800847a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800847e:	0e1b      	lsrs	r3, r3, #24
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008486:	4b2f      	ldr	r3, [pc, #188]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800848c:	0f1b      	lsrs	r3, r3, #28
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	019a      	lsls	r2, r3, #6
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	431a      	orrs	r2, r3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	061b      	lsls	r3, r3, #24
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	071b      	lsls	r3, r3, #28
 80084ac:	4925      	ldr	r1, [pc, #148]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d011      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	019a      	lsls	r2, r3, #6
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	071b      	lsls	r3, r3, #28
 80084dc:	4919      	ldr	r1, [pc, #100]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084e4:	4b17      	ldr	r3, [pc, #92]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a16      	ldr	r2, [pc, #88]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f0:	f7fa fc0e 	bl	8002d10 <HAL_GetTick>
 80084f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084f6:	e008      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084f8:	f7fa fc0a 	bl	8002d10 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b64      	cmp	r3, #100	@ 0x64
 8008504:	d901      	bls.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e0d7      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800850a:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f0      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b01      	cmp	r3, #1
 800851a:	f040 80cd 	bne.w	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800851e:	4b09      	ldr	r3, [pc, #36]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a08      	ldr	r2, [pc, #32]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852a:	f7fa fbf1 	bl	8002d10 <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008530:	e00a      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008532:	f7fa fbed 	bl	8002d10 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b64      	cmp	r3, #100	@ 0x64
 800853e:	d903      	bls.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e0ba      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008548:	4b5e      	ldr	r3, [pc, #376]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008554:	d0ed      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02e      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d12a      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800857e:	4b51      	ldr	r3, [pc, #324]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800858c:	4b4d      	ldr	r3, [pc, #308]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008592:	0f1b      	lsrs	r3, r3, #28
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	019a      	lsls	r2, r3, #6
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	061b      	lsls	r3, r3, #24
 80085ac:	431a      	orrs	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	4944      	ldr	r1, [pc, #272]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085ba:	4b42      	ldr	r3, [pc, #264]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	3b01      	subs	r3, #1
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	493d      	ldr	r1, [pc, #244]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d022      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e8:	d11d      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ea:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085f8:	4b32      	ldr	r3, [pc, #200]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fe:	0f1b      	lsrs	r3, r3, #28
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	019a      	lsls	r2, r3, #6
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	431a      	orrs	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	061b      	lsls	r3, r3, #24
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	071b      	lsls	r3, r3, #28
 800861e:	4929      	ldr	r1, [pc, #164]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d028      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008640:	4b20      	ldr	r3, [pc, #128]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	0c1b      	lsrs	r3, r3, #16
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	019a      	lsls	r2, r3, #6
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	431a      	orrs	r2, r3
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	061b      	lsls	r3, r3, #24
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	4917      	ldr	r1, [pc, #92]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867c:	4911      	ldr	r1, [pc, #68]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008684:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a0e      	ldr	r2, [pc, #56]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800868a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800868e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008690:	f7fa fb3e 	bl	8002d10 <HAL_GetTick>
 8008694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008698:	f7fa fb3a 	bl	8002d10 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	@ 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e007      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086aa:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b6:	d1ef      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800

080086c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086e6:	f040 808d 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80086ea:	4b93      	ldr	r3, [pc, #588]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008700:	d07c      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008708:	d87b      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008716:	d039      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008718:	e073      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800871a:	4b87      	ldr	r3, [pc, #540]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008726:	4b84      	ldr	r3, [pc, #528]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800872e:	4a83      	ldr	r2, [pc, #524]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008730:	fbb2 f3f3 	udiv	r3, r2, r3
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	e007      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008738:	4b7f      	ldr	r3, [pc, #508]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008740:	4a7f      	ldr	r2, [pc, #508]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
 8008746:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008748:	4b7b      	ldr	r3, [pc, #492]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874e:	0e1b      	lsrs	r3, r3, #24
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008756:	4b78      	ldr	r3, [pc, #480]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875c:	099b      	lsrs	r3, r3, #6
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	fb03 f202 	mul.w	r2, r3, r2
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	fbb2 f3f3 	udiv	r3, r2, r3
 800876e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008770:	4b71      	ldr	r3, [pc, #452]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	3301      	adds	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	fbb2 f3f3 	udiv	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]
        break;
 800878a:	e03b      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800878c:	4b6a      	ldr	r3, [pc, #424]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d108      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008798:	4b67      	ldr	r3, [pc, #412]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087a0:	4a66      	ldr	r2, [pc, #408]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	e007      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087aa:	4b63      	ldr	r3, [pc, #396]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b2:	4a63      	ldr	r2, [pc, #396]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80087ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80087c8:	4b5b      	ldr	r3, [pc, #364]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ce:	099b      	lsrs	r3, r3, #6
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	fb03 f202 	mul.w	r2, r3, r2
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80087e2:	4b55      	ldr	r3, [pc, #340]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]
        break;
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80087fc:	4b51      	ldr	r3, [pc, #324]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80087fe:	617b      	str	r3, [r7, #20]
        break;
 8008800:	e000      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008802:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800880a:	f040 808d 	bne.w	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800880e:	4b4a      	ldr	r3, [pc, #296]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008814:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800881c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008824:	d07c      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800882c:	d87b      	bhi.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800883a:	d039      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800883c:	e073      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800883e:	4b3e      	ldr	r3, [pc, #248]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800884a:	4b3b      	ldr	r3, [pc, #236]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008852:	4a3a      	ldr	r2, [pc, #232]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008854:	fbb2 f3f3 	udiv	r3, r2, r3
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	e007      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800885c:	4b36      	ldr	r3, [pc, #216]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008864:	4a36      	ldr	r2, [pc, #216]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800886c:	4b32      	ldr	r3, [pc, #200]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008872:	0e1b      	lsrs	r3, r3, #24
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800887a:	4b2f      	ldr	r3, [pc, #188]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008880:	099b      	lsrs	r3, r3, #6
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	fb03 f202 	mul.w	r2, r3, r2
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008894:	4b28      	ldr	r3, [pc, #160]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]
        break;
 80088ae:	e03b      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088b0:	4b21      	ldr	r3, [pc, #132]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088c4:	4a1d      	ldr	r2, [pc, #116]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	e007      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80088de:	4b16      	ldr	r3, [pc, #88]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80088ec:	4b12      	ldr	r3, [pc, #72]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f2:	099b      	lsrs	r3, r3, #6
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	fb03 f202 	mul.w	r2, r3, r2
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008906:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	617b      	str	r3, [r7, #20]
        break;
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008920:	4b08      	ldr	r3, [pc, #32]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008922:	617b      	str	r3, [r7, #20]
        break;
 8008924:	e000      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008926:	bf00      	nop
      }
    }
  }

  return frequency;
 8008928:	697b      	ldr	r3, [r7, #20]
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40023800 	.word	0x40023800
 800893c:	00f42400 	.word	0x00f42400
 8008940:	017d7840 	.word	0x017d7840
 8008944:	00bb8000 	.word	0x00bb8000

08008948 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e071      	b.n	8008a42 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7f5b      	ldrb	r3, [r3, #29]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d105      	bne.n	8008974 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f9 f8bc 	bl	8001aec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b10      	cmp	r3, #16
 8008986:	d053      	beq.n	8008a30 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	22ca      	movs	r2, #202	@ 0xca
 800898e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2253      	movs	r2, #83	@ 0x53
 8008996:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fac7 	bl	8008f2c <RTC_EnterInitMode>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d12a      	bne.n	80089fe <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6899      	ldr	r1, [r3, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <HAL_RTC_Init+0x104>)
 80089b4:	400b      	ands	r3, r1
 80089b6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6899      	ldr	r1, [r3, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	68d2      	ldr	r2, [r2, #12]
 80089de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6919      	ldr	r1, [r3, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	041a      	lsls	r2, r3, #16
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fad0 	bl	8008f9a <RTC_ExitInitMode>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d110      	bne.n	8008a26 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0208 	bic.w	r2, r2, #8
 8008a12:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	22ff      	movs	r2, #255	@ 0xff
 8008a2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a2e:	e001      	b.n	8008a34 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	ff8fffbf 	.word	0xff8fffbf

08008a50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	7f1b      	ldrb	r3, [r3, #28]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_RTC_SetTime+0x1c>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e085      	b.n	8008b78 <HAL_RTC_SetTime+0x128>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2202      	movs	r2, #2
 8008a76:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d126      	bne.n	8008acc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 faa4 	bl	8008fe4 <RTC_ByteToBcd2>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fa9d 	bl	8008fe4 <RTC_ByteToBcd2>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008aae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	789b      	ldrb	r3, [r3, #2]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fa95 	bl	8008fe4 <RTC_ByteToBcd2>
 8008aba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008abc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	78db      	ldrb	r3, [r3, #3]
 8008ac4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	e018      	b.n	8008afe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2200      	movs	r2, #0
 8008ade:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008aec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008af2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	78db      	ldrb	r3, [r3, #3]
 8008af8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	22ca      	movs	r2, #202	@ 0xca
 8008b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2253      	movs	r2, #83	@ 0x53
 8008b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fa0c 	bl	8008f2c <RTC_EnterInitMode>
 8008b14:	4603      	mov	r3, r0
 8008b16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b18:	7cfb      	ldrb	r3, [r7, #19]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11e      	bne.n	8008b5c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	6979      	ldr	r1, [r7, #20]
 8008b24:	4b16      	ldr	r3, [pc, #88]	@ (8008b80 <HAL_RTC_SetTime+0x130>)
 8008b26:	400b      	ands	r3, r1
 8008b28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6899      	ldr	r1, [r3, #8]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fa21 	bl	8008f9a <RTC_ExitInitMode>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b5c:	7cfb      	ldrb	r3, [r7, #19]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	22ff      	movs	r2, #255	@ 0xff
 8008b6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	771a      	strb	r2, [r3, #28]

  return status;
 8008b76:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd90      	pop	{r4, r7, pc}
 8008b80:	007f7f7f 	.word	0x007f7f7f

08008b84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	7f1b      	ldrb	r3, [r3, #28]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_RTC_SetDate+0x1c>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e06f      	b.n	8008c80 <HAL_RTC_SetDate+0xfc>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10e      	bne.n	8008bd0 <HAL_RTC_SetDate+0x4c>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	f003 0310 	and.w	r3, r3, #16
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	f023 0310 	bic.w	r3, r3, #16
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	330a      	adds	r3, #10
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d11c      	bne.n	8008c10 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	78db      	ldrb	r3, [r3, #3]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fa02 	bl	8008fe4 <RTC_ByteToBcd2>
 8008be0:	4603      	mov	r3, r0
 8008be2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f9fb 	bl	8008fe4 <RTC_ByteToBcd2>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bf2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	789b      	ldrb	r3, [r3, #2]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 f9f3 	bl	8008fe4 <RTC_ByteToBcd2>
 8008bfe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e00e      	b.n	8008c2e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	78db      	ldrb	r3, [r3, #3]
 8008c14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c1c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	22ca      	movs	r2, #202	@ 0xca
 8008c34:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2253      	movs	r2, #83	@ 0x53
 8008c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f974 	bl	8008f2c <RTC_EnterInitMode>
 8008c44:	4603      	mov	r3, r0
 8008c46:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c48:	7cfb      	ldrb	r3, [r7, #19]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	6979      	ldr	r1, [r7, #20]
 8008c54:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <HAL_RTC_SetDate+0x104>)
 8008c56:	400b      	ands	r3, r1
 8008c58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f99d 	bl	8008f9a <RTC_ExitInitMode>
 8008c60:	4603      	mov	r3, r0
 8008c62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c64:	7cfb      	ldrb	r3, [r7, #19]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	22ff      	movs	r2, #255	@ 0xff
 8008c76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	771a      	strb	r2, [r3, #28]

  return status;
 8008c7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd90      	pop	{r4, r7, pc}
 8008c88:	00ffff3f 	.word	0x00ffff3f

08008c8c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b089      	sub	sp, #36	@ 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	7f1b      	ldrb	r3, [r3, #28]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_RTC_SetAlarm+0x24>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e113      	b.n	8008ed8 <HAL_RTC_SetAlarm+0x24c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d137      	bne.n	8008d32 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f982 	bl	8008fe4 <RTC_ByteToBcd2>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f97b 	bl	8008fe4 <RTC_ByteToBcd2>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cf2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	789b      	ldrb	r3, [r3, #2]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 f973 	bl	8008fe4 <RTC_ByteToBcd2>
 8008cfe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008d00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	78db      	ldrb	r3, [r3, #3]
 8008d08:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d0a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f965 	bl	8008fe4 <RTC_ByteToBcd2>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d1e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]
 8008d30:	e023      	b.n	8008d7a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d52:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d58:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	78db      	ldrb	r3, [r3, #3]
 8008d5e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d60:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d68:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d6a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d70:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	22ca      	movs	r2, #202	@ 0xca
 8008d8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2253      	movs	r2, #83	@ 0x53
 8008d94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9e:	d148      	bne.n	8008e32 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dae:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008dbe:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dd2:	f7f9 ff9d 	bl	8002d10 <HAL_GetTick>
 8008dd6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008dd8:	e013      	b.n	8008e02 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dda:	f7f9 ff99 	bl	8002d10 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de8:	d90b      	bls.n	8008e02 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	22ff      	movs	r2, #255	@ 0xff
 8008df0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2203      	movs	r2, #3
 8008df6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e06a      	b.n	8008ed8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0e4      	beq.n	8008dda <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e2e:	609a      	str	r2, [r3, #8]
 8008e30:	e047      	b.n	8008ec2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689a      	ldr	r2, [r3, #8]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e40:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008e62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e64:	f7f9 ff54 	bl	8002d10 <HAL_GetTick>
 8008e68:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e6a:	e013      	b.n	8008e94 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e6c:	f7f9 ff50 	bl	8002d10 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e7a:	d90b      	bls.n	8008e94 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	22ff      	movs	r2, #255	@ 0xff
 8008e82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2203      	movs	r2, #3
 8008e88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e021      	b.n	8008ed8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0e4      	beq.n	8008e6c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ec0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	22ff      	movs	r2, #255	@ 0xff
 8008ec8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3724      	adds	r7, #36	@ 0x24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}

08008ee0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8008f28 <HAL_RTC_WaitForSynchro+0x48>)
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ef4:	f7f9 ff0c 	bl	8002d10 <HAL_GetTick>
 8008ef8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008efa:	e009      	b.n	8008f10 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008efc:	f7f9 ff08 	bl	8002d10 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f0a:	d901      	bls.n	8008f10 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e007      	b.n	8008f20 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0ee      	beq.n	8008efc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	0001ff5f 	.word	0x0001ff5f

08008f2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d122      	bne.n	8008f90 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f5a:	f7f9 fed9 	bl	8002d10 <HAL_GetTick>
 8008f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f60:	e00c      	b.n	8008f7c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f62:	f7f9 fed5 	bl	8002d10 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f70:	d904      	bls.n	8008f7c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2204      	movs	r2, #4
 8008f76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <RTC_EnterInitMode+0x64>
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d1e8      	bne.n	8008f62 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fb4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff ff8b 	bl	8008ee0 <HAL_RTC_WaitForSynchro>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008ff2:	e005      	b.n	8009000 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	3b0a      	subs	r3, #10
 8008ffe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b09      	cmp	r3, #9
 8009004:	d8f6      	bhi.n	8008ff4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	b2da      	uxtb	r2, r3
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	4313      	orrs	r3, r2
 8009012:	b2db      	uxtb	r3, r3
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	7f1b      	ldrb	r3, [r3, #28]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009038:	2302      	movs	r3, #2
 800903a:	e050      	b.n	80090de <HAL_RTCEx_SetTimeStamp+0xbe>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2202      	movs	r2, #2
 8009046:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 0206 	bic.w	r2, r2, #6
 8009056:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	430a      	orrs	r2, r1
 8009066:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	4b1f      	ldr	r3, [pc, #124]	@ (80090ec <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009070:	4013      	ands	r3, r2
 8009072:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	22ca      	movs	r2, #202	@ 0xca
 8009082:	625a      	str	r2, [r3, #36]	@ 0x24
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2253      	movs	r2, #83	@ 0x53
 800908a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80090a4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80090b6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	22ff      	movs	r2, #255	@ 0xff
 80090ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	fffff7f7 	.word	0xfffff7f7

080090f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e156      	b.n	80093bc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f8 fdb8 	bl	8001c98 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f95b 	bl	80093ec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d00c      	beq.n	8009158 <HAL_SAI_Init+0x68>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d80d      	bhi.n	800915e <HAL_SAI_Init+0x6e>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_SAI_Init+0x5c>
 8009146:	2b01      	cmp	r3, #1
 8009148:	d003      	beq.n	8009152 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800914a:	e008      	b.n	800915e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]
      break;
 8009150:	e006      	b.n	8009160 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009152:	2310      	movs	r3, #16
 8009154:	61fb      	str	r3, [r7, #28]
      break;
 8009156:	e003      	b.n	8009160 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009158:	2320      	movs	r3, #32
 800915a:	61fb      	str	r3, [r7, #28]
      break;
 800915c:	e000      	b.n	8009160 <HAL_SAI_Init+0x70>
      break;
 800915e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d81e      	bhi.n	80091a6 <HAL_SAI_Init+0xb6>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <HAL_SAI_Init+0x80>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009181 	.word	0x08009181
 8009174:	08009187 	.word	0x08009187
 8009178:	0800918f 	.word	0x0800918f
 800917c:	08009197 	.word	0x08009197
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
    }
    break;
 8009184:	e010      	b.n	80091a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800918a:	617b      	str	r3, [r7, #20]
    }
    break;
 800918c:	e00c      	b.n	80091a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800918e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009192:	617b      	str	r3, [r7, #20]
    }
    break;
 8009194:	e008      	b.n	80091a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009196:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800919a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80091a4:	e000      	b.n	80091a8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80091a6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a85      	ldr	r2, [pc, #532]	@ (80093c4 <HAL_SAI_Init+0x2d4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_SAI_Init+0xcc>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a84      	ldr	r2, [pc, #528]	@ (80093c8 <HAL_SAI_Init+0x2d8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d103      	bne.n	80091c4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80091bc:	4a83      	ldr	r2, [pc, #524]	@ (80093cc <HAL_SAI_Init+0x2dc>)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e002      	b.n	80091ca <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80091c4:	4a82      	ldr	r2, [pc, #520]	@ (80093d0 <HAL_SAI_Init+0x2e0>)
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d04c      	beq.n	800926c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a7a      	ldr	r2, [pc, #488]	@ (80093c4 <HAL_SAI_Init+0x2d4>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d004      	beq.n	80091ea <HAL_SAI_Init+0xfa>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a78      	ldr	r2, [pc, #480]	@ (80093c8 <HAL_SAI_Init+0x2d8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d104      	bne.n	80091f4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80091ea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091ee:	f7ff fa6b 	bl	80086c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80091f2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a76      	ldr	r2, [pc, #472]	@ (80093d4 <HAL_SAI_Init+0x2e4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d004      	beq.n	8009208 <HAL_SAI_Init+0x118>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a75      	ldr	r2, [pc, #468]	@ (80093d8 <HAL_SAI_Init+0x2e8>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d104      	bne.n	8009212 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009208:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800920c:	f7ff fa5c 	bl	80086c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009210:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	025b      	lsls	r3, r3, #9
 8009224:	fbb2 f3f3 	udiv	r3, r2, r3
 8009228:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4a6b      	ldr	r2, [pc, #428]	@ (80093dc <HAL_SAI_Init+0x2ec>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	08da      	lsrs	r2, r3, #3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009238:	68f9      	ldr	r1, [r7, #12]
 800923a:	4b68      	ldr	r3, [pc, #416]	@ (80093dc <HAL_SAI_Init+0x2ec>)
 800923c:	fba3 2301 	umull	r2, r3, r3, r1
 8009240:	08da      	lsrs	r2, r3, #3
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	1aca      	subs	r2, r1, r3
 800924c:	2a08      	cmp	r2, #8
 800924e:	d904      	bls.n	800925a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	2b04      	cmp	r3, #4
 8009260:	d104      	bne.n	800926c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	085a      	lsrs	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_SAI_Init+0x18c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d109      	bne.n	8009290 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_SAI_Init+0x198>
 8009284:	2300      	movs	r3, #0
 8009286:	e001      	b.n	800928c <HAL_SAI_Init+0x19c>
 8009288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800928c:	61bb      	str	r3, [r7, #24]
 800928e:	e008      	b.n	80092a2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d102      	bne.n	800929e <HAL_SAI_Init+0x1ae>
 8009298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800929c:	e000      	b.n	80092a0 <HAL_SAI_Init+0x1b0>
 800929e:	2300      	movs	r3, #0
 80092a0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	4b4c      	ldr	r3, [pc, #304]	@ (80093e0 <HAL_SAI_Init+0x2f0>)
 80092ae:	400b      	ands	r3, r1
 80092b0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092cc:	431a      	orrs	r2, r3
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80092da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	051b      	lsls	r3, r3, #20
 80092ee:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6859      	ldr	r1, [r3, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4b38      	ldr	r3, [pc, #224]	@ (80093e4 <HAL_SAI_Init+0x2f4>)
 8009304:	400b      	ands	r3, r1
 8009306:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6899      	ldr	r1, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b2d      	ldr	r3, [pc, #180]	@ (80093e8 <HAL_SAI_Init+0x2f8>)
 8009332:	400b      	ands	r3, r1
 8009334:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009340:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009346:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800934c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009352:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009358:	3b01      	subs	r3, #1
 800935a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800935c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68d9      	ldr	r1, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009374:	400b      	ands	r3, r1
 8009376:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68d9      	ldr	r1, [r3, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009386:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800938c:	041b      	lsls	r3, r3, #16
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009394:	3b01      	subs	r3, #1
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40015804 	.word	0x40015804
 80093c8:	40015824 	.word	0x40015824
 80093cc:	40015800 	.word	0x40015800
 80093d0:	40015c00 	.word	0x40015c00
 80093d4:	40015c04 	.word	0x40015c04
 80093d8:	40015c24 	.word	0x40015c24
 80093dc:	cccccccd 	.word	0xcccccccd
 80093e0:	ff05c010 	.word	0xff05c010
 80093e4:	ffff1ff0 	.word	0xffff1ff0
 80093e8:	fff88000 	.word	0xfff88000

080093ec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80093f4:	4b17      	ldr	r3, [pc, #92]	@ (8009454 <SAI_Disable+0x68>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a17      	ldr	r2, [pc, #92]	@ (8009458 <SAI_Disable+0x6c>)
 80093fa:	fba2 2303 	umull	r2, r3, r2, r3
 80093fe:	0b1b      	lsrs	r3, r3, #12
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009416:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	1e5a      	subs	r2, r3, #1
 800941c:	60fa      	str	r2, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	72fb      	strb	r3, [r7, #11]
      break;
 8009436:	e006      	b.n	8009446 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e8      	bne.n	8009418 <SAI_Disable+0x2c>

  return status;
 8009446:	7afb      	ldrb	r3, [r7, #11]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	20000000 	.word	0x20000000
 8009458:	95cbec1b 	.word	0x95cbec1b

0800945c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e022      	b.n	80094b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7f8 fc95 	bl	8001db0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2203      	movs	r2, #3
 800948a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f814 	bl	80094bc <HAL_SD_InitCard>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e00a      	b.n	80094b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b08e      	sub	sp, #56	@ 0x38
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80094d8:	2376      	movs	r3, #118	@ 0x76
 80094da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681d      	ldr	r5, [r3, #0]
 80094e0:	466c      	mov	r4, sp
 80094e2:	f107 0314 	add.w	r3, r7, #20
 80094e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094f4:	4628      	mov	r0, r5
 80094f6:	f003 fa59 	bl	800c9ac <SDMMC_Init>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e059      	b.n	80095c0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800951a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f003 fa7c 	bl	800ca1e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009534:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009536:	2002      	movs	r0, #2
 8009538:	f7f9 fbf6 	bl	8002d28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fe0f 	bl	800a160 <SD_PowerON>
 8009542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e02e      	b.n	80095c0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fd2e 	bl	8009fc4 <SD_InitCard>
 8009568:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e01b      	b.n	80095c0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009590:	4618      	mov	r0, r3
 8009592:	f003 fad7 	bl	800cb44 <SDMMC_CmdBlockLength>
 8009596:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00f      	beq.n	80095be <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a09      	ldr	r2, [pc, #36]	@ (80095c8 <HAL_SD_InitCard+0x10c>)
 80095a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3728      	adds	r7, #40	@ 0x28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bdb0      	pop	{r4, r5, r7, pc}
 80095c8:	004005ff 	.word	0x004005ff

080095cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	@ 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0c3      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f040 80bc 	bne.w	800977a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009612:	429a      	cmp	r2, r3
 8009614:	d907      	bls.n	8009626 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e0aa      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964a:	4a4e      	ldr	r2, [pc, #312]	@ (8009784 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800964c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009652:	4a4d      	ldr	r2, [pc, #308]	@ (8009788 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009654:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965a:	2200      	movs	r2, #0
 800965c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	2200      	movs	r2, #0
 8009664:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3380      	adds	r3, #128	@ 0x80
 800968c:	4619      	mov	r1, r3
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	025b      	lsls	r3, r3, #9
 8009694:	089b      	lsrs	r3, r3, #2
 8009696:	f7fa f84d 	bl	8003734 <HAL_DMA_Start_IT>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d017      	beq.n	80096d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80096ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a35      	ldr	r2, [pc, #212]	@ (800978c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80096b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e055      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0208 	orr.w	r2, r2, #8
 80096de:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d002      	beq.n	80096ee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	025b      	lsls	r3, r3, #9
 80096ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295
 80096f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	025b      	lsls	r3, r3, #9
 80096f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80096fa:	2390      	movs	r3, #144	@ 0x90
 80096fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096fe:	2302      	movs	r3, #2
 8009700:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009702:	2300      	movs	r3, #0
 8009704:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009706:	2301      	movs	r3, #1
 8009708:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f107 0210 	add.w	r2, r7, #16
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f003 f9e9 	bl	800caec <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d90a      	bls.n	8009736 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2282      	movs	r2, #130	@ 0x82
 8009724:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972c:	4618      	mov	r0, r3
 800972e:	f003 fa4d 	bl	800cbcc <SDMMC_CmdReadMultiBlock>
 8009732:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009734:	e009      	b.n	800974a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2281      	movs	r2, #129	@ 0x81
 800973a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009742:	4618      	mov	r0, r3
 8009744:	f003 fa20 	bl	800cb88 <SDMMC_CmdReadSingleBlock>
 8009748:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d012      	beq.n	8009776 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a0d      	ldr	r2, [pc, #52]	@ (800978c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	431a      	orrs	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e002      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e000      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800977a:	2302      	movs	r3, #2
  }
}
 800977c:	4618      	mov	r0, r3
 800977e:	3730      	adds	r7, #48	@ 0x30
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	08009eaf 	.word	0x08009eaf
 8009788:	08009f21 	.word	0x08009f21
 800978c:	004005ff 	.word	0x004005ff

08009790 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	@ 0x30
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d107      	bne.n	80097b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0c6      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	f040 80bf 	bne.w	8009944 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	441a      	add	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d907      	bls.n	80097ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e0ad      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 021a 	orr.w	r2, r2, #26
 8009808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980e:	4a50      	ldr	r2, [pc, #320]	@ (8009950 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009816:	4a4f      	ldr	r2, [pc, #316]	@ (8009954 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009818:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981e:	2200      	movs	r2, #0
 8009820:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009826:	2b01      	cmp	r3, #1
 8009828:	d002      	beq.n	8009830 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	025b      	lsls	r3, r3, #9
 800982e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d90a      	bls.n	800984c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	22a0      	movs	r2, #160	@ 0xa0
 800983a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009842:	4618      	mov	r0, r3
 8009844:	f003 fa06 	bl	800cc54 <SDMMC_CmdWriteMultiBlock>
 8009848:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800984a:	e009      	b.n	8009860 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2290      	movs	r2, #144	@ 0x90
 8009850:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009858:	4618      	mov	r0, r3
 800985a:	f003 f9d9 	bl	800cc10 <SDMMC_CmdWriteSingleBlock>
 800985e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009862:	2b00      	cmp	r3, #0
 8009864:	d012      	beq.n	800988c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a3b      	ldr	r2, [pc, #236]	@ (8009958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800986c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e05c      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a0:	2240      	movs	r2, #64	@ 0x40
 80098a2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3380      	adds	r3, #128	@ 0x80
 80098cc:	461a      	mov	r2, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	025b      	lsls	r3, r3, #9
 80098d2:	089b      	lsrs	r3, r3, #2
 80098d4:	f7f9 ff2e 	bl	8003734 <HAL_DMA_Start_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01a      	beq.n	8009914 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f022 021a 	bic.w	r2, r2, #26
 80098ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e018      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	025b      	lsls	r3, r3, #9
 800991e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009920:	2390      	movs	r3, #144	@ 0x90
 8009922:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009924:	2300      	movs	r3, #0
 8009926:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009928:	2300      	movs	r3, #0
 800992a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f107 0210 	add.w	r2, r7, #16
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f003 f8d6 	bl	800caec <SDMMC_ConfigData>

      return HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	e000      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009944:	2302      	movs	r3, #2
  }
}
 8009946:	4618      	mov	r0, r3
 8009948:	3730      	adds	r7, #48	@ 0x30
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	08009e85 	.word	0x08009e85
 8009954:	08009f21 	.word	0x08009f21
 8009958:	004005ff 	.word	0x004005ff

0800995c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800997e:	0f9b      	lsrs	r3, r3, #30
 8009980:	b2da      	uxtb	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800998a:	0e9b      	lsrs	r3, r3, #26
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 030f 	and.w	r3, r3, #15
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800999c:	0e1b      	lsrs	r3, r3, #24
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ae:	0c1b      	lsrs	r3, r3, #16
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ba:	0a1b      	lsrs	r3, r3, #8
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099d0:	0d1b      	lsrs	r3, r3, #20
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099dc:	0c1b      	lsrs	r3, r3, #16
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ee:	0bdb      	lsrs	r3, r3, #15
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a00:	0b9b      	lsrs	r3, r3, #14
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a12:	0b5b      	lsrs	r3, r3, #13
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a24:	0b1b      	lsrs	r3, r3, #12
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2200      	movs	r2, #0
 8009a36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d163      	bne.n	8009b08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a44:	009a      	lsls	r2, r3, #2
 8009a46:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009a50:	0f92      	lsrs	r2, r2, #30
 8009a52:	431a      	orrs	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5c:	0edb      	lsrs	r3, r3, #27
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6e:	0e1b      	lsrs	r3, r3, #24
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a80:	0d5b      	lsrs	r3, r3, #21
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a92:	0c9b      	lsrs	r3, r3, #18
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aa4:	0bdb      	lsrs	r3, r3, #15
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	7e1b      	ldrb	r3, [r3, #24]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	2201      	movs	r2, #1
 8009aca:	fa02 f303 	lsl.w	r3, r2, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ad2:	fb03 f202 	mul.w	r2, r3, r2
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	7a1b      	ldrb	r3, [r3, #8]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	409a      	lsls	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009af4:	0a52      	lsrs	r2, r2, #9
 8009af6:	fb03 f202 	mul.w	r2, r3, r2
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b04:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b06:	e031      	b.n	8009b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d11d      	bne.n	8009b4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b14:	041b      	lsls	r3, r3, #16
 8009b16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	431a      	orrs	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	029a      	lsls	r2, r3, #10
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b4a:	e00f      	b.n	8009b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a58      	ldr	r2, [pc, #352]	@ (8009cb4 <HAL_SD_GetCardCSD+0x344>)
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e09d      	b.n	8009ca8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b70:	0b9b      	lsrs	r3, r3, #14
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b82:	09db      	lsrs	r3, r3, #7
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba4:	0fdb      	lsrs	r3, r3, #31
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb0:	0f5b      	lsrs	r3, r3, #29
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc2:	0e9b      	lsrs	r3, r3, #26
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd4:	0d9b      	lsrs	r3, r3, #22
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be6:	0d5b      	lsrs	r3, r3, #21
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c16:	0bdb      	lsrs	r3, r3, #15
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2a:	0b9b      	lsrs	r3, r3, #14
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c3e:	0b5b      	lsrs	r3, r3, #13
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	0b1b      	lsrs	r3, r3, #12
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	0a9b      	lsrs	r3, r3, #10
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	004005ff 	.word	0x004005ff

08009cb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d10:	b5b0      	push	{r4, r5, r7, lr}
 8009d12:	b08e      	sub	sp, #56	@ 0x38
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2203      	movs	r2, #3
 8009d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d02e      	beq.n	8009d8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d36:	d106      	bne.n	8009d46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d44:	e029      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d4c:	d10a      	bne.n	8009d64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fabc 	bl	800a2cc <SD_WideBus_Enable>
 8009d54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d62:	e01a      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 faf9 	bl	800a362 <SD_WideBus_Disable>
 8009d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d7e:	e00c      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d8c:	e005      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00b      	beq.n	8009dba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a26      	ldr	r2, [pc, #152]	@ (8009e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009db8:	e01f      	b.n	8009dfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681d      	ldr	r5, [r3, #0]
 8009de0:	466c      	mov	r4, sp
 8009de2:	f107 0314 	add.w	r3, r7, #20
 8009de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009df4:	4628      	mov	r0, r5
 8009df6:	f002 fdd9 	bl	800c9ac <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 fe9e 	bl	800cb44 <SDMMC_CmdBlockLength>
 8009e08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a0a      	ldr	r2, [pc, #40]	@ (8009e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3728      	adds	r7, #40	@ 0x28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	004005ff 	.word	0x004005ff

08009e44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa10 	bl	800a27c <SD_SendStatus>
 8009e5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	0a5b      	lsrs	r3, r3, #9
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e7a:	693b      	ldr	r3, [r7, #16]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec0:	2b82      	cmp	r3, #130	@ 0x82
 8009ec2:	d111      	bne.n	8009ee8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f002 fee5 	bl	800cc98 <SDMMC_CmdStopTransfer>
 8009ece:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff fd3a 	bl	800995c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0208 	bic.w	r2, r2, #8
 8009ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f00:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f004 fc93 	bl	800e83c <HAL_SD_RxCpltCallback>
#endif
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7f9 fcf2 	bl	8003918 <HAL_DMA_GetError>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d03e      	beq.n	8009fb8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f40:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f48:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d002      	beq.n	8009f56 <SD_DMAError+0x36>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d12d      	bne.n	8009fb2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a19      	ldr	r2, [pc, #100]	@ (8009fc0 <SD_DMAError+0xa0>)
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009f7a:	6978      	ldr	r0, [r7, #20]
 8009f7c:	f7ff ff62 	bl	8009e44 <HAL_SD_GetCardState>
 8009f80:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b06      	cmp	r3, #6
 8009f86:	d002      	beq.n	8009f8e <SD_DMAError+0x6e>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d10a      	bne.n	8009fa4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f002 fe80 	bl	800cc98 <SDMMC_CmdStopTransfer>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009fb2:	6978      	ldr	r0, [r7, #20]
 8009fb4:	f7ff fcd2 	bl	800995c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	004005ff 	.word	0x004005ff

08009fc4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b094      	sub	sp, #80	@ 0x50
 8009fc8:	af04      	add	r7, sp, #16
 8009fca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f002 fd30 	bl	800ca3a <SDMMC_GetPowerState>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fe0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009fe4:	e0b8      	b.n	800a158 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d02f      	beq.n	800a04e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 ff5b 	bl	800ceae <SDMMC_CmdSendCID>
 8009ff8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <SD_InitCard+0x40>
    {
      return errorstate;
 800a000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a002:	e0a9      	b.n	800a158 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f002 fd5b 	bl	800cac6 <SDMMC_GetResponse>
 800a010:	4602      	mov	r2, r0
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2104      	movs	r1, #4
 800a01c:	4618      	mov	r0, r3
 800a01e:	f002 fd52 	bl	800cac6 <SDMMC_GetResponse>
 800a022:	4602      	mov	r2, r0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2108      	movs	r1, #8
 800a02e:	4618      	mov	r0, r3
 800a030:	f002 fd49 	bl	800cac6 <SDMMC_GetResponse>
 800a034:	4602      	mov	r2, r0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	210c      	movs	r1, #12
 800a040:	4618      	mov	r0, r3
 800a042:	f002 fd40 	bl	800cac6 <SDMMC_GetResponse>
 800a046:	4602      	mov	r2, r0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a052:	2b03      	cmp	r3, #3
 800a054:	d00d      	beq.n	800a072 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f107 020e 	add.w	r2, r7, #14
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f002 ff61 	bl	800cf28 <SDMMC_CmdSetRelAdd>
 800a066:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <SD_InitCard+0xae>
    {
      return errorstate;
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	e072      	b.n	800a158 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	2b03      	cmp	r3, #3
 800a078:	d036      	beq.n	800a0e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a07a:	89fb      	ldrh	r3, [r7, #14]
 800a07c:	461a      	mov	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f002 ff2b 	bl	800ceea <SDMMC_CmdSendCSD>
 800a094:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a09e:	e05b      	b.n	800a158 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f002 fd0d 	bl	800cac6 <SDMMC_GetResponse>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f002 fd04 	bl	800cac6 <SDMMC_GetResponse>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2108      	movs	r1, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f002 fcfb 	bl	800cac6 <SDMMC_GetResponse>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	210c      	movs	r1, #12
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f002 fcf2 	bl	800cac6 <SDMMC_GetResponse>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2104      	movs	r1, #4
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f002 fce9 	bl	800cac6 <SDMMC_GetResponse>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	0d1a      	lsrs	r2, r3, #20
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0fc:	f107 0310 	add.w	r3, r7, #16
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fc34 	bl	8009970 <HAL_SD_GetCardCSD>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a10e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a112:	e021      	b.n	800a158 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	2200      	movs	r2, #0
 800a120:	461c      	mov	r4, r3
 800a122:	4615      	mov	r5, r2
 800a124:	4622      	mov	r2, r4
 800a126:	462b      	mov	r3, r5
 800a128:	4608      	mov	r0, r1
 800a12a:	f002 fdd7 	bl	800ccdc <SDMMC_CmdSelDesel>
 800a12e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <SD_InitCard+0x176>
  {
    return errorstate;
 800a136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a138:	e00e      	b.n	800a158 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681d      	ldr	r5, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	466c      	mov	r4, sp
 800a142:	f103 0210 	add.w	r2, r3, #16
 800a146:	ca07      	ldmia	r2, {r0, r1, r2}
 800a148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a14c:	3304      	adds	r3, #4
 800a14e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a150:	4628      	mov	r0, r5
 800a152:	f002 fc2b 	bl	800c9ac <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3740      	adds	r7, #64	@ 0x40
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bdb0      	pop	{r4, r5, r7, pc}

0800a160 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f002 fdd2 	bl	800cd22 <SDMMC_CmdGoIdleState>
 800a17e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	e072      	b.n	800a270 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f002 fde5 	bl	800cd5e <SDMMC_CmdOperCond>
 800a194:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f002 fdbb 	bl	800cd22 <SDMMC_CmdGoIdleState>
 800a1ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <SD_PowerON+0x5e>
    {
      return errorstate;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	e05b      	b.n	800a270 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d137      	bne.n	800a236 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 fde5 	bl	800cd9c <SDMMC_CmdAppCommand>
 800a1d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02d      	beq.n	800a236 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1de:	e047      	b.n	800a270 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f002 fdd8 	bl	800cd9c <SDMMC_CmdAppCommand>
 800a1ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	e03b      	b.n	800a270 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	491e      	ldr	r1, [pc, #120]	@ (800a278 <SD_PowerON+0x118>)
 800a1fe:	4618      	mov	r0, r3
 800a200:	f002 fdee 	bl	800cde0 <SDMMC_CmdAppOperCommand>
 800a204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a20c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a210:	e02e      	b.n	800a270 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f002 fc54 	bl	800cac6 <SDMMC_GetResponse>
 800a21e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	0fdb      	lsrs	r3, r3, #31
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <SD_PowerON+0xcc>
 800a228:	2301      	movs	r3, #1
 800a22a:	e000      	b.n	800a22e <SD_PowerON+0xce>
 800a22c:	2300      	movs	r3, #0
 800a22e:	613b      	str	r3, [r7, #16]

    count++;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	3301      	adds	r3, #1
 800a234:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d802      	bhi.n	800a246 <SD_PowerON+0xe6>
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0cc      	beq.n	800a1e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d902      	bls.n	800a256 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a254:	e00c      	b.n	800a270 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	645a      	str	r2, [r3, #68]	@ 0x44
 800a266:	e002      	b.n	800a26e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	c1100000 	.word	0xc1100000

0800a27c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a28c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a290:	e018      	b.n	800a2c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f002 fe63 	bl	800cf6a <SDMMC_CmdSendStatus>
 800a2a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	e009      	b.n	800a2c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f002 fc05 	bl	800cac6 <SDMMC_GetResponse>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f002 fbef 	bl	800cac6 <SDMMC_GetResponse>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f2:	d102      	bne.n	800a2fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2f8:	e02f      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f879 	bl	800a3f8 <SD_FindSCR>
 800a306:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	e023      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01c      	beq.n	800a356 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a324:	041b      	lsls	r3, r3, #16
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f002 fd37 	bl	800cd9c <SDMMC_CmdAppCommand>
 800a32e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	e00f      	b.n	800a35a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2102      	movs	r1, #2
 800a340:	4618      	mov	r0, r3
 800a342:	f002 fd71 	bl	800ce28 <SDMMC_CmdBusWidth>
 800a346:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	e003      	b.n	800a35a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a352:	2300      	movs	r3, #0
 800a354:	e001      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a356:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b086      	sub	sp, #24
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2100      	movs	r1, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	f002 fba4 	bl	800cac6 <SDMMC_GetResponse>
 800a37e:	4603      	mov	r3, r0
 800a380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a388:	d102      	bne.n	800a390 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a38a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a38e:	e02f      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a390:	f107 030c 	add.w	r3, r7, #12
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f82e 	bl	800a3f8 <SD_FindSCR>
 800a39c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	e023      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f002 fcec 	bl	800cd9c <SDMMC_CmdAppCommand>
 800a3c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	e00f      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f002 fd26 	bl	800ce28 <SDMMC_CmdBusWidth>
 800a3dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	e003      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e001      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a3f8:	b590      	push	{r4, r7, lr}
 800a3fa:	b08f      	sub	sp, #60	@ 0x3c
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a402:	f7f8 fc85 	bl	8002d10 <HAL_GetTick>
 800a406:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a40c:	2300      	movs	r3, #0
 800a40e:	60bb      	str	r3, [r7, #8]
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2108      	movs	r1, #8
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 fb90 	bl	800cb44 <SDMMC_CmdBlockLength>
 800a424:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	e0b2      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f002 fcad 	bl	800cd9c <SDMMC_CmdAppCommand>
 800a442:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	e0a3      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a44e:	f04f 33ff 	mov.w	r3, #4294967295
 800a452:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a454:	2308      	movs	r3, #8
 800a456:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a458:	2330      	movs	r3, #48	@ 0x30
 800a45a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a45c:	2302      	movs	r3, #2
 800a45e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a460:	2300      	movs	r3, #0
 800a462:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a464:	2301      	movs	r3, #1
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f107 0210 	add.w	r2, r7, #16
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f002 fb3a 	bl	800caec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f002 fcf5 	bl	800ce6c <SDMMC_CmdSendSCR>
 800a482:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	2b00      	cmp	r3, #0
 800a488:	d02a      	beq.n	800a4e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	e083      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	f107 0208 	add.w	r2, r7, #8
 800a4a8:	18d4      	adds	r4, r2, r3
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	f002 faaa 	bl	800ca04 <SDMMC_ReadFIFO>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	6023      	str	r3, [r4, #0]
      index++;
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ba:	e006      	b.n	800a4ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d012      	beq.n	800a4f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4ca:	f7f8 fc21 	bl	8002d10 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d102      	bne.n	800a4e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4de:	e05a      	b.n	800a596 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0cf      	beq.n	800a48e <SD_FindSCR+0x96>
 800a4ee:	e000      	b.n	800a4f2 <SD_FindSCR+0xfa>
      break;
 800a4f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2208      	movs	r2, #8
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a508:	2308      	movs	r3, #8
 800a50a:	e044      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2202      	movs	r2, #2
 800a520:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a522:	2302      	movs	r3, #2
 800a524:	e037      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2220      	movs	r2, #32
 800a53a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a53c:	2320      	movs	r3, #32
 800a53e:	e02a      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a548:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a556:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	601a      	str	r2, [r3, #0]
    scr++;
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	3304      	adds	r3, #4
 800a570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	061a      	lsls	r2, r3, #24
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a57e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	0e1b      	lsrs	r3, r3, #24
 800a58e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	373c      	adds	r7, #60	@ 0x3c
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd90      	pop	{r4, r7, pc}

0800a59e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e025      	b.n	800a5fe <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d106      	bne.n	800a5cc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7f6 fb7e 	bl	8000cc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f002 f91e 	bl	800c820 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	f002 f972 	bl	800c8d8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e04c      	b.n	800a6b4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7f7 fc50 	bl	8001ed4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0203 	bic.w	r2, r2, #3
 800a64a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4b19      	ldr	r3, [pc, #100]	@ (800a6bc <HAL_SPDIFRX_Init+0xb4>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a664:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a66a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a670:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a676:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a67c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a682:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a688:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a68e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a694:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	fff88407 	.word	0xfff88407

0800a6c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e049      	b.n	800a766 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7f8 f83c 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	f000 fc12 	bl	800af28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b01      	cmp	r3, #1
 800a782:	d001      	beq.n	800a788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e054      	b.n	800a832 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2202      	movs	r2, #2
 800a78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a26      	ldr	r2, [pc, #152]	@ (800a840 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d022      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7b2:	d01d      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a22      	ldr	r2, [pc, #136]	@ (800a844 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d018      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a21      	ldr	r2, [pc, #132]	@ (800a848 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d013      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a84c <HAL_TIM_Base_Start_IT+0xdc>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00e      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a850 <HAL_TIM_Base_Start_IT+0xe0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d009      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a854 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d004      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x80>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a858 <HAL_TIM_Base_Start_IT+0xe8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d115      	bne.n	800a81c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	4b19      	ldr	r3, [pc, #100]	@ (800a85c <HAL_TIM_Base_Start_IT+0xec>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d015      	beq.n	800a82e <HAL_TIM_Base_Start_IT+0xbe>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a808:	d011      	beq.n	800a82e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0201 	orr.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81a:	e008      	b.n	800a82e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e000      	b.n	800a830 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	40010000 	.word	0x40010000
 800a844:	40000400 	.word	0x40000400
 800a848:	40000800 	.word	0x40000800
 800a84c:	40000c00 	.word	0x40000c00
 800a850:	40010400 	.word	0x40010400
 800a854:	40014000 	.word	0x40014000
 800a858:	40001800 	.word	0x40001800
 800a85c:	00010007 	.word	0x00010007

0800a860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e049      	b.n	800a906 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7f7 ffda 	bl	8002840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4610      	mov	r0, r2
 800a8a0:	f000 fb42 	bl	800af28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d020      	beq.n	800a972 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01b      	beq.n	800a972 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f06f 0202 	mvn.w	r2, #2
 800a942:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fac7 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800a95e:	e005      	b.n	800a96c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fab9 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 faca 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f003 0304 	and.w	r3, r3, #4
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d020      	beq.n	800a9be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	d01b      	beq.n	800a9be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f06f 0204 	mvn.w	r2, #4
 800a98e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 faa1 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800a9aa:	e005      	b.n	800a9b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fa93 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 faa4 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f003 0308 	and.w	r3, r3, #8
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01b      	beq.n	800aa0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f06f 0208 	mvn.w	r2, #8
 800a9da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2204      	movs	r2, #4
 800a9e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fa7b 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800a9f6:	e005      	b.n	800aa04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fa6d 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa7e 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d020      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0310 	and.w	r3, r3, #16
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01b      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f06f 0210 	mvn.w	r2, #16
 800aa26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa55 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800aa42:	e005      	b.n	800aa50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fa47 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa58 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00c      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f06f 0201 	mvn.w	r2, #1
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7f6 fec1 	bl	80017fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d104      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aaa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fefa 	bl	800b89c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00c      	beq.n	800aacc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fef2 	bl	800b8b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00c      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa12 	bl	800af14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0220 	mvn.w	r2, #32
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 feba 	bl	800b888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d101      	bne.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab36:	2302      	movs	r3, #2
 800ab38:	e0ff      	b.n	800ad3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b14      	cmp	r3, #20
 800ab46:	f200 80f0 	bhi.w	800ad2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800ad2b 	.word	0x0800ad2b
 800ab58:	0800ad2b 	.word	0x0800ad2b
 800ab5c:	0800ad2b 	.word	0x0800ad2b
 800ab60:	0800abe5 	.word	0x0800abe5
 800ab64:	0800ad2b 	.word	0x0800ad2b
 800ab68:	0800ad2b 	.word	0x0800ad2b
 800ab6c:	0800ad2b 	.word	0x0800ad2b
 800ab70:	0800ac27 	.word	0x0800ac27
 800ab74:	0800ad2b 	.word	0x0800ad2b
 800ab78:	0800ad2b 	.word	0x0800ad2b
 800ab7c:	0800ad2b 	.word	0x0800ad2b
 800ab80:	0800ac67 	.word	0x0800ac67
 800ab84:	0800ad2b 	.word	0x0800ad2b
 800ab88:	0800ad2b 	.word	0x0800ad2b
 800ab8c:	0800ad2b 	.word	0x0800ad2b
 800ab90:	0800aca9 	.word	0x0800aca9
 800ab94:	0800ad2b 	.word	0x0800ad2b
 800ab98:	0800ad2b 	.word	0x0800ad2b
 800ab9c:	0800ad2b 	.word	0x0800ad2b
 800aba0:	0800ace9 	.word	0x0800ace9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fa68 	bl	800b080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0208 	orr.w	r2, r2, #8
 800abbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	699a      	ldr	r2, [r3, #24]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0204 	bic.w	r2, r2, #4
 800abce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6999      	ldr	r1, [r3, #24]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	619a      	str	r2, [r3, #24]
      break;
 800abe2:	e0a5      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	4618      	mov	r0, r3
 800abec:	f000 faba 	bl	800b164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	699a      	ldr	r2, [r3, #24]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6999      	ldr	r1, [r3, #24]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	021a      	lsls	r2, r3, #8
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	619a      	str	r2, [r3, #24]
      break;
 800ac24:	e084      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fb11 	bl	800b254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69da      	ldr	r2, [r3, #28]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f042 0208 	orr.w	r2, r2, #8
 800ac40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0204 	bic.w	r2, r2, #4
 800ac50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	69d9      	ldr	r1, [r3, #28]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	61da      	str	r2, [r3, #28]
      break;
 800ac64:	e064      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fb67 	bl	800b340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	69da      	ldr	r2, [r3, #28]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69da      	ldr	r2, [r3, #28]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69d9      	ldr	r1, [r3, #28]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	021a      	lsls	r2, r3, #8
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	61da      	str	r2, [r3, #28]
      break;
 800aca6:	e043      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68b9      	ldr	r1, [r7, #8]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 fb9e 	bl	800b3f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0208 	orr.w	r2, r2, #8
 800acc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f022 0204 	bic.w	r2, r2, #4
 800acd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	691a      	ldr	r2, [r3, #16]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ace6:	e023      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fbd0 	bl	800b494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	021a      	lsls	r2, r3, #8
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	430a      	orrs	r2, r1
 800ad26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ad28:	e002      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop

0800ad44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d101      	bne.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e0b4      	b.n	800aeca <HAL_TIM_ConfigClockSource+0x186>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	4b56      	ldr	r3, [pc, #344]	@ (800aed4 <HAL_TIM_ConfigClockSource+0x190>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad98:	d03e      	beq.n	800ae18 <HAL_TIM_ConfigClockSource+0xd4>
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad9e:	f200 8087 	bhi.w	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800ada2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ada6:	f000 8086 	beq.w	800aeb6 <HAL_TIM_ConfigClockSource+0x172>
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adae:	d87f      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adb0:	2b70      	cmp	r3, #112	@ 0x70
 800adb2:	d01a      	beq.n	800adea <HAL_TIM_ConfigClockSource+0xa6>
 800adb4:	2b70      	cmp	r3, #112	@ 0x70
 800adb6:	d87b      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adb8:	2b60      	cmp	r3, #96	@ 0x60
 800adba:	d050      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x11a>
 800adbc:	2b60      	cmp	r3, #96	@ 0x60
 800adbe:	d877      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adc0:	2b50      	cmp	r3, #80	@ 0x50
 800adc2:	d03c      	beq.n	800ae3e <HAL_TIM_ConfigClockSource+0xfa>
 800adc4:	2b50      	cmp	r3, #80	@ 0x50
 800adc6:	d873      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adc8:	2b40      	cmp	r3, #64	@ 0x40
 800adca:	d058      	beq.n	800ae7e <HAL_TIM_ConfigClockSource+0x13a>
 800adcc:	2b40      	cmp	r3, #64	@ 0x40
 800adce:	d86f      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800add0:	2b30      	cmp	r3, #48	@ 0x30
 800add2:	d064      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800add4:	2b30      	cmp	r3, #48	@ 0x30
 800add6:	d86b      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800add8:	2b20      	cmp	r3, #32
 800adda:	d060      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800addc:	2b20      	cmp	r3, #32
 800adde:	d867      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d05c      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d05a      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800ade8:	e062      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adfa:	f000 fc19 	bl	800b630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	609a      	str	r2, [r3, #8]
      break;
 800ae16:	e04f      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae28:	f000 fc02 	bl	800b630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689a      	ldr	r2, [r3, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae3a:	609a      	str	r2, [r3, #8]
      break;
 800ae3c:	e03c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f000 fb76 	bl	800b53c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2150      	movs	r1, #80	@ 0x50
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fbcf 	bl	800b5fa <TIM_ITRx_SetConfig>
      break;
 800ae5c:	e02c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f000 fb95 	bl	800b59a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2160      	movs	r1, #96	@ 0x60
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fbbf 	bl	800b5fa <TIM_ITRx_SetConfig>
      break;
 800ae7c:	e01c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f000 fb56 	bl	800b53c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2140      	movs	r1, #64	@ 0x40
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fbaf 	bl	800b5fa <TIM_ITRx_SetConfig>
      break;
 800ae9c:	e00c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f000 fba6 	bl	800b5fa <TIM_ITRx_SetConfig>
      break;
 800aeae:	e003      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb4:	e000      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aeb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	fffeff88 	.word	0xfffeff88

0800aed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a46      	ldr	r2, [pc, #280]	@ (800b054 <TIM_Base_SetConfig+0x12c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d013      	beq.n	800af68 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af46:	d00f      	beq.n	800af68 <TIM_Base_SetConfig+0x40>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a43      	ldr	r2, [pc, #268]	@ (800b058 <TIM_Base_SetConfig+0x130>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00b      	beq.n	800af68 <TIM_Base_SetConfig+0x40>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a42      	ldr	r2, [pc, #264]	@ (800b05c <TIM_Base_SetConfig+0x134>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d007      	beq.n	800af68 <TIM_Base_SetConfig+0x40>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a41      	ldr	r2, [pc, #260]	@ (800b060 <TIM_Base_SetConfig+0x138>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <TIM_Base_SetConfig+0x40>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a40      	ldr	r2, [pc, #256]	@ (800b064 <TIM_Base_SetConfig+0x13c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d108      	bne.n	800af7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a35      	ldr	r2, [pc, #212]	@ (800b054 <TIM_Base_SetConfig+0x12c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d02b      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af88:	d027      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a32      	ldr	r2, [pc, #200]	@ (800b058 <TIM_Base_SetConfig+0x130>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d023      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a31      	ldr	r2, [pc, #196]	@ (800b05c <TIM_Base_SetConfig+0x134>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d01f      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a30      	ldr	r2, [pc, #192]	@ (800b060 <TIM_Base_SetConfig+0x138>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d01b      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a2f      	ldr	r2, [pc, #188]	@ (800b064 <TIM_Base_SetConfig+0x13c>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d017      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a2e      	ldr	r2, [pc, #184]	@ (800b068 <TIM_Base_SetConfig+0x140>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d013      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2d      	ldr	r2, [pc, #180]	@ (800b06c <TIM_Base_SetConfig+0x144>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00f      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2c      	ldr	r2, [pc, #176]	@ (800b070 <TIM_Base_SetConfig+0x148>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d00b      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2b      	ldr	r2, [pc, #172]	@ (800b074 <TIM_Base_SetConfig+0x14c>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d007      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2a      	ldr	r2, [pc, #168]	@ (800b078 <TIM_Base_SetConfig+0x150>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d003      	beq.n	800afda <TIM_Base_SetConfig+0xb2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a29      	ldr	r2, [pc, #164]	@ (800b07c <TIM_Base_SetConfig+0x154>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d108      	bne.n	800afec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a10      	ldr	r2, [pc, #64]	@ (800b054 <TIM_Base_SetConfig+0x12c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d003      	beq.n	800b020 <TIM_Base_SetConfig+0xf8>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a12      	ldr	r2, [pc, #72]	@ (800b064 <TIM_Base_SetConfig+0x13c>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d103      	bne.n	800b028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	691a      	ldr	r2, [r3, #16]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b01      	cmp	r3, #1
 800b038:	d105      	bne.n	800b046 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f023 0201 	bic.w	r2, r3, #1
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	611a      	str	r2, [r3, #16]
  }
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	40010000 	.word	0x40010000
 800b058:	40000400 	.word	0x40000400
 800b05c:	40000800 	.word	0x40000800
 800b060:	40000c00 	.word	0x40000c00
 800b064:	40010400 	.word	0x40010400
 800b068:	40014000 	.word	0x40014000
 800b06c:	40014400 	.word	0x40014400
 800b070:	40014800 	.word	0x40014800
 800b074:	40001800 	.word	0x40001800
 800b078:	40001c00 	.word	0x40001c00
 800b07c:	40002000 	.word	0x40002000

0800b080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	f023 0201 	bic.w	r2, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b158 <TIM_OC1_SetConfig+0xd8>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f023 0302 	bic.w	r3, r3, #2
 800b0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a21      	ldr	r2, [pc, #132]	@ (800b15c <TIM_OC1_SetConfig+0xdc>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d003      	beq.n	800b0e4 <TIM_OC1_SetConfig+0x64>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a20      	ldr	r2, [pc, #128]	@ (800b160 <TIM_OC1_SetConfig+0xe0>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d10c      	bne.n	800b0fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f023 0308 	bic.w	r3, r3, #8
 800b0ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f023 0304 	bic.w	r3, r3, #4
 800b0fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a16      	ldr	r2, [pc, #88]	@ (800b15c <TIM_OC1_SetConfig+0xdc>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d003      	beq.n	800b10e <TIM_OC1_SetConfig+0x8e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a15      	ldr	r2, [pc, #84]	@ (800b160 <TIM_OC1_SetConfig+0xe0>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d111      	bne.n	800b132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b11c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4313      	orrs	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	4313      	orrs	r3, r2
 800b130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	bf00      	nop
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	fffeff8f 	.word	0xfffeff8f
 800b15c:	40010000 	.word	0x40010000
 800b160:	40010400 	.word	0x40010400

0800b164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	f023 0210 	bic.w	r2, r3, #16
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4b2e      	ldr	r3, [pc, #184]	@ (800b248 <TIM_OC2_SetConfig+0xe4>)
 800b190:	4013      	ands	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f023 0320 	bic.w	r3, r3, #32
 800b1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	011b      	lsls	r3, r3, #4
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a23      	ldr	r2, [pc, #140]	@ (800b24c <TIM_OC2_SetConfig+0xe8>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_OC2_SetConfig+0x68>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a22      	ldr	r2, [pc, #136]	@ (800b250 <TIM_OC2_SetConfig+0xec>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d10d      	bne.n	800b1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	011b      	lsls	r3, r3, #4
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a18      	ldr	r2, [pc, #96]	@ (800b24c <TIM_OC2_SetConfig+0xe8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC2_SetConfig+0x94>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <TIM_OC2_SetConfig+0xec>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d113      	bne.n	800b220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	4313      	orrs	r3, r2
 800b212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	621a      	str	r2, [r3, #32]
}
 800b23a:	bf00      	nop
 800b23c:	371c      	adds	r7, #28
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	feff8fff 	.word	0xfeff8fff
 800b24c:	40010000 	.word	0x40010000
 800b250:	40010400 	.word	0x40010400

0800b254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4b2d      	ldr	r3, [pc, #180]	@ (800b334 <TIM_OC3_SetConfig+0xe0>)
 800b280:	4013      	ands	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 0303 	bic.w	r3, r3, #3
 800b28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b29c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a22      	ldr	r2, [pc, #136]	@ (800b338 <TIM_OC3_SetConfig+0xe4>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d003      	beq.n	800b2ba <TIM_OC3_SetConfig+0x66>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a21      	ldr	r2, [pc, #132]	@ (800b33c <TIM_OC3_SetConfig+0xe8>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d10d      	bne.n	800b2d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	021b      	lsls	r3, r3, #8
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a17      	ldr	r2, [pc, #92]	@ (800b338 <TIM_OC3_SetConfig+0xe4>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_OC3_SetConfig+0x92>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a16      	ldr	r2, [pc, #88]	@ (800b33c <TIM_OC3_SetConfig+0xe8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d113      	bne.n	800b30e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	621a      	str	r2, [r3, #32]
}
 800b328:	bf00      	nop
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	fffeff8f 	.word	0xfffeff8f
 800b338:	40010000 	.word	0x40010000
 800b33c:	40010400 	.word	0x40010400

0800b340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e4 <TIM_OC4_SetConfig+0xa4>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4313      	orrs	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b38a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	031b      	lsls	r3, r3, #12
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	4313      	orrs	r3, r2
 800b396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a13      	ldr	r2, [pc, #76]	@ (800b3e8 <TIM_OC4_SetConfig+0xa8>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d003      	beq.n	800b3a8 <TIM_OC4_SetConfig+0x68>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a12      	ldr	r2, [pc, #72]	@ (800b3ec <TIM_OC4_SetConfig+0xac>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d109      	bne.n	800b3bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	019b      	lsls	r3, r3, #6
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	621a      	str	r2, [r3, #32]
}
 800b3d6:	bf00      	nop
 800b3d8:	371c      	adds	r7, #28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	feff8fff 	.word	0xfeff8fff
 800b3e8:	40010000 	.word	0x40010000
 800b3ec:	40010400 	.word	0x40010400

0800b3f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4b1b      	ldr	r3, [pc, #108]	@ (800b488 <TIM_OC5_SetConfig+0x98>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	041b      	lsls	r3, r3, #16
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a12      	ldr	r2, [pc, #72]	@ (800b48c <TIM_OC5_SetConfig+0x9c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d003      	beq.n	800b44e <TIM_OC5_SetConfig+0x5e>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a11      	ldr	r2, [pc, #68]	@ (800b490 <TIM_OC5_SetConfig+0xa0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d109      	bne.n	800b462 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	621a      	str	r2, [r3, #32]
}
 800b47c:	bf00      	nop
 800b47e:	371c      	adds	r7, #28
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	fffeff8f 	.word	0xfffeff8f
 800b48c:	40010000 	.word	0x40010000
 800b490:	40010400 	.word	0x40010400

0800b494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4b1c      	ldr	r3, [pc, #112]	@ (800b530 <TIM_OC6_SetConfig+0x9c>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	051b      	lsls	r3, r3, #20
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a13      	ldr	r2, [pc, #76]	@ (800b534 <TIM_OC6_SetConfig+0xa0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d003      	beq.n	800b4f4 <TIM_OC6_SetConfig+0x60>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a12      	ldr	r2, [pc, #72]	@ (800b538 <TIM_OC6_SetConfig+0xa4>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d109      	bne.n	800b508 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	029b      	lsls	r3, r3, #10
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	4313      	orrs	r3, r2
 800b506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	621a      	str	r2, [r3, #32]
}
 800b522:	bf00      	nop
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	feff8fff 	.word	0xfeff8fff
 800b534:	40010000 	.word	0x40010000
 800b538:	40010400 	.word	0x40010400

0800b53c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	f023 0201 	bic.w	r2, r3, #1
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	011b      	lsls	r3, r3, #4
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	4313      	orrs	r3, r2
 800b570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f023 030a 	bic.w	r3, r3, #10
 800b578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4313      	orrs	r3, r2
 800b580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b087      	sub	sp, #28
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	60b9      	str	r1, [r7, #8]
 800b5a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	f023 0210 	bic.w	r2, r3, #16
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b5c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	031b      	lsls	r3, r3, #12
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	621a      	str	r2, [r3, #32]
}
 800b5ee:	bf00      	nop
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4313      	orrs	r3, r2
 800b618:	f043 0307 	orr.w	r3, r3, #7
 800b61c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	609a      	str	r2, [r3, #8]
}
 800b624:	bf00      	nop
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b64a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	021a      	lsls	r2, r3, #8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	431a      	orrs	r2, r3
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	4313      	orrs	r3, r2
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	609a      	str	r2, [r3, #8]
}
 800b664:	bf00      	nop
 800b666:	371c      	adds	r7, #28
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b684:	2302      	movs	r3, #2
 800b686:	e06d      	b.n	800b764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a30      	ldr	r2, [pc, #192]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d004      	beq.n	800b6bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d108      	bne.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a20      	ldr	r2, [pc, #128]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d022      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fa:	d01d      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a1d      	ldr	r2, [pc, #116]	@ (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d018      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a1c      	ldr	r2, [pc, #112]	@ (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d013      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1a      	ldr	r2, [pc, #104]	@ (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00e      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a15      	ldr	r2, [pc, #84]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d009      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a16      	ldr	r2, [pc, #88]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d004      	beq.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a15      	ldr	r2, [pc, #84]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d10c      	bne.n	800b752 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b73e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4313      	orrs	r3, r2
 800b748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	40010000 	.word	0x40010000
 800b774:	40010400 	.word	0x40010400
 800b778:	40000400 	.word	0x40000400
 800b77c:	40000800 	.word	0x40000800
 800b780:	40000c00 	.word	0x40000c00
 800b784:	40014000 	.word	0x40014000
 800b788:	40001800 	.word	0x40001800

0800b78c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e065      	b.n	800b874 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a16      	ldr	r2, [pc, #88]	@ (800b880 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d004      	beq.n	800b836 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a14      	ldr	r2, [pc, #80]	@ (800b884 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d115      	bne.n	800b862 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	051b      	lsls	r3, r3, #20
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	40010000 	.word	0x40010000
 800b884:	40010400 	.word	0x40010400

0800b888 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e040      	b.n	800b958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d106      	bne.n	800b8ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7f7 f8f8 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2224      	movs	r2, #36	@ 0x24
 800b8f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f022 0201 	bic.w	r2, r2, #1
 800b900:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fd7e 	bl	800c40c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fb17 	bl	800bf44 <UART_SetConfig>
 800b916:	4603      	mov	r3, r0
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d101      	bne.n	800b920 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e01b      	b.n	800b958 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b92e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b93e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fdfd 	bl	800c550 <UART_CheckIdleState>
 800b956:	4603      	mov	r3, r0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b0ba      	sub	sp, #232	@ 0xe8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b98a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b98e:	4013      	ands	r3, r2
 800b990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d115      	bne.n	800b9c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a0:	f003 0320 	and.w	r3, r3, #32
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00f      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ac:	f003 0320 	and.w	r3, r3, #32
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d009      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 8297 	beq.w	800beec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	4798      	blx	r3
      }
      return;
 800b9c6:	e291      	b.n	800beec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8117 	beq.w	800bc00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b9d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b9de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b9e2:	4b85      	ldr	r3, [pc, #532]	@ (800bbf8 <HAL_UART_IRQHandler+0x298>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 810a 	beq.w	800bc00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d011      	beq.n	800ba1c <HAL_UART_IRQHandler+0xbc>
 800b9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba12:	f043 0201 	orr.w	r2, r3, #1
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d011      	beq.n	800ba4c <HAL_UART_IRQHandler+0xec>
 800ba28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba42:	f043 0204 	orr.w	r2, r3, #4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d011      	beq.n	800ba7c <HAL_UART_IRQHandler+0x11c>
 800ba58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00b      	beq.n	800ba7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2204      	movs	r2, #4
 800ba6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba72:	f043 0202 	orr.w	r2, r3, #2
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d017      	beq.n	800bab8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d105      	bne.n	800baa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2208      	movs	r2, #8
 800baa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baae:	f043 0208 	orr.w	r2, r3, #8
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800babc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d012      	beq.n	800baea <HAL_UART_IRQHandler+0x18a>
 800bac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00c      	beq.n	800baea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae0:	f043 0220 	orr.w	r2, r3, #32
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 81fd 	beq.w	800bef0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800baf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00d      	beq.n	800bb1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb06:	f003 0320 	and.w	r3, r3, #32
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d007      	beq.n	800bb1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb32:	2b40      	cmp	r3, #64	@ 0x40
 800bb34:	d005      	beq.n	800bb42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d04f      	beq.n	800bbe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fdc8 	bl	800c6d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb52:	2b40      	cmp	r3, #64	@ 0x40
 800bb54:	d141      	bne.n	800bbda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bb6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1d9      	bne.n	800bb56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d013      	beq.n	800bbd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbae:	4a13      	ldr	r2, [pc, #76]	@ (800bbfc <HAL_UART_IRQHandler+0x29c>)
 800bbb0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f7 fe8c 	bl	80038d4 <HAL_DMA_Abort_IT>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d017      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd0:	e00f      	b.n	800bbf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f9a0 	bl	800bf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd8:	e00b      	b.n	800bbf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f99c 	bl	800bf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe0:	e007      	b.n	800bbf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f998 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bbf0:	e17e      	b.n	800bef0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf2:	bf00      	nop
    return;
 800bbf4:	e17c      	b.n	800bef0 <HAL_UART_IRQHandler+0x590>
 800bbf6:	bf00      	nop
 800bbf8:	04000120 	.word	0x04000120
 800bbfc:	0800c7a1 	.word	0x0800c7a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	f040 814c 	bne.w	800bea2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 8145 	beq.w	800bea2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc1c:	f003 0310 	and.w	r3, r3, #16
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 813e 	beq.w	800bea2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2210      	movs	r2, #16
 800bc2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc38:	2b40      	cmp	r3, #64	@ 0x40
 800bc3a:	f040 80b6 	bne.w	800bdaa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 8150 	beq.w	800bef4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bc5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	f080 8148 	bcs.w	800bef4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc78:	f000 8086 	beq.w	800bd88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc88:	e853 3f00 	ldrex	r3, [r3]
 800bc8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bcb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bcbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1da      	bne.n	800bc7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bcd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcd8:	f023 0301 	bic.w	r3, r3, #1
 800bcdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3308      	adds	r3, #8
 800bce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bcea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bcee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bcf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bcfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e1      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3308      	adds	r3, #8
 800bd08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3308      	adds	r3, #8
 800bd22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd2e:	e841 2300 	strex	r3, r2, [r1]
 800bd32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e3      	bne.n	800bd02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd58:	f023 0310 	bic.w	r3, r3, #16
 800bd5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e4      	bne.n	800bd48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7f7 fd36 	bl	80037f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	4619      	mov	r1, r3
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f8c2 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bda8:	e0a4      	b.n	800bef4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 8096 	beq.w	800bef8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800bdcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 8091 	beq.w	800bef8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e4      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	623b      	str	r3, [r7, #32]
   return(result);
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f023 0301 	bic.w	r3, r3, #1
 800be22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be30:	633a      	str	r2, [r7, #48]	@ 0x30
 800be32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be38:	e841 2300 	strex	r3, r2, [r1]
 800be3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e3      	bne.n	800be0c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2220      	movs	r2, #32
 800be48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	60fb      	str	r3, [r7, #12]
   return(result);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f023 0310 	bic.w	r3, r3, #16
 800be6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7e:	69b9      	ldr	r1, [r7, #24]
 800be80:	69fa      	ldr	r2, [r7, #28]
 800be82:	e841 2300 	strex	r3, r2, [r1]
 800be86:	617b      	str	r3, [r7, #20]
   return(result);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1e4      	bne.n	800be58 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2202      	movs	r2, #2
 800be92:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f846 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bea0:	e02a      	b.n	800bef8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00e      	beq.n	800becc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800beae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d008      	beq.n	800becc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d01c      	beq.n	800befc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	4798      	blx	r3
    }
    return;
 800beca:	e017      	b.n	800befc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800becc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d012      	beq.n	800befe <HAL_UART_IRQHandler+0x59e>
 800bed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00c      	beq.n	800befe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fc71 	bl	800c7cc <UART_EndTransmit_IT>
    return;
 800beea:	e008      	b.n	800befe <HAL_UART_IRQHandler+0x59e>
      return;
 800beec:	bf00      	nop
 800beee:	e006      	b.n	800befe <HAL_UART_IRQHandler+0x59e>
    return;
 800bef0:	bf00      	nop
 800bef2:	e004      	b.n	800befe <HAL_UART_IRQHandler+0x59e>
      return;
 800bef4:	bf00      	nop
 800bef6:	e002      	b.n	800befe <HAL_UART_IRQHandler+0x59e>
      return;
 800bef8:	bf00      	nop
 800befa:	e000      	b.n	800befe <HAL_UART_IRQHandler+0x59e>
    return;
 800befc:	bf00      	nop
  }

}
 800befe:	37e8      	adds	r7, #232	@ 0xe8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	4ba6      	ldr	r3, [pc, #664]	@ (800c208 <UART_SetConfig+0x2c4>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6812      	ldr	r2, [r2, #0]
 800bf76:	6979      	ldr	r1, [r7, #20]
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a1b      	ldr	r3, [r3, #32]
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	430a      	orrs	r2, r1
 800bfb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a94      	ldr	r2, [pc, #592]	@ (800c20c <UART_SetConfig+0x2c8>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d120      	bne.n	800c002 <UART_SetConfig+0xbe>
 800bfc0:	4b93      	ldr	r3, [pc, #588]	@ (800c210 <UART_SetConfig+0x2cc>)
 800bfc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfc6:	f003 0303 	and.w	r3, r3, #3
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d816      	bhi.n	800bffc <UART_SetConfig+0xb8>
 800bfce:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd4 <UART_SetConfig+0x90>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800bfe5 	.word	0x0800bfe5
 800bfd8:	0800bff1 	.word	0x0800bff1
 800bfdc:	0800bfeb 	.word	0x0800bfeb
 800bfe0:	0800bff7 	.word	0x0800bff7
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	77fb      	strb	r3, [r7, #31]
 800bfe8:	e150      	b.n	800c28c <UART_SetConfig+0x348>
 800bfea:	2302      	movs	r3, #2
 800bfec:	77fb      	strb	r3, [r7, #31]
 800bfee:	e14d      	b.n	800c28c <UART_SetConfig+0x348>
 800bff0:	2304      	movs	r3, #4
 800bff2:	77fb      	strb	r3, [r7, #31]
 800bff4:	e14a      	b.n	800c28c <UART_SetConfig+0x348>
 800bff6:	2308      	movs	r3, #8
 800bff8:	77fb      	strb	r3, [r7, #31]
 800bffa:	e147      	b.n	800c28c <UART_SetConfig+0x348>
 800bffc:	2310      	movs	r3, #16
 800bffe:	77fb      	strb	r3, [r7, #31]
 800c000:	e144      	b.n	800c28c <UART_SetConfig+0x348>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a83      	ldr	r2, [pc, #524]	@ (800c214 <UART_SetConfig+0x2d0>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d132      	bne.n	800c072 <UART_SetConfig+0x12e>
 800c00c:	4b80      	ldr	r3, [pc, #512]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c012:	f003 030c 	and.w	r3, r3, #12
 800c016:	2b0c      	cmp	r3, #12
 800c018:	d828      	bhi.n	800c06c <UART_SetConfig+0x128>
 800c01a:	a201      	add	r2, pc, #4	@ (adr r2, 800c020 <UART_SetConfig+0xdc>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c055 	.word	0x0800c055
 800c024:	0800c06d 	.word	0x0800c06d
 800c028:	0800c06d 	.word	0x0800c06d
 800c02c:	0800c06d 	.word	0x0800c06d
 800c030:	0800c061 	.word	0x0800c061
 800c034:	0800c06d 	.word	0x0800c06d
 800c038:	0800c06d 	.word	0x0800c06d
 800c03c:	0800c06d 	.word	0x0800c06d
 800c040:	0800c05b 	.word	0x0800c05b
 800c044:	0800c06d 	.word	0x0800c06d
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c06d 	.word	0x0800c06d
 800c050:	0800c067 	.word	0x0800c067
 800c054:	2300      	movs	r3, #0
 800c056:	77fb      	strb	r3, [r7, #31]
 800c058:	e118      	b.n	800c28c <UART_SetConfig+0x348>
 800c05a:	2302      	movs	r3, #2
 800c05c:	77fb      	strb	r3, [r7, #31]
 800c05e:	e115      	b.n	800c28c <UART_SetConfig+0x348>
 800c060:	2304      	movs	r3, #4
 800c062:	77fb      	strb	r3, [r7, #31]
 800c064:	e112      	b.n	800c28c <UART_SetConfig+0x348>
 800c066:	2308      	movs	r3, #8
 800c068:	77fb      	strb	r3, [r7, #31]
 800c06a:	e10f      	b.n	800c28c <UART_SetConfig+0x348>
 800c06c:	2310      	movs	r3, #16
 800c06e:	77fb      	strb	r3, [r7, #31]
 800c070:	e10c      	b.n	800c28c <UART_SetConfig+0x348>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a68      	ldr	r2, [pc, #416]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d120      	bne.n	800c0be <UART_SetConfig+0x17a>
 800c07c:	4b64      	ldr	r3, [pc, #400]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c082:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c086:	2b30      	cmp	r3, #48	@ 0x30
 800c088:	d013      	beq.n	800c0b2 <UART_SetConfig+0x16e>
 800c08a:	2b30      	cmp	r3, #48	@ 0x30
 800c08c:	d814      	bhi.n	800c0b8 <UART_SetConfig+0x174>
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d009      	beq.n	800c0a6 <UART_SetConfig+0x162>
 800c092:	2b20      	cmp	r3, #32
 800c094:	d810      	bhi.n	800c0b8 <UART_SetConfig+0x174>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <UART_SetConfig+0x15c>
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d006      	beq.n	800c0ac <UART_SetConfig+0x168>
 800c09e:	e00b      	b.n	800c0b8 <UART_SetConfig+0x174>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e0f2      	b.n	800c28c <UART_SetConfig+0x348>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	77fb      	strb	r3, [r7, #31]
 800c0aa:	e0ef      	b.n	800c28c <UART_SetConfig+0x348>
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	77fb      	strb	r3, [r7, #31]
 800c0b0:	e0ec      	b.n	800c28c <UART_SetConfig+0x348>
 800c0b2:	2308      	movs	r3, #8
 800c0b4:	77fb      	strb	r3, [r7, #31]
 800c0b6:	e0e9      	b.n	800c28c <UART_SetConfig+0x348>
 800c0b8:	2310      	movs	r3, #16
 800c0ba:	77fb      	strb	r3, [r7, #31]
 800c0bc:	e0e6      	b.n	800c28c <UART_SetConfig+0x348>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a56      	ldr	r2, [pc, #344]	@ (800c21c <UART_SetConfig+0x2d8>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d120      	bne.n	800c10a <UART_SetConfig+0x1c6>
 800c0c8:	4b51      	ldr	r3, [pc, #324]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c0d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c0d4:	d013      	beq.n	800c0fe <UART_SetConfig+0x1ba>
 800c0d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c0d8:	d814      	bhi.n	800c104 <UART_SetConfig+0x1c0>
 800c0da:	2b80      	cmp	r3, #128	@ 0x80
 800c0dc:	d009      	beq.n	800c0f2 <UART_SetConfig+0x1ae>
 800c0de:	2b80      	cmp	r3, #128	@ 0x80
 800c0e0:	d810      	bhi.n	800c104 <UART_SetConfig+0x1c0>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <UART_SetConfig+0x1a8>
 800c0e6:	2b40      	cmp	r3, #64	@ 0x40
 800c0e8:	d006      	beq.n	800c0f8 <UART_SetConfig+0x1b4>
 800c0ea:	e00b      	b.n	800c104 <UART_SetConfig+0x1c0>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	77fb      	strb	r3, [r7, #31]
 800c0f0:	e0cc      	b.n	800c28c <UART_SetConfig+0x348>
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	77fb      	strb	r3, [r7, #31]
 800c0f6:	e0c9      	b.n	800c28c <UART_SetConfig+0x348>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	77fb      	strb	r3, [r7, #31]
 800c0fc:	e0c6      	b.n	800c28c <UART_SetConfig+0x348>
 800c0fe:	2308      	movs	r3, #8
 800c100:	77fb      	strb	r3, [r7, #31]
 800c102:	e0c3      	b.n	800c28c <UART_SetConfig+0x348>
 800c104:	2310      	movs	r3, #16
 800c106:	77fb      	strb	r3, [r7, #31]
 800c108:	e0c0      	b.n	800c28c <UART_SetConfig+0x348>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a44      	ldr	r2, [pc, #272]	@ (800c220 <UART_SetConfig+0x2dc>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d125      	bne.n	800c160 <UART_SetConfig+0x21c>
 800c114:	4b3e      	ldr	r3, [pc, #248]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c11e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c122:	d017      	beq.n	800c154 <UART_SetConfig+0x210>
 800c124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c128:	d817      	bhi.n	800c15a <UART_SetConfig+0x216>
 800c12a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c12e:	d00b      	beq.n	800c148 <UART_SetConfig+0x204>
 800c130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c134:	d811      	bhi.n	800c15a <UART_SetConfig+0x216>
 800c136:	2b00      	cmp	r3, #0
 800c138:	d003      	beq.n	800c142 <UART_SetConfig+0x1fe>
 800c13a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c13e:	d006      	beq.n	800c14e <UART_SetConfig+0x20a>
 800c140:	e00b      	b.n	800c15a <UART_SetConfig+0x216>
 800c142:	2300      	movs	r3, #0
 800c144:	77fb      	strb	r3, [r7, #31]
 800c146:	e0a1      	b.n	800c28c <UART_SetConfig+0x348>
 800c148:	2302      	movs	r3, #2
 800c14a:	77fb      	strb	r3, [r7, #31]
 800c14c:	e09e      	b.n	800c28c <UART_SetConfig+0x348>
 800c14e:	2304      	movs	r3, #4
 800c150:	77fb      	strb	r3, [r7, #31]
 800c152:	e09b      	b.n	800c28c <UART_SetConfig+0x348>
 800c154:	2308      	movs	r3, #8
 800c156:	77fb      	strb	r3, [r7, #31]
 800c158:	e098      	b.n	800c28c <UART_SetConfig+0x348>
 800c15a:	2310      	movs	r3, #16
 800c15c:	77fb      	strb	r3, [r7, #31]
 800c15e:	e095      	b.n	800c28c <UART_SetConfig+0x348>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a2f      	ldr	r2, [pc, #188]	@ (800c224 <UART_SetConfig+0x2e0>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d125      	bne.n	800c1b6 <UART_SetConfig+0x272>
 800c16a:	4b29      	ldr	r3, [pc, #164]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c178:	d017      	beq.n	800c1aa <UART_SetConfig+0x266>
 800c17a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c17e:	d817      	bhi.n	800c1b0 <UART_SetConfig+0x26c>
 800c180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c184:	d00b      	beq.n	800c19e <UART_SetConfig+0x25a>
 800c186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c18a:	d811      	bhi.n	800c1b0 <UART_SetConfig+0x26c>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <UART_SetConfig+0x254>
 800c190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c194:	d006      	beq.n	800c1a4 <UART_SetConfig+0x260>
 800c196:	e00b      	b.n	800c1b0 <UART_SetConfig+0x26c>
 800c198:	2301      	movs	r3, #1
 800c19a:	77fb      	strb	r3, [r7, #31]
 800c19c:	e076      	b.n	800c28c <UART_SetConfig+0x348>
 800c19e:	2302      	movs	r3, #2
 800c1a0:	77fb      	strb	r3, [r7, #31]
 800c1a2:	e073      	b.n	800c28c <UART_SetConfig+0x348>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	77fb      	strb	r3, [r7, #31]
 800c1a8:	e070      	b.n	800c28c <UART_SetConfig+0x348>
 800c1aa:	2308      	movs	r3, #8
 800c1ac:	77fb      	strb	r3, [r7, #31]
 800c1ae:	e06d      	b.n	800c28c <UART_SetConfig+0x348>
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	77fb      	strb	r3, [r7, #31]
 800c1b4:	e06a      	b.n	800c28c <UART_SetConfig+0x348>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d138      	bne.n	800c232 <UART_SetConfig+0x2ee>
 800c1c0:	4b13      	ldr	r3, [pc, #76]	@ (800c210 <UART_SetConfig+0x2cc>)
 800c1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c1ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c1ce:	d017      	beq.n	800c200 <UART_SetConfig+0x2bc>
 800c1d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c1d4:	d82a      	bhi.n	800c22c <UART_SetConfig+0x2e8>
 800c1d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1da:	d00b      	beq.n	800c1f4 <UART_SetConfig+0x2b0>
 800c1dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1e0:	d824      	bhi.n	800c22c <UART_SetConfig+0x2e8>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <UART_SetConfig+0x2aa>
 800c1e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1ea:	d006      	beq.n	800c1fa <UART_SetConfig+0x2b6>
 800c1ec:	e01e      	b.n	800c22c <UART_SetConfig+0x2e8>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	77fb      	strb	r3, [r7, #31]
 800c1f2:	e04b      	b.n	800c28c <UART_SetConfig+0x348>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	77fb      	strb	r3, [r7, #31]
 800c1f8:	e048      	b.n	800c28c <UART_SetConfig+0x348>
 800c1fa:	2304      	movs	r3, #4
 800c1fc:	77fb      	strb	r3, [r7, #31]
 800c1fe:	e045      	b.n	800c28c <UART_SetConfig+0x348>
 800c200:	2308      	movs	r3, #8
 800c202:	77fb      	strb	r3, [r7, #31]
 800c204:	e042      	b.n	800c28c <UART_SetConfig+0x348>
 800c206:	bf00      	nop
 800c208:	efff69f3 	.word	0xefff69f3
 800c20c:	40011000 	.word	0x40011000
 800c210:	40023800 	.word	0x40023800
 800c214:	40004400 	.word	0x40004400
 800c218:	40004800 	.word	0x40004800
 800c21c:	40004c00 	.word	0x40004c00
 800c220:	40005000 	.word	0x40005000
 800c224:	40011400 	.word	0x40011400
 800c228:	40007800 	.word	0x40007800
 800c22c:	2310      	movs	r3, #16
 800c22e:	77fb      	strb	r3, [r7, #31]
 800c230:	e02c      	b.n	800c28c <UART_SetConfig+0x348>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a72      	ldr	r2, [pc, #456]	@ (800c400 <UART_SetConfig+0x4bc>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d125      	bne.n	800c288 <UART_SetConfig+0x344>
 800c23c:	4b71      	ldr	r3, [pc, #452]	@ (800c404 <UART_SetConfig+0x4c0>)
 800c23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c242:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c246:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c24a:	d017      	beq.n	800c27c <UART_SetConfig+0x338>
 800c24c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c250:	d817      	bhi.n	800c282 <UART_SetConfig+0x33e>
 800c252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c256:	d00b      	beq.n	800c270 <UART_SetConfig+0x32c>
 800c258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c25c:	d811      	bhi.n	800c282 <UART_SetConfig+0x33e>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <UART_SetConfig+0x326>
 800c262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c266:	d006      	beq.n	800c276 <UART_SetConfig+0x332>
 800c268:	e00b      	b.n	800c282 <UART_SetConfig+0x33e>
 800c26a:	2300      	movs	r3, #0
 800c26c:	77fb      	strb	r3, [r7, #31]
 800c26e:	e00d      	b.n	800c28c <UART_SetConfig+0x348>
 800c270:	2302      	movs	r3, #2
 800c272:	77fb      	strb	r3, [r7, #31]
 800c274:	e00a      	b.n	800c28c <UART_SetConfig+0x348>
 800c276:	2304      	movs	r3, #4
 800c278:	77fb      	strb	r3, [r7, #31]
 800c27a:	e007      	b.n	800c28c <UART_SetConfig+0x348>
 800c27c:	2308      	movs	r3, #8
 800c27e:	77fb      	strb	r3, [r7, #31]
 800c280:	e004      	b.n	800c28c <UART_SetConfig+0x348>
 800c282:	2310      	movs	r3, #16
 800c284:	77fb      	strb	r3, [r7, #31]
 800c286:	e001      	b.n	800c28c <UART_SetConfig+0x348>
 800c288:	2310      	movs	r3, #16
 800c28a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	69db      	ldr	r3, [r3, #28]
 800c290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c294:	d15b      	bne.n	800c34e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c296:	7ffb      	ldrb	r3, [r7, #31]
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d828      	bhi.n	800c2ee <UART_SetConfig+0x3aa>
 800c29c:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a4 <UART_SetConfig+0x360>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c2d1 	.word	0x0800c2d1
 800c2ac:	0800c2d9 	.word	0x0800c2d9
 800c2b0:	0800c2ef 	.word	0x0800c2ef
 800c2b4:	0800c2df 	.word	0x0800c2df
 800c2b8:	0800c2ef 	.word	0x0800c2ef
 800c2bc:	0800c2ef 	.word	0x0800c2ef
 800c2c0:	0800c2ef 	.word	0x0800c2ef
 800c2c4:	0800c2e7 	.word	0x0800c2e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2c8:	f7fb fdb4 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800c2cc:	61b8      	str	r0, [r7, #24]
        break;
 800c2ce:	e013      	b.n	800c2f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2d0:	f7fb fdc4 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800c2d4:	61b8      	str	r0, [r7, #24]
        break;
 800c2d6:	e00f      	b.n	800c2f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2d8:	4b4b      	ldr	r3, [pc, #300]	@ (800c408 <UART_SetConfig+0x4c4>)
 800c2da:	61bb      	str	r3, [r7, #24]
        break;
 800c2dc:	e00c      	b.n	800c2f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2de:	f7fb fcd7 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 800c2e2:	61b8      	str	r0, [r7, #24]
        break;
 800c2e4:	e008      	b.n	800c2f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2ea:	61bb      	str	r3, [r7, #24]
        break;
 800c2ec:	e004      	b.n	800c2f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	77bb      	strb	r3, [r7, #30]
        break;
 800c2f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d074      	beq.n	800c3e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	005a      	lsls	r2, r3, #1
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	085b      	lsrs	r3, r3, #1
 800c308:	441a      	add	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	d916      	bls.n	800c348 <UART_SetConfig+0x404>
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c320:	d212      	bcs.n	800c348 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	b29b      	uxth	r3, r3
 800c326:	f023 030f 	bic.w	r3, r3, #15
 800c32a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	085b      	lsrs	r3, r3, #1
 800c330:	b29b      	uxth	r3, r3
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	b29a      	uxth	r2, r3
 800c338:	89fb      	ldrh	r3, [r7, #14]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	89fa      	ldrh	r2, [r7, #14]
 800c344:	60da      	str	r2, [r3, #12]
 800c346:	e04f      	b.n	800c3e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	77bb      	strb	r3, [r7, #30]
 800c34c:	e04c      	b.n	800c3e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c34e:	7ffb      	ldrb	r3, [r7, #31]
 800c350:	2b08      	cmp	r3, #8
 800c352:	d828      	bhi.n	800c3a6 <UART_SetConfig+0x462>
 800c354:	a201      	add	r2, pc, #4	@ (adr r2, 800c35c <UART_SetConfig+0x418>)
 800c356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35a:	bf00      	nop
 800c35c:	0800c381 	.word	0x0800c381
 800c360:	0800c389 	.word	0x0800c389
 800c364:	0800c391 	.word	0x0800c391
 800c368:	0800c3a7 	.word	0x0800c3a7
 800c36c:	0800c397 	.word	0x0800c397
 800c370:	0800c3a7 	.word	0x0800c3a7
 800c374:	0800c3a7 	.word	0x0800c3a7
 800c378:	0800c3a7 	.word	0x0800c3a7
 800c37c:	0800c39f 	.word	0x0800c39f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c380:	f7fb fd58 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800c384:	61b8      	str	r0, [r7, #24]
        break;
 800c386:	e013      	b.n	800c3b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c388:	f7fb fd68 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800c38c:	61b8      	str	r0, [r7, #24]
        break;
 800c38e:	e00f      	b.n	800c3b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c390:	4b1d      	ldr	r3, [pc, #116]	@ (800c408 <UART_SetConfig+0x4c4>)
 800c392:	61bb      	str	r3, [r7, #24]
        break;
 800c394:	e00c      	b.n	800c3b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c396:	f7fb fc7b 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 800c39a:	61b8      	str	r0, [r7, #24]
        break;
 800c39c:	e008      	b.n	800c3b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3a2:	61bb      	str	r3, [r7, #24]
        break;
 800c3a4:	e004      	b.n	800c3b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	77bb      	strb	r3, [r7, #30]
        break;
 800c3ae:	bf00      	nop
    }

    if (pclk != 0U)
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d018      	beq.n	800c3e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	085a      	lsrs	r2, r3, #1
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	441a      	add	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	2b0f      	cmp	r3, #15
 800c3ce:	d909      	bls.n	800c3e4 <UART_SetConfig+0x4a0>
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3d6:	d205      	bcs.n	800c3e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	e001      	b.n	800c3e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c3f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	40007c00 	.word	0x40007c00
 800c404:	40023800 	.word	0x40023800
 800c408:	00f42400 	.word	0x00f42400

0800c40c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c418:	f003 0308 	and.w	r3, r3, #8
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00a      	beq.n	800c436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	430a      	orrs	r2, r1
 800c434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00a      	beq.n	800c47a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00a      	beq.n	800c49c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	430a      	orrs	r2, r1
 800c49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a0:	f003 0310 	and.w	r3, r3, #16
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	f003 0320 	and.w	r3, r3, #32
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d01a      	beq.n	800c522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c50a:	d10a      	bne.n	800c522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	430a      	orrs	r2, r1
 800c520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00a      	beq.n	800c544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	430a      	orrs	r2, r1
 800c542:	605a      	str	r2, [r3, #4]
  }
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08c      	sub	sp, #48	@ 0x30
 800c554:	af02      	add	r7, sp, #8
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c560:	f7f6 fbd6 	bl	8002d10 <HAL_GetTick>
 800c564:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b08      	cmp	r3, #8
 800c572:	d12e      	bne.n	800c5d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	2200      	movs	r2, #0
 800c57e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f83b 	bl	800c5fe <UART_WaitOnFlagUntilTimeout>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d021      	beq.n	800c5d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5a2:	623b      	str	r3, [r7, #32]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	61fb      	str	r3, [r7, #28]
 800c5ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	69b9      	ldr	r1, [r7, #24]
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e6      	bne.n	800c58e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e011      	b.n	800c5f6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3728      	adds	r7, #40	@ 0x28
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	603b      	str	r3, [r7, #0]
 800c60a:	4613      	mov	r3, r2
 800c60c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c60e:	e04f      	b.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d04b      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c618:	f7f6 fb7a 	bl	8002d10 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	69ba      	ldr	r2, [r7, #24]
 800c624:	429a      	cmp	r2, r3
 800c626:	d302      	bcc.n	800c62e <UART_WaitOnFlagUntilTimeout+0x30>
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e04e      	b.n	800c6d0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0304 	and.w	r3, r3, #4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d037      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b80      	cmp	r3, #128	@ 0x80
 800c644:	d034      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2b40      	cmp	r3, #64	@ 0x40
 800c64a:	d031      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	f003 0308 	and.w	r3, r3, #8
 800c656:	2b08      	cmp	r3, #8
 800c658:	d110      	bne.n	800c67c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2208      	movs	r2, #8
 800c660:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 f838 	bl	800c6d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2208      	movs	r2, #8
 800c66c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e029      	b.n	800c6d0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c68a:	d111      	bne.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c694:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 f81e 	bl	800c6d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e00f      	b.n	800c6d0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	69da      	ldr	r2, [r3, #28]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	bf0c      	ite	eq
 800c6c0:	2301      	moveq	r3, #1
 800c6c2:	2300      	movne	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d0a0      	beq.n	800c610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b095      	sub	sp, #84	@ 0x54
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e8:	e853 3f00 	ldrex	r3, [r3]
 800c6ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800c700:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e6      	bne.n	800c6e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3308      	adds	r3, #8
 800c718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	61fb      	str	r3, [r7, #28]
   return(result);
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	f023 0301 	bic.w	r3, r3, #1
 800c728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3308      	adds	r3, #8
 800c730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c734:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e5      	bne.n	800c712 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d118      	bne.n	800c780 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	e853 3f00 	ldrex	r3, [r3]
 800c75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f023 0310 	bic.w	r3, r3, #16
 800c762:	647b      	str	r3, [r7, #68]	@ 0x44
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c76c:	61bb      	str	r3, [r7, #24]
 800c76e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c770:	6979      	ldr	r1, [r7, #20]
 800c772:	69ba      	ldr	r2, [r7, #24]
 800c774:	e841 2300 	strex	r3, r2, [r1]
 800c778:	613b      	str	r3, [r7, #16]
   return(result);
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1e6      	bne.n	800c74e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2220      	movs	r2, #32
 800c784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c794:	bf00      	nop
 800c796:	3754      	adds	r7, #84	@ 0x54
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff fbaa 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7c4:	bf00      	nop
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	61bb      	str	r3, [r7, #24]
 800c7f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6979      	ldr	r1, [r7, #20]
 800c7f8:	69ba      	ldr	r2, [r7, #24]
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e6      	bne.n	800c7d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2220      	movs	r2, #32
 800c80a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff fb76 	bl	800bf04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c818:	bf00      	nop
 800c81a:	3720      	adds	r7, #32
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d121      	bne.n	800c876 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4b27      	ldr	r3, [pc, #156]	@ (800c8d4 <FMC_SDRAM_Init+0xb4>)
 800c838:	4013      	ands	r3, r2
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	6851      	ldr	r1, [r2, #4]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	6892      	ldr	r2, [r2, #8]
 800c842:	4311      	orrs	r1, r2
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	68d2      	ldr	r2, [r2, #12]
 800c848:	4311      	orrs	r1, r2
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	6912      	ldr	r2, [r2, #16]
 800c84e:	4311      	orrs	r1, r2
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	6952      	ldr	r2, [r2, #20]
 800c854:	4311      	orrs	r1, r2
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	6992      	ldr	r2, [r2, #24]
 800c85a:	4311      	orrs	r1, r2
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	69d2      	ldr	r2, [r2, #28]
 800c860:	4311      	orrs	r1, r2
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	6a12      	ldr	r2, [r2, #32]
 800c866:	4311      	orrs	r1, r2
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c86c:	430a      	orrs	r2, r1
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	e026      	b.n	800c8c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	69d9      	ldr	r1, [r3, #28]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	4319      	orrs	r1, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88c:	430b      	orrs	r3, r1
 800c88e:	431a      	orrs	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d4 <FMC_SDRAM_Init+0xb4>)
 800c89a:	4013      	ands	r3, r2
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	6851      	ldr	r1, [r2, #4]
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	6892      	ldr	r2, [r2, #8]
 800c8a4:	4311      	orrs	r1, r2
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	68d2      	ldr	r2, [r2, #12]
 800c8aa:	4311      	orrs	r1, r2
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	6912      	ldr	r2, [r2, #16]
 800c8b0:	4311      	orrs	r1, r2
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	6952      	ldr	r2, [r2, #20]
 800c8b6:	4311      	orrs	r1, r2
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	6992      	ldr	r2, [r2, #24]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	ffff8000 	.word	0xffff8000

0800c8d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d128      	bne.n	800c93c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	1e59      	subs	r1, r3, #1
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	011b      	lsls	r3, r3, #4
 800c900:	4319      	orrs	r1, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	3b01      	subs	r3, #1
 800c908:	021b      	lsls	r3, r3, #8
 800c90a:	4319      	orrs	r1, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	3b01      	subs	r3, #1
 800c912:	031b      	lsls	r3, r3, #12
 800c914:	4319      	orrs	r1, r3
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	041b      	lsls	r3, r3, #16
 800c91e:	4319      	orrs	r1, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	3b01      	subs	r3, #1
 800c926:	051b      	lsls	r3, r3, #20
 800c928:	4319      	orrs	r1, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	3b01      	subs	r3, #1
 800c930:	061b      	lsls	r3, r3, #24
 800c932:	430b      	orrs	r3, r1
 800c934:	431a      	orrs	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	609a      	str	r2, [r3, #8]
 800c93a:	e02d      	b.n	800c998 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	4b19      	ldr	r3, [pc, #100]	@ (800c9a8 <FMC_SDRAM_Timing_Init+0xd0>)
 800c942:	4013      	ands	r3, r2
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	68d2      	ldr	r2, [r2, #12]
 800c948:	3a01      	subs	r2, #1
 800c94a:	0311      	lsls	r1, r2, #12
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	6952      	ldr	r2, [r2, #20]
 800c950:	3a01      	subs	r2, #1
 800c952:	0512      	lsls	r2, r2, #20
 800c954:	430a      	orrs	r2, r1
 800c956:	431a      	orrs	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	1e59      	subs	r1, r3, #1
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	3b01      	subs	r3, #1
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	4319      	orrs	r1, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	3b01      	subs	r3, #1
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	4319      	orrs	r1, r3
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	3b01      	subs	r3, #1
 800c984:	041b      	lsls	r3, r3, #16
 800c986:	4319      	orrs	r1, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	061b      	lsls	r3, r3, #24
 800c990:	430b      	orrs	r3, r1
 800c992:	431a      	orrs	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	ff0f0fff 	.word	0xff0f0fff

0800c9ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	b480      	push	{r7}
 800c9b0:	b085      	sub	sp, #20
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	f107 001c 	add.w	r0, r7, #28
 800c9ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c9c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c9c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c9ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c9ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c9d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c9d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <SDMMC_Init+0x54>)
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	b004      	add	sp, #16
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	ffff8100 	.word	0xffff8100

0800ca04 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ca1e:	b480      	push	{r7}
 800ca20:	b083      	sub	sp, #12
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2203      	movs	r2, #3
 800ca2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b083      	sub	sp, #12
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0303 	and.w	r3, r3, #3
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ca7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ca82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68da      	ldr	r2, [r3, #12]
 800ca8e:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <SDMMC_SendCommand+0x50>)
 800ca90:	4013      	ands	r3, r2
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	431a      	orrs	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	fffff000 	.word	0xfffff000

0800caac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	b2db      	uxtb	r3, r3
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3314      	adds	r3, #20
 800cad4:	461a      	mov	r2, r3
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	4413      	add	r3, r2
 800cada:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
}  
 800cae0:	4618      	mov	r0, r3
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb12:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cb18:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cb1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb2a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0

}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cb52:	2310      	movs	r3, #16
 800cb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb56:	2340      	movs	r3, #64	@ 0x40
 800cb58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff ff74 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cb70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb74:	2110      	movs	r1, #16
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fa1a 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cb7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cb96:	2311      	movs	r3, #17
 800cb98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb9a:	2340      	movs	r3, #64	@ 0x40
 800cb9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cba6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cba8:	f107 0308 	add.w	r3, r7, #8
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff ff52 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cbb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbb8:	2111      	movs	r1, #17
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f9f8 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cbc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc2:	69fb      	ldr	r3, [r7, #28]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cbda:	2312      	movs	r3, #18
 800cbdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbde:	2340      	movs	r3, #64	@ 0x40
 800cbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbec:	f107 0308 	add.w	r3, r7, #8
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7ff ff30 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cbf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbfc:	2112      	movs	r1, #18
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f9d6 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cc04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc06:	69fb      	ldr	r3, [r7, #28]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc1e:	2318      	movs	r3, #24
 800cc20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc22:	2340      	movs	r3, #64	@ 0x40
 800cc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ff0e 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc40:	2118      	movs	r1, #24
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f9b4 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3720      	adds	r7, #32
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cc62:	2319      	movs	r3, #25
 800cc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc66:	2340      	movs	r3, #64	@ 0x40
 800cc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc74:	f107 0308 	add.w	r3, r7, #8
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff feec 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc84:	2119      	movs	r1, #25
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f992 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cca4:	230c      	movs	r3, #12
 800cca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cca8:	2340      	movs	r3, #64	@ 0x40
 800ccaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb6:	f107 0308 	add.w	r3, r7, #8
 800ccba:	4619      	mov	r1, r3
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff fecb 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ccc2:	4a05      	ldr	r2, [pc, #20]	@ (800ccd8 <SDMMC_CmdStopTransfer+0x40>)
 800ccc4:	210c      	movs	r1, #12
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f972 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccce:	69fb      	ldr	r3, [r7, #28]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3720      	adds	r7, #32
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	05f5e100 	.word	0x05f5e100

0800ccdc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08a      	sub	sp, #40	@ 0x28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ccec:	2307      	movs	r3, #7
 800ccee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccf0:	2340      	movs	r3, #64	@ 0x40
 800ccf2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccfc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccfe:	f107 0310 	add.w	r3, r7, #16
 800cd02:	4619      	mov	r1, r3
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7ff fea7 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cd0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd0e:	2107      	movs	r1, #7
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f000 f94d 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cd16:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3728      	adds	r7, #40	@ 0x28
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cd32:	2300      	movs	r3, #0
 800cd34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd36:	2300      	movs	r3, #0
 800cd38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd40:	f107 0308 	add.w	r3, r7, #8
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fe86 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fb67 	bl	800d420 <SDMMC_GetCmdError>
 800cd52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd54:	69fb      	ldr	r3, [r7, #28]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3720      	adds	r7, #32
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b088      	sub	sp, #32
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cd66:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cd6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd70:	2340      	movs	r3, #64	@ 0x40
 800cd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fe67 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fafa 	bl	800d384 <SDMMC_GetCmdResp7>
 800cd90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd92:	69fb      	ldr	r3, [r7, #28]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3720      	adds	r7, #32
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b088      	sub	sp, #32
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cdaa:	2337      	movs	r3, #55	@ 0x37
 800cdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdae:	2340      	movs	r3, #64	@ 0x40
 800cdb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdbc:	f107 0308 	add.w	r3, r7, #8
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fe48 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cdc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdcc:	2137      	movs	r1, #55	@ 0x37
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f8ee 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cdd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3720      	adds	r7, #32
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	4b0d      	ldr	r3, [pc, #52]	@ (800ce24 <SDMMC_CmdAppOperCommand+0x44>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cdf2:	2329      	movs	r3, #41	@ 0x29
 800cdf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdf6:	2340      	movs	r3, #64	@ 0x40
 800cdf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce04:	f107 0308 	add.w	r3, r7, #8
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fe24 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fa03 	bl	800d21c <SDMMC_GetCmdResp3>
 800ce16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce18:	69fb      	ldr	r3, [r7, #28]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3720      	adds	r7, #32
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	80100000 	.word	0x80100000

0800ce28 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ce36:	2306      	movs	r3, #6
 800ce38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce3a:	2340      	movs	r3, #64	@ 0x40
 800ce3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce48:	f107 0308 	add.w	r3, r7, #8
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff fe02 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ce54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce58:	2106      	movs	r1, #6
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f8a8 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800ce60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce62:	69fb      	ldr	r3, [r7, #28]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3720      	adds	r7, #32
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ce78:	2333      	movs	r3, #51	@ 0x33
 800ce7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce7c:	2340      	movs	r3, #64	@ 0x40
 800ce7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce80:	2300      	movs	r3, #0
 800ce82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce8a:	f107 0308 	add.w	r3, r7, #8
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff fde1 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ce96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce9a:	2133      	movs	r1, #51	@ 0x33
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f887 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cea4:	69fb      	ldr	r3, [r7, #28]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3720      	adds	r7, #32
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b088      	sub	sp, #32
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ceba:	2302      	movs	r3, #2
 800cebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cebe:	23c0      	movs	r3, #192	@ 0xc0
 800cec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cecc:	f107 0308 	add.w	r3, r7, #8
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fdc0 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f957 	bl	800d18c <SDMMC_GetCmdResp2>
 800cede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cee0:	69fb      	ldr	r3, [r7, #28]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b088      	sub	sp, #32
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cef8:	2309      	movs	r3, #9
 800cefa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cefc:	23c0      	movs	r3, #192	@ 0xc0
 800cefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff fda1 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f938 	bl	800d18c <SDMMC_GetCmdResp2>
 800cf1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3720      	adds	r7, #32
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf36:	2303      	movs	r3, #3
 800cf38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf3a:	2340      	movs	r3, #64	@ 0x40
 800cf3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf48:	f107 0308 	add.w	r3, r7, #8
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fd82 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	2103      	movs	r1, #3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f99d 	bl	800d298 <SDMMC_GetCmdResp6>
 800cf5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf60:	69fb      	ldr	r3, [r7, #28]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3720      	adds	r7, #32
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cf78:	230d      	movs	r3, #13
 800cf7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf7c:	2340      	movs	r3, #64	@ 0x40
 800cf7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf8a:	f107 0308 	add.w	r3, r7, #8
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff fd61 	bl	800ca58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cf96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf9a:	210d      	movs	r1, #13
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f807 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cfa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa4:	69fb      	ldr	r3, [r7, #28]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3720      	adds	r7, #32
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cfbe:	4b70      	ldr	r3, [pc, #448]	@ (800d180 <SDMMC_GetCmdResp1+0x1d0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a70      	ldr	r2, [pc, #448]	@ (800d184 <SDMMC_GetCmdResp1+0x1d4>)
 800cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc8:	0a5a      	lsrs	r2, r3, #9
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	fb02 f303 	mul.w	r3, r2, r3
 800cfd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	1e5a      	subs	r2, r3, #1
 800cfd6:	61fa      	str	r2, [r7, #28]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cfe0:	e0c9      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0ef      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ea      	bne.n	800cfd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2204      	movs	r2, #4
 800d00c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d00e:	2304      	movs	r3, #4
 800d010:	e0b1      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2201      	movs	r2, #1
 800d022:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d024:	2301      	movs	r3, #1
 800d026:	e0a6      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	22c5      	movs	r2, #197	@ 0xc5
 800d02c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff fd3c 	bl	800caac <SDMMC_GetCommandResponse>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	7afb      	ldrb	r3, [r7, #11]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d001      	beq.n	800d042 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d03e:	2301      	movs	r3, #1
 800d040:	e099      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d042:	2100      	movs	r1, #0
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f7ff fd3e 	bl	800cac6 <SDMMC_GetResponse>
 800d04a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	4b4e      	ldr	r3, [pc, #312]	@ (800d188 <SDMMC_GetCmdResp1+0x1d8>)
 800d050:	4013      	ands	r3, r2
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d056:	2300      	movs	r3, #0
 800d058:	e08d      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	da02      	bge.n	800d066 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d064:	e087      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d070:	2340      	movs	r3, #64	@ 0x40
 800d072:	e080      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d07e:	2380      	movs	r3, #128	@ 0x80
 800d080:	e079      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d08c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d090:	e071      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d09c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0a0:	e069      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d0ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0b0:	e061      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d0bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d0c0:	e059      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d0cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0d0:	e051      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d0e0:	e049      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d0ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d0f0:	e041      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d0fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d100:	e039      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d10c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d110:	e031      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d11c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d120:	e029      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d12c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d130:	e021      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d13c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d140:	e019      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d14c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d150:	e011      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d15c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d160:	e009      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f003 0308 	and.w	r3, r3, #8
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d16c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d170:	e001      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d176:	4618      	mov	r0, r3
 800d178:	3720      	adds	r7, #32
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20000000 	.word	0x20000000
 800d184:	10624dd3 	.word	0x10624dd3
 800d188:	fdffe008 	.word	0xfdffe008

0800d18c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d194:	4b1f      	ldr	r3, [pc, #124]	@ (800d214 <SDMMC_GetCmdResp2+0x88>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a1f      	ldr	r2, [pc, #124]	@ (800d218 <SDMMC_GetCmdResp2+0x8c>)
 800d19a:	fba2 2303 	umull	r2, r3, r2, r3
 800d19e:	0a5b      	lsrs	r3, r3, #9
 800d1a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1a4:	fb02 f303 	mul.w	r3, r2, r3
 800d1a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	1e5a      	subs	r2, r3, #1
 800d1ae:	60fa      	str	r2, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1b8:	e026      	b.n	800d208 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0ef      	beq.n	800d1aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1ea      	bne.n	800d1aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1d8:	f003 0304 	and.w	r3, r3, #4
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d004      	beq.n	800d1ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2204      	movs	r2, #4
 800d1e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1e6:	2304      	movs	r3, #4
 800d1e8:	e00e      	b.n	800d208 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e003      	b.n	800d208 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	22c5      	movs	r2, #197	@ 0xc5
 800d204:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	20000000 	.word	0x20000000
 800d218:	10624dd3 	.word	0x10624dd3

0800d21c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d224:	4b1a      	ldr	r3, [pc, #104]	@ (800d290 <SDMMC_GetCmdResp3+0x74>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a1a      	ldr	r2, [pc, #104]	@ (800d294 <SDMMC_GetCmdResp3+0x78>)
 800d22a:	fba2 2303 	umull	r2, r3, r2, r3
 800d22e:	0a5b      	lsrs	r3, r3, #9
 800d230:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d234:	fb02 f303 	mul.w	r3, r2, r3
 800d238:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	1e5a      	subs	r2, r3, #1
 800d23e:	60fa      	str	r2, [r7, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d102      	bne.n	800d24a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d244:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d248:	e01b      	b.n	800d282 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d24e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d256:	2b00      	cmp	r3, #0
 800d258:	d0ef      	beq.n	800d23a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1ea      	bne.n	800d23a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d268:	f003 0304 	and.w	r3, r3, #4
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2204      	movs	r2, #4
 800d274:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d276:	2304      	movs	r3, #4
 800d278:	e003      	b.n	800d282 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	22c5      	movs	r2, #197	@ 0xc5
 800d27e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000000 	.word	0x20000000
 800d294:	10624dd3 	.word	0x10624dd3

0800d298 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	607a      	str	r2, [r7, #4]
 800d2a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2a6:	4b35      	ldr	r3, [pc, #212]	@ (800d37c <SDMMC_GetCmdResp6+0xe4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a35      	ldr	r2, [pc, #212]	@ (800d380 <SDMMC_GetCmdResp6+0xe8>)
 800d2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b0:	0a5b      	lsrs	r3, r3, #9
 800d2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2b6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	61fa      	str	r2, [r7, #28]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2ca:	e052      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0ef      	beq.n	800d2bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1ea      	bne.n	800d2bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ea:	f003 0304 	and.w	r3, r3, #4
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2204      	movs	r2, #4
 800d2f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2f8:	2304      	movs	r3, #4
 800d2fa:	e03a      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d30e:	2301      	movs	r3, #1
 800d310:	e02f      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7ff fbca 	bl	800caac <SDMMC_GetCommandResponse>
 800d318:	4603      	mov	r3, r0
 800d31a:	461a      	mov	r2, r3
 800d31c:	7afb      	ldrb	r3, [r7, #11]
 800d31e:	4293      	cmp	r3, r2
 800d320:	d001      	beq.n	800d326 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d322:	2301      	movs	r3, #1
 800d324:	e025      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	22c5      	movs	r2, #197	@ 0xc5
 800d32a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d32c:	2100      	movs	r1, #0
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7ff fbc9 	bl	800cac6 <SDMMC_GetResponse>
 800d334:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	0c1b      	lsrs	r3, r3, #16
 800d344:	b29a      	uxth	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e011      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d35c:	e009      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d36c:	e001      	b.n	800d372 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d36e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d372:	4618      	mov	r0, r3
 800d374:	3720      	adds	r7, #32
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20000000 	.word	0x20000000
 800d380:	10624dd3 	.word	0x10624dd3

0800d384 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d38c:	4b22      	ldr	r3, [pc, #136]	@ (800d418 <SDMMC_GetCmdResp7+0x94>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a22      	ldr	r2, [pc, #136]	@ (800d41c <SDMMC_GetCmdResp7+0x98>)
 800d392:	fba2 2303 	umull	r2, r3, r2, r3
 800d396:	0a5b      	lsrs	r3, r3, #9
 800d398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d39c:	fb02 f303 	mul.w	r3, r2, r3
 800d3a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	1e5a      	subs	r2, r3, #1
 800d3a6:	60fa      	str	r2, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3b0:	e02c      	b.n	800d40c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0ef      	beq.n	800d3a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1ea      	bne.n	800d3a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2204      	movs	r2, #4
 800d3dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3de:	2304      	movs	r3, #4
 800d3e0:	e014      	b.n	800d40c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e009      	b.n	800d40c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2240      	movs	r2, #64	@ 0x40
 800d408:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d40a:	2300      	movs	r3, #0
  
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	20000000 	.word	0x20000000
 800d41c:	10624dd3 	.word	0x10624dd3

0800d420 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d428:	4b11      	ldr	r3, [pc, #68]	@ (800d470 <SDMMC_GetCmdError+0x50>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a11      	ldr	r2, [pc, #68]	@ (800d474 <SDMMC_GetCmdError+0x54>)
 800d42e:	fba2 2303 	umull	r2, r3, r2, r3
 800d432:	0a5b      	lsrs	r3, r3, #9
 800d434:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d438:	fb02 f303 	mul.w	r3, r2, r3
 800d43c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	1e5a      	subs	r2, r3, #1
 800d442:	60fa      	str	r2, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d102      	bne.n	800d44e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d448:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d44c:	e009      	b.n	800d462 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0f1      	beq.n	800d43e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	22c5      	movs	r2, #197	@ 0xc5
 800d45e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	20000000 	.word	0x20000000
 800d474:	10624dd3 	.word	0x10624dd3

0800d478 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d478:	b084      	sub	sp, #16
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b084      	sub	sp, #16
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	f107 001c 	add.w	r0, r7, #28
 800d486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d48a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d121      	bne.n	800d4d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d496:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	4b21      	ldr	r3, [pc, #132]	@ (800d528 <USB_CoreInit+0xb0>)
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d4b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d105      	bne.n	800d4ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f9d4 	bl	800d878 <USB_CoreReset>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	e010      	b.n	800d4f8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f9c8 	bl	800d878 <USB_CoreReset>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d4f8:	7fbb      	ldrb	r3, [r7, #30]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d10b      	bne.n	800d516 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	f043 0206 	orr.w	r2, r3, #6
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	f043 0220 	orr.w	r2, r3, #32
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d516:	7bfb      	ldrb	r3, [r7, #15]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d522:	b004      	add	sp, #16
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	ffbdffbf 	.word	0xffbdffbf

0800d52c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f043 0201 	orr.w	r2, r3, #1
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	f023 0201 	bic.w	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d58c:	78fb      	ldrb	r3, [r7, #3]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d115      	bne.n	800d5be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d59e:	200a      	movs	r0, #10
 800d5a0:	f7f5 fbc2 	bl	8002d28 <HAL_Delay>
      ms += 10U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	330a      	adds	r3, #10
 800d5a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f956 	bl	800d85c <USB_GetMode>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d01e      	beq.n	800d5f4 <USB_SetCurrentMode+0x84>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5ba:	d9f0      	bls.n	800d59e <USB_SetCurrentMode+0x2e>
 800d5bc:	e01a      	b.n	800d5f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d115      	bne.n	800d5f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d5d0:	200a      	movs	r0, #10
 800d5d2:	f7f5 fba9 	bl	8002d28 <HAL_Delay>
      ms += 10U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	330a      	adds	r3, #10
 800d5da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f93d 	bl	800d85c <USB_GetMode>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <USB_SetCurrentMode+0x84>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5ec:	d9f0      	bls.n	800d5d0 <USB_SetCurrentMode+0x60>
 800d5ee:	e001      	b.n	800d5f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e005      	b.n	800d600 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d5f8:	d101      	bne.n	800d5fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d622:	d901      	bls.n	800d628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e01b      	b.n	800d660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	daf2      	bge.n	800d616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	019b      	lsls	r3, r3, #6
 800d638:	f043 0220 	orr.w	r2, r3, #32
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d64c:	d901      	bls.n	800d652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d64e:	2303      	movs	r3, #3
 800d650:	e006      	b.n	800d660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d0f0      	beq.n	800d640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d684:	d901      	bls.n	800d68a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e018      	b.n	800d6bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	daf2      	bge.n	800d678 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2210      	movs	r2, #16
 800d69a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6a8:	d901      	bls.n	800d6ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e006      	b.n	800d6bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	f003 0310 	and.w	r3, r3, #16
 800d6b6:	2b10      	cmp	r3, #16
 800d6b8:	d0f0      	beq.n	800d69c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b089      	sub	sp, #36	@ 0x24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	71fb      	strb	r3, [r7, #7]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d6e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d123      	bne.n	800d736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d6ee:	88bb      	ldrh	r3, [r7, #4]
 800d6f0:	3303      	adds	r3, #3
 800d6f2:	089b      	lsrs	r3, r3, #2
 800d6f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61bb      	str	r3, [r7, #24]
 800d6fa:	e018      	b.n	800d72e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6fc:	79fb      	ldrb	r3, [r7, #7]
 800d6fe:	031a      	lsls	r2, r3, #12
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	4413      	add	r3, r2
 800d704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d708:	461a      	mov	r2, r3
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	3301      	adds	r3, #1
 800d714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	3301      	adds	r3, #1
 800d71a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	3301      	adds	r3, #1
 800d720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	3301      	adds	r3, #1
 800d726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	3301      	adds	r3, #1
 800d72c:	61bb      	str	r3, [r7, #24]
 800d72e:	69ba      	ldr	r2, [r7, #24]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	429a      	cmp	r2, r3
 800d734:	d3e2      	bcc.n	800d6fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3724      	adds	r7, #36	@ 0x24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d744:	b480      	push	{r7}
 800d746:	b08b      	sub	sp, #44	@ 0x2c
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d75a:	88fb      	ldrh	r3, [r7, #6]
 800d75c:	089b      	lsrs	r3, r3, #2
 800d75e:	b29b      	uxth	r3, r3
 800d760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d762:	88fb      	ldrh	r3, [r7, #6]
 800d764:	f003 0303 	and.w	r3, r3, #3
 800d768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d76a:	2300      	movs	r3, #0
 800d76c:	623b      	str	r3, [r7, #32]
 800d76e:	e014      	b.n	800d79a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	3301      	adds	r3, #1
 800d780:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d784:	3301      	adds	r3, #1
 800d786:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	3301      	adds	r3, #1
 800d78c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d790:	3301      	adds	r3, #1
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	3301      	adds	r3, #1
 800d798:	623b      	str	r3, [r7, #32]
 800d79a:	6a3a      	ldr	r2, [r7, #32]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d3e6      	bcc.n	800d770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d7a2:	8bfb      	ldrh	r3, [r7, #30]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01e      	beq.n	800d7e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f107 0310 	add.w	r3, r7, #16
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d7bc:	693a      	ldr	r2, [r7, #16]
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7cc:	701a      	strb	r2, [r3, #0]
      i++;
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d7da:	8bfb      	ldrh	r3, [r7, #30]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d7e0:	8bfb      	ldrh	r3, [r7, #30]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1ea      	bne.n	800d7bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	372c      	adds	r7, #44	@ 0x2c
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	4013      	ands	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d81a:	b480      	push	{r7}
 800d81c:	b085      	sub	sp, #20
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	4413      	add	r3, r2
 800d842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	4013      	ands	r3, r2
 800d84c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d84e:	68bb      	ldr	r3, [r7, #8]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	f003 0301 	and.w	r3, r3, #1
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d880:	2300      	movs	r3, #0
 800d882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d890:	d901      	bls.n	800d896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e01b      	b.n	800d8ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	daf2      	bge.n	800d884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	f043 0201 	orr.w	r2, r3, #1
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8ba:	d901      	bls.n	800d8c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e006      	b.n	800d8ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d0f0      	beq.n	800d8ae <USB_CoreReset+0x36>

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8dc:	b084      	sub	sp, #16
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b086      	sub	sp, #24
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	2300      	movs	r3, #0
 800d900:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d916:	2b00      	cmp	r3, #0
 800d918:	d119      	bne.n	800d94e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d91a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d10a      	bne.n	800d938 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	6013      	str	r3, [r2, #0]
 800d936:	e014      	b.n	800d962 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d946:	f023 0304 	bic.w	r3, r3, #4
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	e009      	b.n	800d962 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d95c:	f023 0304 	bic.w	r3, r3, #4
 800d960:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d962:	2110      	movs	r1, #16
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7ff fe4f 	bl	800d608 <USB_FlushTxFifo>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff fe79 	bl	800d66c <USB_FlushRxFifo>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d984:	2300      	movs	r3, #0
 800d986:	613b      	str	r3, [r7, #16]
 800d988:	e015      	b.n	800d9b6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	015a      	lsls	r2, r3, #5
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4413      	add	r3, r2
 800d992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d996:	461a      	mov	r2, r3
 800d998:	f04f 33ff 	mov.w	r3, #4294967295
 800d99c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	015a      	lsls	r2, r3, #5
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	613b      	str	r3, [r7, #16]
 800d9b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d3e3      	bcc.n	800d98a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a18      	ldr	r2, [pc, #96]	@ (800da34 <USB_HostInit+0x158>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d10b      	bne.n	800d9f0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9de:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a15      	ldr	r2, [pc, #84]	@ (800da38 <USB_HostInit+0x15c>)
 800d9e4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4a14      	ldr	r2, [pc, #80]	@ (800da3c <USB_HostInit+0x160>)
 800d9ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d9ee:	e009      	b.n	800da04 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2280      	movs	r2, #128	@ 0x80
 800d9f4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4a11      	ldr	r2, [pc, #68]	@ (800da40 <USB_HostInit+0x164>)
 800d9fa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a11      	ldr	r2, [pc, #68]	@ (800da44 <USB_HostInit+0x168>)
 800da00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d105      	bne.n	800da18 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	f043 0210 	orr.w	r2, r3, #16
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	699a      	ldr	r2, [r3, #24]
 800da1c:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <USB_HostInit+0x16c>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da30:	b004      	add	sp, #16
 800da32:	4770      	bx	lr
 800da34:	40040000 	.word	0x40040000
 800da38:	01000200 	.word	0x01000200
 800da3c:	00e00300 	.word	0x00e00300
 800da40:	00600080 	.word	0x00600080
 800da44:	004000e0 	.word	0x004000e0
 800da48:	a3200008 	.word	0xa3200008

0800da4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	f003 0303 	and.w	r3, r3, #3
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800da84:	4313      	orrs	r3, r2
 800da86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800da88:	78fb      	ldrb	r3, [r7, #3]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d107      	bne.n	800da9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da94:	461a      	mov	r2, r3
 800da96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800da9a:	6053      	str	r3, [r2, #4]
 800da9c:	e00c      	b.n	800dab8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d107      	bne.n	800dab4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daaa:	461a      	mov	r2, r3
 800daac:	f241 7370 	movw	r3, #6000	@ 0x1770
 800dab0:	6053      	str	r3, [r2, #4]
 800dab2:	e001      	b.n	800dab8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	e000      	b.n	800daba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b084      	sub	sp, #16
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800dae6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800daf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800daf4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800daf6:	2064      	movs	r0, #100	@ 0x64
 800daf8:	f7f5 f916 	bl	8002d28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db08:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800db0a:	200a      	movs	r0, #10
 800db0c:	f7f5 f90c 	bl	8002d28 <HAL_Delay>

  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b085      	sub	sp, #20
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	460b      	mov	r3, r1
 800db24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800db3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db46:	2b00      	cmp	r3, #0
 800db48:	d109      	bne.n	800db5e <USB_DriveVbus+0x44>
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d106      	bne.n	800db5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db68:	d109      	bne.n	800db7e <USB_DriveVbus+0x64>
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d106      	bne.n	800db7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800db98:	2300      	movs	r3, #0
 800db9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	0c5b      	lsrs	r3, r3, #17
 800dbaa:	f003 0303 	and.w	r3, r3, #3
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b085      	sub	sp, #20
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	b29b      	uxth	r3, r3
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3714      	adds	r7, #20
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4603      	mov	r3, r0
 800dbec:	70fb      	strb	r3, [r7, #3]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	70bb      	strb	r3, [r7, #2]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dc12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d87c      	bhi.n	800dd14 <USB_HC_Init+0x138>
 800dc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc20 <USB_HC_Init+0x44>)
 800dc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc20:	0800dc31 	.word	0x0800dc31
 800dc24:	0800dcd7 	.word	0x0800dcd7
 800dc28:	0800dc31 	.word	0x0800dc31
 800dc2c:	0800dc99 	.word	0x0800dc99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800dc42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dc44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	da10      	bge.n	800dc6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	015a      	lsls	r2, r3, #5
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	4413      	add	r3, r2
 800dc54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	78fa      	ldrb	r2, [r7, #3]
 800dc5c:	0151      	lsls	r1, r2, #5
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	440a      	add	r2, r1
 800dc62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc6a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dc6c:	e055      	b.n	800dd1a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4a6f      	ldr	r2, [pc, #444]	@ (800de30 <USB_HC_Init+0x254>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d151      	bne.n	800dd1a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dc76:	78fb      	ldrb	r3, [r7, #3]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	78fa      	ldrb	r2, [r7, #3]
 800dc86:	0151      	lsls	r1, r2, #5
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	440a      	add	r2, r1
 800dc8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dc94:	60d3      	str	r3, [r2, #12]
      break;
 800dc96:	e040      	b.n	800dd1a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	015a      	lsls	r2, r3, #5
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dca4:	461a      	mov	r2, r3
 800dca6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dcaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dcac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	da34      	bge.n	800dd1e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	78fa      	ldrb	r2, [r7, #3]
 800dcc4:	0151      	lsls	r1, r2, #5
 800dcc6:	693a      	ldr	r2, [r7, #16]
 800dcc8:	440a      	add	r2, r1
 800dcca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcd2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dcd4:	e023      	b.n	800dd1e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dcd6:	78fb      	ldrb	r3, [r7, #3]
 800dcd8:	015a      	lsls	r2, r3, #5
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	4413      	add	r3, r2
 800dcde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dce2:	461a      	mov	r2, r3
 800dce4:	f240 2325 	movw	r3, #549	@ 0x225
 800dce8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dcea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	da17      	bge.n	800dd22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	78fa      	ldrb	r2, [r7, #3]
 800dd02:	0151      	lsls	r1, r2, #5
 800dd04:	693a      	ldr	r2, [r7, #16]
 800dd06:	440a      	add	r2, r1
 800dd08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd0c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dd10:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dd12:	e006      	b.n	800dd22 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	77fb      	strb	r3, [r7, #31]
      break;
 800dd18:	e004      	b.n	800dd24 <USB_HC_Init+0x148>
      break;
 800dd1a:	bf00      	nop
 800dd1c:	e002      	b.n	800dd24 <USB_HC_Init+0x148>
      break;
 800dd1e:	bf00      	nop
 800dd20:	e000      	b.n	800dd24 <USB_HC_Init+0x148>
      break;
 800dd22:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dd24:	78fb      	ldrb	r3, [r7, #3]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd30:	461a      	mov	r2, r3
 800dd32:	2300      	movs	r3, #0
 800dd34:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dd36:	78fb      	ldrb	r3, [r7, #3]
 800dd38:	015a      	lsls	r2, r3, #5
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	78fa      	ldrb	r2, [r7, #3]
 800dd46:	0151      	lsls	r1, r2, #5
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	440a      	add	r2, r1
 800dd4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd50:	f043 0302 	orr.w	r3, r3, #2
 800dd54:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd5c:	699a      	ldr	r2, [r3, #24]
 800dd5e:	78fb      	ldrb	r3, [r7, #3]
 800dd60:	f003 030f 	and.w	r3, r3, #15
 800dd64:	2101      	movs	r1, #1
 800dd66:	fa01 f303 	lsl.w	r3, r1, r3
 800dd6a:	6939      	ldr	r1, [r7, #16]
 800dd6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dd70:	4313      	orrs	r3, r2
 800dd72:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dd80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	da03      	bge.n	800dd90 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dd88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd8c:	61bb      	str	r3, [r7, #24]
 800dd8e:	e001      	b.n	800dd94 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dd90:	2300      	movs	r3, #0
 800dd92:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff fef9 	bl	800db8c <USB_GetHostSpeed>
 800dd9a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dd9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d106      	bne.n	800ddb2 <USB_HC_Init+0x1d6>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d003      	beq.n	800ddb2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ddaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e001      	b.n	800ddb6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddb6:	787b      	ldrb	r3, [r7, #1]
 800ddb8:	059b      	lsls	r3, r3, #22
 800ddba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ddbe:	78bb      	ldrb	r3, [r7, #2]
 800ddc0:	02db      	lsls	r3, r3, #11
 800ddc2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddc6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ddc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ddcc:	049b      	lsls	r3, r3, #18
 800ddce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ddd2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ddd4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ddd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ddda:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	431a      	orrs	r2, r3
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dde4:	78fa      	ldrb	r2, [r7, #3]
 800dde6:	0151      	lsls	r1, r2, #5
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	440a      	add	r2, r1
 800ddec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ddf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddf4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ddf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ddfa:	2b03      	cmp	r3, #3
 800ddfc:	d003      	beq.n	800de06 <USB_HC_Init+0x22a>
 800ddfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de02:	2b01      	cmp	r3, #1
 800de04:	d10f      	bne.n	800de26 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800de06:	78fb      	ldrb	r3, [r7, #3]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	78fa      	ldrb	r2, [r7, #3]
 800de16:	0151      	lsls	r1, r2, #5
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	440a      	add	r2, r1
 800de1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800de26:	7ffb      	ldrb	r3, [r7, #31]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	40040000 	.word	0x40040000

0800de34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b08c      	sub	sp, #48	@ 0x30
 800de38:	af02      	add	r7, sp, #8
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800de4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de50:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4a5d      	ldr	r2, [pc, #372]	@ (800dfcc <USB_HC_StartXfer+0x198>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d12f      	bne.n	800deba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d11c      	bne.n	800de9a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	7c9b      	ldrb	r3, [r3, #18]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d003      	beq.n	800de70 <USB_HC_StartXfer+0x3c>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	7c9b      	ldrb	r3, [r3, #18]
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d124      	bne.n	800deba <USB_HC_StartXfer+0x86>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	799b      	ldrb	r3, [r3, #6]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d120      	bne.n	800deba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	69fa      	ldr	r2, [r7, #28]
 800de88:	0151      	lsls	r1, r2, #5
 800de8a:	6a3a      	ldr	r2, [r7, #32]
 800de8c:	440a      	add	r2, r1
 800de8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de96:	60d3      	str	r3, [r2, #12]
 800de98:	e00f      	b.n	800deba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	791b      	ldrb	r3, [r3, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10b      	bne.n	800deba <USB_HC_StartXfer+0x86>
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	795b      	ldrb	r3, [r3, #5]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d107      	bne.n	800deba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	785b      	ldrb	r3, [r3, #1]
 800deae:	4619      	mov	r1, r3
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fb6b 	bl	800e58c <USB_DoPing>
        return HAL_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e232      	b.n	800e320 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	799b      	ldrb	r3, [r3, #6]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d158      	bne.n	800df74 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800dec2:	2301      	movs	r3, #1
 800dec4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	78db      	ldrb	r3, [r3, #3]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d007      	beq.n	800dede <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	8a92      	ldrh	r2, [r2, #20]
 800ded4:	fb03 f202 	mul.w	r2, r3, r2
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	61da      	str	r2, [r3, #28]
 800dedc:	e07c      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	7c9b      	ldrb	r3, [r3, #18]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d130      	bne.n	800df48 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	2bbc      	cmp	r3, #188	@ 0xbc
 800deec:	d918      	bls.n	800df20 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	8a9b      	ldrh	r3, [r3, #20]
 800def2:	461a      	mov	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	69da      	ldr	r2, [r3, #28]
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d003      	beq.n	800df10 <USB_HC_StartXfer+0xdc>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d103      	bne.n	800df18 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2202      	movs	r2, #2
 800df14:	60da      	str	r2, [r3, #12]
 800df16:	e05f      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2201      	movs	r2, #1
 800df1c:	60da      	str	r2, [r3, #12]
 800df1e:	e05b      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	6a1a      	ldr	r2, [r3, #32]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d007      	beq.n	800df40 <USB_HC_StartXfer+0x10c>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d003      	beq.n	800df40 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2204      	movs	r2, #4
 800df3c:	60da      	str	r2, [r3, #12]
 800df3e:	e04b      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2203      	movs	r2, #3
 800df44:	60da      	str	r2, [r3, #12]
 800df46:	e047      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d10d      	bne.n	800df6a <USB_HC_StartXfer+0x136>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	6a1b      	ldr	r3, [r3, #32]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	8a92      	ldrh	r2, [r2, #20]
 800df56:	4293      	cmp	r3, r2
 800df58:	d907      	bls.n	800df6a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	8a92      	ldrh	r2, [r2, #20]
 800df60:	fb03 f202 	mul.w	r2, r3, r2
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	61da      	str	r2, [r3, #28]
 800df68:	e036      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6a1a      	ldr	r2, [r3, #32]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	61da      	str	r2, [r3, #28]
 800df72:	e031      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	6a1b      	ldr	r3, [r3, #32]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d018      	beq.n	800dfae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	6a1b      	ldr	r3, [r3, #32]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	8a92      	ldrh	r2, [r2, #20]
 800df84:	4413      	add	r3, r2
 800df86:	3b01      	subs	r3, #1
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	8a92      	ldrh	r2, [r2, #20]
 800df8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df90:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800df92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800df94:	8b7b      	ldrh	r3, [r7, #26]
 800df96:	429a      	cmp	r2, r3
 800df98:	d90b      	bls.n	800dfb2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800df9a:	8b7b      	ldrh	r3, [r7, #26]
 800df9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	8a92      	ldrh	r2, [r2, #20]
 800dfa4:	fb03 f202 	mul.w	r2, r3, r2
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	61da      	str	r2, [r3, #28]
 800dfac:	e001      	b.n	800dfb2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	78db      	ldrb	r3, [r3, #3]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	8a92      	ldrh	r2, [r2, #20]
 800dfc0:	fb03 f202 	mul.w	r2, r3, r2
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	61da      	str	r2, [r3, #28]
 800dfc8:	e006      	b.n	800dfd8 <USB_HC_StartXfer+0x1a4>
 800dfca:	bf00      	nop
 800dfcc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	6a1a      	ldr	r2, [r3, #32]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	69db      	ldr	r3, [r3, #28]
 800dfdc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfe2:	04d9      	lsls	r1, r3, #19
 800dfe4:	4ba3      	ldr	r3, [pc, #652]	@ (800e274 <USB_HC_StartXfer+0x440>)
 800dfe6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfe8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	7d9b      	ldrb	r3, [r3, #22]
 800dfee:	075b      	lsls	r3, r3, #29
 800dff0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dff4:	69f9      	ldr	r1, [r7, #28]
 800dff6:	0148      	lsls	r0, r1, #5
 800dff8:	6a39      	ldr	r1, [r7, #32]
 800dffa:	4401      	add	r1, r0
 800dffc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e000:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e002:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d009      	beq.n	800e01e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	6999      	ldr	r1, [r3, #24]
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	015a      	lsls	r2, r3, #5
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	4413      	add	r3, r2
 800e016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e01a:	460a      	mov	r2, r1
 800e01c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	bf0c      	ite	eq
 800e02e:	2301      	moveq	r3, #1
 800e030:	2300      	movne	r3, #0
 800e032:	b2db      	uxtb	r3, r3
 800e034:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	6a3b      	ldr	r3, [r7, #32]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	0151      	lsls	r1, r2, #5
 800e048:	6a3a      	ldr	r2, [r7, #32]
 800e04a:	440a      	add	r2, r1
 800e04c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e050:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e054:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	015a      	lsls	r2, r3, #5
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	4413      	add	r3, r2
 800e05e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	7e7b      	ldrb	r3, [r7, #25]
 800e066:	075b      	lsls	r3, r3, #29
 800e068:	69f9      	ldr	r1, [r7, #28]
 800e06a:	0148      	lsls	r0, r1, #5
 800e06c:	6a39      	ldr	r1, [r7, #32]
 800e06e:	4401      	add	r1, r0
 800e070:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e074:	4313      	orrs	r3, r2
 800e076:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	799b      	ldrb	r3, [r3, #6]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	f040 80c3 	bne.w	800e208 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	7c5b      	ldrb	r3, [r3, #17]
 800e086:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e08c:	4313      	orrs	r3, r2
 800e08e:	69fa      	ldr	r2, [r7, #28]
 800e090:	0151      	lsls	r1, r2, #5
 800e092:	6a3a      	ldr	r2, [r7, #32]
 800e094:	440a      	add	r2, r1
 800e096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e09a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e09e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	015a      	lsls	r2, r3, #5
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	69fa      	ldr	r2, [r7, #28]
 800e0b0:	0151      	lsls	r1, r2, #5
 800e0b2:	6a3a      	ldr	r2, [r7, #32]
 800e0b4:	440a      	add	r2, r1
 800e0b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e0be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	79db      	ldrb	r3, [r3, #7]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d123      	bne.n	800e110 <USB_HC_StartXfer+0x2dc>
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	78db      	ldrb	r3, [r3, #3]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d11f      	bne.n	800e110 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	015a      	lsls	r2, r3, #5
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	0151      	lsls	r1, r2, #5
 800e0e2:	6a3a      	ldr	r2, [r7, #32]
 800e0e4:	440a      	add	r2, r1
 800e0e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	015a      	lsls	r2, r3, #5
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	69fa      	ldr	r2, [r7, #28]
 800e100:	0151      	lsls	r1, r2, #5
 800e102:	6a3a      	ldr	r2, [r7, #32]
 800e104:	440a      	add	r2, r1
 800e106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e10e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	7c9b      	ldrb	r3, [r3, #18]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d003      	beq.n	800e120 <USB_HC_StartXfer+0x2ec>
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	7c9b      	ldrb	r3, [r3, #18]
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	d117      	bne.n	800e150 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e124:	2b01      	cmp	r3, #1
 800e126:	d113      	bne.n	800e150 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	78db      	ldrb	r3, [r3, #3]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d10f      	bne.n	800e150 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	015a      	lsls	r2, r3, #5
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	4413      	add	r3, r2
 800e138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	69fa      	ldr	r2, [r7, #28]
 800e140:	0151      	lsls	r1, r2, #5
 800e142:	6a3a      	ldr	r2, [r7, #32]
 800e144:	440a      	add	r2, r1
 800e146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e14a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e14e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	7c9b      	ldrb	r3, [r3, #18]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d162      	bne.n	800e21e <USB_HC_StartXfer+0x3ea>
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	78db      	ldrb	r3, [r3, #3]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d15e      	bne.n	800e21e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	3b01      	subs	r3, #1
 800e166:	2b03      	cmp	r3, #3
 800e168:	d858      	bhi.n	800e21c <USB_HC_StartXfer+0x3e8>
 800e16a:	a201      	add	r2, pc, #4	@ (adr r2, 800e170 <USB_HC_StartXfer+0x33c>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e181 	.word	0x0800e181
 800e174:	0800e1a3 	.word	0x0800e1a3
 800e178:	0800e1c5 	.word	0x0800e1c5
 800e17c:	0800e1e7 	.word	0x0800e1e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	4413      	add	r3, r2
 800e188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	0151      	lsls	r1, r2, #5
 800e192:	6a3a      	ldr	r2, [r7, #32]
 800e194:	440a      	add	r2, r1
 800e196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e19a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e19e:	6053      	str	r3, [r2, #4]
          break;
 800e1a0:	e03d      	b.n	800e21e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	69fa      	ldr	r2, [r7, #28]
 800e1b2:	0151      	lsls	r1, r2, #5
 800e1b4:	6a3a      	ldr	r2, [r7, #32]
 800e1b6:	440a      	add	r2, r1
 800e1b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1bc:	f043 030e 	orr.w	r3, r3, #14
 800e1c0:	6053      	str	r3, [r2, #4]
          break;
 800e1c2:	e02c      	b.n	800e21e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	015a      	lsls	r2, r3, #5
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	69fa      	ldr	r2, [r7, #28]
 800e1d4:	0151      	lsls	r1, r2, #5
 800e1d6:	6a3a      	ldr	r2, [r7, #32]
 800e1d8:	440a      	add	r2, r1
 800e1da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e1e2:	6053      	str	r3, [r2, #4]
          break;
 800e1e4:	e01b      	b.n	800e21e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	015a      	lsls	r2, r3, #5
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	69fa      	ldr	r2, [r7, #28]
 800e1f6:	0151      	lsls	r1, r2, #5
 800e1f8:	6a3a      	ldr	r2, [r7, #32]
 800e1fa:	440a      	add	r2, r1
 800e1fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e204:	6053      	str	r3, [r2, #4]
          break;
 800e206:	e00a      	b.n	800e21e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e214:	461a      	mov	r2, r3
 800e216:	2300      	movs	r3, #0
 800e218:	6053      	str	r3, [r2, #4]
 800e21a:	e000      	b.n	800e21e <USB_HC_StartXfer+0x3ea>
          break;
 800e21c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	4413      	add	r3, r2
 800e226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e234:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	78db      	ldrb	r3, [r3, #3]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e244:	613b      	str	r3, [r7, #16]
 800e246:	e003      	b.n	800e250 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e24e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e256:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	015a      	lsls	r2, r3, #5
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e264:	461a      	mov	r2, r3
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	e055      	b.n	800e320 <USB_HC_StartXfer+0x4ec>
 800e274:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	78db      	ldrb	r3, [r3, #3]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d14e      	bne.n	800e31e <USB_HC_StartXfer+0x4ea>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d04a      	beq.n	800e31e <USB_HC_StartXfer+0x4ea>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	79db      	ldrb	r3, [r3, #7]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d146      	bne.n	800e31e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	7c9b      	ldrb	r3, [r3, #18]
 800e294:	2b03      	cmp	r3, #3
 800e296:	d831      	bhi.n	800e2fc <USB_HC_StartXfer+0x4c8>
 800e298:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a0 <USB_HC_StartXfer+0x46c>)
 800e29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29e:	bf00      	nop
 800e2a0:	0800e2b1 	.word	0x0800e2b1
 800e2a4:	0800e2d5 	.word	0x0800e2d5
 800e2a8:	0800e2b1 	.word	0x0800e2b1
 800e2ac:	0800e2d5 	.word	0x0800e2d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	6a1b      	ldr	r3, [r3, #32]
 800e2b4:	3303      	adds	r3, #3
 800e2b6:	089b      	lsrs	r3, r3, #2
 800e2b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e2ba:	8afa      	ldrh	r2, [r7, #22]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d91c      	bls.n	800e300 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	f043 0220 	orr.w	r2, r3, #32
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e2d2:	e015      	b.n	800e300 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	3303      	adds	r3, #3
 800e2da:	089b      	lsrs	r3, r3, #2
 800e2dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e2de:	8afa      	ldrh	r2, [r7, #22]
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d90a      	bls.n	800e304 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	619a      	str	r2, [r3, #24]
        }
        break;
 800e2fa:	e003      	b.n	800e304 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e2fc:	bf00      	nop
 800e2fe:	e002      	b.n	800e306 <USB_HC_StartXfer+0x4d2>
        break;
 800e300:	bf00      	nop
 800e302:	e000      	b.n	800e306 <USB_HC_StartXfer+0x4d2>
        break;
 800e304:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	6999      	ldr	r1, [r3, #24]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	785a      	ldrb	r2, [r3, #1]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	b29b      	uxth	r3, r3
 800e314:	2000      	movs	r0, #0
 800e316:	9000      	str	r0, [sp, #0]
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f7ff f9d5 	bl	800d6c8 <USB_WritePacket>
  }

  return HAL_OK;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3728      	adds	r7, #40	@ 0x28
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	b29b      	uxth	r3, r3
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e34a:	b480      	push	{r7}
 800e34c:	b089      	sub	sp, #36	@ 0x24
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e35e:	2300      	movs	r3, #0
 800e360:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	015a      	lsls	r2, r3, #5
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	4413      	add	r3, r2
 800e36a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	0c9b      	lsrs	r3, r3, #18
 800e372:	f003 0303 	and.w	r3, r3, #3
 800e376:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	0fdb      	lsrs	r3, r3, #31
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	015a      	lsls	r2, r3, #5
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	4413      	add	r3, r2
 800e396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	0fdb      	lsrs	r3, r3, #31
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	f003 0320 	and.w	r3, r3, #32
 800e3ac:	2b20      	cmp	r3, #32
 800e3ae:	d10d      	bne.n	800e3cc <USB_HC_Halt+0x82>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <USB_HC_Halt+0x82>
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d005      	beq.n	800e3c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d002      	beq.n	800e3c8 <USB_HC_Halt+0x7e>
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2b03      	cmp	r3, #3
 800e3c6:	d101      	bne.n	800e3cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	e0d8      	b.n	800e57e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d002      	beq.n	800e3d8 <USB_HC_Halt+0x8e>
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d173      	bne.n	800e4c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	0151      	lsls	r1, r2, #5
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	440a      	add	r2, r1
 800e3ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e3f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	f003 0320 	and.w	r3, r3, #32
 800e400:	2b00      	cmp	r3, #0
 800e402:	d14a      	bne.n	800e49a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e408:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d133      	bne.n	800e478 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	4413      	add	r3, r2
 800e418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	0151      	lsls	r1, r2, #5
 800e422:	69fa      	ldr	r2, [r7, #28]
 800e424:	440a      	add	r2, r1
 800e426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e42a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e42e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	015a      	lsls	r2, r3, #5
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	4413      	add	r3, r2
 800e438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	0151      	lsls	r1, r2, #5
 800e442:	69fa      	ldr	r2, [r7, #28]
 800e444:	440a      	add	r2, r1
 800e446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e44a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e44e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	3301      	adds	r3, #1
 800e454:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e45c:	d82e      	bhi.n	800e4bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	015a      	lsls	r2, r3, #5
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	4413      	add	r3, r2
 800e466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e474:	d0ec      	beq.n	800e450 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e476:	e081      	b.n	800e57c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69ba      	ldr	r2, [r7, #24]
 800e488:	0151      	lsls	r1, r2, #5
 800e48a:	69fa      	ldr	r2, [r7, #28]
 800e48c:	440a      	add	r2, r1
 800e48e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e496:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e498:	e070      	b.n	800e57c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	69ba      	ldr	r2, [r7, #24]
 800e4aa:	0151      	lsls	r1, r2, #5
 800e4ac:	69fa      	ldr	r2, [r7, #28]
 800e4ae:	440a      	add	r2, r1
 800e4b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4ba:	e05f      	b.n	800e57c <USB_HC_Halt+0x232>
            break;
 800e4bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4be:	e05d      	b.n	800e57c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	69ba      	ldr	r2, [r7, #24]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	69fa      	ldr	r2, [r7, #28]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e4de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d133      	bne.n	800e558 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	015a      	lsls	r2, r3, #5
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	0151      	lsls	r1, r2, #5
 800e502:	69fa      	ldr	r2, [r7, #28]
 800e504:	440a      	add	r2, r1
 800e506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e50a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e50e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	4413      	add	r3, r2
 800e518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	0151      	lsls	r1, r2, #5
 800e522:	69fa      	ldr	r2, [r7, #28]
 800e524:	440a      	add	r2, r1
 800e526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e52a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e52e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	3301      	adds	r3, #1
 800e534:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e53c:	d81d      	bhi.n	800e57a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	4413      	add	r3, r2
 800e546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e554:	d0ec      	beq.n	800e530 <USB_HC_Halt+0x1e6>
 800e556:	e011      	b.n	800e57c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	015a      	lsls	r2, r3, #5
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	4413      	add	r3, r2
 800e560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	0151      	lsls	r1, r2, #5
 800e56a:	69fa      	ldr	r2, [r7, #28]
 800e56c:	440a      	add	r2, r1
 800e56e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	e000      	b.n	800e57c <USB_HC_Halt+0x232>
          break;
 800e57a:	bf00      	nop
    }
  }

  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3724      	adds	r7, #36	@ 0x24
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
	...

0800e58c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b087      	sub	sp, #28
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e59c:	78fb      	ldrb	r3, [r7, #3]
 800e59e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	04da      	lsls	r2, r3, #19
 800e5a8:	4b15      	ldr	r3, [pc, #84]	@ (800e600 <USB_DoPing+0x74>)
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	0151      	lsls	r1, r2, #5
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	440a      	add	r2, r1
 800e5b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e5d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	015a      	lsls	r2, r3, #5
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	371c      	adds	r7, #28
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	1ff80000 	.word	0x1ff80000

0800e604 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e614:	2300      	movs	r3, #0
 800e616:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7fe ff98 	bl	800d54e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e61e:	2110      	movs	r1, #16
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7fe fff1 	bl	800d608 <USB_FlushTxFifo>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d001      	beq.n	800e630 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e62c:	2301      	movs	r3, #1
 800e62e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff f81b 	bl	800d66c <USB_FlushRxFifo>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e640:	2300      	movs	r3, #0
 800e642:	61bb      	str	r3, [r7, #24]
 800e644:	e01f      	b.n	800e686 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e65c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e664:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e66c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	015a      	lsls	r2, r3, #5
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	4413      	add	r3, r2
 800e676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e67a:	461a      	mov	r2, r3
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	3301      	adds	r3, #1
 800e684:	61bb      	str	r3, [r7, #24]
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b0f      	cmp	r3, #15
 800e68a:	d9dc      	bls.n	800e646 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e68c:	2300      	movs	r3, #0
 800e68e:	61bb      	str	r3, [r7, #24]
 800e690:	e034      	b.n	800e6fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	015a      	lsls	r2, r3, #5
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e6b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e6b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e6d8:	d80c      	bhi.n	800e6f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	015a      	lsls	r2, r3, #5
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6f0:	d0ec      	beq.n	800e6cc <USB_StopHost+0xc8>
 800e6f2:	e000      	b.n	800e6f6 <USB_StopHost+0xf2>
        break;
 800e6f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	61bb      	str	r3, [r7, #24]
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	2b0f      	cmp	r3, #15
 800e700:	d9c7      	bls.n	800e692 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e708:	461a      	mov	r2, r3
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
 800e70e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f04f 32ff 	mov.w	r2, #4294967295
 800e716:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7fe ff07 	bl	800d52c <USB_EnableGlobalInt>

  return ret;
 800e71e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3720      	adds	r7, #32
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e72c:	4904      	ldr	r1, [pc, #16]	@ (800e740 <MX_FATFS_Init+0x18>)
 800e72e:	4805      	ldr	r0, [pc, #20]	@ (800e744 <MX_FATFS_Init+0x1c>)
 800e730:	f002 fd74 	bl	801121c <FATFS_LinkDriver>
 800e734:	4603      	mov	r3, r0
 800e736:	461a      	mov	r2, r3
 800e738:	4b03      	ldr	r3, [pc, #12]	@ (800e748 <MX_FATFS_Init+0x20>)
 800e73a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e73c:	bf00      	nop
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	20000d24 	.word	0x20000d24
 800e744:	08014214 	.word	0x08014214
 800e748:	20000d20 	.word	0x20000d20

0800e74c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e756:	f000 f87b 	bl	800e850 <BSP_SD_IsDetected>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d001      	beq.n	800e764 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e760:	2302      	movs	r3, #2
 800e762:	e012      	b.n	800e78a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e764:	480b      	ldr	r0, [pc, #44]	@ (800e794 <BSP_SD_Init+0x48>)
 800e766:	f7fa fe79 	bl	800945c <HAL_SD_Init>
 800e76a:	4603      	mov	r3, r0
 800e76c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d109      	bne.n	800e788 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e778:	4806      	ldr	r0, [pc, #24]	@ (800e794 <BSP_SD_Init+0x48>)
 800e77a:	f7fb fac9 	bl	8009d10 <HAL_SD_ConfigWideBusOperation>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e788:	79fb      	ldrb	r3, [r7, #7]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20000924 	.word	0x20000924

0800e798 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	68f9      	ldr	r1, [r7, #12]
 800e7ae:	4806      	ldr	r0, [pc, #24]	@ (800e7c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e7b0:	f7fa ff0c 	bl	80095cc <HAL_SD_ReadBlocks_DMA>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20000924 	.word	0x20000924

0800e7cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	68f9      	ldr	r1, [r7, #12]
 800e7e2:	4806      	ldr	r0, [pc, #24]	@ (800e7fc <BSP_SD_WriteBlocks_DMA+0x30>)
 800e7e4:	f7fa ffd4 	bl	8009790 <HAL_SD_WriteBlocks_DMA>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	20000924 	.word	0x20000924

0800e800 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e804:	4805      	ldr	r0, [pc, #20]	@ (800e81c <BSP_SD_GetCardState+0x1c>)
 800e806:	f7fb fb1d 	bl	8009e44 <HAL_SD_GetCardState>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b04      	cmp	r3, #4
 800e80e:	bf14      	ite	ne
 800e810:	2301      	movne	r3, #1
 800e812:	2300      	moveq	r3, #0
 800e814:	b2db      	uxtb	r3, r3
}
 800e816:	4618      	mov	r0, r3
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	20000924 	.word	0x20000924

0800e820 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	4803      	ldr	r0, [pc, #12]	@ (800e838 <BSP_SD_GetCardInfo+0x18>)
 800e82c:	f7fb fa44 	bl	8009cb8 <HAL_SD_GetCardInfo>
}
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	20000924 	.word	0x20000924

0800e83c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e844:	f000 f9b2 	bl	800ebac <BSP_SD_ReadCpltCallback>
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e856:	2301      	movs	r3, #1
 800e858:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e85a:	f000 f80b 	bl	800e874 <BSP_PlatformIsDetected>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e864:	2300      	movs	r3, #0
 800e866:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	b2db      	uxtb	r3, r3
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e87a:	2301      	movs	r3, #1
 800e87c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e87e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e882:	4806      	ldr	r0, [pc, #24]	@ (800e89c <BSP_PlatformIsDetected+0x28>)
 800e884:	f7f5 ff68 	bl	8004758 <HAL_GPIO_ReadPin>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e88e:	2300      	movs	r3, #0
 800e890:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e892:	79fb      	ldrb	r3, [r7, #7]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	40020800 	.word	0x40020800

0800e8a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e8a8:	f002 fd04 	bl	80112b4 <osKernelSysTick>
 800e8ac:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e8ae:	e006      	b.n	800e8be <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8b0:	f7ff ffa6 	bl	800e800 <BSP_SD_GetCardState>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e009      	b.n	800e8d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e8be:	f002 fcf9 	bl	80112b4 <osKernelSysTick>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d8f0      	bhi.n	800e8b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
	...

0800e8dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <SD_CheckStatus+0x38>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8ec:	f7ff ff88 	bl	800e800 <BSP_SD_GetCardState>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d107      	bne.n	800e906 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e8f6:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <SD_CheckStatus+0x38>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	f023 0301 	bic.w	r3, r3, #1
 800e900:	b2da      	uxtb	r2, r3
 800e902:	4b04      	ldr	r3, [pc, #16]	@ (800e914 <SD_CheckStatus+0x38>)
 800e904:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e906:	4b03      	ldr	r3, [pc, #12]	@ (800e914 <SD_CheckStatus+0x38>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	b2db      	uxtb	r3, r3
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20000009 	.word	0x20000009

0800e918 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e918:	b590      	push	{r4, r7, lr}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e922:	4b20      	ldr	r3, [pc, #128]	@ (800e9a4 <SD_initialize+0x8c>)
 800e924:	2201      	movs	r2, #1
 800e926:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e928:	f002 fcb8 	bl	801129c <osKernelRunning>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d030      	beq.n	800e994 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e932:	f7ff ff0b 	bl	800e74c <BSP_SD_Init>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d107      	bne.n	800e94c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff ffcc 	bl	800e8dc <SD_CheckStatus>
 800e944:	4603      	mov	r3, r0
 800e946:	461a      	mov	r2, r3
 800e948:	4b16      	ldr	r3, [pc, #88]	@ (800e9a4 <SD_initialize+0x8c>)
 800e94a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e94c:	4b15      	ldr	r3, [pc, #84]	@ (800e9a4 <SD_initialize+0x8c>)
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b01      	cmp	r3, #1
 800e954:	d01e      	beq.n	800e994 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e956:	4b14      	ldr	r3, [pc, #80]	@ (800e9a8 <SD_initialize+0x90>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10e      	bne.n	800e97c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e95e:	4b13      	ldr	r3, [pc, #76]	@ (800e9ac <SD_initialize+0x94>)
 800e960:	f107 0408 	add.w	r4, r7, #8
 800e964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e96a:	f107 0308 	add.w	r3, r7, #8
 800e96e:	2100      	movs	r1, #0
 800e970:	4618      	mov	r0, r3
 800e972:	f002 fd0f 	bl	8011394 <osMessageCreate>
 800e976:	4603      	mov	r3, r0
 800e978:	4a0b      	ldr	r2, [pc, #44]	@ (800e9a8 <SD_initialize+0x90>)
 800e97a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e97c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a8 <SD_initialize+0x90>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d107      	bne.n	800e994 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e984:	4b07      	ldr	r3, [pc, #28]	@ (800e9a4 <SD_initialize+0x8c>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	f043 0301 	orr.w	r3, r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	4b04      	ldr	r3, [pc, #16]	@ (800e9a4 <SD_initialize+0x8c>)
 800e992:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e994:	4b03      	ldr	r3, [pc, #12]	@ (800e9a4 <SD_initialize+0x8c>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b2db      	uxtb	r3, r3
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd90      	pop	{r4, r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20000009 	.word	0x20000009
 800e9a8:	20000d28 	.word	0x20000d28
 800e9ac:	080141a8 	.word	0x080141a8

0800e9b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e9ba:	79fb      	ldrb	r3, [r7, #7]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7ff ff8d 	bl	800e8dc <SD_CheckStatus>
 800e9c2:	4603      	mov	r3, r0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08a      	sub	sp, #40	@ 0x28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60b9      	str	r1, [r7, #8]
 800e9d4:	607a      	str	r2, [r7, #4]
 800e9d6:	603b      	str	r3, [r7, #0]
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e9e2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e9e6:	f7ff ff5b 	bl	800e8a0 <SD_CheckStatusWithTimeout>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	da02      	bge.n	800e9f6 <SD_read+0x2a>
  {
    return res;
 800e9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9f4:	e032      	b.n	800ea5c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	68b8      	ldr	r0, [r7, #8]
 800e9fc:	f7ff fecc 	bl	800e798 <BSP_SD_ReadBlocks_DMA>
 800ea00:	4603      	mov	r3, r0
 800ea02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800ea06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d124      	bne.n	800ea58 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ea0e:	4b15      	ldr	r3, [pc, #84]	@ (800ea64 <SD_read+0x98>)
 800ea10:	6819      	ldr	r1, [r3, #0]
 800ea12:	f107 0314 	add.w	r3, r7, #20
 800ea16:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f002 fd22 	bl	8011464 <osMessageGet>

    if (event.status == osEventMessage)
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b10      	cmp	r3, #16
 800ea24:	d118      	bne.n	800ea58 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d115      	bne.n	800ea58 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ea2c:	f002 fc42 	bl	80112b4 <osKernelSysTick>
 800ea30:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ea32:	e008      	b.n	800ea46 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea34:	f7ff fee4 	bl	800e800 <BSP_SD_GetCardState>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d103      	bne.n	800ea46 <SD_read+0x7a>
              {
                res = RES_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ea44:	e008      	b.n	800ea58 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ea46:	f002 fc35 	bl	80112b4 <osKernelSysTick>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d9ed      	bls.n	800ea34 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ea58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3728      	adds	r7, #40	@ 0x28
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	20000d28 	.word	0x20000d28

0800ea68 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08a      	sub	sp, #40	@ 0x28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	603b      	str	r3, [r7, #0]
 800ea74:	4603      	mov	r3, r0
 800ea76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ea7e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ea82:	f7ff ff0d 	bl	800e8a0 <SD_CheckStatusWithTimeout>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	da02      	bge.n	800ea92 <SD_write+0x2a>
  {
    return res;
 800ea8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea90:	e02e      	b.n	800eaf0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	68b8      	ldr	r0, [r7, #8]
 800ea98:	f7ff fe98 	bl	800e7cc <BSP_SD_WriteBlocks_DMA>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d124      	bne.n	800eaec <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800eaa2:	4b15      	ldr	r3, [pc, #84]	@ (800eaf8 <SD_write+0x90>)
 800eaa4:	6819      	ldr	r1, [r3, #0]
 800eaa6:	f107 0314 	add.w	r3, r7, #20
 800eaaa:	f247 5230 	movw	r2, #30000	@ 0x7530
 800eaae:	4618      	mov	r0, r3
 800eab0:	f002 fcd8 	bl	8011464 <osMessageGet>

    if (event.status == osEventMessage)
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	2b10      	cmp	r3, #16
 800eab8:	d118      	bne.n	800eaec <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d115      	bne.n	800eaec <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800eac0:	f002 fbf8 	bl	80112b4 <osKernelSysTick>
 800eac4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eac6:	e008      	b.n	800eada <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eac8:	f7ff fe9a 	bl	800e800 <BSP_SD_GetCardState>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d103      	bne.n	800eada <SD_write+0x72>
          {
            res = RES_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ead8:	e008      	b.n	800eaec <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eada:	f002 fbeb 	bl	80112b4 <osKernelSysTick>
 800eade:	4602      	mov	r2, r0
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d9ed      	bls.n	800eac8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800eaec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3728      	adds	r7, #40	@ 0x28
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20000d28 	.word	0x20000d28

0800eafc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08c      	sub	sp, #48	@ 0x30
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	603a      	str	r2, [r7, #0]
 800eb06:	71fb      	strb	r3, [r7, #7]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eb12:	4b25      	ldr	r3, [pc, #148]	@ (800eba8 <SD_ioctl+0xac>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <SD_ioctl+0x28>
 800eb20:	2303      	movs	r3, #3
 800eb22:	e03c      	b.n	800eb9e <SD_ioctl+0xa2>

  switch (cmd)
 800eb24:	79bb      	ldrb	r3, [r7, #6]
 800eb26:	2b03      	cmp	r3, #3
 800eb28:	d834      	bhi.n	800eb94 <SD_ioctl+0x98>
 800eb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb30 <SD_ioctl+0x34>)
 800eb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb30:	0800eb41 	.word	0x0800eb41
 800eb34:	0800eb49 	.word	0x0800eb49
 800eb38:	0800eb61 	.word	0x0800eb61
 800eb3c:	0800eb7b 	.word	0x0800eb7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eb46:	e028      	b.n	800eb9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb48:	f107 030c 	add.w	r3, r7, #12
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fe67 	bl	800e820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eb52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eb5e:	e01c      	b.n	800eb9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb60:	f107 030c 	add.w	r3, r7, #12
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fe5b 	bl	800e820 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eb78:	e00f      	b.n	800eb9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb7a:	f107 030c 	add.w	r3, r7, #12
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fe4e 	bl	800e820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800eb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb86:	0a5a      	lsrs	r2, r3, #9
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eb92:	e002      	b.n	800eb9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eb94:	2304      	movs	r3, #4
 800eb96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800eb9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3730      	adds	r7, #48	@ 0x30
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000009 	.word	0x20000009

0800ebac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ebb0:	4b04      	ldr	r3, [pc, #16]	@ (800ebc4 <BSP_SD_ReadCpltCallback+0x18>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f002 fc13 	bl	80113e4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ebbe:	bf00      	nop
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20000d28 	.word	0x20000d28

0800ebc8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ebc8:	b590      	push	{r4, r7, lr}
 800ebca:	b089      	sub	sp, #36	@ 0x24
 800ebcc:	af04      	add	r7, sp, #16
 800ebce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	2102      	movs	r1, #2
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 fcd7 	bl	800f58a <USBH_FindInterface>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	2bff      	cmp	r3, #255	@ 0xff
 800ebe4:	d002      	beq.n	800ebec <USBH_CDC_InterfaceInit+0x24>
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d901      	bls.n	800ebf0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ebec:	2302      	movs	r3, #2
 800ebee:	e13d      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fcac 	bl	800f552 <USBH_SelectInterface>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ebfe:	7bbb      	ldrb	r3, [r7, #14]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ec04:	2302      	movs	r3, #2
 800ec06:	e131      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ec0e:	2050      	movs	r0, #80	@ 0x50
 800ec10:	f005 f950 	bl	8013eb4 <malloc>
 800ec14:	4603      	mov	r3, r0
 800ec16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ec1e:	69db      	ldr	r3, [r3, #28]
 800ec20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e11f      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ec2c:	2250      	movs	r2, #80	@ 0x50
 800ec2e:	2100      	movs	r1, #0
 800ec30:	68b8      	ldr	r0, [r7, #8]
 800ec32:	f005 f9fd 	bl	8014030 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	211a      	movs	r1, #26
 800ec3c:	fb01 f303 	mul.w	r3, r1, r3
 800ec40:	4413      	add	r3, r2
 800ec42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	b25b      	sxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	da15      	bge.n	800ec7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	211a      	movs	r1, #26
 800ec54:	fb01 f303 	mul.w	r3, r1, r3
 800ec58:	4413      	add	r3, r2
 800ec5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ec5e:	781a      	ldrb	r2, [r3, #0]
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	211a      	movs	r1, #26
 800ec6a:	fb01 f303 	mul.w	r3, r1, r3
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ec74:	881a      	ldrh	r2, [r3, #0]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f002 fa1c 	bl	80110be <USBH_AllocPipe>
 800ec86:	4603      	mov	r3, r0
 800ec88:	461a      	mov	r2, r3
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	7819      	ldrb	r1, [r3, #0]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	7858      	ldrb	r0, [r3, #1]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	8952      	ldrh	r2, [r2, #10]
 800eca6:	9202      	str	r2, [sp, #8]
 800eca8:	2203      	movs	r2, #3
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4623      	mov	r3, r4
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f002 f9d4 	bl	8011060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f005 f871 	bl	8013da8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2200      	movs	r2, #0
 800ecca:	210a      	movs	r1, #10
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fc5c 	bl	800f58a <USBH_FindInterface>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
 800ecd8:	2bff      	cmp	r3, #255	@ 0xff
 800ecda:	d002      	beq.n	800ece2 <USBH_CDC_InterfaceInit+0x11a>
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d901      	bls.n	800ece6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ece2:	2302      	movs	r3, #2
 800ece4:	e0c2      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	211a      	movs	r1, #26
 800ecec:	fb01 f303 	mul.w	r3, r1, r3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	b25b      	sxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da16      	bge.n	800ed2c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	211a      	movs	r1, #26
 800ed04:	fb01 f303 	mul.w	r3, r1, r3
 800ed08:	4413      	add	r3, r2
 800ed0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	211a      	movs	r1, #26
 800ed1a:	fb01 f303 	mul.w	r3, r1, r3
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ed24:	881a      	ldrh	r2, [r3, #0]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	835a      	strh	r2, [r3, #26]
 800ed2a:	e015      	b.n	800ed58 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	211a      	movs	r1, #26
 800ed32:	fb01 f303 	mul.w	r3, r1, r3
 800ed36:	4413      	add	r3, r2
 800ed38:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ed3c:	781a      	ldrb	r2, [r3, #0]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	211a      	movs	r1, #26
 800ed48:	fb01 f303 	mul.w	r3, r1, r3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ed52:	881a      	ldrh	r2, [r3, #0]
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	211a      	movs	r1, #26
 800ed5e:	fb01 f303 	mul.w	r3, r1, r3
 800ed62:	4413      	add	r3, r2
 800ed64:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	b25b      	sxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	da16      	bge.n	800ed9e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	211a      	movs	r1, #26
 800ed76:	fb01 f303 	mul.w	r3, r1, r3
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ed80:	781a      	ldrb	r2, [r3, #0]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	211a      	movs	r1, #26
 800ed8c:	fb01 f303 	mul.w	r3, r1, r3
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ed96:	881a      	ldrh	r2, [r3, #0]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	835a      	strh	r2, [r3, #26]
 800ed9c:	e015      	b.n	800edca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed9e:	7bfb      	ldrb	r3, [r7, #15]
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	211a      	movs	r1, #26
 800eda4:	fb01 f303 	mul.w	r3, r1, r3
 800eda8:	4413      	add	r3, r2
 800edaa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800edae:	781a      	ldrb	r2, [r3, #0]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	211a      	movs	r1, #26
 800edba:	fb01 f303 	mul.w	r3, r1, r3
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800edc4:	881a      	ldrh	r2, [r3, #0]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	7b9b      	ldrb	r3, [r3, #14]
 800edce:	4619      	mov	r1, r3
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f002 f974 	bl	80110be <USBH_AllocPipe>
 800edd6:	4603      	mov	r3, r0
 800edd8:	461a      	mov	r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	7bdb      	ldrb	r3, [r3, #15]
 800ede2:	4619      	mov	r1, r3
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f002 f96a 	bl	80110be <USBH_AllocPipe>
 800edea:	4603      	mov	r3, r0
 800edec:	461a      	mov	r2, r3
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	7b59      	ldrb	r1, [r3, #13]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	7b98      	ldrb	r0, [r3, #14]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	8b12      	ldrh	r2, [r2, #24]
 800ee0a:	9202      	str	r2, [sp, #8]
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	9201      	str	r2, [sp, #4]
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	4623      	mov	r3, r4
 800ee14:	4602      	mov	r2, r0
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f002 f922 	bl	8011060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	7b19      	ldrb	r1, [r3, #12]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	7bd8      	ldrb	r0, [r3, #15]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	8b52      	ldrh	r2, [r2, #26]
 800ee34:	9202      	str	r2, [sp, #8]
 800ee36:	2202      	movs	r2, #2
 800ee38:	9201      	str	r2, [sp, #4]
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	4623      	mov	r3, r4
 800ee3e:	4602      	mov	r2, r0
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f002 f90d 	bl	8011060 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	7b5b      	ldrb	r3, [r3, #13]
 800ee52:	2200      	movs	r2, #0
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f004 ffa6 	bl	8013da8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	7b1b      	ldrb	r3, [r3, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f004 ff9f 	bl	8013da8 <USBH_LL_SetToggle>

  return USBH_OK;
 800ee6a:	2300      	movs	r3, #0
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3714      	adds	r7, #20
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd90      	pop	{r4, r7, pc}

0800ee74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00e      	beq.n	800eeac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f002 f902 	bl	801109e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f002 f92d 	bl	8011100 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	7b1b      	ldrb	r3, [r3, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00e      	beq.n	800eed2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	7b1b      	ldrb	r3, [r3, #12]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f002 f8ef 	bl	801109e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	7b1b      	ldrb	r3, [r3, #12]
 800eec4:	4619      	mov	r1, r3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f002 f91a 	bl	8011100 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	7b5b      	ldrb	r3, [r3, #13]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00e      	beq.n	800eef8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	7b5b      	ldrb	r3, [r3, #13]
 800eede:	4619      	mov	r1, r3
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f002 f8dc 	bl	801109e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	7b5b      	ldrb	r3, [r3, #13]
 800eeea:	4619      	mov	r1, r3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f002 f907 	bl	8011100 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00b      	beq.n	800ef1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef0a:	69db      	ldr	r3, [r3, #28]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f004 ffd9 	bl	8013ec4 <free>
    phost->pActiveClass->pData = 0U;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef18:	2200      	movs	r2, #0
 800ef1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b084      	sub	sp, #16
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3340      	adds	r3, #64	@ 0x40
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 f8b1 	bl	800f0a6 <GetLineCoding>
 800ef44:	4603      	mov	r3, r0
 800ef46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d105      	bne.n	800ef5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ef54:	2102      	movs	r1, #2
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ef5a:	7afb      	ldrb	r3, [r7, #11]
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef7a:	69db      	ldr	r3, [r3, #28]
 800ef7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d877      	bhi.n	800f078 <USBH_CDC_Process+0x114>
 800ef88:	a201      	add	r2, pc, #4	@ (adr r2, 800ef90 <USBH_CDC_Process+0x2c>)
 800ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8e:	bf00      	nop
 800ef90:	0800efa5 	.word	0x0800efa5
 800ef94:	0800efab 	.word	0x0800efab
 800ef98:	0800efdb 	.word	0x0800efdb
 800ef9c:	0800f04f 	.word	0x0800f04f
 800efa0:	0800f05d 	.word	0x0800f05d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
      break;
 800efa8:	e06d      	b.n	800f086 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f897 	bl	800f0e4 <SetLineCoding>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d104      	bne.n	800efca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2202      	movs	r2, #2
 800efc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800efc8:	e058      	b.n	800f07c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800efca:	7bbb      	ldrb	r3, [r7, #14]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d055      	beq.n	800f07c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2204      	movs	r2, #4
 800efd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800efd8:	e050      	b.n	800f07c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	3340      	adds	r3, #64	@ 0x40
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f860 	bl	800f0a6 <GetLineCoding>
 800efe6:	4603      	mov	r3, r0
 800efe8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800efea:	7bbb      	ldrb	r3, [r7, #14]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d126      	bne.n	800f03e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f002:	791b      	ldrb	r3, [r3, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d13b      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f012:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f014:	429a      	cmp	r2, r3
 800f016:	d133      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f022:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f024:	429a      	cmp	r2, r3
 800f026:	d12b      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f030:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f032:	429a      	cmp	r2, r3
 800f034:	d124      	bne.n	800f080 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 f982 	bl	800f340 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f03c:	e020      	b.n	800f080 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d01d      	beq.n	800f080 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2204      	movs	r2, #4
 800f048:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f04c:	e018      	b.n	800f080 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f867 	bl	800f122 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f8f6 	bl	800f246 <CDC_ProcessReception>
      break;
 800f05a:	e014      	b.n	800f086 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f05c:	2100      	movs	r1, #0
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f001 f988 	bl	8010374 <USBH_ClrFeature>
 800f064:	4603      	mov	r3, r0
 800f066:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f076:	e005      	b.n	800f084 <USBH_CDC_Process+0x120>

    default:
      break;
 800f078:	bf00      	nop
 800f07a:	e004      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f07c:	bf00      	nop
 800f07e:	e002      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f080:	bf00      	nop
 800f082:	e000      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f084:	bf00      	nop

  }

  return status;
 800f086:	7bfb      	ldrb	r3, [r7, #15]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	22a1      	movs	r2, #161	@ 0xa1
 800f0b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2221      	movs	r2, #33	@ 0x21
 800f0ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2207      	movs	r2, #7
 800f0cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	2207      	movs	r2, #7
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 fc82 	bl	80109de <USBH_CtlReq>
 800f0da:	4603      	mov	r3, r0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2221      	movs	r2, #33	@ 0x21
 800f0f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2220      	movs	r2, #32
 800f0f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2207      	movs	r2, #7
 800f10a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2207      	movs	r2, #7
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f001 fc63 	bl	80109de <USBH_CtlReq>
 800f118:	4603      	mov	r3, r0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b086      	sub	sp, #24
 800f126:	af02      	add	r7, sp, #8
 800f128:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f134:	2300      	movs	r3, #0
 800f136:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d002      	beq.n	800f148 <CDC_ProcessTransmission+0x26>
 800f142:	2b02      	cmp	r3, #2
 800f144:	d023      	beq.n	800f18e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f146:	e07a      	b.n	800f23e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	8b12      	ldrh	r2, [r2, #24]
 800f150:	4293      	cmp	r3, r2
 800f152:	d90b      	bls.n	800f16c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	69d9      	ldr	r1, [r3, #28]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	8b1a      	ldrh	r2, [r3, #24]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	7b5b      	ldrb	r3, [r3, #13]
 800f160:	2001      	movs	r0, #1
 800f162:	9000      	str	r0, [sp, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f001 ff38 	bl	8010fda <USBH_BulkSendData>
 800f16a:	e00b      	b.n	800f184 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f174:	b29a      	uxth	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	7b5b      	ldrb	r3, [r3, #13]
 800f17a:	2001      	movs	r0, #1
 800f17c:	9000      	str	r0, [sp, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f001 ff2b 	bl	8010fda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2202      	movs	r2, #2
 800f188:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f18c:	e057      	b.n	800f23e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	7b5b      	ldrb	r3, [r3, #13]
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f004 fddd 	bl	8013d54 <USBH_LL_GetURBState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f19e:	7afb      	ldrb	r3, [r7, #11]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d136      	bne.n	800f212 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	8b12      	ldrh	r2, [r2, #24]
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d90e      	bls.n	800f1ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	8b12      	ldrh	r2, [r2, #24]
 800f1b8:	1a9a      	subs	r2, r3, r2
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	8b12      	ldrh	r2, [r2, #24]
 800f1c6:	441a      	add	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	61da      	str	r2, [r3, #28]
 800f1cc:	e002      	b.n	800f1d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800f1e4:	e006      	b.n	800f1f4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f892 	bl	800f318 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2204      	movs	r2, #4
 800f1f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f208:	2200      	movs	r2, #0
 800f20a:	4619      	mov	r1, r3
 800f20c:	f002 f8ea 	bl	80113e4 <osMessagePut>
      break;
 800f210:	e014      	b.n	800f23c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f212:	7afb      	ldrb	r3, [r7, #11]
 800f214:	2b02      	cmp	r3, #2
 800f216:	d111      	bne.n	800f23c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2204      	movs	r2, #4
 800f224:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f234:	2200      	movs	r2, #0
 800f236:	4619      	mov	r1, r3
 800f238:	f002 f8d4 	bl	80113e4 <osMessagePut>
      break;
 800f23c:	bf00      	nop
  }
}
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b086      	sub	sp, #24
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f254:	69db      	ldr	r3, [r3, #28]
 800f256:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f258:	2300      	movs	r3, #0
 800f25a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800f262:	2b03      	cmp	r3, #3
 800f264:	d002      	beq.n	800f26c <CDC_ProcessReception+0x26>
 800f266:	2b04      	cmp	r3, #4
 800f268:	d00e      	beq.n	800f288 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f26a:	e051      	b.n	800f310 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	6a19      	ldr	r1, [r3, #32]
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	8b5a      	ldrh	r2, [r3, #26]
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	7b1b      	ldrb	r3, [r3, #12]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f001 fed3 	bl	8011024 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2204      	movs	r2, #4
 800f282:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f286:	e043      	b.n	800f310 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	7b1b      	ldrb	r3, [r3, #12]
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f004 fd60 	bl	8013d54 <USBH_LL_GetURBState>
 800f294:	4603      	mov	r3, r0
 800f296:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f298:	7cfb      	ldrb	r3, [r7, #19]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d137      	bne.n	800f30e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	7b1b      	ldrb	r3, [r3, #12]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f004 fcc3 	bl	8013c30 <USBH_LL_GetLastXferSize>
 800f2aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d016      	beq.n	800f2e4 <CDC_ProcessReception+0x9e>
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	8b5b      	ldrh	r3, [r3, #26]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d110      	bne.n	800f2e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	1ad2      	subs	r2, r2, r3
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	6a1a      	ldr	r2, [r3, #32]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	441a      	add	r2, r3
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	2203      	movs	r2, #3
 800f2de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800f2e2:	e006      	b.n	800f2f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f81d 	bl	800f32c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f306:	2200      	movs	r2, #0
 800f308:	4619      	mov	r1, r3
 800f30a:	f002 f86b 	bl	80113e4 <osMessagePut>
      break;
 800f30e:	bf00      	nop
  }
}
 800f310:	bf00      	nop
 800f312:	3718      	adds	r7, #24
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f354:	b5b0      	push	{r4, r5, r7, lr}
 800f356:	b090      	sub	sp, #64	@ 0x40
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	4613      	mov	r3, r2
 800f360:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f368:	2302      	movs	r3, #2
 800f36a:	e04d      	b.n	800f408 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	79fa      	ldrb	r2, [r7, #7]
 800f370:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2200      	movs	r2, #0
 800f378:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f000 f847 	bl	800f418 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2200      	movs	r2, #0
 800f396:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d003      	beq.n	800f3b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f3b8:	4b15      	ldr	r3, [pc, #84]	@ (800f410 <USBH_Init+0xbc>)
 800f3ba:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f3be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f3c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f001 ffe2 	bl	8011394 <osMessageCreate>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f414 <USBH_Init+0xc0>)
 800f3da:	f107 0414 	add.w	r4, r7, #20
 800f3de:	461d      	mov	r5, r3
 800f3e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f3ec:	f107 0314 	add.w	r3, r7, #20
 800f3f0:	68f9      	ldr	r1, [r7, #12]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f001 ff6e 	bl	80112d4 <osThreadCreate>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f004 fb61 	bl	8013ac8 <USBH_LL_Init>

  return USBH_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3740      	adds	r7, #64	@ 0x40
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bdb0      	pop	{r4, r5, r7, pc}
 800f410:	080141bc 	.word	0x080141bc
 800f414:	080141d8 	.word	0x080141d8

0800f418 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	e009      	b.n	800f43e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	33e0      	adds	r3, #224	@ 0xe0
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	2200      	movs	r2, #0
 800f436:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b0f      	cmp	r3, #15
 800f442:	d9f2      	bls.n	800f42a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f444:	2300      	movs	r3, #0
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	e009      	b.n	800f45e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	4413      	add	r3, r2
 800f450:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f454:	2200      	movs	r2, #0
 800f456:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	3301      	adds	r3, #1
 800f45c:	60fb      	str	r3, [r7, #12]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f464:	d3f1      	bcc.n	800f44a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2240      	movs	r2, #64	@ 0x40
 800f48a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	331c      	adds	r3, #28
 800f4b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f004 fdb7 	bl	8014030 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f4c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f004 fdae 	bl	8014030 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f4da:	2212      	movs	r2, #18
 800f4dc:	2100      	movs	r1, #0
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f004 fda6 	bl	8014030 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f4ea:	223e      	movs	r2, #62	@ 0x3e
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f004 fd9e 	bl	8014030 <memset>

  return USBH_OK;
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b085      	sub	sp, #20
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f508:	2300      	movs	r3, #0
 800f50a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d016      	beq.n	800f540 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10e      	bne.n	800f53a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f522:	1c59      	adds	r1, r3, #1
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	33de      	adds	r3, #222	@ 0xde
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	73fb      	strb	r3, [r7, #15]
 800f538:	e004      	b.n	800f544 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f53a:	2302      	movs	r3, #2
 800f53c:	73fb      	strb	r3, [r7, #15]
 800f53e:	e001      	b.n	800f544 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f540:	2302      	movs	r3, #2
 800f542:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f552:	b480      	push	{r7}
 800f554:	b085      	sub	sp, #20
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f568:	78fa      	ldrb	r2, [r7, #3]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d204      	bcs.n	800f578 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	78fa      	ldrb	r2, [r7, #3]
 800f572:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f576:	e001      	b.n	800f57c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f578:	2302      	movs	r3, #2
 800f57a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f58a:	b480      	push	{r7}
 800f58c:	b087      	sub	sp, #28
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	4608      	mov	r0, r1
 800f594:	4611      	mov	r1, r2
 800f596:	461a      	mov	r2, r3
 800f598:	4603      	mov	r3, r0
 800f59a:	70fb      	strb	r3, [r7, #3]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70bb      	strb	r3, [r7, #2]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f5b2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f5b4:	e025      	b.n	800f602 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f5b6:	7dfb      	ldrb	r3, [r7, #23]
 800f5b8:	221a      	movs	r2, #26
 800f5ba:	fb02 f303 	mul.w	r3, r2, r3
 800f5be:	3308      	adds	r3, #8
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	3302      	adds	r3, #2
 800f5c6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	795b      	ldrb	r3, [r3, #5]
 800f5cc:	78fa      	ldrb	r2, [r7, #3]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d002      	beq.n	800f5d8 <USBH_FindInterface+0x4e>
 800f5d2:	78fb      	ldrb	r3, [r7, #3]
 800f5d4:	2bff      	cmp	r3, #255	@ 0xff
 800f5d6:	d111      	bne.n	800f5fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f5dc:	78ba      	ldrb	r2, [r7, #2]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d002      	beq.n	800f5e8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f5e2:	78bb      	ldrb	r3, [r7, #2]
 800f5e4:	2bff      	cmp	r3, #255	@ 0xff
 800f5e6:	d109      	bne.n	800f5fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f5ec:	787a      	ldrb	r2, [r7, #1]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d002      	beq.n	800f5f8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f5f2:	787b      	ldrb	r3, [r7, #1]
 800f5f4:	2bff      	cmp	r3, #255	@ 0xff
 800f5f6:	d101      	bne.n	800f5fc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f5f8:	7dfb      	ldrb	r3, [r7, #23]
 800f5fa:	e006      	b.n	800f60a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	3301      	adds	r3, #1
 800f600:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f602:	7dfb      	ldrb	r3, [r7, #23]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d9d6      	bls.n	800f5b6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f608:	23ff      	movs	r3, #255	@ 0xff
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	371c      	adds	r7, #28
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr

0800f616 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f004 fa8e 	bl	8013b40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f624:	2101      	movs	r1, #1
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f004 fba7 	bl	8013d7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b088      	sub	sp, #32
 800f63c:	af04      	add	r7, sp, #16
 800f63e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f640:	2302      	movs	r3, #2
 800f642:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f644:	2300      	movs	r3, #0
 800f646:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	2b01      	cmp	r3, #1
 800f652:	d102      	bne.n	800f65a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2203      	movs	r2, #3
 800f658:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b0b      	cmp	r3, #11
 800f662:	f200 8244 	bhi.w	800faee <USBH_Process+0x4b6>
 800f666:	a201      	add	r2, pc, #4	@ (adr r2, 800f66c <USBH_Process+0x34>)
 800f668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f66c:	0800f69d 	.word	0x0800f69d
 800f670:	0800f6eb 	.word	0x0800f6eb
 800f674:	0800f76f 	.word	0x0800f76f
 800f678:	0800fa6d 	.word	0x0800fa6d
 800f67c:	0800faef 	.word	0x0800faef
 800f680:	0800f82b 	.word	0x0800f82b
 800f684:	0800f9f7 	.word	0x0800f9f7
 800f688:	0800f87d 	.word	0x0800f87d
 800f68c:	0800f8b9 	.word	0x0800f8b9
 800f690:	0800f8f1 	.word	0x0800f8f1
 800f694:	0800f94f 	.word	0x0800f94f
 800f698:	0800fa55 	.word	0x0800fa55
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 8224 	beq.w	800faf2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f6b0:	20c8      	movs	r0, #200	@ 0xc8
 800f6b2:	f004 fbac 	bl	8013e0e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f004 fa9f 	bl	8013bfa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	f001 fe7e 	bl	80113e4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f6e8:	e203      	b.n	800faf2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d107      	bne.n	800f704 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2202      	movs	r2, #2
 800f700:	701a      	strb	r2, [r3, #0]
 800f702:	e025      	b.n	800f750 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f70a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f70e:	d914      	bls.n	800f73a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f716:	3301      	adds	r3, #1
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f726:	2b03      	cmp	r3, #3
 800f728:	d903      	bls.n	800f732 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	220d      	movs	r2, #13
 800f72e:	701a      	strb	r2, [r3, #0]
 800f730:	e00e      	b.n	800f750 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	701a      	strb	r2, [r3, #0]
 800f738:	e00a      	b.n	800f750 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f740:	f103 020a 	add.w	r2, r3, #10
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f74a:	200a      	movs	r0, #10
 800f74c:	f004 fb5f 	bl	8013e0e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f764:	2200      	movs	r2, #0
 800f766:	4619      	mov	r1, r3
 800f768:	f001 fe3c 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f76c:	e1c8      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f774:	2b00      	cmp	r3, #0
 800f776:	d005      	beq.n	800f784 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f77e:	2104      	movs	r1, #4
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f784:	2064      	movs	r0, #100	@ 0x64
 800f786:	f004 fb42 	bl	8013e0e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f004 fa0e 	bl	8013bac <USBH_LL_GetSpeed>
 800f790:	4603      	mov	r3, r0
 800f792:	461a      	mov	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2205      	movs	r2, #5
 800f79e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f001 fc8b 	bl	80110be <USBH_AllocPipe>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f7b0:	2180      	movs	r1, #128	@ 0x80
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f001 fc83 	bl	80110be <USBH_AllocPipe>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7919      	ldrb	r1, [r3, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f7d4:	9202      	str	r2, [sp, #8]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	9201      	str	r2, [sp, #4]
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2280      	movs	r2, #128	@ 0x80
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f001 fc3d 	bl	8011060 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	7959      	ldrb	r1, [r3, #5]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f7fa:	9202      	str	r2, [sp, #8]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	9201      	str	r2, [sp, #4]
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	4603      	mov	r3, r0
 800f804:	2200      	movs	r2, #0
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f001 fc2a 	bl	8011060 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f820:	2200      	movs	r2, #0
 800f822:	4619      	mov	r1, r3
 800f824:	f001 fdde 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f828:	e16a      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f96e 	bl	800fb0c <USBH_HandleEnum>
 800f830:	4603      	mov	r3, r0
 800f832:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f834:	7bbb      	ldrb	r3, [r7, #14]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f040 815c 	bne.w	800faf6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d103      	bne.n	800f858 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2208      	movs	r2, #8
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	e002      	b.n	800f85e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2207      	movs	r2, #7
 800f85c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2205      	movs	r2, #5
 800f862:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f872:	2200      	movs	r2, #0
 800f874:	4619      	mov	r1, r3
 800f876:	f001 fdb5 	bl	80113e4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f87a:	e13c      	b.n	800faf6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 8139 	beq.w	800fafa <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f88e:	2101      	movs	r1, #1
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2208      	movs	r2, #8
 800f898:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2205      	movs	r2, #5
 800f89e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	f001 fd97 	bl	80113e4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f8b6:	e120      	b.n	800fafa <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fd10 	bl	80102e6 <USBH_SetCfg>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d102      	bne.n	800f8d2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2209      	movs	r2, #9
 800f8d0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	f001 fd7b 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f8ee:	e107      	b.n	800fb00 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f8f6:	f003 0320 	and.w	r3, r3, #32
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d015      	beq.n	800f92a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f8fe:	2101      	movs	r1, #1
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 fd13 	bl	801032c <USBH_SetFeature>
 800f906:	4603      	mov	r3, r0
 800f908:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f90a:	7bbb      	ldrb	r3, [r7, #14]
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d103      	bne.n	800f91a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	220a      	movs	r2, #10
 800f916:	701a      	strb	r2, [r3, #0]
 800f918:	e00a      	b.n	800f930 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d106      	bne.n	800f930 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	220a      	movs	r2, #10
 800f926:	701a      	strb	r2, [r3, #0]
 800f928:	e002      	b.n	800f930 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	220a      	movs	r2, #10
 800f92e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2201      	movs	r2, #1
 800f934:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f944:	2200      	movs	r2, #0
 800f946:	4619      	mov	r1, r3
 800f948:	f001 fd4c 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f94c:	e0d8      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f954:	2b00      	cmp	r3, #0
 800f956:	d03f      	beq.n	800f9d8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]
 800f964:	e016      	b.n	800f994 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f966:	7bfa      	ldrb	r2, [r7, #15]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	32de      	adds	r2, #222	@ 0xde
 800f96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f970:	791a      	ldrb	r2, [r3, #4]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f978:	429a      	cmp	r2, r3
 800f97a:	d108      	bne.n	800f98e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f97c:	7bfa      	ldrb	r2, [r7, #15]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	32de      	adds	r2, #222	@ 0xde
 800f982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800f98c:	e005      	b.n	800f99a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f98e:	7bfb      	ldrb	r3, [r7, #15]
 800f990:	3301      	adds	r3, #1
 800f992:	73fb      	strb	r3, [r7, #15]
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d0e5      	beq.n	800f966 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d016      	beq.n	800f9d2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	4798      	blx	r3
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d109      	bne.n	800f9ca <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2206      	movs	r2, #6
 800f9ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f9c2:	2103      	movs	r1, #3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	4798      	blx	r3
 800f9c8:	e006      	b.n	800f9d8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	220d      	movs	r2, #13
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	e002      	b.n	800f9d8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	220d      	movs	r2, #13
 800f9d6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2205      	movs	r2, #5
 800f9dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	f001 fcf8 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9f4:	e084      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d017      	beq.n	800fa30 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	4798      	blx	r3
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d103      	bne.n	800fa20 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	220b      	movs	r2, #11
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	e00a      	b.n	800fa36 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d106      	bne.n	800fa36 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	220d      	movs	r2, #13
 800fa2c:	701a      	strb	r2, [r3, #0]
 800fa2e:	e002      	b.n	800fa36 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	220d      	movs	r2, #13
 800fa34:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2205      	movs	r2, #5
 800fa3a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	f001 fcc9 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa52:	e055      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d04f      	beq.n	800fafe <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa64:	695b      	ldr	r3, [r3, #20]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	4798      	blx	r3
      }
      break;
 800fa6a:	e048      	b.n	800fafe <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7ff fccf 	bl	800f418 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d009      	beq.n	800fa98 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d005      	beq.n	800faae <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800faa8:	2105      	movs	r1, #5
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d107      	bne.n	800faca <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff fda7 	bl	800f616 <USBH_Start>
 800fac8:	e002      	b.n	800fad0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f004 f838 	bl	8013b40 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fae4:	2200      	movs	r2, #0
 800fae6:	4619      	mov	r1, r3
 800fae8:	f001 fc7c 	bl	80113e4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800faec:	e008      	b.n	800fb00 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800faee:	bf00      	nop
 800faf0:	e006      	b.n	800fb00 <USBH_Process+0x4c8>
      break;
 800faf2:	bf00      	nop
 800faf4:	e004      	b.n	800fb00 <USBH_Process+0x4c8>
      break;
 800faf6:	bf00      	nop
 800faf8:	e002      	b.n	800fb00 <USBH_Process+0x4c8>
    break;
 800fafa:	bf00      	nop
 800fafc:	e000      	b.n	800fb00 <USBH_Process+0x4c8>
      break;
 800fafe:	bf00      	nop
  }
  return USBH_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop

0800fb0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af04      	add	r7, sp, #16
 800fb12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fb14:	2301      	movs	r3, #1
 800fb16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	785b      	ldrb	r3, [r3, #1]
 800fb20:	2b07      	cmp	r3, #7
 800fb22:	f200 8204 	bhi.w	800ff2e <USBH_HandleEnum+0x422>
 800fb26:	a201      	add	r2, pc, #4	@ (adr r2, 800fb2c <USBH_HandleEnum+0x20>)
 800fb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2c:	0800fb4d 	.word	0x0800fb4d
 800fb30:	0800fc07 	.word	0x0800fc07
 800fb34:	0800fc71 	.word	0x0800fc71
 800fb38:	0800fcfb 	.word	0x0800fcfb
 800fb3c:	0800fd65 	.word	0x0800fd65
 800fb40:	0800fdd5 	.word	0x0800fdd5
 800fb44:	0800fe71 	.word	0x0800fe71
 800fb48:	0800feef 	.word	0x0800feef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fb4c:	2108      	movs	r1, #8
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fae6 	bl	8010120 <USBH_Get_DevDesc>
 800fb54:	4603      	mov	r3, r0
 800fb56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fb58:	7bbb      	ldrb	r3, [r7, #14]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d12e      	bne.n	800fbbc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	7919      	ldrb	r1, [r3, #4]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fb82:	9202      	str	r2, [sp, #8]
 800fb84:	2200      	movs	r2, #0
 800fb86:	9201      	str	r2, [sp, #4]
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2280      	movs	r2, #128	@ 0x80
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f001 fa66 	bl	8011060 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	7959      	ldrb	r1, [r3, #5]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fba8:	9202      	str	r2, [sp, #8]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	9201      	str	r2, [sp, #4]
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f001 fa53 	bl	8011060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fbba:	e1ba      	b.n	800ff32 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fbbc:	7bbb      	ldrb	r3, [r7, #14]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	f040 81b7 	bne.w	800ff32 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fbca:	3301      	adds	r3, #1
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fbda:	2b03      	cmp	r3, #3
 800fbdc:	d903      	bls.n	800fbe6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	220d      	movs	r2, #13
 800fbe2:	701a      	strb	r2, [r3, #0]
      break;
 800fbe4:	e1a5      	b.n	800ff32 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	795b      	ldrb	r3, [r3, #5]
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f001 fa87 	bl	8011100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	791b      	ldrb	r3, [r3, #4]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f001 fa81 	bl	8011100 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	701a      	strb	r2, [r3, #0]
      break;
 800fc04:	e195      	b.n	800ff32 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fc06:	2112      	movs	r1, #18
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fa89 	bl	8010120 <USBH_Get_DevDesc>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc12:	7bbb      	ldrb	r3, [r7, #14]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d103      	bne.n	800fc20 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fc1e:	e18a      	b.n	800ff36 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc20:	7bbb      	ldrb	r3, [r7, #14]
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	f040 8187 	bne.w	800ff36 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc2e:	3301      	adds	r3, #1
 800fc30:	b2da      	uxtb	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc3e:	2b03      	cmp	r3, #3
 800fc40:	d903      	bls.n	800fc4a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	220d      	movs	r2, #13
 800fc46:	701a      	strb	r2, [r3, #0]
      break;
 800fc48:	e175      	b.n	800ff36 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	795b      	ldrb	r3, [r3, #5]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f001 fa55 	bl	8011100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	791b      	ldrb	r3, [r3, #4]
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 fa4f 	bl	8011100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
      break;
 800fc6e:	e162      	b.n	800ff36 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fc70:	2101      	movs	r1, #1
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fb13 	bl	801029e <USBH_SetAddress>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d130      	bne.n	800fce4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800fc82:	2002      	movs	r0, #2
 800fc84:	f004 f8c3 	bl	8013e0e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2203      	movs	r2, #3
 800fc94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	7919      	ldrb	r1, [r3, #4]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fcaa:	9202      	str	r2, [sp, #8]
 800fcac:	2200      	movs	r2, #0
 800fcae:	9201      	str	r2, [sp, #4]
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2280      	movs	r2, #128	@ 0x80
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f001 f9d2 	bl	8011060 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	7959      	ldrb	r1, [r3, #5]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fcd0:	9202      	str	r2, [sp, #8]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	9201      	str	r2, [sp, #4]
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2200      	movs	r2, #0
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f001 f9bf 	bl	8011060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fce2:	e12a      	b.n	800ff3a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fce4:	7bbb      	ldrb	r3, [r7, #14]
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	f040 8127 	bne.w	800ff3a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	220d      	movs	r2, #13
 800fcf0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	705a      	strb	r2, [r3, #1]
      break;
 800fcf8:	e11f      	b.n	800ff3a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fcfa:	2109      	movs	r1, #9
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fa3b 	bl	8010178 <USBH_Get_CfgDesc>
 800fd02:	4603      	mov	r3, r0
 800fd04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d103      	bne.n	800fd14 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2204      	movs	r2, #4
 800fd10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd12:	e114      	b.n	800ff3e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	2b03      	cmp	r3, #3
 800fd18:	f040 8111 	bne.w	800ff3e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fd22:	3301      	adds	r3, #1
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fd32:	2b03      	cmp	r3, #3
 800fd34:	d903      	bls.n	800fd3e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	220d      	movs	r2, #13
 800fd3a:	701a      	strb	r2, [r3, #0]
      break;
 800fd3c:	e0ff      	b.n	800ff3e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	795b      	ldrb	r3, [r3, #5]
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f001 f9db 	bl	8011100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	791b      	ldrb	r3, [r3, #4]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f001 f9d5 	bl	8011100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	701a      	strb	r2, [r3, #0]
      break;
 800fd62:	e0ec      	b.n	800ff3e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fa03 	bl	8010178 <USBH_Get_CfgDesc>
 800fd72:	4603      	mov	r3, r0
 800fd74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd76:	7bbb      	ldrb	r3, [r7, #14]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d103      	bne.n	800fd84 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2205      	movs	r2, #5
 800fd80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd82:	e0de      	b.n	800ff42 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd84:	7bbb      	ldrb	r3, [r7, #14]
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	f040 80db 	bne.w	800ff42 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fd92:	3301      	adds	r3, #1
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fda2:	2b03      	cmp	r3, #3
 800fda4:	d903      	bls.n	800fdae <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	220d      	movs	r2, #13
 800fdaa:	701a      	strb	r2, [r3, #0]
      break;
 800fdac:	e0c9      	b.n	800ff42 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	795b      	ldrb	r3, [r3, #5]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f001 f9a3 	bl	8011100 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	791b      	ldrb	r3, [r3, #4]
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f001 f99d 	bl	8011100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	701a      	strb	r2, [r3, #0]
      break;
 800fdd2:	e0b6      	b.n	800ff42 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d036      	beq.n	800fe4c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fdea:	23ff      	movs	r3, #255	@ 0xff
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 f9ed 	bl	80101cc <USBH_Get_StringDesc>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fdf6:	7bbb      	ldrb	r3, [r7, #14]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d111      	bne.n	800fe20 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2206      	movs	r2, #6
 800fe00:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2205      	movs	r2, #5
 800fe06:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe16:	2200      	movs	r2, #0
 800fe18:	4619      	mov	r1, r3
 800fe1a:	f001 fae3 	bl	80113e4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fe1e:	e092      	b.n	800ff46 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe20:	7bbb      	ldrb	r3, [r7, #14]
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	f040 808f 	bne.w	800ff46 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2206      	movs	r2, #6
 800fe2c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2205      	movs	r2, #5
 800fe32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe42:	2200      	movs	r2, #0
 800fe44:	4619      	mov	r1, r3
 800fe46:	f001 facd 	bl	80113e4 <osMessagePut>
      break;
 800fe4a:	e07c      	b.n	800ff46 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2206      	movs	r2, #6
 800fe50:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2205      	movs	r2, #5
 800fe56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe66:	2200      	movs	r2, #0
 800fe68:	4619      	mov	r1, r3
 800fe6a:	f001 fabb 	bl	80113e4 <osMessagePut>
      break;
 800fe6e:	e06a      	b.n	800ff46 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d027      	beq.n	800feca <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fe86:	23ff      	movs	r3, #255	@ 0xff
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f99f 	bl	80101cc <USBH_Get_StringDesc>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fe92:	7bbb      	ldrb	r3, [r7, #14]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d103      	bne.n	800fea0 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2207      	movs	r2, #7
 800fe9c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fe9e:	e054      	b.n	800ff4a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fea0:	7bbb      	ldrb	r3, [r7, #14]
 800fea2:	2b03      	cmp	r3, #3
 800fea4:	d151      	bne.n	800ff4a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2207      	movs	r2, #7
 800feaa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2205      	movs	r2, #5
 800feb0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fec0:	2200      	movs	r2, #0
 800fec2:	4619      	mov	r1, r3
 800fec4:	f001 fa8e 	bl	80113e4 <osMessagePut>
      break;
 800fec8:	e03f      	b.n	800ff4a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2207      	movs	r2, #7
 800fece:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2205      	movs	r2, #5
 800fed4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fee4:	2200      	movs	r2, #0
 800fee6:	4619      	mov	r1, r3
 800fee8:	f001 fa7c 	bl	80113e4 <osMessagePut>
      break;
 800feec:	e02d      	b.n	800ff4a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d017      	beq.n	800ff28 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ff04:	23ff      	movs	r3, #255	@ 0xff
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f960 	bl	80101cc <USBH_Get_StringDesc>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ff16:	2300      	movs	r3, #0
 800ff18:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ff1a:	e018      	b.n	800ff4e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff1c:	7bbb      	ldrb	r3, [r7, #14]
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d115      	bne.n	800ff4e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	73fb      	strb	r3, [r7, #15]
      break;
 800ff26:	e012      	b.n	800ff4e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ff2c:	e00f      	b.n	800ff4e <USBH_HandleEnum+0x442>

    default:
      break;
 800ff2e:	bf00      	nop
 800ff30:	e00e      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff32:	bf00      	nop
 800ff34:	e00c      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff36:	bf00      	nop
 800ff38:	e00a      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff3a:	bf00      	nop
 800ff3c:	e008      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff3e:	bf00      	nop
 800ff40:	e006      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff42:	bf00      	nop
 800ff44:	e004      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff46:	bf00      	nop
 800ff48:	e002      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff4a:	bf00      	nop
 800ff4c:	e000      	b.n	800ff50 <USBH_HandleEnum+0x444>
      break;
 800ff4e:	bf00      	nop
  }
  return Status;
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop

0800ff5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	683a      	ldr	r2, [r7, #0]
 800ff6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ff6e:	bf00      	nop
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ff7a:	b580      	push	{r7, lr}
 800ff7c:	b082      	sub	sp, #8
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ff88:	1c5a      	adds	r2, r3, #1
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 f804 	bl	800ff9e <USBH_HandleSof>
}
 800ff96:	bf00      	nop
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	2b0b      	cmp	r3, #11
 800ffae:	d10a      	bne.n	800ffc6 <USBH_HandleSof+0x28>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d005      	beq.n	800ffc6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	4798      	blx	r3
  }
}
 800ffc6:	bf00      	nop
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b082      	sub	sp, #8
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2201      	movs	r2, #1
 800ffda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fff2:	2200      	movs	r2, #0
 800fff4:	4619      	mov	r1, r3
 800fff6:	f001 f9f5 	bl	80113e4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800fffa:	bf00      	nop
}
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010002:	b480      	push	{r7}
 8010004:	b083      	sub	sp, #12
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8010012:	bf00      	nop
}
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010052:	2200      	movs	r2, #0
 8010054:	4619      	mov	r1, r3
 8010056:	f001 f9c5 	bl	80113e4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f003 fd76 	bl	8013b76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	791b      	ldrb	r3, [r3, #4]
 801008e:	4619      	mov	r1, r3
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f001 f835 	bl	8011100 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	795b      	ldrb	r3, [r3, #5]
 801009a:	4619      	mov	r1, r3
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 f82f 	bl	8011100 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2201      	movs	r2, #1
 80100a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80100b6:	2200      	movs	r2, #0
 80100b8:	4619      	mov	r1, r3
 80100ba:	f001 f993 	bl	80113e4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80100be:	2300      	movs	r3, #0
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b086      	sub	sp, #24
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80100d6:	f107 030c 	add.w	r3, r7, #12
 80100da:	f04f 32ff 	mov.w	r2, #4294967295
 80100de:	4618      	mov	r0, r3
 80100e0:	f001 f9c0 	bl	8011464 <osMessageGet>
    if (event.status == osEventMessage)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2b10      	cmp	r3, #16
 80100e8:	d1f2      	bne.n	80100d0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7ff faa4 	bl	800f638 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80100f0:	e7ee      	b.n	80100d0 <USBH_Process_OS+0x8>

080100f2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801010e:	2200      	movs	r2, #0
 8010110:	4619      	mov	r1, r3
 8010112:	f001 f967 	bl	80113e4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af02      	add	r7, sp, #8
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801012c:	887b      	ldrh	r3, [r7, #2]
 801012e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010132:	d901      	bls.n	8010138 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010134:	2303      	movs	r3, #3
 8010136:	e01b      	b.n	8010170 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801013e:	887b      	ldrh	r3, [r7, #2]
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	4613      	mov	r3, r2
 8010144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010148:	2100      	movs	r1, #0
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 f872 	bl	8010234 <USBH_GetDescriptor>
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d109      	bne.n	801016e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010160:	887a      	ldrh	r2, [r7, #2]
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 f929 	bl	80103bc <USBH_ParseDevDesc>
 801016a:	4603      	mov	r3, r0
 801016c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801016e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af02      	add	r7, sp, #8
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	331c      	adds	r3, #28
 8010188:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801018a:	887b      	ldrh	r3, [r7, #2]
 801018c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010190:	d901      	bls.n	8010196 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010192:	2303      	movs	r3, #3
 8010194:	e016      	b.n	80101c4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010196:	887b      	ldrh	r3, [r7, #2]
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101a0:	2100      	movs	r1, #0
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f846 	bl	8010234 <USBH_GetDescriptor>
 80101a8:	4603      	mov	r3, r0
 80101aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80101ac:	7bfb      	ldrb	r3, [r7, #15]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d107      	bne.n	80101c2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80101b2:	887b      	ldrh	r3, [r7, #2]
 80101b4:	461a      	mov	r2, r3
 80101b6:	68b9      	ldr	r1, [r7, #8]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f9af 	bl	801051c <USBH_ParseCfgDesc>
 80101be:	4603      	mov	r3, r0
 80101c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b088      	sub	sp, #32
 80101d0:	af02      	add	r7, sp, #8
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	607a      	str	r2, [r7, #4]
 80101d6:	461a      	mov	r2, r3
 80101d8:	460b      	mov	r3, r1
 80101da:	72fb      	strb	r3, [r7, #11]
 80101dc:	4613      	mov	r3, r2
 80101de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80101e0:	893b      	ldrh	r3, [r7, #8]
 80101e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101e6:	d802      	bhi.n	80101ee <USBH_Get_StringDesc+0x22>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d101      	bne.n	80101f2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80101ee:	2303      	movs	r3, #3
 80101f0:	e01c      	b.n	801022c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80101f2:	7afb      	ldrb	r3, [r7, #11]
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80101fa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010202:	893b      	ldrh	r3, [r7, #8]
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	460b      	mov	r3, r1
 8010208:	2100      	movs	r1, #0
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f000 f812 	bl	8010234 <USBH_GetDescriptor>
 8010210:	4603      	mov	r3, r0
 8010212:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010214:	7dfb      	ldrb	r3, [r7, #23]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d107      	bne.n	801022a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010220:	893a      	ldrh	r2, [r7, #8]
 8010222:	6879      	ldr	r1, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	f000 fb8d 	bl	8010944 <USBH_ParseStringDesc>
  }

  return status;
 801022a:	7dfb      	ldrb	r3, [r7, #23]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	607b      	str	r3, [r7, #4]
 801023e:	460b      	mov	r3, r1
 8010240:	72fb      	strb	r3, [r7, #11]
 8010242:	4613      	mov	r3, r2
 8010244:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	789b      	ldrb	r3, [r3, #2]
 801024a:	2b01      	cmp	r3, #1
 801024c:	d11c      	bne.n	8010288 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801024e:	7afb      	ldrb	r3, [r7, #11]
 8010250:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010254:	b2da      	uxtb	r2, r3
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2206      	movs	r2, #6
 801025e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	893a      	ldrh	r2, [r7, #8]
 8010264:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010266:	893b      	ldrh	r3, [r7, #8]
 8010268:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801026c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010270:	d104      	bne.n	801027c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f240 4209 	movw	r2, #1033	@ 0x409
 8010278:	829a      	strh	r2, [r3, #20]
 801027a:	e002      	b.n	8010282 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	8b3a      	ldrh	r2, [r7, #24]
 8010286:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010288:	8b3b      	ldrh	r3, [r7, #24]
 801028a:	461a      	mov	r2, r3
 801028c:	6879      	ldr	r1, [r7, #4]
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 fba5 	bl	80109de <USBH_CtlReq>
 8010294:	4603      	mov	r3, r0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b082      	sub	sp, #8
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	460b      	mov	r3, r1
 80102a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	789b      	ldrb	r3, [r3, #2]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d10f      	bne.n	80102d2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2205      	movs	r2, #5
 80102bc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80102d2:	2200      	movs	r2, #0
 80102d4:	2100      	movs	r1, #0
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 fb81 	bl	80109de <USBH_CtlReq>
 80102dc:	4603      	mov	r3, r0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b082      	sub	sp, #8
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	460b      	mov	r3, r1
 80102f0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	789b      	ldrb	r3, [r3, #2]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d10e      	bne.n	8010318 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2209      	movs	r2, #9
 8010304:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	887a      	ldrh	r2, [r7, #2]
 801030a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010318:	2200      	movs	r2, #0
 801031a:	2100      	movs	r1, #0
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fb5e 	bl	80109de <USBH_CtlReq>
 8010322:	4603      	mov	r3, r0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	789b      	ldrb	r3, [r3, #2]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d10f      	bne.n	8010360 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2203      	movs	r2, #3
 801034a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801034c:	78fb      	ldrb	r3, [r7, #3]
 801034e:	b29a      	uxth	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010360:	2200      	movs	r2, #0
 8010362:	2100      	movs	r1, #0
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 fb3a 	bl	80109de <USBH_CtlReq>
 801036a:	4603      	mov	r3, r0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	789b      	ldrb	r3, [r3, #2]
 8010384:	2b01      	cmp	r3, #1
 8010386:	d10f      	bne.n	80103a8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2202      	movs	r2, #2
 801038c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801039a:	78fb      	ldrb	r3, [r7, #3]
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80103a8:	2200      	movs	r2, #0
 80103aa:	2100      	movs	r1, #0
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fb16 	bl	80109de <USBH_CtlReq>
 80103b2:	4603      	mov	r3, r0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80103bc:	b480      	push	{r7}
 80103be:	b087      	sub	sp, #28
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	4613      	mov	r3, r2
 80103c8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80103d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80103dc:	2302      	movs	r3, #2
 80103de:	e094      	b.n	801050a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	781a      	ldrb	r2, [r3, #0]
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	785a      	ldrb	r2, [r3, #1]
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	3302      	adds	r3, #2
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	461a      	mov	r2, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	3303      	adds	r3, #3
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	021b      	lsls	r3, r3, #8
 8010400:	b29b      	uxth	r3, r3
 8010402:	4313      	orrs	r3, r2
 8010404:	b29a      	uxth	r2, r3
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	791a      	ldrb	r2, [r3, #4]
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	795a      	ldrb	r2, [r3, #5]
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	799a      	ldrb	r2, [r3, #6]
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	79da      	ldrb	r2, [r3, #7]
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010430:	2b00      	cmp	r3, #0
 8010432:	d004      	beq.n	801043e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801043a:	2b01      	cmp	r3, #1
 801043c:	d11b      	bne.n	8010476 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	79db      	ldrb	r3, [r3, #7]
 8010442:	2b20      	cmp	r3, #32
 8010444:	dc0f      	bgt.n	8010466 <USBH_ParseDevDesc+0xaa>
 8010446:	2b08      	cmp	r3, #8
 8010448:	db0f      	blt.n	801046a <USBH_ParseDevDesc+0xae>
 801044a:	3b08      	subs	r3, #8
 801044c:	4a32      	ldr	r2, [pc, #200]	@ (8010518 <USBH_ParseDevDesc+0x15c>)
 801044e:	fa22 f303 	lsr.w	r3, r2, r3
 8010452:	f003 0301 	and.w	r3, r3, #1
 8010456:	2b00      	cmp	r3, #0
 8010458:	bf14      	ite	ne
 801045a:	2301      	movne	r3, #1
 801045c:	2300      	moveq	r3, #0
 801045e:	b2db      	uxtb	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d106      	bne.n	8010472 <USBH_ParseDevDesc+0xb6>
 8010464:	e001      	b.n	801046a <USBH_ParseDevDesc+0xae>
 8010466:	2b40      	cmp	r3, #64	@ 0x40
 8010468:	d003      	beq.n	8010472 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	2208      	movs	r2, #8
 801046e:	71da      	strb	r2, [r3, #7]
        break;
 8010470:	e000      	b.n	8010474 <USBH_ParseDevDesc+0xb8>
        break;
 8010472:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010474:	e00e      	b.n	8010494 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801047c:	2b02      	cmp	r3, #2
 801047e:	d107      	bne.n	8010490 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	79db      	ldrb	r3, [r3, #7]
 8010484:	2b08      	cmp	r3, #8
 8010486:	d005      	beq.n	8010494 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	2208      	movs	r2, #8
 801048c:	71da      	strb	r2, [r3, #7]
 801048e:	e001      	b.n	8010494 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010490:	2303      	movs	r3, #3
 8010492:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010494:	88fb      	ldrh	r3, [r7, #6]
 8010496:	2b08      	cmp	r3, #8
 8010498:	d936      	bls.n	8010508 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	3308      	adds	r3, #8
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	3309      	adds	r3, #9
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	021b      	lsls	r3, r3, #8
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	4313      	orrs	r3, r2
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	330a      	adds	r3, #10
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	330b      	adds	r3, #11
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	021b      	lsls	r3, r3, #8
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	4313      	orrs	r3, r2
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	330c      	adds	r3, #12
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	330d      	adds	r3, #13
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	021b      	lsls	r3, r3, #8
 80104de:	b29b      	uxth	r3, r3
 80104e0:	4313      	orrs	r3, r2
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	7b9a      	ldrb	r2, [r3, #14]
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	7bda      	ldrb	r2, [r3, #15]
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	7c1a      	ldrb	r2, [r3, #16]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	7c5a      	ldrb	r2, [r3, #17]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
}
 801050a:	4618      	mov	r0, r3
 801050c:	371c      	adds	r7, #28
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	01000101 	.word	0x01000101

0801051c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b08c      	sub	sp, #48	@ 0x30
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	4613      	mov	r3, r2
 8010528:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010530:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010538:	2300      	movs	r3, #0
 801053a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801053e:	2300      	movs	r3, #0
 8010540:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d101      	bne.n	801054e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801054a:	2302      	movs	r3, #2
 801054c:	e0da      	b.n	8010704 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2b09      	cmp	r3, #9
 8010558:	d002      	beq.n	8010560 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055c:	2209      	movs	r2, #9
 801055e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	781a      	ldrb	r2, [r3, #0]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	785a      	ldrb	r2, [r3, #1]
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	3302      	adds	r3, #2
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	461a      	mov	r2, r3
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	3303      	adds	r3, #3
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	021b      	lsls	r3, r3, #8
 8010580:	b29b      	uxth	r3, r3
 8010582:	4313      	orrs	r3, r2
 8010584:	b29b      	uxth	r3, r3
 8010586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801058a:	bf28      	it	cs
 801058c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010590:	b29a      	uxth	r2, r3
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	791a      	ldrb	r2, [r3, #4]
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	795a      	ldrb	r2, [r3, #5]
 80105a2:	6a3b      	ldr	r3, [r7, #32]
 80105a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	799a      	ldrb	r2, [r3, #6]
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	79da      	ldrb	r2, [r3, #7]
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	7a1a      	ldrb	r2, [r3, #8]
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80105be:	88fb      	ldrh	r3, [r7, #6]
 80105c0:	2b09      	cmp	r3, #9
 80105c2:	f240 809d 	bls.w	8010700 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80105c6:	2309      	movs	r3, #9
 80105c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80105ca:	2300      	movs	r3, #0
 80105cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80105ce:	e081      	b.n	80106d4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80105d0:	f107 0316 	add.w	r3, r7, #22
 80105d4:	4619      	mov	r1, r3
 80105d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105d8:	f000 f9e7 	bl	80109aa <USBH_GetNextDesc>
 80105dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80105de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e0:	785b      	ldrb	r3, [r3, #1]
 80105e2:	2b04      	cmp	r3, #4
 80105e4:	d176      	bne.n	80106d4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80105e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b09      	cmp	r3, #9
 80105ec:	d002      	beq.n	80105f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80105ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f0:	2209      	movs	r2, #9
 80105f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80105f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105f8:	221a      	movs	r2, #26
 80105fa:	fb02 f303 	mul.w	r3, r2, r3
 80105fe:	3308      	adds	r3, #8
 8010600:	6a3a      	ldr	r2, [r7, #32]
 8010602:	4413      	add	r3, r2
 8010604:	3302      	adds	r3, #2
 8010606:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801060a:	69f8      	ldr	r0, [r7, #28]
 801060c:	f000 f87e 	bl	801070c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010610:	2300      	movs	r3, #0
 8010612:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010616:	2300      	movs	r3, #0
 8010618:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801061a:	e043      	b.n	80106a4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801061c:	f107 0316 	add.w	r3, r7, #22
 8010620:	4619      	mov	r1, r3
 8010622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010624:	f000 f9c1 	bl	80109aa <USBH_GetNextDesc>
 8010628:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801062a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062c:	785b      	ldrb	r3, [r3, #1]
 801062e:	2b05      	cmp	r3, #5
 8010630:	d138      	bne.n	80106a4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	795b      	ldrb	r3, [r3, #5]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d113      	bne.n	8010662 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801063e:	2b02      	cmp	r3, #2
 8010640:	d003      	beq.n	801064a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	799b      	ldrb	r3, [r3, #6]
 8010646:	2b03      	cmp	r3, #3
 8010648:	d10b      	bne.n	8010662 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	79db      	ldrb	r3, [r3, #7]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10b      	bne.n	801066a <USBH_ParseCfgDesc+0x14e>
 8010652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	2b09      	cmp	r3, #9
 8010658:	d007      	beq.n	801066a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801065a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065c:	2209      	movs	r2, #9
 801065e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010660:	e003      	b.n	801066a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010664:	2207      	movs	r2, #7
 8010666:	701a      	strb	r2, [r3, #0]
 8010668:	e000      	b.n	801066c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801066a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801066c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010670:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010674:	3201      	adds	r2, #1
 8010676:	00d2      	lsls	r2, r2, #3
 8010678:	211a      	movs	r1, #26
 801067a:	fb01 f303 	mul.w	r3, r1, r3
 801067e:	4413      	add	r3, r2
 8010680:	3308      	adds	r3, #8
 8010682:	6a3a      	ldr	r2, [r7, #32]
 8010684:	4413      	add	r3, r2
 8010686:	3304      	adds	r3, #4
 8010688:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801068a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801068c:	69b9      	ldr	r1, [r7, #24]
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f000 f870 	bl	8010774 <USBH_ParseEPDesc>
 8010694:	4603      	mov	r3, r0
 8010696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801069a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801069e:	3301      	adds	r3, #1
 80106a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	791b      	ldrb	r3, [r3, #4]
 80106a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d204      	bcs.n	80106ba <USBH_ParseCfgDesc+0x19e>
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	885a      	ldrh	r2, [r3, #2]
 80106b4:	8afb      	ldrh	r3, [r7, #22]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d8b0      	bhi.n	801061c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	791b      	ldrb	r3, [r3, #4]
 80106be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d201      	bcs.n	80106ca <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80106c6:	2303      	movs	r3, #3
 80106c8:	e01c      	b.n	8010704 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80106ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106ce:	3301      	adds	r3, #1
 80106d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80106d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d805      	bhi.n	80106e8 <USBH_ParseCfgDesc+0x1cc>
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	885a      	ldrh	r2, [r3, #2]
 80106e0:	8afb      	ldrh	r3, [r7, #22]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	f63f af74 	bhi.w	80105d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80106e8:	6a3b      	ldr	r3, [r7, #32]
 80106ea:	791b      	ldrb	r3, [r3, #4]
 80106ec:	2b02      	cmp	r3, #2
 80106ee:	bf28      	it	cs
 80106f0:	2302      	movcs	r3, #2
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d201      	bcs.n	8010700 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80106fc:	2303      	movs	r3, #3
 80106fe:	e001      	b.n	8010704 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010704:	4618      	mov	r0, r3
 8010706:	3730      	adds	r7, #48	@ 0x30
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	781a      	ldrb	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	785a      	ldrb	r2, [r3, #1]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	789a      	ldrb	r2, [r3, #2]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	78da      	ldrb	r2, [r3, #3]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	3304      	adds	r3, #4
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	2b02      	cmp	r3, #2
 801073e:	bf28      	it	cs
 8010740:	2302      	movcs	r3, #2
 8010742:	b2da      	uxtb	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	795a      	ldrb	r2, [r3, #5]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	799a      	ldrb	r2, [r3, #6]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	79da      	ldrb	r2, [r3, #7]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	7a1a      	ldrb	r2, [r3, #8]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	721a      	strb	r2, [r3, #8]
}
 8010768:	bf00      	nop
 801076a:	370c      	adds	r7, #12
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr

08010774 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010774:	b480      	push	{r7}
 8010776:	b087      	sub	sp, #28
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010780:	2300      	movs	r3, #0
 8010782:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	785a      	ldrb	r2, [r3, #1]
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	789a      	ldrb	r2, [r3, #2]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	78da      	ldrb	r2, [r3, #3]
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	3304      	adds	r3, #4
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	461a      	mov	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3305      	adds	r3, #5
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	021b      	lsls	r3, r3, #8
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	4313      	orrs	r3, r2
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	799a      	ldrb	r2, [r3, #6]
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	889b      	ldrh	r3, [r3, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d009      	beq.n	80107e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80107d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107d6:	d804      	bhi.n	80107e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80107dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107e0:	d901      	bls.n	80107e6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80107e2:	2303      	movs	r3, #3
 80107e4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d136      	bne.n	801085e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	78db      	ldrb	r3, [r3, #3]
 80107f4:	f003 0303 	and.w	r3, r3, #3
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d108      	bne.n	801080e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	889b      	ldrh	r3, [r3, #4]
 8010800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010804:	f240 8097 	bls.w	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010808:	2303      	movs	r3, #3
 801080a:	75fb      	strb	r3, [r7, #23]
 801080c:	e093      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	78db      	ldrb	r3, [r3, #3]
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d107      	bne.n	801082a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	889b      	ldrh	r3, [r3, #4]
 801081e:	2b40      	cmp	r3, #64	@ 0x40
 8010820:	f240 8089 	bls.w	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010824:	2303      	movs	r3, #3
 8010826:	75fb      	strb	r3, [r7, #23]
 8010828:	e085      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	78db      	ldrb	r3, [r3, #3]
 801082e:	f003 0303 	and.w	r3, r3, #3
 8010832:	2b01      	cmp	r3, #1
 8010834:	d005      	beq.n	8010842 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	78db      	ldrb	r3, [r3, #3]
 801083a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801083e:	2b03      	cmp	r3, #3
 8010840:	d10a      	bne.n	8010858 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	799b      	ldrb	r3, [r3, #6]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <USBH_ParseEPDesc+0xde>
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	799b      	ldrb	r3, [r3, #6]
 801084e:	2b10      	cmp	r3, #16
 8010850:	d970      	bls.n	8010934 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010852:	2303      	movs	r3, #3
 8010854:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010856:	e06d      	b.n	8010934 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010858:	2303      	movs	r3, #3
 801085a:	75fb      	strb	r3, [r7, #23]
 801085c:	e06b      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010864:	2b01      	cmp	r3, #1
 8010866:	d13c      	bne.n	80108e2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	78db      	ldrb	r3, [r3, #3]
 801086c:	f003 0303 	and.w	r3, r3, #3
 8010870:	2b02      	cmp	r3, #2
 8010872:	d005      	beq.n	8010880 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	78db      	ldrb	r3, [r3, #3]
 8010878:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801087c:	2b00      	cmp	r3, #0
 801087e:	d106      	bne.n	801088e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	889b      	ldrh	r3, [r3, #4]
 8010884:	2b40      	cmp	r3, #64	@ 0x40
 8010886:	d956      	bls.n	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010888:	2303      	movs	r3, #3
 801088a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 801088c:	e053      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	78db      	ldrb	r3, [r3, #3]
 8010892:	f003 0303 	and.w	r3, r3, #3
 8010896:	2b01      	cmp	r3, #1
 8010898:	d10e      	bne.n	80108b8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	799b      	ldrb	r3, [r3, #6]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d007      	beq.n	80108b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80108a6:	2b10      	cmp	r3, #16
 80108a8:	d803      	bhi.n	80108b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80108ae:	2b40      	cmp	r3, #64	@ 0x40
 80108b0:	d941      	bls.n	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80108b2:	2303      	movs	r3, #3
 80108b4:	75fb      	strb	r3, [r7, #23]
 80108b6:	e03e      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	78db      	ldrb	r3, [r3, #3]
 80108bc:	f003 0303 	and.w	r3, r3, #3
 80108c0:	2b03      	cmp	r3, #3
 80108c2:	d10b      	bne.n	80108dc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	799b      	ldrb	r3, [r3, #6]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <USBH_ParseEPDesc+0x162>
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	889b      	ldrh	r3, [r3, #4]
 80108d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108d4:	d32f      	bcc.n	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80108d6:	2303      	movs	r3, #3
 80108d8:	75fb      	strb	r3, [r7, #23]
 80108da:	e02c      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80108dc:	2303      	movs	r3, #3
 80108de:	75fb      	strb	r3, [r7, #23]
 80108e0:	e029      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d120      	bne.n	801092e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	78db      	ldrb	r3, [r3, #3]
 80108f0:	f003 0303 	and.w	r3, r3, #3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d106      	bne.n	8010906 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	889b      	ldrh	r3, [r3, #4]
 80108fc:	2b08      	cmp	r3, #8
 80108fe:	d01a      	beq.n	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010900:	2303      	movs	r3, #3
 8010902:	75fb      	strb	r3, [r7, #23]
 8010904:	e017      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	78db      	ldrb	r3, [r3, #3]
 801090a:	f003 0303 	and.w	r3, r3, #3
 801090e:	2b03      	cmp	r3, #3
 8010910:	d10a      	bne.n	8010928 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	799b      	ldrb	r3, [r3, #6]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <USBH_ParseEPDesc+0x1ae>
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	889b      	ldrh	r3, [r3, #4]
 801091e:	2b08      	cmp	r3, #8
 8010920:	d909      	bls.n	8010936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010922:	2303      	movs	r3, #3
 8010924:	75fb      	strb	r3, [r7, #23]
 8010926:	e006      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010928:	2303      	movs	r3, #3
 801092a:	75fb      	strb	r3, [r7, #23]
 801092c:	e003      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801092e:	2303      	movs	r3, #3
 8010930:	75fb      	strb	r3, [r7, #23]
 8010932:	e000      	b.n	8010936 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010934:	bf00      	nop
  }

  return status;
 8010936:	7dfb      	ldrb	r3, [r7, #23]
}
 8010938:	4618      	mov	r0, r3
 801093a:	371c      	adds	r7, #28
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010944:	b480      	push	{r7}
 8010946:	b087      	sub	sp, #28
 8010948:	af00      	add	r7, sp, #0
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	4613      	mov	r3, r2
 8010950:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	3301      	adds	r3, #1
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	2b03      	cmp	r3, #3
 801095a:	d120      	bne.n	801099e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	1e9a      	subs	r2, r3, #2
 8010962:	88fb      	ldrh	r3, [r7, #6]
 8010964:	4293      	cmp	r3, r2
 8010966:	bf28      	it	cs
 8010968:	4613      	movcs	r3, r2
 801096a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	3302      	adds	r3, #2
 8010970:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010972:	2300      	movs	r3, #0
 8010974:	82fb      	strh	r3, [r7, #22]
 8010976:	e00b      	b.n	8010990 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010978:	8afb      	ldrh	r3, [r7, #22]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	4413      	add	r3, r2
 801097e:	781a      	ldrb	r2, [r3, #0]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	3301      	adds	r3, #1
 8010988:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801098a:	8afb      	ldrh	r3, [r7, #22]
 801098c:	3302      	adds	r3, #2
 801098e:	82fb      	strh	r3, [r7, #22]
 8010990:	8afa      	ldrh	r2, [r7, #22]
 8010992:	8abb      	ldrh	r3, [r7, #20]
 8010994:	429a      	cmp	r2, r3
 8010996:	d3ef      	bcc.n	8010978 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2200      	movs	r2, #0
 801099c:	701a      	strb	r2, [r3, #0]
  }
}
 801099e:	bf00      	nop
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80109aa:	b480      	push	{r7}
 80109ac:	b085      	sub	sp, #20
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	7812      	ldrb	r2, [r2, #0]
 80109bc:	4413      	add	r3, r2
 80109be:	b29a      	uxth	r2, r3
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4413      	add	r3, r2
 80109ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80109d0:	68fb      	ldr	r3, [r7, #12]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3714      	adds	r7, #20
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b086      	sub	sp, #24
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	60f8      	str	r0, [r7, #12]
 80109e6:	60b9      	str	r1, [r7, #8]
 80109e8:	4613      	mov	r3, r2
 80109ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80109ec:	2301      	movs	r3, #1
 80109ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	789b      	ldrb	r3, [r3, #2]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d002      	beq.n	80109fe <USBH_CtlReq+0x20>
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d01d      	beq.n	8010a38 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80109fc:	e043      	b.n	8010a86 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	88fa      	ldrh	r2, [r7, #6]
 8010a08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2202      	movs	r2, #2
 8010a14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010a16:	2301      	movs	r3, #1
 8010a18:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2203      	movs	r2, #3
 8010a1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010a2e:	2200      	movs	r2, #0
 8010a30:	4619      	mov	r1, r3
 8010a32:	f000 fcd7 	bl	80113e4 <osMessagePut>
      break;
 8010a36:	e026      	b.n	8010a86 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f000 f829 	bl	8010a90 <USBH_HandleControl>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d002      	beq.n	8010a4e <USBH_CtlReq+0x70>
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d106      	bne.n	8010a5c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2201      	movs	r2, #1
 8010a52:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2200      	movs	r2, #0
 8010a58:	761a      	strb	r2, [r3, #24]
 8010a5a:	e005      	b.n	8010a68 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010a5c:	7dfb      	ldrb	r3, [r7, #23]
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d102      	bne.n	8010a68 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2201      	movs	r2, #1
 8010a66:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2203      	movs	r2, #3
 8010a6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4619      	mov	r1, r3
 8010a80:	f000 fcb0 	bl	80113e4 <osMessagePut>
      break;
 8010a84:	bf00      	nop
  }
  return status;
 8010a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3718      	adds	r7, #24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	7e1b      	ldrb	r3, [r3, #24]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	2b0a      	cmp	r3, #10
 8010aa8:	f200 8229 	bhi.w	8010efe <USBH_HandleControl+0x46e>
 8010aac:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab4 <USBH_HandleControl+0x24>)
 8010aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab2:	bf00      	nop
 8010ab4:	08010ae1 	.word	0x08010ae1
 8010ab8:	08010afb 	.word	0x08010afb
 8010abc:	08010b9d 	.word	0x08010b9d
 8010ac0:	08010bc3 	.word	0x08010bc3
 8010ac4:	08010c4f 	.word	0x08010c4f
 8010ac8:	08010c79 	.word	0x08010c79
 8010acc:	08010d3b 	.word	0x08010d3b
 8010ad0:	08010d5d 	.word	0x08010d5d
 8010ad4:	08010def 	.word	0x08010def
 8010ad8:	08010e15 	.word	0x08010e15
 8010adc:	08010ea7 	.word	0x08010ea7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f103 0110 	add.w	r1, r3, #16
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	795b      	ldrb	r3, [r3, #5]
 8010aea:	461a      	mov	r2, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 fa17 	bl	8010f20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2202      	movs	r2, #2
 8010af6:	761a      	strb	r2, [r3, #24]
      break;
 8010af8:	e20c      	b.n	8010f14 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	795b      	ldrb	r3, [r3, #5]
 8010afe:	4619      	mov	r1, r3
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f003 f927 	bl	8013d54 <USBH_LL_GetURBState>
 8010b06:	4603      	mov	r3, r0
 8010b08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010b0a:	7bbb      	ldrb	r3, [r7, #14]
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d12c      	bne.n	8010b6a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	7c1b      	ldrb	r3, [r3, #16]
 8010b14:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010b18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	8adb      	ldrh	r3, [r3, #22]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00a      	beq.n	8010b38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010b22:	7b7b      	ldrb	r3, [r7, #13]
 8010b24:	2b80      	cmp	r3, #128	@ 0x80
 8010b26:	d103      	bne.n	8010b30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2203      	movs	r2, #3
 8010b2c:	761a      	strb	r2, [r3, #24]
 8010b2e:	e00d      	b.n	8010b4c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2205      	movs	r2, #5
 8010b34:	761a      	strb	r2, [r3, #24]
 8010b36:	e009      	b.n	8010b4c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010b38:	7b7b      	ldrb	r3, [r7, #13]
 8010b3a:	2b80      	cmp	r3, #128	@ 0x80
 8010b3c:	d103      	bne.n	8010b46 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2209      	movs	r2, #9
 8010b42:	761a      	strb	r2, [r3, #24]
 8010b44:	e002      	b.n	8010b4c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2207      	movs	r2, #7
 8010b4a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2203      	movs	r2, #3
 8010b50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010b60:	2200      	movs	r2, #0
 8010b62:	4619      	mov	r1, r3
 8010b64:	f000 fc3e 	bl	80113e4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010b68:	e1cb      	b.n	8010f02 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	2b04      	cmp	r3, #4
 8010b6e:	d003      	beq.n	8010b78 <USBH_HandleControl+0xe8>
 8010b70:	7bbb      	ldrb	r3, [r7, #14]
 8010b72:	2b02      	cmp	r3, #2
 8010b74:	f040 81c5 	bne.w	8010f02 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	220b      	movs	r2, #11
 8010b7c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2203      	movs	r2, #3
 8010b82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010b92:	2200      	movs	r2, #0
 8010b94:	4619      	mov	r1, r3
 8010b96:	f000 fc25 	bl	80113e4 <osMessagePut>
      break;
 8010b9a:	e1b2      	b.n	8010f02 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6899      	ldr	r1, [r3, #8]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	899a      	ldrh	r2, [r3, #12]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	791b      	ldrb	r3, [r3, #4]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 f9f2 	bl	8010f9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2204      	movs	r2, #4
 8010bbe:	761a      	strb	r2, [r3, #24]
      break;
 8010bc0:	e1a8      	b.n	8010f14 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	791b      	ldrb	r3, [r3, #4]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f003 f8c3 	bl	8013d54 <USBH_LL_GetURBState>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010bd2:	7bbb      	ldrb	r3, [r7, #14]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d110      	bne.n	8010bfa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2209      	movs	r2, #9
 8010bdc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2203      	movs	r2, #3
 8010be2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	f000 fbf5 	bl	80113e4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010bfa:	7bbb      	ldrb	r3, [r7, #14]
 8010bfc:	2b05      	cmp	r3, #5
 8010bfe:	d110      	bne.n	8010c22 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010c00:	2303      	movs	r3, #3
 8010c02:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2203      	movs	r2, #3
 8010c08:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c18:	2200      	movs	r2, #0
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	f000 fbe2 	bl	80113e4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010c20:	e171      	b.n	8010f06 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010c22:	7bbb      	ldrb	r3, [r7, #14]
 8010c24:	2b04      	cmp	r3, #4
 8010c26:	f040 816e 	bne.w	8010f06 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	220b      	movs	r2, #11
 8010c2e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2203      	movs	r2, #3
 8010c34:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c44:	2200      	movs	r2, #0
 8010c46:	4619      	mov	r1, r3
 8010c48:	f000 fbcc 	bl	80113e4 <osMessagePut>
      break;
 8010c4c:	e15b      	b.n	8010f06 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6899      	ldr	r1, [r3, #8]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	899a      	ldrh	r2, [r3, #12]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	795b      	ldrb	r3, [r3, #5]
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	9000      	str	r0, [sp, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f978 	bl	8010f54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2206      	movs	r2, #6
 8010c74:	761a      	strb	r2, [r3, #24]
      break;
 8010c76:	e14d      	b.n	8010f14 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	795b      	ldrb	r3, [r3, #5]
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f003 f868 	bl	8013d54 <USBH_LL_GetURBState>
 8010c84:	4603      	mov	r3, r0
 8010c86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010c88:	7bbb      	ldrb	r3, [r7, #14]
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	d111      	bne.n	8010cb2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2207      	movs	r2, #7
 8010c92:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2203      	movs	r2, #3
 8010c98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010ca8:	2200      	movs	r2, #0
 8010caa:	4619      	mov	r1, r3
 8010cac:	f000 fb9a 	bl	80113e4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010cb0:	e12b      	b.n	8010f0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8010cb2:	7bbb      	ldrb	r3, [r7, #14]
 8010cb4:	2b05      	cmp	r3, #5
 8010cb6:	d113      	bne.n	8010ce0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	220c      	movs	r2, #12
 8010cbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2203      	movs	r2, #3
 8010cc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	4619      	mov	r1, r3
 8010cda:	f000 fb83 	bl	80113e4 <osMessagePut>
      break;
 8010cde:	e114      	b.n	8010f0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010ce0:	7bbb      	ldrb	r3, [r7, #14]
 8010ce2:	2b02      	cmp	r3, #2
 8010ce4:	d111      	bne.n	8010d0a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2205      	movs	r2, #5
 8010cea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2203      	movs	r2, #3
 8010cf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d00:	2200      	movs	r2, #0
 8010d02:	4619      	mov	r1, r3
 8010d04:	f000 fb6e 	bl	80113e4 <osMessagePut>
      break;
 8010d08:	e0ff      	b.n	8010f0a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8010d0a:	7bbb      	ldrb	r3, [r7, #14]
 8010d0c:	2b04      	cmp	r3, #4
 8010d0e:	f040 80fc 	bne.w	8010f0a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	220b      	movs	r2, #11
 8010d16:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010d18:	2302      	movs	r3, #2
 8010d1a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2203      	movs	r2, #3
 8010d20:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d30:	2200      	movs	r2, #0
 8010d32:	4619      	mov	r1, r3
 8010d34:	f000 fb56 	bl	80113e4 <osMessagePut>
      break;
 8010d38:	e0e7      	b.n	8010f0a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	791b      	ldrb	r3, [r3, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	2100      	movs	r1, #0
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f92b 	bl	8010f9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2208      	movs	r2, #8
 8010d58:	761a      	strb	r2, [r3, #24]

      break;
 8010d5a:	e0db      	b.n	8010f14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	791b      	ldrb	r3, [r3, #4]
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f002 fff6 	bl	8013d54 <USBH_LL_GetURBState>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d113      	bne.n	8010d9a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	220d      	movs	r2, #13
 8010d76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2203      	movs	r2, #3
 8010d80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d90:	2200      	movs	r2, #0
 8010d92:	4619      	mov	r1, r3
 8010d94:	f000 fb26 	bl	80113e4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010d98:	e0b9      	b.n	8010f0e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8010d9a:	7bbb      	ldrb	r3, [r7, #14]
 8010d9c:	2b04      	cmp	r3, #4
 8010d9e:	d111      	bne.n	8010dc4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	220b      	movs	r2, #11
 8010da4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2203      	movs	r2, #3
 8010daa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010dba:	2200      	movs	r2, #0
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	f000 fb11 	bl	80113e4 <osMessagePut>
      break;
 8010dc2:	e0a4      	b.n	8010f0e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8010dc4:	7bbb      	ldrb	r3, [r7, #14]
 8010dc6:	2b05      	cmp	r3, #5
 8010dc8:	f040 80a1 	bne.w	8010f0e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010dcc:	2303      	movs	r3, #3
 8010dce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2203      	movs	r2, #3
 8010dd4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010de4:	2200      	movs	r2, #0
 8010de6:	4619      	mov	r1, r3
 8010de8:	f000 fafc 	bl	80113e4 <osMessagePut>
      break;
 8010dec:	e08f      	b.n	8010f0e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	795b      	ldrb	r3, [r3, #5]
 8010df2:	2201      	movs	r2, #1
 8010df4:	9200      	str	r2, [sp, #0]
 8010df6:	2200      	movs	r2, #0
 8010df8:	2100      	movs	r1, #0
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 f8aa 	bl	8010f54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	220a      	movs	r2, #10
 8010e10:	761a      	strb	r2, [r3, #24]
      break;
 8010e12:	e07f      	b.n	8010f14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	795b      	ldrb	r3, [r3, #5]
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f002 ff9a 	bl	8013d54 <USBH_LL_GetURBState>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010e24:	7bbb      	ldrb	r3, [r7, #14]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d113      	bne.n	8010e52 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	220d      	movs	r2, #13
 8010e32:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2203      	movs	r2, #3
 8010e38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e48:	2200      	movs	r2, #0
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	f000 faca 	bl	80113e4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e50:	e05f      	b.n	8010f12 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010e52:	7bbb      	ldrb	r3, [r7, #14]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d111      	bne.n	8010e7c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2209      	movs	r2, #9
 8010e5c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2203      	movs	r2, #3
 8010e62:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e72:	2200      	movs	r2, #0
 8010e74:	4619      	mov	r1, r3
 8010e76:	f000 fab5 	bl	80113e4 <osMessagePut>
      break;
 8010e7a:	e04a      	b.n	8010f12 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8010e7c:	7bbb      	ldrb	r3, [r7, #14]
 8010e7e:	2b04      	cmp	r3, #4
 8010e80:	d147      	bne.n	8010f12 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	220b      	movs	r2, #11
 8010e86:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2203      	movs	r2, #3
 8010e8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	f000 faa0 	bl	80113e4 <osMessagePut>
      break;
 8010ea4:	e035      	b.n	8010f12 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	7e5b      	ldrb	r3, [r3, #25]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	765a      	strb	r2, [r3, #25]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	7e5b      	ldrb	r3, [r3, #25]
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d806      	bhi.n	8010ec8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010ec6:	e025      	b.n	8010f14 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010ece:	2106      	movs	r1, #6
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	795b      	ldrb	r3, [r3, #5]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 f90d 	bl	8011100 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	791b      	ldrb	r3, [r3, #4]
 8010eea:	4619      	mov	r1, r3
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f907 	bl	8011100 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010ef8:	2302      	movs	r3, #2
 8010efa:	73fb      	strb	r3, [r7, #15]
      break;
 8010efc:	e00a      	b.n	8010f14 <USBH_HandleControl+0x484>

    default:
      break;
 8010efe:	bf00      	nop
 8010f00:	e008      	b.n	8010f14 <USBH_HandleControl+0x484>
      break;
 8010f02:	bf00      	nop
 8010f04:	e006      	b.n	8010f14 <USBH_HandleControl+0x484>
      break;
 8010f06:	bf00      	nop
 8010f08:	e004      	b.n	8010f14 <USBH_HandleControl+0x484>
      break;
 8010f0a:	bf00      	nop
 8010f0c:	e002      	b.n	8010f14 <USBH_HandleControl+0x484>
      break;
 8010f0e:	bf00      	nop
 8010f10:	e000      	b.n	8010f14 <USBH_HandleControl+0x484>
      break;
 8010f12:	bf00      	nop
  }

  return status;
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop

08010f20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b088      	sub	sp, #32
 8010f24:	af04      	add	r7, sp, #16
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010f2e:	79f9      	ldrb	r1, [r7, #7]
 8010f30:	2300      	movs	r3, #0
 8010f32:	9303      	str	r3, [sp, #12]
 8010f34:	2308      	movs	r3, #8
 8010f36:	9302      	str	r3, [sp, #8]
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	9301      	str	r3, [sp, #4]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	2300      	movs	r3, #0
 8010f42:	2200      	movs	r2, #0
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f002 fed4 	bl	8013cf2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3710      	adds	r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b088      	sub	sp, #32
 8010f58:	af04      	add	r7, sp, #16
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	4611      	mov	r1, r2
 8010f60:	461a      	mov	r2, r3
 8010f62:	460b      	mov	r3, r1
 8010f64:	80fb      	strh	r3, [r7, #6]
 8010f66:	4613      	mov	r3, r2
 8010f68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010f74:	2300      	movs	r3, #0
 8010f76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010f78:	7979      	ldrb	r1, [r7, #5]
 8010f7a:	7e3b      	ldrb	r3, [r7, #24]
 8010f7c:	9303      	str	r3, [sp, #12]
 8010f7e:	88fb      	ldrh	r3, [r7, #6]
 8010f80:	9302      	str	r3, [sp, #8]
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	2301      	movs	r3, #1
 8010f88:	9300      	str	r3, [sp, #0]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f002 feaf 	bl	8013cf2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b088      	sub	sp, #32
 8010fa2:	af04      	add	r7, sp, #16
 8010fa4:	60f8      	str	r0, [r7, #12]
 8010fa6:	60b9      	str	r1, [r7, #8]
 8010fa8:	4611      	mov	r1, r2
 8010faa:	461a      	mov	r2, r3
 8010fac:	460b      	mov	r3, r1
 8010fae:	80fb      	strh	r3, [r7, #6]
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010fb4:	7979      	ldrb	r1, [r7, #5]
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	9303      	str	r3, [sp, #12]
 8010fba:	88fb      	ldrh	r3, [r7, #6]
 8010fbc:	9302      	str	r3, [sp, #8]
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	9301      	str	r3, [sp, #4]
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	2201      	movs	r2, #1
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f002 fe91 	bl	8013cf2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010fd0:	2300      	movs	r3, #0

}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b088      	sub	sp, #32
 8010fde:	af04      	add	r7, sp, #16
 8010fe0:	60f8      	str	r0, [r7, #12]
 8010fe2:	60b9      	str	r1, [r7, #8]
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	460b      	mov	r3, r1
 8010fea:	80fb      	strh	r3, [r7, #6]
 8010fec:	4613      	mov	r3, r2
 8010fee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ffe:	7979      	ldrb	r1, [r7, #5]
 8011000:	7e3b      	ldrb	r3, [r7, #24]
 8011002:	9303      	str	r3, [sp, #12]
 8011004:	88fb      	ldrh	r3, [r7, #6]
 8011006:	9302      	str	r3, [sp, #8]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	2301      	movs	r3, #1
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	2302      	movs	r3, #2
 8011012:	2200      	movs	r2, #0
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f002 fe6c 	bl	8013cf2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af04      	add	r7, sp, #16
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	4611      	mov	r1, r2
 8011030:	461a      	mov	r2, r3
 8011032:	460b      	mov	r3, r1
 8011034:	80fb      	strh	r3, [r7, #6]
 8011036:	4613      	mov	r3, r2
 8011038:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801103a:	7979      	ldrb	r1, [r7, #5]
 801103c:	2300      	movs	r3, #0
 801103e:	9303      	str	r3, [sp, #12]
 8011040:	88fb      	ldrh	r3, [r7, #6]
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	2301      	movs	r3, #1
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	2302      	movs	r3, #2
 801104e:	2201      	movs	r2, #1
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f002 fe4e 	bl	8013cf2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3710      	adds	r7, #16
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af04      	add	r7, sp, #16
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	4608      	mov	r0, r1
 801106a:	4611      	mov	r1, r2
 801106c:	461a      	mov	r2, r3
 801106e:	4603      	mov	r3, r0
 8011070:	70fb      	strb	r3, [r7, #3]
 8011072:	460b      	mov	r3, r1
 8011074:	70bb      	strb	r3, [r7, #2]
 8011076:	4613      	mov	r3, r2
 8011078:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801107a:	7878      	ldrb	r0, [r7, #1]
 801107c:	78ba      	ldrb	r2, [r7, #2]
 801107e:	78f9      	ldrb	r1, [r7, #3]
 8011080:	8b3b      	ldrh	r3, [r7, #24]
 8011082:	9302      	str	r3, [sp, #8]
 8011084:	7d3b      	ldrb	r3, [r7, #20]
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	7c3b      	ldrb	r3, [r7, #16]
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	4603      	mov	r3, r0
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f002 fde1 	bl	8013c56 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b082      	sub	sp, #8
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	460b      	mov	r3, r1
 80110a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80110aa:	78fb      	ldrb	r3, [r7, #3]
 80110ac:	4619      	mov	r1, r3
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f002 fe00 	bl	8013cb4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	460b      	mov	r3, r1
 80110c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 f836 	bl	801113c <USBH_GetFreePipe>
 80110d0:	4603      	mov	r3, r0
 80110d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80110d4:	89fb      	ldrh	r3, [r7, #14]
 80110d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80110da:	4293      	cmp	r3, r2
 80110dc:	d00a      	beq.n	80110f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80110de:	78fa      	ldrb	r2, [r7, #3]
 80110e0:	89fb      	ldrh	r3, [r7, #14]
 80110e2:	f003 030f 	and.w	r3, r3, #15
 80110e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80110ea:	6879      	ldr	r1, [r7, #4]
 80110ec:	33e0      	adds	r3, #224	@ 0xe0
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	440b      	add	r3, r1
 80110f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80110f4:	89fb      	ldrh	r3, [r7, #14]
 80110f6:	b2db      	uxtb	r3, r3
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801110c:	78fb      	ldrb	r3, [r7, #3]
 801110e:	2b0f      	cmp	r3, #15
 8011110:	d80d      	bhi.n	801112e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011112:	78fb      	ldrb	r3, [r7, #3]
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	33e0      	adds	r3, #224	@ 0xe0
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	4413      	add	r3, r2
 801111c:	685a      	ldr	r2, [r3, #4]
 801111e:	78fb      	ldrb	r3, [r7, #3]
 8011120:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011124:	6879      	ldr	r1, [r7, #4]
 8011126:	33e0      	adds	r3, #224	@ 0xe0
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	440b      	add	r3, r1
 801112c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011144:	2300      	movs	r3, #0
 8011146:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011148:	2300      	movs	r3, #0
 801114a:	73fb      	strb	r3, [r7, #15]
 801114c:	e00f      	b.n	801116e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801114e:	7bfb      	ldrb	r3, [r7, #15]
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	33e0      	adds	r3, #224	@ 0xe0
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801115e:	2b00      	cmp	r3, #0
 8011160:	d102      	bne.n	8011168 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	b29b      	uxth	r3, r3
 8011166:	e007      	b.n	8011178 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011168:	7bfb      	ldrb	r3, [r7, #15]
 801116a:	3301      	adds	r3, #1
 801116c:	73fb      	strb	r3, [r7, #15]
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	2b0f      	cmp	r3, #15
 8011172:	d9ec      	bls.n	801114e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011178:	4618      	mov	r0, r3
 801117a:	3714      	adds	r7, #20
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011184:	b480      	push	{r7}
 8011186:	b087      	sub	sp, #28
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	4613      	mov	r3, r2
 8011190:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011192:	2301      	movs	r3, #1
 8011194:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801119a:	4b1f      	ldr	r3, [pc, #124]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 801119c:	7a5b      	ldrb	r3, [r3, #9]
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d131      	bne.n	8011208 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80111a4:	4b1c      	ldr	r3, [pc, #112]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111a6:	7a5b      	ldrb	r3, [r3, #9]
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	461a      	mov	r2, r3
 80111ac:	4b1a      	ldr	r3, [pc, #104]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111ae:	2100      	movs	r1, #0
 80111b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80111b2:	4b19      	ldr	r3, [pc, #100]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111b4:	7a5b      	ldrb	r3, [r3, #9]
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	4a17      	ldr	r2, [pc, #92]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4413      	add	r3, r2
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80111c2:	4b15      	ldr	r3, [pc, #84]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111c4:	7a5b      	ldrb	r3, [r3, #9]
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	461a      	mov	r2, r3
 80111ca:	4b13      	ldr	r3, [pc, #76]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111cc:	4413      	add	r3, r2
 80111ce:	79fa      	ldrb	r2, [r7, #7]
 80111d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80111d2:	4b11      	ldr	r3, [pc, #68]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111d4:	7a5b      	ldrb	r3, [r3, #9]
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	b2d1      	uxtb	r1, r2
 80111dc:	4a0e      	ldr	r2, [pc, #56]	@ (8011218 <FATFS_LinkDriverEx+0x94>)
 80111de:	7251      	strb	r1, [r2, #9]
 80111e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80111e2:	7dbb      	ldrb	r3, [r7, #22]
 80111e4:	3330      	adds	r3, #48	@ 0x30
 80111e6:	b2da      	uxtb	r2, r3
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	3301      	adds	r3, #1
 80111f0:	223a      	movs	r2, #58	@ 0x3a
 80111f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	3302      	adds	r3, #2
 80111f8:	222f      	movs	r2, #47	@ 0x2f
 80111fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	3303      	adds	r3, #3
 8011200:	2200      	movs	r2, #0
 8011202:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011208:	7dfb      	ldrb	r3, [r7, #23]
}
 801120a:	4618      	mov	r0, r3
 801120c:	371c      	adds	r7, #28
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	20000d2c 	.word	0x20000d2c

0801121c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011226:	2200      	movs	r2, #0
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff ffaa 	bl	8011184 <FATFS_LinkDriverEx>
 8011230:	4603      	mov	r3, r0
}
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801123a:	b480      	push	{r7}
 801123c:	b085      	sub	sp, #20
 801123e:	af00      	add	r7, sp, #0
 8011240:	4603      	mov	r3, r0
 8011242:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011244:	2300      	movs	r3, #0
 8011246:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801124c:	2b84      	cmp	r3, #132	@ 0x84
 801124e:	d005      	beq.n	801125c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011250:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	4413      	add	r3, r2
 8011258:	3303      	adds	r3, #3
 801125a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801125c:	68fb      	ldr	r3, [r7, #12]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3714      	adds	r7, #20
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011270:	f3ef 8305 	mrs	r3, IPSR
 8011274:	607b      	str	r3, [r7, #4]
  return(result);
 8011276:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011278:	2b00      	cmp	r3, #0
 801127a:	bf14      	ite	ne
 801127c:	2301      	movne	r3, #1
 801127e:	2300      	moveq	r3, #0
 8011280:	b2db      	uxtb	r3, r3
}
 8011282:	4618      	mov	r0, r3
 8011284:	370c      	adds	r7, #12
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr

0801128e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801128e:	b580      	push	{r7, lr}
 8011290:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011292:	f001 f975 	bl	8012580 <vTaskStartScheduler>
  
  return osOK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	bd80      	pop	{r7, pc}

0801129c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80112a0:	f001 fdd6 	bl	8012e50 <xTaskGetSchedulerState>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d101      	bne.n	80112ae <osKernelRunning+0x12>
    return 0;
 80112aa:	2300      	movs	r3, #0
 80112ac:	e000      	b.n	80112b0 <osKernelRunning+0x14>
  else
    return 1;
 80112ae:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80112b8:	f7ff ffd7 	bl	801126a <inHandlerMode>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d003      	beq.n	80112ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80112c2:	f001 fa81 	bl	80127c8 <xTaskGetTickCountFromISR>
 80112c6:	4603      	mov	r3, r0
 80112c8:	e002      	b.n	80112d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80112ca:	f001 fa6d 	bl	80127a8 <xTaskGetTickCount>
 80112ce:	4603      	mov	r3, r0
  }
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80112d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112d6:	b089      	sub	sp, #36	@ 0x24
 80112d8:	af04      	add	r7, sp, #16
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	695b      	ldr	r3, [r3, #20]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d020      	beq.n	8011328 <osThreadCreate+0x54>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	699b      	ldr	r3, [r3, #24]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d01c      	beq.n	8011328 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	685c      	ldr	r4, [r3, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	691e      	ldr	r6, [r3, #16]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff ff9a 	bl	801123a <makeFreeRtosPriority>
 8011306:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011310:	9202      	str	r2, [sp, #8]
 8011312:	9301      	str	r3, [sp, #4]
 8011314:	9100      	str	r1, [sp, #0]
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	4632      	mov	r2, r6
 801131a:	4629      	mov	r1, r5
 801131c:	4620      	mov	r0, r4
 801131e:	f000 ff4d 	bl	80121bc <xTaskCreateStatic>
 8011322:	4603      	mov	r3, r0
 8011324:	60fb      	str	r3, [r7, #12]
 8011326:	e01c      	b.n	8011362 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	685c      	ldr	r4, [r3, #4]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011334:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff ff7c 	bl	801123a <makeFreeRtosPriority>
 8011342:	4602      	mov	r2, r0
 8011344:	f107 030c 	add.w	r3, r7, #12
 8011348:	9301      	str	r3, [sp, #4]
 801134a:	9200      	str	r2, [sp, #0]
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	4632      	mov	r2, r6
 8011350:	4629      	mov	r1, r5
 8011352:	4620      	mov	r0, r4
 8011354:	f000 ff98 	bl	8012288 <xTaskCreate>
 8011358:	4603      	mov	r3, r0
 801135a:	2b01      	cmp	r3, #1
 801135c:	d001      	beq.n	8011362 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801135e:	2300      	movs	r3, #0
 8011360:	e000      	b.n	8011364 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011362:	68fb      	ldr	r3, [r7, #12]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3714      	adds	r7, #20
 8011368:	46bd      	mov	sp, r7
 801136a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801136c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <osDelay+0x16>
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	e000      	b.n	8011384 <osDelay+0x18>
 8011382:	2301      	movs	r3, #1
 8011384:	4618      	mov	r0, r3
 8011386:	f001 f8c3 	bl	8012510 <vTaskDelay>
  
  return osOK;
 801138a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011394:	b590      	push	{r4, r7, lr}
 8011396:	b085      	sub	sp, #20
 8011398:	af02      	add	r7, sp, #8
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d011      	beq.n	80113ca <osMessageCreate+0x36>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00d      	beq.n	80113ca <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6818      	ldr	r0, [r3, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6859      	ldr	r1, [r3, #4]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	689a      	ldr	r2, [r3, #8]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	2400      	movs	r4, #0
 80113c0:	9400      	str	r4, [sp, #0]
 80113c2:	f000 f9e3 	bl	801178c <xQueueGenericCreateStatic>
 80113c6:	4603      	mov	r3, r0
 80113c8:	e008      	b.n	80113dc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6818      	ldr	r0, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	4619      	mov	r1, r3
 80113d6:	f000 fa60 	bl	801189a <xQueueGenericCreate>
 80113da:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd90      	pop	{r4, r7, pc}

080113e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80113f0:	2300      	movs	r3, #0
 80113f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <osMessagePut+0x1e>
    ticks = 1;
 80113fe:	2301      	movs	r3, #1
 8011400:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011402:	f7ff ff32 	bl	801126a <inHandlerMode>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d018      	beq.n	801143e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801140c:	f107 0210 	add.w	r2, r7, #16
 8011410:	f107 0108 	add.w	r1, r7, #8
 8011414:	2300      	movs	r3, #0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f000 fbac 	bl	8011b74 <xQueueGenericSendFromISR>
 801141c:	4603      	mov	r3, r0
 801141e:	2b01      	cmp	r3, #1
 8011420:	d001      	beq.n	8011426 <osMessagePut+0x42>
      return osErrorOS;
 8011422:	23ff      	movs	r3, #255	@ 0xff
 8011424:	e018      	b.n	8011458 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d014      	beq.n	8011456 <osMessagePut+0x72>
 801142c:	4b0c      	ldr	r3, [pc, #48]	@ (8011460 <osMessagePut+0x7c>)
 801142e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	f3bf 8f6f 	isb	sy
 801143c:	e00b      	b.n	8011456 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801143e:	f107 0108 	add.w	r1, r7, #8
 8011442:	2300      	movs	r3, #0
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f000 fa8a 	bl	8011960 <xQueueGenericSend>
 801144c:	4603      	mov	r3, r0
 801144e:	2b01      	cmp	r3, #1
 8011450:	d001      	beq.n	8011456 <osMessagePut+0x72>
      return osErrorOS;
 8011452:	23ff      	movs	r3, #255	@ 0xff
 8011454:	e000      	b.n	8011458 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3718      	adds	r7, #24
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	e000ed04 	.word	0xe000ed04

08011464 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011464:	b590      	push	{r4, r7, lr}
 8011466:	b08b      	sub	sp, #44	@ 0x2c
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011474:	2300      	movs	r3, #0
 8011476:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10a      	bne.n	8011494 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801147e:	2380      	movs	r3, #128	@ 0x80
 8011480:	617b      	str	r3, [r7, #20]
    return event;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	461c      	mov	r4, r3
 8011486:	f107 0314 	add.w	r3, r7, #20
 801148a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801148e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011492:	e054      	b.n	801153e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011494:	2300      	movs	r3, #0
 8011496:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011498:	2300      	movs	r3, #0
 801149a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a2:	d103      	bne.n	80114ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80114a4:	f04f 33ff 	mov.w	r3, #4294967295
 80114a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80114aa:	e009      	b.n	80114c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d006      	beq.n	80114c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80114b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d101      	bne.n	80114c0 <osMessageGet+0x5c>
      ticks = 1;
 80114bc:	2301      	movs	r3, #1
 80114be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80114c0:	f7ff fed3 	bl	801126a <inHandlerMode>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d01c      	beq.n	8011504 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80114ca:	f107 0220 	add.w	r2, r7, #32
 80114ce:	f107 0314 	add.w	r3, r7, #20
 80114d2:	3304      	adds	r3, #4
 80114d4:	4619      	mov	r1, r3
 80114d6:	68b8      	ldr	r0, [r7, #8]
 80114d8:	f000 fcd8 	bl	8011e8c <xQueueReceiveFromISR>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d102      	bne.n	80114e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80114e2:	2310      	movs	r3, #16
 80114e4:	617b      	str	r3, [r7, #20]
 80114e6:	e001      	b.n	80114ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d01d      	beq.n	801152e <osMessageGet+0xca>
 80114f2:	4b15      	ldr	r3, [pc, #84]	@ (8011548 <osMessageGet+0xe4>)
 80114f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	e014      	b.n	801152e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011504:	f107 0314 	add.w	r3, r7, #20
 8011508:	3304      	adds	r3, #4
 801150a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801150c:	4619      	mov	r1, r3
 801150e:	68b8      	ldr	r0, [r7, #8]
 8011510:	f000 fbd4 	bl	8011cbc <xQueueReceive>
 8011514:	4603      	mov	r3, r0
 8011516:	2b01      	cmp	r3, #1
 8011518:	d102      	bne.n	8011520 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801151a:	2310      	movs	r3, #16
 801151c:	617b      	str	r3, [r7, #20]
 801151e:	e006      	b.n	801152e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <osMessageGet+0xc6>
 8011526:	2300      	movs	r3, #0
 8011528:	e000      	b.n	801152c <osMessageGet+0xc8>
 801152a:	2340      	movs	r3, #64	@ 0x40
 801152c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	461c      	mov	r4, r3
 8011532:	f107 0314 	add.w	r3, r7, #20
 8011536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801153a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	372c      	adds	r7, #44	@ 0x2c
 8011542:	46bd      	mov	sp, r7
 8011544:	bd90      	pop	{r4, r7, pc}
 8011546:	bf00      	nop
 8011548:	e000ed04 	.word	0xe000ed04

0801154c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f103 0208 	add.w	r2, r3, #8
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f04f 32ff 	mov.w	r2, #4294967295
 8011564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f103 0208 	add.w	r2, r3, #8
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f103 0208 	add.w	r2, r3, #8
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2200      	movs	r2, #0
 801157e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011580:	bf00      	nop
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801159a:	bf00      	nop
 801159c:	370c      	adds	r7, #12
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr

080115a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115a6:	b480      	push	{r7}
 80115a8:	b085      	sub	sp, #20
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	68fa      	ldr	r2, [r7, #12]
 80115ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	689a      	ldr	r2, [r3, #8]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	689b      	ldr	r3, [r3, #8]
 80115c8:	683a      	ldr	r2, [r7, #0]
 80115ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	1c5a      	adds	r2, r3, #1
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	601a      	str	r2, [r3, #0]
}
 80115e2:	bf00      	nop
 80115e4:	3714      	adds	r7, #20
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115ee:	b480      	push	{r7}
 80115f0:	b085      	sub	sp, #20
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011604:	d103      	bne.n	801160e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	60fb      	str	r3, [r7, #12]
 801160c:	e00c      	b.n	8011628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	3308      	adds	r3, #8
 8011612:	60fb      	str	r3, [r7, #12]
 8011614:	e002      	b.n	801161c <vListInsert+0x2e>
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68ba      	ldr	r2, [r7, #8]
 8011624:	429a      	cmp	r2, r3
 8011626:	d2f6      	bcs.n	8011616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	685a      	ldr	r2, [r3, #4]
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	683a      	ldr	r2, [r7, #0]
 8011636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	683a      	ldr	r2, [r7, #0]
 8011642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	601a      	str	r2, [r3, #0]
}
 8011654:	bf00      	nop
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011660:	b480      	push	{r7}
 8011662:	b085      	sub	sp, #20
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	6892      	ldr	r2, [r2, #8]
 8011676:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	6852      	ldr	r2, [r2, #4]
 8011680:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	429a      	cmp	r2, r3
 801168a:	d103      	bne.n	8011694 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689a      	ldr	r2, [r3, #8]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	1e5a      	subs	r2, r3, #1
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d10d      	bne.n	80116e4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80116c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116cc:	b672      	cpsid	i
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	b662      	cpsie	i
 80116dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80116de:	bf00      	nop
 80116e0:	bf00      	nop
 80116e2:	e7fd      	b.n	80116e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80116e4:	f001 fdd2 	bl	801328c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f0:	68f9      	ldr	r1, [r7, #12]
 80116f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80116f4:	fb01 f303 	mul.w	r3, r1, r3
 80116f8:	441a      	add	r2, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2200      	movs	r2, #0
 8011702:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011714:	3b01      	subs	r3, #1
 8011716:	68f9      	ldr	r1, [r7, #12]
 8011718:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801171a:	fb01 f303 	mul.w	r3, r1, r3
 801171e:	441a      	add	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	22ff      	movs	r2, #255	@ 0xff
 8011728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	22ff      	movs	r2, #255	@ 0xff
 8011730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d114      	bne.n	8011764 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d01a      	beq.n	8011778 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	3310      	adds	r3, #16
 8011746:	4618      	mov	r0, r3
 8011748:	f001 f9b8 	bl	8012abc <xTaskRemoveFromEventList>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d012      	beq.n	8011778 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011752:	4b0d      	ldr	r3, [pc, #52]	@ (8011788 <xQueueGenericReset+0xd4>)
 8011754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	e009      	b.n	8011778 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	3310      	adds	r3, #16
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff feef 	bl	801154c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	3324      	adds	r3, #36	@ 0x24
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff feea 	bl	801154c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011778:	f001 fdbe 	bl	80132f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801177c:	2301      	movs	r3, #1
}
 801177e:	4618      	mov	r0, r3
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	e000ed04 	.word	0xe000ed04

0801178c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801178c:	b580      	push	{r7, lr}
 801178e:	b08e      	sub	sp, #56	@ 0x38
 8011790:	af02      	add	r7, sp, #8
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]
 8011798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d10d      	bne.n	80117bc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80117a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117a4:	b672      	cpsid	i
 80117a6:	f383 8811 	msr	BASEPRI, r3
 80117aa:	f3bf 8f6f 	isb	sy
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	b662      	cpsie	i
 80117b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80117b6:	bf00      	nop
 80117b8:	bf00      	nop
 80117ba:	e7fd      	b.n	80117b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10d      	bne.n	80117de <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80117c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117c6:	b672      	cpsid	i
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	b662      	cpsie	i
 80117d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80117d8:	bf00      	nop
 80117da:	bf00      	nop
 80117dc:	e7fd      	b.n	80117da <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <xQueueGenericCreateStatic+0x5e>
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d001      	beq.n	80117ee <xQueueGenericCreateStatic+0x62>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <xQueueGenericCreateStatic+0x64>
 80117ee:	2300      	movs	r3, #0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10d      	bne.n	8011810 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f8:	b672      	cpsid	i
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	b662      	cpsie	i
 8011808:	623b      	str	r3, [r7, #32]
}
 801180a:	bf00      	nop
 801180c:	bf00      	nop
 801180e:	e7fd      	b.n	801180c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d102      	bne.n	801181c <xQueueGenericCreateStatic+0x90>
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d101      	bne.n	8011820 <xQueueGenericCreateStatic+0x94>
 801181c:	2301      	movs	r3, #1
 801181e:	e000      	b.n	8011822 <xQueueGenericCreateStatic+0x96>
 8011820:	2300      	movs	r3, #0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d10d      	bne.n	8011842 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8011826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801182a:	b672      	cpsid	i
 801182c:	f383 8811 	msr	BASEPRI, r3
 8011830:	f3bf 8f6f 	isb	sy
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	b662      	cpsie	i
 801183a:	61fb      	str	r3, [r7, #28]
}
 801183c:	bf00      	nop
 801183e:	bf00      	nop
 8011840:	e7fd      	b.n	801183e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011842:	2348      	movs	r3, #72	@ 0x48
 8011844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	2b48      	cmp	r3, #72	@ 0x48
 801184a:	d00d      	beq.n	8011868 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801184c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011850:	b672      	cpsid	i
 8011852:	f383 8811 	msr	BASEPRI, r3
 8011856:	f3bf 8f6f 	isb	sy
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	b662      	cpsie	i
 8011860:	61bb      	str	r3, [r7, #24]
}
 8011862:	bf00      	nop
 8011864:	bf00      	nop
 8011866:	e7fd      	b.n	8011864 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011868:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00d      	beq.n	8011890 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011876:	2201      	movs	r2, #1
 8011878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801187c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	4613      	mov	r3, r2
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	68b9      	ldr	r1, [r7, #8]
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f000 f848 	bl	8011920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011892:	4618      	mov	r0, r3
 8011894:	3730      	adds	r7, #48	@ 0x30
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801189a:	b580      	push	{r7, lr}
 801189c:	b08a      	sub	sp, #40	@ 0x28
 801189e:	af02      	add	r7, sp, #8
 80118a0:	60f8      	str	r0, [r7, #12]
 80118a2:	60b9      	str	r1, [r7, #8]
 80118a4:	4613      	mov	r3, r2
 80118a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10d      	bne.n	80118ca <xQueueGenericCreate+0x30>
	__asm volatile
 80118ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118b2:	b672      	cpsid	i
 80118b4:	f383 8811 	msr	BASEPRI, r3
 80118b8:	f3bf 8f6f 	isb	sy
 80118bc:	f3bf 8f4f 	dsb	sy
 80118c0:	b662      	cpsie	i
 80118c2:	613b      	str	r3, [r7, #16]
}
 80118c4:	bf00      	nop
 80118c6:	bf00      	nop
 80118c8:	e7fd      	b.n	80118c6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d102      	bne.n	80118d6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	61fb      	str	r3, [r7, #28]
 80118d4:	e004      	b.n	80118e0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	68ba      	ldr	r2, [r7, #8]
 80118da:	fb02 f303 	mul.w	r3, r2, r3
 80118de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	3348      	adds	r3, #72	@ 0x48
 80118e4:	4618      	mov	r0, r3
 80118e6:	f001 fdff 	bl	80134e8 <pvPortMalloc>
 80118ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d011      	beq.n	8011916 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	3348      	adds	r3, #72	@ 0x48
 80118fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011904:	79fa      	ldrb	r2, [r7, #7]
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4613      	mov	r3, r2
 801190c:	697a      	ldr	r2, [r7, #20]
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f000 f805 	bl	8011920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011916:	69bb      	ldr	r3, [r7, #24]
	}
 8011918:	4618      	mov	r0, r3
 801191a:	3720      	adds	r7, #32
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d103      	bne.n	801193c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	69ba      	ldr	r2, [r7, #24]
 8011938:	601a      	str	r2, [r3, #0]
 801193a:	e002      	b.n	8011942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	68ba      	ldr	r2, [r7, #8]
 801194c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801194e:	2101      	movs	r1, #1
 8011950:	69b8      	ldr	r0, [r7, #24]
 8011952:	f7ff feaf 	bl	80116b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011956:	bf00      	nop
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
	...

08011960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b08e      	sub	sp, #56	@ 0x38
 8011964:	af00      	add	r7, sp, #0
 8011966:	60f8      	str	r0, [r7, #12]
 8011968:	60b9      	str	r1, [r7, #8]
 801196a:	607a      	str	r2, [r7, #4]
 801196c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801196e:	2300      	movs	r3, #0
 8011970:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10d      	bne.n	8011998 <xQueueGenericSend+0x38>
	__asm volatile
 801197c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011980:	b672      	cpsid	i
 8011982:	f383 8811 	msr	BASEPRI, r3
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	b662      	cpsie	i
 8011990:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	e7fd      	b.n	8011994 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d103      	bne.n	80119a6 <xQueueGenericSend+0x46>
 801199e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d101      	bne.n	80119aa <xQueueGenericSend+0x4a>
 80119a6:	2301      	movs	r3, #1
 80119a8:	e000      	b.n	80119ac <xQueueGenericSend+0x4c>
 80119aa:	2300      	movs	r3, #0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10d      	bne.n	80119cc <xQueueGenericSend+0x6c>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b4:	b672      	cpsid	i
 80119b6:	f383 8811 	msr	BASEPRI, r3
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	f3bf 8f4f 	dsb	sy
 80119c2:	b662      	cpsie	i
 80119c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80119c6:	bf00      	nop
 80119c8:	bf00      	nop
 80119ca:	e7fd      	b.n	80119c8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	2b02      	cmp	r3, #2
 80119d0:	d103      	bne.n	80119da <xQueueGenericSend+0x7a>
 80119d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d101      	bne.n	80119de <xQueueGenericSend+0x7e>
 80119da:	2301      	movs	r3, #1
 80119dc:	e000      	b.n	80119e0 <xQueueGenericSend+0x80>
 80119de:	2300      	movs	r3, #0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10d      	bne.n	8011a00 <xQueueGenericSend+0xa0>
	__asm volatile
 80119e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e8:	b672      	cpsid	i
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	f3bf 8f6f 	isb	sy
 80119f2:	f3bf 8f4f 	dsb	sy
 80119f6:	b662      	cpsie	i
 80119f8:	623b      	str	r3, [r7, #32]
}
 80119fa:	bf00      	nop
 80119fc:	bf00      	nop
 80119fe:	e7fd      	b.n	80119fc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a00:	f001 fa26 	bl	8012e50 <xTaskGetSchedulerState>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d102      	bne.n	8011a10 <xQueueGenericSend+0xb0>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d101      	bne.n	8011a14 <xQueueGenericSend+0xb4>
 8011a10:	2301      	movs	r3, #1
 8011a12:	e000      	b.n	8011a16 <xQueueGenericSend+0xb6>
 8011a14:	2300      	movs	r3, #0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d10d      	bne.n	8011a36 <xQueueGenericSend+0xd6>
	__asm volatile
 8011a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a1e:	b672      	cpsid	i
 8011a20:	f383 8811 	msr	BASEPRI, r3
 8011a24:	f3bf 8f6f 	isb	sy
 8011a28:	f3bf 8f4f 	dsb	sy
 8011a2c:	b662      	cpsie	i
 8011a2e:	61fb      	str	r3, [r7, #28]
}
 8011a30:	bf00      	nop
 8011a32:	bf00      	nop
 8011a34:	e7fd      	b.n	8011a32 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a36:	f001 fc29 	bl	801328c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d302      	bcc.n	8011a4c <xQueueGenericSend+0xec>
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d129      	bne.n	8011aa0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a4c:	683a      	ldr	r2, [r7, #0]
 8011a4e:	68b9      	ldr	r1, [r7, #8]
 8011a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a52:	f000 faa3 	bl	8011f9c <prvCopyDataToQueue>
 8011a56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d010      	beq.n	8011a82 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a62:	3324      	adds	r3, #36	@ 0x24
 8011a64:	4618      	mov	r0, r3
 8011a66:	f001 f829 	bl	8012abc <xTaskRemoveFromEventList>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d013      	beq.n	8011a98 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011a70:	4b3f      	ldr	r3, [pc, #252]	@ (8011b70 <xQueueGenericSend+0x210>)
 8011a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a76:	601a      	str	r2, [r3, #0]
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	e00a      	b.n	8011a98 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d007      	beq.n	8011a98 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a88:	4b39      	ldr	r3, [pc, #228]	@ (8011b70 <xQueueGenericSend+0x210>)
 8011a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a8e:	601a      	str	r2, [r3, #0]
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011a98:	f001 fc2e 	bl	80132f8 <vPortExitCritical>
				return pdPASS;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e063      	b.n	8011b68 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d103      	bne.n	8011aae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011aa6:	f001 fc27 	bl	80132f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e05c      	b.n	8011b68 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d106      	bne.n	8011ac2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ab4:	f107 0314 	add.w	r3, r7, #20
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f001 f865 	bl	8012b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ac2:	f001 fc19 	bl	80132f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ac6:	f000 fdc1 	bl	801264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011aca:	f001 fbdf 	bl	801328c <vPortEnterCritical>
 8011ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011ad4:	b25b      	sxtb	r3, r3
 8011ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ada:	d103      	bne.n	8011ae4 <xQueueGenericSend+0x184>
 8011adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011aea:	b25b      	sxtb	r3, r3
 8011aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011af0:	d103      	bne.n	8011afa <xQueueGenericSend+0x19a>
 8011af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af4:	2200      	movs	r2, #0
 8011af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011afa:	f001 fbfd 	bl	80132f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011afe:	1d3a      	adds	r2, r7, #4
 8011b00:	f107 0314 	add.w	r3, r7, #20
 8011b04:	4611      	mov	r1, r2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f001 f854 	bl	8012bb4 <xTaskCheckForTimeOut>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d124      	bne.n	8011b5c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b14:	f000 fb3a 	bl	801218c <prvIsQueueFull>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d018      	beq.n	8011b50 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b20:	3310      	adds	r3, #16
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	4611      	mov	r1, r2
 8011b26:	4618      	mov	r0, r3
 8011b28:	f000 ffa0 	bl	8012a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b2e:	f000 fac5 	bl	80120bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011b32:	f000 fd99 	bl	8012668 <xTaskResumeAll>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f47f af7c 	bne.w	8011a36 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011b70 <xQueueGenericSend+0x210>)
 8011b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	f3bf 8f4f 	dsb	sy
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	e772      	b.n	8011a36 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b52:	f000 fab3 	bl	80120bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b56:	f000 fd87 	bl	8012668 <xTaskResumeAll>
 8011b5a:	e76c      	b.n	8011a36 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b5e:	f000 faad 	bl	80120bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b62:	f000 fd81 	bl	8012668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011b66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3738      	adds	r7, #56	@ 0x38
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	e000ed04 	.word	0xe000ed04

08011b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b08e      	sub	sp, #56	@ 0x38
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10d      	bne.n	8011ba8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b90:	b672      	cpsid	i
 8011b92:	f383 8811 	msr	BASEPRI, r3
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	f3bf 8f4f 	dsb	sy
 8011b9e:	b662      	cpsie	i
 8011ba0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011ba2:	bf00      	nop
 8011ba4:	bf00      	nop
 8011ba6:	e7fd      	b.n	8011ba4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d103      	bne.n	8011bb6 <xQueueGenericSendFromISR+0x42>
 8011bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d101      	bne.n	8011bba <xQueueGenericSendFromISR+0x46>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e000      	b.n	8011bbc <xQueueGenericSendFromISR+0x48>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d10d      	bne.n	8011bdc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc4:	b672      	cpsid	i
 8011bc6:	f383 8811 	msr	BASEPRI, r3
 8011bca:	f3bf 8f6f 	isb	sy
 8011bce:	f3bf 8f4f 	dsb	sy
 8011bd2:	b662      	cpsie	i
 8011bd4:	623b      	str	r3, [r7, #32]
}
 8011bd6:	bf00      	nop
 8011bd8:	bf00      	nop
 8011bda:	e7fd      	b.n	8011bd8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d103      	bne.n	8011bea <xQueueGenericSendFromISR+0x76>
 8011be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d101      	bne.n	8011bee <xQueueGenericSendFromISR+0x7a>
 8011bea:	2301      	movs	r3, #1
 8011bec:	e000      	b.n	8011bf0 <xQueueGenericSendFromISR+0x7c>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10d      	bne.n	8011c10 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf8:	b672      	cpsid	i
 8011bfa:	f383 8811 	msr	BASEPRI, r3
 8011bfe:	f3bf 8f6f 	isb	sy
 8011c02:	f3bf 8f4f 	dsb	sy
 8011c06:	b662      	cpsie	i
 8011c08:	61fb      	str	r3, [r7, #28]
}
 8011c0a:	bf00      	nop
 8011c0c:	bf00      	nop
 8011c0e:	e7fd      	b.n	8011c0c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c10:	f001 fc24 	bl	801345c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011c14:	f3ef 8211 	mrs	r2, BASEPRI
 8011c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c1c:	b672      	cpsid	i
 8011c1e:	f383 8811 	msr	BASEPRI, r3
 8011c22:	f3bf 8f6f 	isb	sy
 8011c26:	f3bf 8f4f 	dsb	sy
 8011c2a:	b662      	cpsie	i
 8011c2c:	61ba      	str	r2, [r7, #24]
 8011c2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011c30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d302      	bcc.n	8011c46 <xQueueGenericSendFromISR+0xd2>
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d12c      	bne.n	8011ca0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011c50:	683a      	ldr	r2, [r7, #0]
 8011c52:	68b9      	ldr	r1, [r7, #8]
 8011c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c56:	f000 f9a1 	bl	8011f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c62:	d112      	bne.n	8011c8a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d016      	beq.n	8011c9a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c6e:	3324      	adds	r3, #36	@ 0x24
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 ff23 	bl	8012abc <xTaskRemoveFromEventList>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00e      	beq.n	8011c9a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00b      	beq.n	8011c9a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2201      	movs	r2, #1
 8011c86:	601a      	str	r2, [r3, #0]
 8011c88:	e007      	b.n	8011c9a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011c8e:	3301      	adds	r3, #1
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	b25a      	sxtb	r2, r3
 8011c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8011c9e:	e001      	b.n	8011ca4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3738      	adds	r7, #56	@ 0x38
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
	...

08011cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08c      	sub	sp, #48	@ 0x30
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d10d      	bne.n	8011cf2 <xQueueReceive+0x36>
	__asm volatile
 8011cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cda:	b672      	cpsid	i
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	b662      	cpsie	i
 8011cea:	623b      	str	r3, [r7, #32]
}
 8011cec:	bf00      	nop
 8011cee:	bf00      	nop
 8011cf0:	e7fd      	b.n	8011cee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d103      	bne.n	8011d00 <xQueueReceive+0x44>
 8011cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d101      	bne.n	8011d04 <xQueueReceive+0x48>
 8011d00:	2301      	movs	r3, #1
 8011d02:	e000      	b.n	8011d06 <xQueueReceive+0x4a>
 8011d04:	2300      	movs	r3, #0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10d      	bne.n	8011d26 <xQueueReceive+0x6a>
	__asm volatile
 8011d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0e:	b672      	cpsid	i
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	b662      	cpsie	i
 8011d1e:	61fb      	str	r3, [r7, #28]
}
 8011d20:	bf00      	nop
 8011d22:	bf00      	nop
 8011d24:	e7fd      	b.n	8011d22 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d26:	f001 f893 	bl	8012e50 <xTaskGetSchedulerState>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d102      	bne.n	8011d36 <xQueueReceive+0x7a>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d101      	bne.n	8011d3a <xQueueReceive+0x7e>
 8011d36:	2301      	movs	r3, #1
 8011d38:	e000      	b.n	8011d3c <xQueueReceive+0x80>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10d      	bne.n	8011d5c <xQueueReceive+0xa0>
	__asm volatile
 8011d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d44:	b672      	cpsid	i
 8011d46:	f383 8811 	msr	BASEPRI, r3
 8011d4a:	f3bf 8f6f 	isb	sy
 8011d4e:	f3bf 8f4f 	dsb	sy
 8011d52:	b662      	cpsie	i
 8011d54:	61bb      	str	r3, [r7, #24]
}
 8011d56:	bf00      	nop
 8011d58:	bf00      	nop
 8011d5a:	e7fd      	b.n	8011d58 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d5c:	f001 fa96 	bl	801328c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d01f      	beq.n	8011dac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d6c:	68b9      	ldr	r1, [r7, #8]
 8011d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d70:	f000 f97e 	bl	8012070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d76:	1e5a      	subs	r2, r3, #1
 8011d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00f      	beq.n	8011da4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d86:	3310      	adds	r3, #16
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 fe97 	bl	8012abc <xTaskRemoveFromEventList>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d007      	beq.n	8011da4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d94:	4b3c      	ldr	r3, [pc, #240]	@ (8011e88 <xQueueReceive+0x1cc>)
 8011d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d9a:	601a      	str	r2, [r3, #0]
 8011d9c:	f3bf 8f4f 	dsb	sy
 8011da0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011da4:	f001 faa8 	bl	80132f8 <vPortExitCritical>
				return pdPASS;
 8011da8:	2301      	movs	r3, #1
 8011daa:	e069      	b.n	8011e80 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d103      	bne.n	8011dba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011db2:	f001 faa1 	bl	80132f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011db6:	2300      	movs	r3, #0
 8011db8:	e062      	b.n	8011e80 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d106      	bne.n	8011dce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011dc0:	f107 0310 	add.w	r3, r7, #16
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f000 fedf 	bl	8012b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011dce:	f001 fa93 	bl	80132f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dd2:	f000 fc3b 	bl	801264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011dd6:	f001 fa59 	bl	801328c <vPortEnterCritical>
 8011dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011de0:	b25b      	sxtb	r3, r3
 8011de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de6:	d103      	bne.n	8011df0 <xQueueReceive+0x134>
 8011de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011df6:	b25b      	sxtb	r3, r3
 8011df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfc:	d103      	bne.n	8011e06 <xQueueReceive+0x14a>
 8011dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e00:	2200      	movs	r2, #0
 8011e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011e06:	f001 fa77 	bl	80132f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e0a:	1d3a      	adds	r2, r7, #4
 8011e0c:	f107 0310 	add.w	r3, r7, #16
 8011e10:	4611      	mov	r1, r2
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 fece 	bl	8012bb4 <xTaskCheckForTimeOut>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d123      	bne.n	8011e66 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e20:	f000 f99e 	bl	8012160 <prvIsQueueEmpty>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d017      	beq.n	8011e5a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e2c:	3324      	adds	r3, #36	@ 0x24
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	4611      	mov	r1, r2
 8011e32:	4618      	mov	r0, r3
 8011e34:	f000 fe1a 	bl	8012a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e3a:	f000 f93f 	bl	80120bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e3e:	f000 fc13 	bl	8012668 <xTaskResumeAll>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d189      	bne.n	8011d5c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011e48:	4b0f      	ldr	r3, [pc, #60]	@ (8011e88 <xQueueReceive+0x1cc>)
 8011e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	f3bf 8f6f 	isb	sy
 8011e58:	e780      	b.n	8011d5c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e5c:	f000 f92e 	bl	80120bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e60:	f000 fc02 	bl	8012668 <xTaskResumeAll>
 8011e64:	e77a      	b.n	8011d5c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e68:	f000 f928 	bl	80120bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e6c:	f000 fbfc 	bl	8012668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e72:	f000 f975 	bl	8012160 <prvIsQueueEmpty>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f43f af6f 	beq.w	8011d5c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3730      	adds	r7, #48	@ 0x30
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	e000ed04 	.word	0xe000ed04

08011e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b08e      	sub	sp, #56	@ 0x38
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d10d      	bne.n	8011ebe <xQueueReceiveFromISR+0x32>
	__asm volatile
 8011ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea6:	b672      	cpsid	i
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	b662      	cpsie	i
 8011eb6:	623b      	str	r3, [r7, #32]
}
 8011eb8:	bf00      	nop
 8011eba:	bf00      	nop
 8011ebc:	e7fd      	b.n	8011eba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d103      	bne.n	8011ecc <xQueueReceiveFromISR+0x40>
 8011ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <xQueueReceiveFromISR+0x44>
 8011ecc:	2301      	movs	r3, #1
 8011ece:	e000      	b.n	8011ed2 <xQueueReceiveFromISR+0x46>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10d      	bne.n	8011ef2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8011ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eda:	b672      	cpsid	i
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	b662      	cpsie	i
 8011eea:	61fb      	str	r3, [r7, #28]
}
 8011eec:	bf00      	nop
 8011eee:	bf00      	nop
 8011ef0:	e7fd      	b.n	8011eee <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ef2:	f001 fab3 	bl	801345c <vPortValidateInterruptPriority>
	__asm volatile
 8011ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8011efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011efe:	b672      	cpsid	i
 8011f00:	f383 8811 	msr	BASEPRI, r3
 8011f04:	f3bf 8f6f 	isb	sy
 8011f08:	f3bf 8f4f 	dsb	sy
 8011f0c:	b662      	cpsie	i
 8011f0e:	61ba      	str	r2, [r7, #24]
 8011f10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011f12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d02f      	beq.n	8011f82 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f2c:	68b9      	ldr	r1, [r7, #8]
 8011f2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f30:	f000 f89e 	bl	8012070 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f36:	1e5a      	subs	r2, r3, #1
 8011f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f44:	d112      	bne.n	8011f6c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d016      	beq.n	8011f7c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f50:	3310      	adds	r3, #16
 8011f52:	4618      	mov	r0, r3
 8011f54:	f000 fdb2 	bl	8012abc <xTaskRemoveFromEventList>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00e      	beq.n	8011f7c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00b      	beq.n	8011f7c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2201      	movs	r2, #1
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	e007      	b.n	8011f7c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f70:	3301      	adds	r3, #1
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	b25a      	sxtb	r2, r3
 8011f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f80:	e001      	b.n	8011f86 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011f82:	2300      	movs	r3, #0
 8011f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	f383 8811 	msr	BASEPRI, r3
}
 8011f90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3738      	adds	r7, #56	@ 0x38
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d10d      	bne.n	8011fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d14d      	bne.n	801205e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	689b      	ldr	r3, [r3, #8]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f000 ff60 	bl	8012e8c <xTaskPriorityDisinherit>
 8011fcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	609a      	str	r2, [r3, #8]
 8011fd4:	e043      	b.n	801205e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d119      	bne.n	8012010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6858      	ldr	r0, [r3, #4]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	68b9      	ldr	r1, [r7, #8]
 8011fe8:	f002 f866 	bl	80140b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	685a      	ldr	r2, [r3, #4]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ff4:	441a      	add	r2, r3
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	685a      	ldr	r2, [r3, #4]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	429a      	cmp	r2, r3
 8012004:	d32b      	bcc.n	801205e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	605a      	str	r2, [r3, #4]
 801200e:	e026      	b.n	801205e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	68d8      	ldr	r0, [r3, #12]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012018:	461a      	mov	r2, r3
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	f002 f84c 	bl	80140b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	68da      	ldr	r2, [r3, #12]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012028:	425b      	negs	r3, r3
 801202a:	441a      	add	r2, r3
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	68da      	ldr	r2, [r3, #12]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	429a      	cmp	r2, r3
 801203a:	d207      	bcs.n	801204c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	689a      	ldr	r2, [r3, #8]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012044:	425b      	negs	r3, r3
 8012046:	441a      	add	r2, r3
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b02      	cmp	r3, #2
 8012050:	d105      	bne.n	801205e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d002      	beq.n	801205e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	3b01      	subs	r3, #1
 801205c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	1c5a      	adds	r2, r3, #1
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012066:	697b      	ldr	r3, [r7, #20]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801207e:	2b00      	cmp	r3, #0
 8012080:	d018      	beq.n	80120b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	68da      	ldr	r2, [r3, #12]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801208a:	441a      	add	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68da      	ldr	r2, [r3, #12]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	689b      	ldr	r3, [r3, #8]
 8012098:	429a      	cmp	r2, r3
 801209a:	d303      	bcc.n	80120a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	68d9      	ldr	r1, [r3, #12]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120ac:	461a      	mov	r2, r3
 80120ae:	6838      	ldr	r0, [r7, #0]
 80120b0:	f002 f802 	bl	80140b8 <memcpy>
	}
}
 80120b4:	bf00      	nop
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80120c4:	f001 f8e2 	bl	801328c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80120ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120d0:	e011      	b.n	80120f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d012      	beq.n	8012100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	3324      	adds	r3, #36	@ 0x24
 80120de:	4618      	mov	r0, r3
 80120e0:	f000 fcec 	bl	8012abc <xTaskRemoveFromEventList>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80120ea:	f000 fdcb 	bl	8012c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	dce9      	bgt.n	80120d2 <prvUnlockQueue+0x16>
 80120fe:	e000      	b.n	8012102 <prvUnlockQueue+0x46>
					break;
 8012100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	22ff      	movs	r2, #255	@ 0xff
 8012106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801210a:	f001 f8f5 	bl	80132f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801210e:	f001 f8bd 	bl	801328c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801211a:	e011      	b.n	8012140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	691b      	ldr	r3, [r3, #16]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d012      	beq.n	801214a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3310      	adds	r3, #16
 8012128:	4618      	mov	r0, r3
 801212a:	f000 fcc7 	bl	8012abc <xTaskRemoveFromEventList>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d001      	beq.n	8012138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012134:	f000 fda6 	bl	8012c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012138:	7bbb      	ldrb	r3, [r7, #14]
 801213a:	3b01      	subs	r3, #1
 801213c:	b2db      	uxtb	r3, r3
 801213e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012144:	2b00      	cmp	r3, #0
 8012146:	dce9      	bgt.n	801211c <prvUnlockQueue+0x60>
 8012148:	e000      	b.n	801214c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801214a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	22ff      	movs	r2, #255	@ 0xff
 8012150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012154:	f001 f8d0 	bl	80132f8 <vPortExitCritical>
}
 8012158:	bf00      	nop
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012168:	f001 f890 	bl	801328c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	60fb      	str	r3, [r7, #12]
 8012178:	e001      	b.n	801217e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801217e:	f001 f8bb 	bl	80132f8 <vPortExitCritical>

	return xReturn;
 8012182:	68fb      	ldr	r3, [r7, #12]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3710      	adds	r7, #16
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012194:	f001 f87a 	bl	801328c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d102      	bne.n	80121aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121a4:	2301      	movs	r3, #1
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	e001      	b.n	80121ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121aa:	2300      	movs	r3, #0
 80121ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121ae:	f001 f8a3 	bl	80132f8 <vPortExitCritical>

	return xReturn;
 80121b2:	68fb      	ldr	r3, [r7, #12]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b08e      	sub	sp, #56	@ 0x38
 80121c0:	af04      	add	r7, sp, #16
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	607a      	str	r2, [r7, #4]
 80121c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80121ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10d      	bne.n	80121ec <xTaskCreateStatic+0x30>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d4:	b672      	cpsid	i
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	b662      	cpsie	i
 80121e4:	623b      	str	r3, [r7, #32]
}
 80121e6:	bf00      	nop
 80121e8:	bf00      	nop
 80121ea:	e7fd      	b.n	80121e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80121ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10d      	bne.n	801220e <xTaskCreateStatic+0x52>
	__asm volatile
 80121f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f6:	b672      	cpsid	i
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	b662      	cpsie	i
 8012206:	61fb      	str	r3, [r7, #28]
}
 8012208:	bf00      	nop
 801220a:	bf00      	nop
 801220c:	e7fd      	b.n	801220a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801220e:	2358      	movs	r3, #88	@ 0x58
 8012210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b58      	cmp	r3, #88	@ 0x58
 8012216:	d00d      	beq.n	8012234 <xTaskCreateStatic+0x78>
	__asm volatile
 8012218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801221c:	b672      	cpsid	i
 801221e:	f383 8811 	msr	BASEPRI, r3
 8012222:	f3bf 8f6f 	isb	sy
 8012226:	f3bf 8f4f 	dsb	sy
 801222a:	b662      	cpsie	i
 801222c:	61bb      	str	r3, [r7, #24]
}
 801222e:	bf00      	nop
 8012230:	bf00      	nop
 8012232:	e7fd      	b.n	8012230 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012238:	2b00      	cmp	r3, #0
 801223a:	d01e      	beq.n	801227a <xTaskCreateStatic+0xbe>
 801223c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01b      	beq.n	801227a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012244:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801224a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224e:	2202      	movs	r2, #2
 8012250:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012254:	2300      	movs	r3, #0
 8012256:	9303      	str	r3, [sp, #12]
 8012258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801225a:	9302      	str	r3, [sp, #8]
 801225c:	f107 0314 	add.w	r3, r7, #20
 8012260:	9301      	str	r3, [sp, #4]
 8012262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	68b9      	ldr	r1, [r7, #8]
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f000 f850 	bl	8012312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012274:	f000 f8e2 	bl	801243c <prvAddNewTaskToReadyList>
 8012278:	e001      	b.n	801227e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801227a:	2300      	movs	r3, #0
 801227c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801227e:	697b      	ldr	r3, [r7, #20]
	}
 8012280:	4618      	mov	r0, r3
 8012282:	3728      	adds	r7, #40	@ 0x28
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012288:	b580      	push	{r7, lr}
 801228a:	b08c      	sub	sp, #48	@ 0x30
 801228c:	af04      	add	r7, sp, #16
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	4613      	mov	r3, r2
 8012296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012298:	88fb      	ldrh	r3, [r7, #6]
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4618      	mov	r0, r3
 801229e:	f001 f923 	bl	80134e8 <pvPortMalloc>
 80122a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00e      	beq.n	80122c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80122aa:	2058      	movs	r0, #88	@ 0x58
 80122ac:	f001 f91c 	bl	80134e8 <pvPortMalloc>
 80122b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d003      	beq.n	80122c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	697a      	ldr	r2, [r7, #20]
 80122bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80122be:	e005      	b.n	80122cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80122c0:	6978      	ldr	r0, [r7, #20]
 80122c2:	f001 f9e3 	bl	801368c <vPortFree>
 80122c6:	e001      	b.n	80122cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80122c8:	2300      	movs	r3, #0
 80122ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d017      	beq.n	8012302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	2200      	movs	r2, #0
 80122d6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80122da:	88fa      	ldrh	r2, [r7, #6]
 80122dc:	2300      	movs	r3, #0
 80122de:	9303      	str	r3, [sp, #12]
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	9302      	str	r3, [sp, #8]
 80122e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e6:	9301      	str	r3, [sp, #4]
 80122e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ea:	9300      	str	r3, [sp, #0]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	68b9      	ldr	r1, [r7, #8]
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	f000 f80e 	bl	8012312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122f6:	69f8      	ldr	r0, [r7, #28]
 80122f8:	f000 f8a0 	bl	801243c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80122fc:	2301      	movs	r3, #1
 80122fe:	61bb      	str	r3, [r7, #24]
 8012300:	e002      	b.n	8012308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012302:	f04f 33ff 	mov.w	r3, #4294967295
 8012306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012308:	69bb      	ldr	r3, [r7, #24]
	}
 801230a:	4618      	mov	r0, r3
 801230c:	3720      	adds	r7, #32
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012312:	b580      	push	{r7, lr}
 8012314:	b088      	sub	sp, #32
 8012316:	af00      	add	r7, sp, #0
 8012318:	60f8      	str	r0, [r7, #12]
 801231a:	60b9      	str	r1, [r7, #8]
 801231c:	607a      	str	r2, [r7, #4]
 801231e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012322:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	461a      	mov	r2, r3
 801232a:	21a5      	movs	r1, #165	@ 0xa5
 801232c:	f001 fe80 	bl	8014030 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012334:	6879      	ldr	r1, [r7, #4]
 8012336:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801233a:	440b      	add	r3, r1
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	f023 0307 	bic.w	r3, r3, #7
 8012348:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	f003 0307 	and.w	r3, r3, #7
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00d      	beq.n	8012370 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8012354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012358:	b672      	cpsid	i
 801235a:	f383 8811 	msr	BASEPRI, r3
 801235e:	f3bf 8f6f 	isb	sy
 8012362:	f3bf 8f4f 	dsb	sy
 8012366:	b662      	cpsie	i
 8012368:	617b      	str	r3, [r7, #20]
}
 801236a:	bf00      	nop
 801236c:	bf00      	nop
 801236e:	e7fd      	b.n	801236c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d01f      	beq.n	80123b6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012376:	2300      	movs	r3, #0
 8012378:	61fb      	str	r3, [r7, #28]
 801237a:	e012      	b.n	80123a2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	4413      	add	r3, r2
 8012382:	7819      	ldrb	r1, [r3, #0]
 8012384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	4413      	add	r3, r2
 801238a:	3334      	adds	r3, #52	@ 0x34
 801238c:	460a      	mov	r2, r1
 801238e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	4413      	add	r3, r2
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d006      	beq.n	80123aa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	3301      	adds	r3, #1
 80123a0:	61fb      	str	r3, [r7, #28]
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b0f      	cmp	r3, #15
 80123a6:	d9e9      	bls.n	801237c <prvInitialiseNewTask+0x6a>
 80123a8:	e000      	b.n	80123ac <prvInitialiseNewTask+0x9a>
			{
				break;
 80123aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80123ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80123b4:	e003      	b.n	80123be <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80123b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123b8:	2200      	movs	r2, #0
 80123ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80123be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c0:	2b06      	cmp	r3, #6
 80123c2:	d901      	bls.n	80123c8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80123c4:	2306      	movs	r3, #6
 80123c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80123c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80123ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80123d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d6:	2200      	movs	r2, #0
 80123d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80123da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123dc:	3304      	adds	r3, #4
 80123de:	4618      	mov	r0, r3
 80123e0:	f7ff f8d4 	bl	801158c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80123e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e6:	3318      	adds	r3, #24
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff f8cf 	bl	801158c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f6:	f1c3 0207 	rsb	r2, r3, #7
 80123fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80123fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012402:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012406:	2200      	movs	r2, #0
 8012408:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801240c:	2200      	movs	r2, #0
 801240e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012412:	2200      	movs	r2, #0
 8012414:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012418:	683a      	ldr	r2, [r7, #0]
 801241a:	68f9      	ldr	r1, [r7, #12]
 801241c:	69b8      	ldr	r0, [r7, #24]
 801241e:	f000 fe27 	bl	8013070 <pxPortInitialiseStack>
 8012422:	4602      	mov	r2, r0
 8012424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012426:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801242a:	2b00      	cmp	r3, #0
 801242c:	d002      	beq.n	8012434 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012432:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012434:	bf00      	nop
 8012436:	3720      	adds	r7, #32
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012444:	f000 ff22 	bl	801328c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012448:	4b2a      	ldr	r3, [pc, #168]	@ (80124f4 <prvAddNewTaskToReadyList+0xb8>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	3301      	adds	r3, #1
 801244e:	4a29      	ldr	r2, [pc, #164]	@ (80124f4 <prvAddNewTaskToReadyList+0xb8>)
 8012450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012452:	4b29      	ldr	r3, [pc, #164]	@ (80124f8 <prvAddNewTaskToReadyList+0xbc>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d109      	bne.n	801246e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801245a:	4a27      	ldr	r2, [pc, #156]	@ (80124f8 <prvAddNewTaskToReadyList+0xbc>)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012460:	4b24      	ldr	r3, [pc, #144]	@ (80124f4 <prvAddNewTaskToReadyList+0xb8>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d110      	bne.n	801248a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012468:	f000 fc32 	bl	8012cd0 <prvInitialiseTaskLists>
 801246c:	e00d      	b.n	801248a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801246e:	4b23      	ldr	r3, [pc, #140]	@ (80124fc <prvAddNewTaskToReadyList+0xc0>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d109      	bne.n	801248a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012476:	4b20      	ldr	r3, [pc, #128]	@ (80124f8 <prvAddNewTaskToReadyList+0xbc>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012480:	429a      	cmp	r2, r3
 8012482:	d802      	bhi.n	801248a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012484:	4a1c      	ldr	r2, [pc, #112]	@ (80124f8 <prvAddNewTaskToReadyList+0xbc>)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801248a:	4b1d      	ldr	r3, [pc, #116]	@ (8012500 <prvAddNewTaskToReadyList+0xc4>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3301      	adds	r3, #1
 8012490:	4a1b      	ldr	r2, [pc, #108]	@ (8012500 <prvAddNewTaskToReadyList+0xc4>)
 8012492:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012498:	2201      	movs	r2, #1
 801249a:	409a      	lsls	r2, r3
 801249c:	4b19      	ldr	r3, [pc, #100]	@ (8012504 <prvAddNewTaskToReadyList+0xc8>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4313      	orrs	r3, r2
 80124a2:	4a18      	ldr	r2, [pc, #96]	@ (8012504 <prvAddNewTaskToReadyList+0xc8>)
 80124a4:	6013      	str	r3, [r2, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124aa:	4613      	mov	r3, r2
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4413      	add	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4a15      	ldr	r2, [pc, #84]	@ (8012508 <prvAddNewTaskToReadyList+0xcc>)
 80124b4:	441a      	add	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	3304      	adds	r3, #4
 80124ba:	4619      	mov	r1, r3
 80124bc:	4610      	mov	r0, r2
 80124be:	f7ff f872 	bl	80115a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80124c2:	f000 ff19 	bl	80132f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80124c6:	4b0d      	ldr	r3, [pc, #52]	@ (80124fc <prvAddNewTaskToReadyList+0xc0>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00e      	beq.n	80124ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80124ce:	4b0a      	ldr	r3, [pc, #40]	@ (80124f8 <prvAddNewTaskToReadyList+0xbc>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124d8:	429a      	cmp	r2, r3
 80124da:	d207      	bcs.n	80124ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80124dc:	4b0b      	ldr	r3, [pc, #44]	@ (801250c <prvAddNewTaskToReadyList+0xd0>)
 80124de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124e2:	601a      	str	r2, [r3, #0]
 80124e4:	f3bf 8f4f 	dsb	sy
 80124e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124ec:	bf00      	nop
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	20000e38 	.word	0x20000e38
 80124f8:	20000d38 	.word	0x20000d38
 80124fc:	20000e44 	.word	0x20000e44
 8012500:	20000e54 	.word	0x20000e54
 8012504:	20000e40 	.word	0x20000e40
 8012508:	20000d3c 	.word	0x20000d3c
 801250c:	e000ed04 	.word	0xe000ed04

08012510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012518:	2300      	movs	r3, #0
 801251a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d01a      	beq.n	8012558 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012522:	4b15      	ldr	r3, [pc, #84]	@ (8012578 <vTaskDelay+0x68>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00d      	beq.n	8012546 <vTaskDelay+0x36>
	__asm volatile
 801252a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252e:	b672      	cpsid	i
 8012530:	f383 8811 	msr	BASEPRI, r3
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	b662      	cpsie	i
 801253e:	60bb      	str	r3, [r7, #8]
}
 8012540:	bf00      	nop
 8012542:	bf00      	nop
 8012544:	e7fd      	b.n	8012542 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012546:	f000 f881 	bl	801264c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801254a:	2100      	movs	r1, #0
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fd29 	bl	8012fa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012552:	f000 f889 	bl	8012668 <xTaskResumeAll>
 8012556:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d107      	bne.n	801256e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801255e:	4b07      	ldr	r3, [pc, #28]	@ (801257c <vTaskDelay+0x6c>)
 8012560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012564:	601a      	str	r2, [r3, #0]
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801256e:	bf00      	nop
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	20000e60 	.word	0x20000e60
 801257c:	e000ed04 	.word	0xe000ed04

08012580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	@ 0x28
 8012584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801258a:	2300      	movs	r3, #0
 801258c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801258e:	463a      	mov	r2, r7
 8012590:	1d39      	adds	r1, r7, #4
 8012592:	f107 0308 	add.w	r3, r7, #8
 8012596:	4618      	mov	r0, r3
 8012598:	f7ee fbba 	bl	8000d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	9202      	str	r2, [sp, #8]
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	2300      	movs	r3, #0
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	2300      	movs	r3, #0
 80125ac:	460a      	mov	r2, r1
 80125ae:	4921      	ldr	r1, [pc, #132]	@ (8012634 <vTaskStartScheduler+0xb4>)
 80125b0:	4821      	ldr	r0, [pc, #132]	@ (8012638 <vTaskStartScheduler+0xb8>)
 80125b2:	f7ff fe03 	bl	80121bc <xTaskCreateStatic>
 80125b6:	4603      	mov	r3, r0
 80125b8:	4a20      	ldr	r2, [pc, #128]	@ (801263c <vTaskStartScheduler+0xbc>)
 80125ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80125bc:	4b1f      	ldr	r3, [pc, #124]	@ (801263c <vTaskStartScheduler+0xbc>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80125c4:	2301      	movs	r3, #1
 80125c6:	617b      	str	r3, [r7, #20]
 80125c8:	e001      	b.n	80125ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d118      	bne.n	8012606 <vTaskStartScheduler+0x86>
	__asm volatile
 80125d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d8:	b672      	cpsid	i
 80125da:	f383 8811 	msr	BASEPRI, r3
 80125de:	f3bf 8f6f 	isb	sy
 80125e2:	f3bf 8f4f 	dsb	sy
 80125e6:	b662      	cpsie	i
 80125e8:	613b      	str	r3, [r7, #16]
}
 80125ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80125ec:	4b14      	ldr	r3, [pc, #80]	@ (8012640 <vTaskStartScheduler+0xc0>)
 80125ee:	f04f 32ff 	mov.w	r2, #4294967295
 80125f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80125f4:	4b13      	ldr	r3, [pc, #76]	@ (8012644 <vTaskStartScheduler+0xc4>)
 80125f6:	2201      	movs	r2, #1
 80125f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80125fa:	4b13      	ldr	r3, [pc, #76]	@ (8012648 <vTaskStartScheduler+0xc8>)
 80125fc:	2200      	movs	r2, #0
 80125fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012600:	f000 fdc6 	bl	8013190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012604:	e011      	b.n	801262a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260c:	d10d      	bne.n	801262a <vTaskStartScheduler+0xaa>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012612:	b672      	cpsid	i
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	b662      	cpsie	i
 8012622:	60fb      	str	r3, [r7, #12]
}
 8012624:	bf00      	nop
 8012626:	bf00      	nop
 8012628:	e7fd      	b.n	8012626 <vTaskStartScheduler+0xa6>
}
 801262a:	bf00      	nop
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	080141f4 	.word	0x080141f4
 8012638:	08012c9d 	.word	0x08012c9d
 801263c:	20000e5c 	.word	0x20000e5c
 8012640:	20000e58 	.word	0x20000e58
 8012644:	20000e44 	.word	0x20000e44
 8012648:	20000e3c 	.word	0x20000e3c

0801264c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801264c:	b480      	push	{r7}
 801264e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012650:	4b04      	ldr	r3, [pc, #16]	@ (8012664 <vTaskSuspendAll+0x18>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	3301      	adds	r3, #1
 8012656:	4a03      	ldr	r2, [pc, #12]	@ (8012664 <vTaskSuspendAll+0x18>)
 8012658:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	20000e60 	.word	0x20000e60

08012668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012672:	2300      	movs	r3, #0
 8012674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012676:	4b43      	ldr	r3, [pc, #268]	@ (8012784 <xTaskResumeAll+0x11c>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10d      	bne.n	801269a <xTaskResumeAll+0x32>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012682:	b672      	cpsid	i
 8012684:	f383 8811 	msr	BASEPRI, r3
 8012688:	f3bf 8f6f 	isb	sy
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	b662      	cpsie	i
 8012692:	603b      	str	r3, [r7, #0]
}
 8012694:	bf00      	nop
 8012696:	bf00      	nop
 8012698:	e7fd      	b.n	8012696 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801269a:	f000 fdf7 	bl	801328c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801269e:	4b39      	ldr	r3, [pc, #228]	@ (8012784 <xTaskResumeAll+0x11c>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	3b01      	subs	r3, #1
 80126a4:	4a37      	ldr	r2, [pc, #220]	@ (8012784 <xTaskResumeAll+0x11c>)
 80126a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126a8:	4b36      	ldr	r3, [pc, #216]	@ (8012784 <xTaskResumeAll+0x11c>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d161      	bne.n	8012774 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80126b0:	4b35      	ldr	r3, [pc, #212]	@ (8012788 <xTaskResumeAll+0x120>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d05d      	beq.n	8012774 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126b8:	e02e      	b.n	8012718 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126ba:	4b34      	ldr	r3, [pc, #208]	@ (801278c <xTaskResumeAll+0x124>)
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	3318      	adds	r3, #24
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fe ffca 	bl	8011660 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	3304      	adds	r3, #4
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fe ffc5 	bl	8011660 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126da:	2201      	movs	r2, #1
 80126dc:	409a      	lsls	r2, r3
 80126de:	4b2c      	ldr	r3, [pc, #176]	@ (8012790 <xTaskResumeAll+0x128>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4313      	orrs	r3, r2
 80126e4:	4a2a      	ldr	r2, [pc, #168]	@ (8012790 <xTaskResumeAll+0x128>)
 80126e6:	6013      	str	r3, [r2, #0]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126ec:	4613      	mov	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4413      	add	r3, r2
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	4a27      	ldr	r2, [pc, #156]	@ (8012794 <xTaskResumeAll+0x12c>)
 80126f6:	441a      	add	r2, r3
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	3304      	adds	r3, #4
 80126fc:	4619      	mov	r1, r3
 80126fe:	4610      	mov	r0, r2
 8012700:	f7fe ff51 	bl	80115a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012708:	4b23      	ldr	r3, [pc, #140]	@ (8012798 <xTaskResumeAll+0x130>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270e:	429a      	cmp	r2, r3
 8012710:	d302      	bcc.n	8012718 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012712:	4b22      	ldr	r3, [pc, #136]	@ (801279c <xTaskResumeAll+0x134>)
 8012714:	2201      	movs	r2, #1
 8012716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012718:	4b1c      	ldr	r3, [pc, #112]	@ (801278c <xTaskResumeAll+0x124>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d1cc      	bne.n	80126ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d001      	beq.n	801272a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012726:	f000 fb73 	bl	8012e10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801272a:	4b1d      	ldr	r3, [pc, #116]	@ (80127a0 <xTaskResumeAll+0x138>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d010      	beq.n	8012758 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012736:	f000 f859 	bl	80127ec <xTaskIncrementTick>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012740:	4b16      	ldr	r3, [pc, #88]	@ (801279c <xTaskResumeAll+0x134>)
 8012742:	2201      	movs	r2, #1
 8012744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	3b01      	subs	r3, #1
 801274a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d1f1      	bne.n	8012736 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012752:	4b13      	ldr	r3, [pc, #76]	@ (80127a0 <xTaskResumeAll+0x138>)
 8012754:	2200      	movs	r2, #0
 8012756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012758:	4b10      	ldr	r3, [pc, #64]	@ (801279c <xTaskResumeAll+0x134>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d009      	beq.n	8012774 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012760:	2301      	movs	r3, #1
 8012762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012764:	4b0f      	ldr	r3, [pc, #60]	@ (80127a4 <xTaskResumeAll+0x13c>)
 8012766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801276a:	601a      	str	r2, [r3, #0]
 801276c:	f3bf 8f4f 	dsb	sy
 8012770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012774:	f000 fdc0 	bl	80132f8 <vPortExitCritical>

	return xAlreadyYielded;
 8012778:	68bb      	ldr	r3, [r7, #8]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20000e60 	.word	0x20000e60
 8012788:	20000e38 	.word	0x20000e38
 801278c:	20000df8 	.word	0x20000df8
 8012790:	20000e40 	.word	0x20000e40
 8012794:	20000d3c 	.word	0x20000d3c
 8012798:	20000d38 	.word	0x20000d38
 801279c:	20000e4c 	.word	0x20000e4c
 80127a0:	20000e48 	.word	0x20000e48
 80127a4:	e000ed04 	.word	0xe000ed04

080127a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80127ae:	4b05      	ldr	r3, [pc, #20]	@ (80127c4 <xTaskGetTickCount+0x1c>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80127b4:	687b      	ldr	r3, [r7, #4]
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	370c      	adds	r7, #12
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	20000e3c 	.word	0x20000e3c

080127c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127ce:	f000 fe45 	bl	801345c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80127d2:	2300      	movs	r3, #0
 80127d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80127d6:	4b04      	ldr	r3, [pc, #16]	@ (80127e8 <xTaskGetTickCountFromISR+0x20>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80127dc:	683b      	ldr	r3, [r7, #0]
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	20000e3c 	.word	0x20000e3c

080127ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b086      	sub	sp, #24
 80127f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80127f2:	2300      	movs	r3, #0
 80127f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127f6:	4b50      	ldr	r3, [pc, #320]	@ (8012938 <xTaskIncrementTick+0x14c>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f040 808b 	bne.w	8012916 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012800:	4b4e      	ldr	r3, [pc, #312]	@ (801293c <xTaskIncrementTick+0x150>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	3301      	adds	r3, #1
 8012806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012808:	4a4c      	ldr	r2, [pc, #304]	@ (801293c <xTaskIncrementTick+0x150>)
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d123      	bne.n	801285c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012814:	4b4a      	ldr	r3, [pc, #296]	@ (8012940 <xTaskIncrementTick+0x154>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d00d      	beq.n	801283a <xTaskIncrementTick+0x4e>
	__asm volatile
 801281e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012822:	b672      	cpsid	i
 8012824:	f383 8811 	msr	BASEPRI, r3
 8012828:	f3bf 8f6f 	isb	sy
 801282c:	f3bf 8f4f 	dsb	sy
 8012830:	b662      	cpsie	i
 8012832:	603b      	str	r3, [r7, #0]
}
 8012834:	bf00      	nop
 8012836:	bf00      	nop
 8012838:	e7fd      	b.n	8012836 <xTaskIncrementTick+0x4a>
 801283a:	4b41      	ldr	r3, [pc, #260]	@ (8012940 <xTaskIncrementTick+0x154>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
 8012840:	4b40      	ldr	r3, [pc, #256]	@ (8012944 <xTaskIncrementTick+0x158>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a3e      	ldr	r2, [pc, #248]	@ (8012940 <xTaskIncrementTick+0x154>)
 8012846:	6013      	str	r3, [r2, #0]
 8012848:	4a3e      	ldr	r2, [pc, #248]	@ (8012944 <xTaskIncrementTick+0x158>)
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6013      	str	r3, [r2, #0]
 801284e:	4b3e      	ldr	r3, [pc, #248]	@ (8012948 <xTaskIncrementTick+0x15c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3301      	adds	r3, #1
 8012854:	4a3c      	ldr	r2, [pc, #240]	@ (8012948 <xTaskIncrementTick+0x15c>)
 8012856:	6013      	str	r3, [r2, #0]
 8012858:	f000 fada 	bl	8012e10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801285c:	4b3b      	ldr	r3, [pc, #236]	@ (801294c <xTaskIncrementTick+0x160>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	693a      	ldr	r2, [r7, #16]
 8012862:	429a      	cmp	r2, r3
 8012864:	d348      	bcc.n	80128f8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012866:	4b36      	ldr	r3, [pc, #216]	@ (8012940 <xTaskIncrementTick+0x154>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d104      	bne.n	801287a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012870:	4b36      	ldr	r3, [pc, #216]	@ (801294c <xTaskIncrementTick+0x160>)
 8012872:	f04f 32ff 	mov.w	r2, #4294967295
 8012876:	601a      	str	r2, [r3, #0]
					break;
 8012878:	e03e      	b.n	80128f8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801287a:	4b31      	ldr	r3, [pc, #196]	@ (8012940 <xTaskIncrementTick+0x154>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801288a:	693a      	ldr	r2, [r7, #16]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	429a      	cmp	r2, r3
 8012890:	d203      	bcs.n	801289a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012892:	4a2e      	ldr	r2, [pc, #184]	@ (801294c <xTaskIncrementTick+0x160>)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012898:	e02e      	b.n	80128f8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	3304      	adds	r3, #4
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fe fede 	bl	8011660 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d004      	beq.n	80128b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	3318      	adds	r3, #24
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fe fed5 	bl	8011660 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ba:	2201      	movs	r2, #1
 80128bc:	409a      	lsls	r2, r3
 80128be:	4b24      	ldr	r3, [pc, #144]	@ (8012950 <xTaskIncrementTick+0x164>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	4a22      	ldr	r2, [pc, #136]	@ (8012950 <xTaskIncrementTick+0x164>)
 80128c6:	6013      	str	r3, [r2, #0]
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128cc:	4613      	mov	r3, r2
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	4413      	add	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4a1f      	ldr	r2, [pc, #124]	@ (8012954 <xTaskIncrementTick+0x168>)
 80128d6:	441a      	add	r2, r3
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	3304      	adds	r3, #4
 80128dc:	4619      	mov	r1, r3
 80128de:	4610      	mov	r0, r2
 80128e0:	f7fe fe61 	bl	80115a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128e8:	4b1b      	ldr	r3, [pc, #108]	@ (8012958 <xTaskIncrementTick+0x16c>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d3b9      	bcc.n	8012866 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80128f2:	2301      	movs	r3, #1
 80128f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128f6:	e7b6      	b.n	8012866 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80128f8:	4b17      	ldr	r3, [pc, #92]	@ (8012958 <xTaskIncrementTick+0x16c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128fe:	4915      	ldr	r1, [pc, #84]	@ (8012954 <xTaskIncrementTick+0x168>)
 8012900:	4613      	mov	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	440b      	add	r3, r1
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d907      	bls.n	8012920 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012910:	2301      	movs	r3, #1
 8012912:	617b      	str	r3, [r7, #20]
 8012914:	e004      	b.n	8012920 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012916:	4b11      	ldr	r3, [pc, #68]	@ (801295c <xTaskIncrementTick+0x170>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3301      	adds	r3, #1
 801291c:	4a0f      	ldr	r2, [pc, #60]	@ (801295c <xTaskIncrementTick+0x170>)
 801291e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012920:	4b0f      	ldr	r3, [pc, #60]	@ (8012960 <xTaskIncrementTick+0x174>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d001      	beq.n	801292c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012928:	2301      	movs	r3, #1
 801292a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801292c:	697b      	ldr	r3, [r7, #20]
}
 801292e:	4618      	mov	r0, r3
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	20000e60 	.word	0x20000e60
 801293c:	20000e3c 	.word	0x20000e3c
 8012940:	20000df0 	.word	0x20000df0
 8012944:	20000df4 	.word	0x20000df4
 8012948:	20000e50 	.word	0x20000e50
 801294c:	20000e58 	.word	0x20000e58
 8012950:	20000e40 	.word	0x20000e40
 8012954:	20000d3c 	.word	0x20000d3c
 8012958:	20000d38 	.word	0x20000d38
 801295c:	20000e48 	.word	0x20000e48
 8012960:	20000e4c 	.word	0x20000e4c

08012964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801296a:	4b3b      	ldr	r3, [pc, #236]	@ (8012a58 <vTaskSwitchContext+0xf4>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012972:	4b3a      	ldr	r3, [pc, #232]	@ (8012a5c <vTaskSwitchContext+0xf8>)
 8012974:	2201      	movs	r2, #1
 8012976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012978:	e069      	b.n	8012a4e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801297a:	4b38      	ldr	r3, [pc, #224]	@ (8012a5c <vTaskSwitchContext+0xf8>)
 801297c:	2200      	movs	r2, #0
 801297e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012980:	4b37      	ldr	r3, [pc, #220]	@ (8012a60 <vTaskSwitchContext+0xfc>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012986:	61fb      	str	r3, [r7, #28]
 8012988:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801298c:	61bb      	str	r3, [r7, #24]
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	69ba      	ldr	r2, [r7, #24]
 8012994:	429a      	cmp	r2, r3
 8012996:	d111      	bne.n	80129bc <vTaskSwitchContext+0x58>
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	3304      	adds	r3, #4
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	69ba      	ldr	r2, [r7, #24]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d10b      	bne.n	80129bc <vTaskSwitchContext+0x58>
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	3308      	adds	r3, #8
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	69ba      	ldr	r2, [r7, #24]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d105      	bne.n	80129bc <vTaskSwitchContext+0x58>
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	330c      	adds	r3, #12
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	69ba      	ldr	r2, [r7, #24]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d008      	beq.n	80129ce <vTaskSwitchContext+0x6a>
 80129bc:	4b28      	ldr	r3, [pc, #160]	@ (8012a60 <vTaskSwitchContext+0xfc>)
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	4b27      	ldr	r3, [pc, #156]	@ (8012a60 <vTaskSwitchContext+0xfc>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	3334      	adds	r3, #52	@ 0x34
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7ee f98e 	bl	8000cea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ce:	4b25      	ldr	r3, [pc, #148]	@ (8012a64 <vTaskSwitchContext+0x100>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	fab3 f383 	clz	r3, r3
 80129da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80129dc:	7afb      	ldrb	r3, [r7, #11]
 80129de:	f1c3 031f 	rsb	r3, r3, #31
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	4920      	ldr	r1, [pc, #128]	@ (8012a68 <vTaskSwitchContext+0x104>)
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	4613      	mov	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	440b      	add	r3, r1
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10d      	bne.n	8012a14 <vTaskSwitchContext+0xb0>
	__asm volatile
 80129f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129fc:	b672      	cpsid	i
 80129fe:	f383 8811 	msr	BASEPRI, r3
 8012a02:	f3bf 8f6f 	isb	sy
 8012a06:	f3bf 8f4f 	dsb	sy
 8012a0a:	b662      	cpsie	i
 8012a0c:	607b      	str	r3, [r7, #4]
}
 8012a0e:	bf00      	nop
 8012a10:	bf00      	nop
 8012a12:	e7fd      	b.n	8012a10 <vTaskSwitchContext+0xac>
 8012a14:	697a      	ldr	r2, [r7, #20]
 8012a16:	4613      	mov	r3, r2
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4a12      	ldr	r2, [pc, #72]	@ (8012a68 <vTaskSwitchContext+0x104>)
 8012a20:	4413      	add	r3, r2
 8012a22:	613b      	str	r3, [r7, #16]
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	685a      	ldr	r2, [r3, #4]
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	605a      	str	r2, [r3, #4]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	3308      	adds	r3, #8
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d104      	bne.n	8012a44 <vTaskSwitchContext+0xe0>
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	685a      	ldr	r2, [r3, #4]
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	605a      	str	r2, [r3, #4]
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	4a05      	ldr	r2, [pc, #20]	@ (8012a60 <vTaskSwitchContext+0xfc>)
 8012a4c:	6013      	str	r3, [r2, #0]
}
 8012a4e:	bf00      	nop
 8012a50:	3720      	adds	r7, #32
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	20000e60 	.word	0x20000e60
 8012a5c:	20000e4c 	.word	0x20000e4c
 8012a60:	20000d38 	.word	0x20000d38
 8012a64:	20000e40 	.word	0x20000e40
 8012a68:	20000d3c 	.word	0x20000d3c

08012a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d10d      	bne.n	8012a98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a80:	b672      	cpsid	i
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	b662      	cpsie	i
 8012a90:	60fb      	str	r3, [r7, #12]
}
 8012a92:	bf00      	nop
 8012a94:	bf00      	nop
 8012a96:	e7fd      	b.n	8012a94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a98:	4b07      	ldr	r3, [pc, #28]	@ (8012ab8 <vTaskPlaceOnEventList+0x4c>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3318      	adds	r3, #24
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f7fe fda4 	bl	80115ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012aa6:	2101      	movs	r1, #1
 8012aa8:	6838      	ldr	r0, [r7, #0]
 8012aaa:	f000 fa7b 	bl	8012fa4 <prvAddCurrentTaskToDelayedList>
}
 8012aae:	bf00      	nop
 8012ab0:	3710      	adds	r7, #16
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	20000d38 	.word	0x20000d38

08012abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b086      	sub	sp, #24
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d10d      	bne.n	8012aee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8012ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ad6:	b672      	cpsid	i
 8012ad8:	f383 8811 	msr	BASEPRI, r3
 8012adc:	f3bf 8f6f 	isb	sy
 8012ae0:	f3bf 8f4f 	dsb	sy
 8012ae4:	b662      	cpsie	i
 8012ae6:	60fb      	str	r3, [r7, #12]
}
 8012ae8:	bf00      	nop
 8012aea:	bf00      	nop
 8012aec:	e7fd      	b.n	8012aea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	3318      	adds	r3, #24
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe fdb4 	bl	8011660 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012af8:	4b1d      	ldr	r3, [pc, #116]	@ (8012b70 <xTaskRemoveFromEventList+0xb4>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d11c      	bne.n	8012b3a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	3304      	adds	r3, #4
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe fdab 	bl	8011660 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b0e:	2201      	movs	r2, #1
 8012b10:	409a      	lsls	r2, r3
 8012b12:	4b18      	ldr	r3, [pc, #96]	@ (8012b74 <xTaskRemoveFromEventList+0xb8>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4313      	orrs	r3, r2
 8012b18:	4a16      	ldr	r2, [pc, #88]	@ (8012b74 <xTaskRemoveFromEventList+0xb8>)
 8012b1a:	6013      	str	r3, [r2, #0]
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b20:	4613      	mov	r3, r2
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	4413      	add	r3, r2
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	4a13      	ldr	r2, [pc, #76]	@ (8012b78 <xTaskRemoveFromEventList+0xbc>)
 8012b2a:	441a      	add	r2, r3
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	3304      	adds	r3, #4
 8012b30:	4619      	mov	r1, r3
 8012b32:	4610      	mov	r0, r2
 8012b34:	f7fe fd37 	bl	80115a6 <vListInsertEnd>
 8012b38:	e005      	b.n	8012b46 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	3318      	adds	r3, #24
 8012b3e:	4619      	mov	r1, r3
 8012b40:	480e      	ldr	r0, [pc, #56]	@ (8012b7c <xTaskRemoveFromEventList+0xc0>)
 8012b42:	f7fe fd30 	bl	80115a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b80 <xTaskRemoveFromEventList+0xc4>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d905      	bls.n	8012b60 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012b54:	2301      	movs	r3, #1
 8012b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012b58:	4b0a      	ldr	r3, [pc, #40]	@ (8012b84 <xTaskRemoveFromEventList+0xc8>)
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	e001      	b.n	8012b64 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012b60:	2300      	movs	r3, #0
 8012b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012b64:	697b      	ldr	r3, [r7, #20]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	20000e60 	.word	0x20000e60
 8012b74:	20000e40 	.word	0x20000e40
 8012b78:	20000d3c 	.word	0x20000d3c
 8012b7c:	20000df8 	.word	0x20000df8
 8012b80:	20000d38 	.word	0x20000d38
 8012b84:	20000e4c 	.word	0x20000e4c

08012b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012b90:	4b06      	ldr	r3, [pc, #24]	@ (8012bac <vTaskInternalSetTimeOutState+0x24>)
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012b98:	4b05      	ldr	r3, [pc, #20]	@ (8012bb0 <vTaskInternalSetTimeOutState+0x28>)
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	605a      	str	r2, [r3, #4]
}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr
 8012bac:	20000e50 	.word	0x20000e50
 8012bb0:	20000e3c 	.word	0x20000e3c

08012bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b088      	sub	sp, #32
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10d      	bne.n	8012be0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bc8:	b672      	cpsid	i
 8012bca:	f383 8811 	msr	BASEPRI, r3
 8012bce:	f3bf 8f6f 	isb	sy
 8012bd2:	f3bf 8f4f 	dsb	sy
 8012bd6:	b662      	cpsie	i
 8012bd8:	613b      	str	r3, [r7, #16]
}
 8012bda:	bf00      	nop
 8012bdc:	bf00      	nop
 8012bde:	e7fd      	b.n	8012bdc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d10d      	bne.n	8012c02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bea:	b672      	cpsid	i
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	b662      	cpsie	i
 8012bfa:	60fb      	str	r3, [r7, #12]
}
 8012bfc:	bf00      	nop
 8012bfe:	bf00      	nop
 8012c00:	e7fd      	b.n	8012bfe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8012c02:	f000 fb43 	bl	801328c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012c06:	4b1d      	ldr	r3, [pc, #116]	@ (8012c7c <xTaskCheckForTimeOut+0xc8>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	69ba      	ldr	r2, [r7, #24]
 8012c12:	1ad3      	subs	r3, r2, r3
 8012c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c1e:	d102      	bne.n	8012c26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012c20:	2300      	movs	r3, #0
 8012c22:	61fb      	str	r3, [r7, #28]
 8012c24:	e023      	b.n	8012c6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	4b15      	ldr	r3, [pc, #84]	@ (8012c80 <xTaskCheckForTimeOut+0xcc>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d007      	beq.n	8012c42 <xTaskCheckForTimeOut+0x8e>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	69ba      	ldr	r2, [r7, #24]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d302      	bcc.n	8012c42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	61fb      	str	r3, [r7, #28]
 8012c40:	e015      	b.n	8012c6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d20b      	bcs.n	8012c64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	1ad2      	subs	r2, r2, r3
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7ff ff95 	bl	8012b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	61fb      	str	r3, [r7, #28]
 8012c62:	e004      	b.n	8012c6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2200      	movs	r2, #0
 8012c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c6e:	f000 fb43 	bl	80132f8 <vPortExitCritical>

	return xReturn;
 8012c72:	69fb      	ldr	r3, [r7, #28]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3720      	adds	r7, #32
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	20000e3c 	.word	0x20000e3c
 8012c80:	20000e50 	.word	0x20000e50

08012c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c84:	b480      	push	{r7}
 8012c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c88:	4b03      	ldr	r3, [pc, #12]	@ (8012c98 <vTaskMissedYield+0x14>)
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	601a      	str	r2, [r3, #0]
}
 8012c8e:	bf00      	nop
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	20000e4c 	.word	0x20000e4c

08012c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ca4:	f000 f854 	bl	8012d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ca8:	4b07      	ldr	r3, [pc, #28]	@ (8012cc8 <prvIdleTask+0x2c>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	d907      	bls.n	8012cc0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012cb0:	4b06      	ldr	r3, [pc, #24]	@ (8012ccc <prvIdleTask+0x30>)
 8012cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cb6:	601a      	str	r2, [r3, #0]
 8012cb8:	f3bf 8f4f 	dsb	sy
 8012cbc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012cc0:	f7ee f80c 	bl	8000cdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012cc4:	e7ee      	b.n	8012ca4 <prvIdleTask+0x8>
 8012cc6:	bf00      	nop
 8012cc8:	20000d3c 	.word	0x20000d3c
 8012ccc:	e000ed04 	.word	0xe000ed04

08012cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	607b      	str	r3, [r7, #4]
 8012cda:	e00c      	b.n	8012cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4a12      	ldr	r2, [pc, #72]	@ (8012d30 <prvInitialiseTaskLists+0x60>)
 8012ce8:	4413      	add	r3, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe fc2e 	bl	801154c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	607b      	str	r3, [r7, #4]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2b06      	cmp	r3, #6
 8012cfa:	d9ef      	bls.n	8012cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012cfc:	480d      	ldr	r0, [pc, #52]	@ (8012d34 <prvInitialiseTaskLists+0x64>)
 8012cfe:	f7fe fc25 	bl	801154c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012d02:	480d      	ldr	r0, [pc, #52]	@ (8012d38 <prvInitialiseTaskLists+0x68>)
 8012d04:	f7fe fc22 	bl	801154c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012d08:	480c      	ldr	r0, [pc, #48]	@ (8012d3c <prvInitialiseTaskLists+0x6c>)
 8012d0a:	f7fe fc1f 	bl	801154c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012d0e:	480c      	ldr	r0, [pc, #48]	@ (8012d40 <prvInitialiseTaskLists+0x70>)
 8012d10:	f7fe fc1c 	bl	801154c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012d14:	480b      	ldr	r0, [pc, #44]	@ (8012d44 <prvInitialiseTaskLists+0x74>)
 8012d16:	f7fe fc19 	bl	801154c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8012d48 <prvInitialiseTaskLists+0x78>)
 8012d1c:	4a05      	ldr	r2, [pc, #20]	@ (8012d34 <prvInitialiseTaskLists+0x64>)
 8012d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012d20:	4b0a      	ldr	r3, [pc, #40]	@ (8012d4c <prvInitialiseTaskLists+0x7c>)
 8012d22:	4a05      	ldr	r2, [pc, #20]	@ (8012d38 <prvInitialiseTaskLists+0x68>)
 8012d24:	601a      	str	r2, [r3, #0]
}
 8012d26:	bf00      	nop
 8012d28:	3708      	adds	r7, #8
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	20000d3c 	.word	0x20000d3c
 8012d34:	20000dc8 	.word	0x20000dc8
 8012d38:	20000ddc 	.word	0x20000ddc
 8012d3c:	20000df8 	.word	0x20000df8
 8012d40:	20000e0c 	.word	0x20000e0c
 8012d44:	20000e24 	.word	0x20000e24
 8012d48:	20000df0 	.word	0x20000df0
 8012d4c:	20000df4 	.word	0x20000df4

08012d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d56:	e019      	b.n	8012d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012d58:	f000 fa98 	bl	801328c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d5c:	4b10      	ldr	r3, [pc, #64]	@ (8012da0 <prvCheckTasksWaitingTermination+0x50>)
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3304      	adds	r3, #4
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7fe fc79 	bl	8011660 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012da4 <prvCheckTasksWaitingTermination+0x54>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	3b01      	subs	r3, #1
 8012d74:	4a0b      	ldr	r2, [pc, #44]	@ (8012da4 <prvCheckTasksWaitingTermination+0x54>)
 8012d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012d78:	4b0b      	ldr	r3, [pc, #44]	@ (8012da8 <prvCheckTasksWaitingTermination+0x58>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8012da8 <prvCheckTasksWaitingTermination+0x58>)
 8012d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d82:	f000 fab9 	bl	80132f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f000 f810 	bl	8012dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d8c:	4b06      	ldr	r3, [pc, #24]	@ (8012da8 <prvCheckTasksWaitingTermination+0x58>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d1e1      	bne.n	8012d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012d94:	bf00      	nop
 8012d96:	bf00      	nop
 8012d98:	3708      	adds	r7, #8
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	20000e0c 	.word	0x20000e0c
 8012da4:	20000e38 	.word	0x20000e38
 8012da8:	20000e20 	.word	0x20000e20

08012dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d108      	bne.n	8012dd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f000 fc62 	bl	801368c <vPortFree>
				vPortFree( pxTCB );
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 fc5f 	bl	801368c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012dce:	e01b      	b.n	8012e08 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	d103      	bne.n	8012de2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 fc56 	bl	801368c <vPortFree>
	}
 8012de0:	e012      	b.n	8012e08 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d00d      	beq.n	8012e08 <prvDeleteTCB+0x5c>
	__asm volatile
 8012dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012df0:	b672      	cpsid	i
 8012df2:	f383 8811 	msr	BASEPRI, r3
 8012df6:	f3bf 8f6f 	isb	sy
 8012dfa:	f3bf 8f4f 	dsb	sy
 8012dfe:	b662      	cpsie	i
 8012e00:	60fb      	str	r3, [r7, #12]
}
 8012e02:	bf00      	nop
 8012e04:	bf00      	nop
 8012e06:	e7fd      	b.n	8012e04 <prvDeleteTCB+0x58>
	}
 8012e08:	bf00      	nop
 8012e0a:	3710      	adds	r7, #16
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e16:	4b0c      	ldr	r3, [pc, #48]	@ (8012e48 <prvResetNextTaskUnblockTime+0x38>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d104      	bne.n	8012e2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012e20:	4b0a      	ldr	r3, [pc, #40]	@ (8012e4c <prvResetNextTaskUnblockTime+0x3c>)
 8012e22:	f04f 32ff 	mov.w	r2, #4294967295
 8012e26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e28:	e008      	b.n	8012e3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e2a:	4b07      	ldr	r3, [pc, #28]	@ (8012e48 <prvResetNextTaskUnblockTime+0x38>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	4a04      	ldr	r2, [pc, #16]	@ (8012e4c <prvResetNextTaskUnblockTime+0x3c>)
 8012e3a:	6013      	str	r3, [r2, #0]
}
 8012e3c:	bf00      	nop
 8012e3e:	370c      	adds	r7, #12
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr
 8012e48:	20000df0 	.word	0x20000df0
 8012e4c:	20000e58 	.word	0x20000e58

08012e50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012e56:	4b0b      	ldr	r3, [pc, #44]	@ (8012e84 <xTaskGetSchedulerState+0x34>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d102      	bne.n	8012e64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	607b      	str	r3, [r7, #4]
 8012e62:	e008      	b.n	8012e76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e64:	4b08      	ldr	r3, [pc, #32]	@ (8012e88 <xTaskGetSchedulerState+0x38>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d102      	bne.n	8012e72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	607b      	str	r3, [r7, #4]
 8012e70:	e001      	b.n	8012e76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012e72:	2300      	movs	r3, #0
 8012e74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012e76:	687b      	ldr	r3, [r7, #4]
	}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr
 8012e84:	20000e44 	.word	0x20000e44
 8012e88:	20000e60 	.word	0x20000e60

08012e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b086      	sub	sp, #24
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d074      	beq.n	8012f8c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8012f98 <xTaskPriorityDisinherit+0x10c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	693a      	ldr	r2, [r7, #16]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d00d      	beq.n	8012ec8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eb0:	b672      	cpsid	i
 8012eb2:	f383 8811 	msr	BASEPRI, r3
 8012eb6:	f3bf 8f6f 	isb	sy
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	b662      	cpsie	i
 8012ec0:	60fb      	str	r3, [r7, #12]
}
 8012ec2:	bf00      	nop
 8012ec4:	bf00      	nop
 8012ec6:	e7fd      	b.n	8012ec4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10d      	bne.n	8012eec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed4:	b672      	cpsid	i
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	b662      	cpsie	i
 8012ee4:	60bb      	str	r3, [r7, #8]
}
 8012ee6:	bf00      	nop
 8012ee8:	bf00      	nop
 8012eea:	e7fd      	b.n	8012ee8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ef0:	1e5a      	subs	r2, r3, #1
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d044      	beq.n	8012f8c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d140      	bne.n	8012f8c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fe fba6 	bl	8011660 <uxListRemove>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d115      	bne.n	8012f46 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f1e:	491f      	ldr	r1, [pc, #124]	@ (8012f9c <xTaskPriorityDisinherit+0x110>)
 8012f20:	4613      	mov	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	440b      	add	r3, r1
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10a      	bne.n	8012f46 <xTaskPriorityDisinherit+0xba>
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f34:	2201      	movs	r2, #1
 8012f36:	fa02 f303 	lsl.w	r3, r2, r3
 8012f3a:	43da      	mvns	r2, r3
 8012f3c:	4b18      	ldr	r3, [pc, #96]	@ (8012fa0 <xTaskPriorityDisinherit+0x114>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4013      	ands	r3, r2
 8012f42:	4a17      	ldr	r2, [pc, #92]	@ (8012fa0 <xTaskPriorityDisinherit+0x114>)
 8012f44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f52:	f1c3 0207 	rsb	r2, r3, #7
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f5e:	2201      	movs	r2, #1
 8012f60:	409a      	lsls	r2, r3
 8012f62:	4b0f      	ldr	r3, [pc, #60]	@ (8012fa0 <xTaskPriorityDisinherit+0x114>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	4313      	orrs	r3, r2
 8012f68:	4a0d      	ldr	r2, [pc, #52]	@ (8012fa0 <xTaskPriorityDisinherit+0x114>)
 8012f6a:	6013      	str	r3, [r2, #0]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f70:	4613      	mov	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4413      	add	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4a08      	ldr	r2, [pc, #32]	@ (8012f9c <xTaskPriorityDisinherit+0x110>)
 8012f7a:	441a      	add	r2, r3
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	3304      	adds	r3, #4
 8012f80:	4619      	mov	r1, r3
 8012f82:	4610      	mov	r0, r2
 8012f84:	f7fe fb0f 	bl	80115a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f8c:	697b      	ldr	r3, [r7, #20]
	}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3718      	adds	r7, #24
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	20000d38 	.word	0x20000d38
 8012f9c:	20000d3c 	.word	0x20000d3c
 8012fa0:	20000e40 	.word	0x20000e40

08012fa4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012fae:	4b29      	ldr	r3, [pc, #164]	@ (8013054 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fb4:	4b28      	ldr	r3, [pc, #160]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3304      	adds	r3, #4
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7fe fb50 	bl	8011660 <uxListRemove>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d10b      	bne.n	8012fde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012fc6:	4b24      	ldr	r3, [pc, #144]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fcc:	2201      	movs	r2, #1
 8012fce:	fa02 f303 	lsl.w	r3, r2, r3
 8012fd2:	43da      	mvns	r2, r3
 8012fd4:	4b21      	ldr	r3, [pc, #132]	@ (801305c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4013      	ands	r3, r2
 8012fda:	4a20      	ldr	r2, [pc, #128]	@ (801305c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012fdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe4:	d10a      	bne.n	8012ffc <prvAddCurrentTaskToDelayedList+0x58>
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d007      	beq.n	8012ffc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fec:	4b1a      	ldr	r3, [pc, #104]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	481a      	ldr	r0, [pc, #104]	@ (8013060 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012ff6:	f7fe fad6 	bl	80115a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ffa:	e026      	b.n	801304a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ffc:	68fa      	ldr	r2, [r7, #12]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4413      	add	r3, r2
 8013002:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013004:	4b14      	ldr	r3, [pc, #80]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	68ba      	ldr	r2, [r7, #8]
 801300a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801300c:	68ba      	ldr	r2, [r7, #8]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	429a      	cmp	r2, r3
 8013012:	d209      	bcs.n	8013028 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013014:	4b13      	ldr	r3, [pc, #76]	@ (8013064 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	4b0f      	ldr	r3, [pc, #60]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	3304      	adds	r3, #4
 801301e:	4619      	mov	r1, r3
 8013020:	4610      	mov	r0, r2
 8013022:	f7fe fae4 	bl	80115ee <vListInsert>
}
 8013026:	e010      	b.n	801304a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013028:	4b0f      	ldr	r3, [pc, #60]	@ (8013068 <prvAddCurrentTaskToDelayedList+0xc4>)
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	4b0a      	ldr	r3, [pc, #40]	@ (8013058 <prvAddCurrentTaskToDelayedList+0xb4>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3304      	adds	r3, #4
 8013032:	4619      	mov	r1, r3
 8013034:	4610      	mov	r0, r2
 8013036:	f7fe fada 	bl	80115ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801303a:	4b0c      	ldr	r3, [pc, #48]	@ (801306c <prvAddCurrentTaskToDelayedList+0xc8>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68ba      	ldr	r2, [r7, #8]
 8013040:	429a      	cmp	r2, r3
 8013042:	d202      	bcs.n	801304a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013044:	4a09      	ldr	r2, [pc, #36]	@ (801306c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	6013      	str	r3, [r2, #0]
}
 801304a:	bf00      	nop
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	20000e3c 	.word	0x20000e3c
 8013058:	20000d38 	.word	0x20000d38
 801305c:	20000e40 	.word	0x20000e40
 8013060:	20000e24 	.word	0x20000e24
 8013064:	20000df4 	.word	0x20000df4
 8013068:	20000df0 	.word	0x20000df0
 801306c:	20000e58 	.word	0x20000e58

08013070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013070:	b480      	push	{r7}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	3b04      	subs	r3, #4
 8013080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	3b04      	subs	r3, #4
 801308e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	f023 0201 	bic.w	r2, r3, #1
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	3b04      	subs	r3, #4
 801309e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80130a0:	4a0c      	ldr	r2, [pc, #48]	@ (80130d4 <pxPortInitialiseStack+0x64>)
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	3b14      	subs	r3, #20
 80130aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	3b04      	subs	r3, #4
 80130b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f06f 0202 	mvn.w	r2, #2
 80130be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	3b20      	subs	r3, #32
 80130c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80130c6:	68fb      	ldr	r3, [r7, #12]
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3714      	adds	r7, #20
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	080130d9 	.word	0x080130d9

080130d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80130de:	2300      	movs	r3, #0
 80130e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80130e2:	4b15      	ldr	r3, [pc, #84]	@ (8013138 <prvTaskExitError+0x60>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ea:	d00d      	beq.n	8013108 <prvTaskExitError+0x30>
	__asm volatile
 80130ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130f0:	b672      	cpsid	i
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	b662      	cpsie	i
 8013100:	60fb      	str	r3, [r7, #12]
}
 8013102:	bf00      	nop
 8013104:	bf00      	nop
 8013106:	e7fd      	b.n	8013104 <prvTaskExitError+0x2c>
	__asm volatile
 8013108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801310c:	b672      	cpsid	i
 801310e:	f383 8811 	msr	BASEPRI, r3
 8013112:	f3bf 8f6f 	isb	sy
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	b662      	cpsie	i
 801311c:	60bb      	str	r3, [r7, #8]
}
 801311e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013120:	bf00      	nop
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d0fc      	beq.n	8013122 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013128:	bf00      	nop
 801312a:	bf00      	nop
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	2000002c 	.word	0x2000002c
 801313c:	00000000 	.word	0x00000000

08013140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013140:	4b07      	ldr	r3, [pc, #28]	@ (8013160 <pxCurrentTCBConst2>)
 8013142:	6819      	ldr	r1, [r3, #0]
 8013144:	6808      	ldr	r0, [r1, #0]
 8013146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801314a:	f380 8809 	msr	PSP, r0
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f04f 0000 	mov.w	r0, #0
 8013156:	f380 8811 	msr	BASEPRI, r0
 801315a:	4770      	bx	lr
 801315c:	f3af 8000 	nop.w

08013160 <pxCurrentTCBConst2>:
 8013160:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013164:	bf00      	nop
 8013166:	bf00      	nop

08013168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013168:	4808      	ldr	r0, [pc, #32]	@ (801318c <prvPortStartFirstTask+0x24>)
 801316a:	6800      	ldr	r0, [r0, #0]
 801316c:	6800      	ldr	r0, [r0, #0]
 801316e:	f380 8808 	msr	MSP, r0
 8013172:	f04f 0000 	mov.w	r0, #0
 8013176:	f380 8814 	msr	CONTROL, r0
 801317a:	b662      	cpsie	i
 801317c:	b661      	cpsie	f
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	f3bf 8f6f 	isb	sy
 8013186:	df00      	svc	0
 8013188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801318a:	bf00      	nop
 801318c:	e000ed08 	.word	0xe000ed08

08013190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013196:	4b37      	ldr	r3, [pc, #220]	@ (8013274 <xPortStartScheduler+0xe4>)
 8013198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	22ff      	movs	r2, #255	@ 0xff
 80131a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	b2db      	uxtb	r3, r3
 80131ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131b0:	78fb      	ldrb	r3, [r7, #3]
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	4b2f      	ldr	r3, [pc, #188]	@ (8013278 <xPortStartScheduler+0xe8>)
 80131bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131be:	4b2f      	ldr	r3, [pc, #188]	@ (801327c <xPortStartScheduler+0xec>)
 80131c0:	2207      	movs	r2, #7
 80131c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131c4:	e009      	b.n	80131da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80131c6:	4b2d      	ldr	r3, [pc, #180]	@ (801327c <xPortStartScheduler+0xec>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	3b01      	subs	r3, #1
 80131cc:	4a2b      	ldr	r2, [pc, #172]	@ (801327c <xPortStartScheduler+0xec>)
 80131ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80131d0:	78fb      	ldrb	r3, [r7, #3]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131da:	78fb      	ldrb	r3, [r7, #3]
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80131e2:	2b80      	cmp	r3, #128	@ 0x80
 80131e4:	d0ef      	beq.n	80131c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80131e6:	4b25      	ldr	r3, [pc, #148]	@ (801327c <xPortStartScheduler+0xec>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f1c3 0307 	rsb	r3, r3, #7
 80131ee:	2b04      	cmp	r3, #4
 80131f0:	d00d      	beq.n	801320e <xPortStartScheduler+0x7e>
	__asm volatile
 80131f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f6:	b672      	cpsid	i
 80131f8:	f383 8811 	msr	BASEPRI, r3
 80131fc:	f3bf 8f6f 	isb	sy
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	b662      	cpsie	i
 8013206:	60bb      	str	r3, [r7, #8]
}
 8013208:	bf00      	nop
 801320a:	bf00      	nop
 801320c:	e7fd      	b.n	801320a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801320e:	4b1b      	ldr	r3, [pc, #108]	@ (801327c <xPortStartScheduler+0xec>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	021b      	lsls	r3, r3, #8
 8013214:	4a19      	ldr	r2, [pc, #100]	@ (801327c <xPortStartScheduler+0xec>)
 8013216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013218:	4b18      	ldr	r3, [pc, #96]	@ (801327c <xPortStartScheduler+0xec>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013220:	4a16      	ldr	r2, [pc, #88]	@ (801327c <xPortStartScheduler+0xec>)
 8013222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	b2da      	uxtb	r2, r3
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801322c:	4b14      	ldr	r3, [pc, #80]	@ (8013280 <xPortStartScheduler+0xf0>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	4a13      	ldr	r2, [pc, #76]	@ (8013280 <xPortStartScheduler+0xf0>)
 8013232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013238:	4b11      	ldr	r3, [pc, #68]	@ (8013280 <xPortStartScheduler+0xf0>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a10      	ldr	r2, [pc, #64]	@ (8013280 <xPortStartScheduler+0xf0>)
 801323e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013244:	f000 f8dc 	bl	8013400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013248:	4b0e      	ldr	r3, [pc, #56]	@ (8013284 <xPortStartScheduler+0xf4>)
 801324a:	2200      	movs	r2, #0
 801324c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801324e:	f000 f8fb 	bl	8013448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013252:	4b0d      	ldr	r3, [pc, #52]	@ (8013288 <xPortStartScheduler+0xf8>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a0c      	ldr	r2, [pc, #48]	@ (8013288 <xPortStartScheduler+0xf8>)
 8013258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801325c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801325e:	f7ff ff83 	bl	8013168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013262:	f7ff fb7f 	bl	8012964 <vTaskSwitchContext>
	prvTaskExitError();
 8013266:	f7ff ff37 	bl	80130d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801326a:	2300      	movs	r3, #0
}
 801326c:	4618      	mov	r0, r3
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	e000e400 	.word	0xe000e400
 8013278:	20000e64 	.word	0x20000e64
 801327c:	20000e68 	.word	0x20000e68
 8013280:	e000ed20 	.word	0xe000ed20
 8013284:	2000002c 	.word	0x2000002c
 8013288:	e000ef34 	.word	0xe000ef34

0801328c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
	__asm volatile
 8013292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013296:	b672      	cpsid	i
 8013298:	f383 8811 	msr	BASEPRI, r3
 801329c:	f3bf 8f6f 	isb	sy
 80132a0:	f3bf 8f4f 	dsb	sy
 80132a4:	b662      	cpsie	i
 80132a6:	607b      	str	r3, [r7, #4]
}
 80132a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80132aa:	4b11      	ldr	r3, [pc, #68]	@ (80132f0 <vPortEnterCritical+0x64>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	3301      	adds	r3, #1
 80132b0:	4a0f      	ldr	r2, [pc, #60]	@ (80132f0 <vPortEnterCritical+0x64>)
 80132b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80132b4:	4b0e      	ldr	r3, [pc, #56]	@ (80132f0 <vPortEnterCritical+0x64>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d112      	bne.n	80132e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80132bc:	4b0d      	ldr	r3, [pc, #52]	@ (80132f4 <vPortEnterCritical+0x68>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00d      	beq.n	80132e2 <vPortEnterCritical+0x56>
	__asm volatile
 80132c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132ca:	b672      	cpsid	i
 80132cc:	f383 8811 	msr	BASEPRI, r3
 80132d0:	f3bf 8f6f 	isb	sy
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	b662      	cpsie	i
 80132da:	603b      	str	r3, [r7, #0]
}
 80132dc:	bf00      	nop
 80132de:	bf00      	nop
 80132e0:	e7fd      	b.n	80132de <vPortEnterCritical+0x52>
	}
}
 80132e2:	bf00      	nop
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	2000002c 	.word	0x2000002c
 80132f4:	e000ed04 	.word	0xe000ed04

080132f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80132fe:	4b13      	ldr	r3, [pc, #76]	@ (801334c <vPortExitCritical+0x54>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d10d      	bne.n	8013322 <vPortExitCritical+0x2a>
	__asm volatile
 8013306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801330a:	b672      	cpsid	i
 801330c:	f383 8811 	msr	BASEPRI, r3
 8013310:	f3bf 8f6f 	isb	sy
 8013314:	f3bf 8f4f 	dsb	sy
 8013318:	b662      	cpsie	i
 801331a:	607b      	str	r3, [r7, #4]
}
 801331c:	bf00      	nop
 801331e:	bf00      	nop
 8013320:	e7fd      	b.n	801331e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013322:	4b0a      	ldr	r3, [pc, #40]	@ (801334c <vPortExitCritical+0x54>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	3b01      	subs	r3, #1
 8013328:	4a08      	ldr	r2, [pc, #32]	@ (801334c <vPortExitCritical+0x54>)
 801332a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801332c:	4b07      	ldr	r3, [pc, #28]	@ (801334c <vPortExitCritical+0x54>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d105      	bne.n	8013340 <vPortExitCritical+0x48>
 8013334:	2300      	movs	r3, #0
 8013336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	f383 8811 	msr	BASEPRI, r3
}
 801333e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013340:	bf00      	nop
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr
 801334c:	2000002c 	.word	0x2000002c

08013350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013350:	f3ef 8009 	mrs	r0, PSP
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	4b15      	ldr	r3, [pc, #84]	@ (80133b0 <pxCurrentTCBConst>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	f01e 0f10 	tst.w	lr, #16
 8013360:	bf08      	it	eq
 8013362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336a:	6010      	str	r0, [r2, #0]
 801336c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013374:	b672      	cpsid	i
 8013376:	f380 8811 	msr	BASEPRI, r0
 801337a:	f3bf 8f4f 	dsb	sy
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	b662      	cpsie	i
 8013384:	f7ff faee 	bl	8012964 <vTaskSwitchContext>
 8013388:	f04f 0000 	mov.w	r0, #0
 801338c:	f380 8811 	msr	BASEPRI, r0
 8013390:	bc09      	pop	{r0, r3}
 8013392:	6819      	ldr	r1, [r3, #0]
 8013394:	6808      	ldr	r0, [r1, #0]
 8013396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801339a:	f01e 0f10 	tst.w	lr, #16
 801339e:	bf08      	it	eq
 80133a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80133a4:	f380 8809 	msr	PSP, r0
 80133a8:	f3bf 8f6f 	isb	sy
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop

080133b0 <pxCurrentTCBConst>:
 80133b0:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80133b4:	bf00      	nop
 80133b6:	bf00      	nop

080133b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c2:	b672      	cpsid	i
 80133c4:	f383 8811 	msr	BASEPRI, r3
 80133c8:	f3bf 8f6f 	isb	sy
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	b662      	cpsie	i
 80133d2:	607b      	str	r3, [r7, #4]
}
 80133d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80133d6:	f7ff fa09 	bl	80127ec <xTaskIncrementTick>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d003      	beq.n	80133e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80133e0:	4b06      	ldr	r3, [pc, #24]	@ (80133fc <SysTick_Handler+0x44>)
 80133e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133e6:	601a      	str	r2, [r3, #0]
 80133e8:	2300      	movs	r3, #0
 80133ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	f383 8811 	msr	BASEPRI, r3
}
 80133f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	e000ed04 	.word	0xe000ed04

08013400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013400:	b480      	push	{r7}
 8013402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013404:	4b0b      	ldr	r3, [pc, #44]	@ (8013434 <vPortSetupTimerInterrupt+0x34>)
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801340a:	4b0b      	ldr	r3, [pc, #44]	@ (8013438 <vPortSetupTimerInterrupt+0x38>)
 801340c:	2200      	movs	r2, #0
 801340e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013410:	4b0a      	ldr	r3, [pc, #40]	@ (801343c <vPortSetupTimerInterrupt+0x3c>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4a0a      	ldr	r2, [pc, #40]	@ (8013440 <vPortSetupTimerInterrupt+0x40>)
 8013416:	fba2 2303 	umull	r2, r3, r2, r3
 801341a:	099b      	lsrs	r3, r3, #6
 801341c:	4a09      	ldr	r2, [pc, #36]	@ (8013444 <vPortSetupTimerInterrupt+0x44>)
 801341e:	3b01      	subs	r3, #1
 8013420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013422:	4b04      	ldr	r3, [pc, #16]	@ (8013434 <vPortSetupTimerInterrupt+0x34>)
 8013424:	2207      	movs	r2, #7
 8013426:	601a      	str	r2, [r3, #0]
}
 8013428:	bf00      	nop
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	e000e010 	.word	0xe000e010
 8013438:	e000e018 	.word	0xe000e018
 801343c:	20000000 	.word	0x20000000
 8013440:	10624dd3 	.word	0x10624dd3
 8013444:	e000e014 	.word	0xe000e014

08013448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013448:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013458 <vPortEnableVFP+0x10>
 801344c:	6801      	ldr	r1, [r0, #0]
 801344e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013452:	6001      	str	r1, [r0, #0]
 8013454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013456:	bf00      	nop
 8013458:	e000ed88 	.word	0xe000ed88

0801345c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801345c:	b480      	push	{r7}
 801345e:	b085      	sub	sp, #20
 8013460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013462:	f3ef 8305 	mrs	r3, IPSR
 8013466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2b0f      	cmp	r3, #15
 801346c:	d917      	bls.n	801349e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801346e:	4a1a      	ldr	r2, [pc, #104]	@ (80134d8 <vPortValidateInterruptPriority+0x7c>)
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	4413      	add	r3, r2
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013478:	4b18      	ldr	r3, [pc, #96]	@ (80134dc <vPortValidateInterruptPriority+0x80>)
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	7afa      	ldrb	r2, [r7, #11]
 801347e:	429a      	cmp	r2, r3
 8013480:	d20d      	bcs.n	801349e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013486:	b672      	cpsid	i
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	b662      	cpsie	i
 8013496:	607b      	str	r3, [r7, #4]
}
 8013498:	bf00      	nop
 801349a:	bf00      	nop
 801349c:	e7fd      	b.n	801349a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801349e:	4b10      	ldr	r3, [pc, #64]	@ (80134e0 <vPortValidateInterruptPriority+0x84>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80134a6:	4b0f      	ldr	r3, [pc, #60]	@ (80134e4 <vPortValidateInterruptPriority+0x88>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d90d      	bls.n	80134ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80134ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134b2:	b672      	cpsid	i
 80134b4:	f383 8811 	msr	BASEPRI, r3
 80134b8:	f3bf 8f6f 	isb	sy
 80134bc:	f3bf 8f4f 	dsb	sy
 80134c0:	b662      	cpsie	i
 80134c2:	603b      	str	r3, [r7, #0]
}
 80134c4:	bf00      	nop
 80134c6:	bf00      	nop
 80134c8:	e7fd      	b.n	80134c6 <vPortValidateInterruptPriority+0x6a>
	}
 80134ca:	bf00      	nop
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	e000e3f0 	.word	0xe000e3f0
 80134dc:	20000e64 	.word	0x20000e64
 80134e0:	e000ed0c 	.word	0xe000ed0c
 80134e4:	20000e68 	.word	0x20000e68

080134e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b08a      	sub	sp, #40	@ 0x28
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80134f0:	2300      	movs	r3, #0
 80134f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80134f4:	f7ff f8aa 	bl	801264c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80134f8:	4b5f      	ldr	r3, [pc, #380]	@ (8013678 <pvPortMalloc+0x190>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013500:	f000 f924 	bl	801374c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013504:	4b5d      	ldr	r3, [pc, #372]	@ (801367c <pvPortMalloc+0x194>)
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4013      	ands	r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	f040 8094 	bne.w	801363a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d020      	beq.n	801355a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013518:	2208      	movs	r2, #8
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4413      	add	r3, r2
 801351e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f003 0307 	and.w	r3, r3, #7
 8013526:	2b00      	cmp	r3, #0
 8013528:	d017      	beq.n	801355a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f023 0307 	bic.w	r3, r3, #7
 8013530:	3308      	adds	r3, #8
 8013532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f003 0307 	and.w	r3, r3, #7
 801353a:	2b00      	cmp	r3, #0
 801353c:	d00d      	beq.n	801355a <pvPortMalloc+0x72>
	__asm volatile
 801353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013542:	b672      	cpsid	i
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	b662      	cpsie	i
 8013552:	617b      	str	r3, [r7, #20]
}
 8013554:	bf00      	nop
 8013556:	bf00      	nop
 8013558:	e7fd      	b.n	8013556 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d06c      	beq.n	801363a <pvPortMalloc+0x152>
 8013560:	4b47      	ldr	r3, [pc, #284]	@ (8013680 <pvPortMalloc+0x198>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	429a      	cmp	r2, r3
 8013568:	d867      	bhi.n	801363a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801356a:	4b46      	ldr	r3, [pc, #280]	@ (8013684 <pvPortMalloc+0x19c>)
 801356c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801356e:	4b45      	ldr	r3, [pc, #276]	@ (8013684 <pvPortMalloc+0x19c>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013574:	e004      	b.n	8013580 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013582:	685b      	ldr	r3, [r3, #4]
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	429a      	cmp	r2, r3
 8013588:	d903      	bls.n	8013592 <pvPortMalloc+0xaa>
 801358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1f1      	bne.n	8013576 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013592:	4b39      	ldr	r3, [pc, #228]	@ (8013678 <pvPortMalloc+0x190>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013598:	429a      	cmp	r2, r3
 801359a:	d04e      	beq.n	801363a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801359c:	6a3b      	ldr	r3, [r7, #32]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2208      	movs	r2, #8
 80135a2:	4413      	add	r3, r2
 80135a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80135a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	6a3b      	ldr	r3, [r7, #32]
 80135ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80135ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b0:	685a      	ldr	r2, [r3, #4]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	1ad2      	subs	r2, r2, r3
 80135b6:	2308      	movs	r3, #8
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d922      	bls.n	8013604 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80135be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4413      	add	r3, r2
 80135c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	f003 0307 	and.w	r3, r3, #7
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d00d      	beq.n	80135ec <pvPortMalloc+0x104>
	__asm volatile
 80135d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d4:	b672      	cpsid	i
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	b662      	cpsie	i
 80135e4:	613b      	str	r3, [r7, #16]
}
 80135e6:	bf00      	nop
 80135e8:	bf00      	nop
 80135ea:	e7fd      	b.n	80135e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80135ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ee:	685a      	ldr	r2, [r3, #4]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	1ad2      	subs	r2, r2, r3
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80135f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80135fe:	69b8      	ldr	r0, [r7, #24]
 8013600:	f000 f906 	bl	8013810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013604:	4b1e      	ldr	r3, [pc, #120]	@ (8013680 <pvPortMalloc+0x198>)
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	4a1c      	ldr	r2, [pc, #112]	@ (8013680 <pvPortMalloc+0x198>)
 8013610:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013612:	4b1b      	ldr	r3, [pc, #108]	@ (8013680 <pvPortMalloc+0x198>)
 8013614:	681a      	ldr	r2, [r3, #0]
 8013616:	4b1c      	ldr	r3, [pc, #112]	@ (8013688 <pvPortMalloc+0x1a0>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	d203      	bcs.n	8013626 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801361e:	4b18      	ldr	r3, [pc, #96]	@ (8013680 <pvPortMalloc+0x198>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	4a19      	ldr	r2, [pc, #100]	@ (8013688 <pvPortMalloc+0x1a0>)
 8013624:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	4b14      	ldr	r3, [pc, #80]	@ (801367c <pvPortMalloc+0x194>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	431a      	orrs	r2, r3
 8013630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013632:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013636:	2200      	movs	r2, #0
 8013638:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801363a:	f7ff f815 	bl	8012668 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801363e:	69fb      	ldr	r3, [r7, #28]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d101      	bne.n	8013648 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013644:	f7ed fb5c 	bl	8000d00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	f003 0307 	and.w	r3, r3, #7
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00d      	beq.n	801366e <pvPortMalloc+0x186>
	__asm volatile
 8013652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013656:	b672      	cpsid	i
 8013658:	f383 8811 	msr	BASEPRI, r3
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	b662      	cpsie	i
 8013666:	60fb      	str	r3, [r7, #12]
}
 8013668:	bf00      	nop
 801366a:	bf00      	nop
 801366c:	e7fd      	b.n	801366a <pvPortMalloc+0x182>
	return pvReturn;
 801366e:	69fb      	ldr	r3, [r7, #28]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3728      	adds	r7, #40	@ 0x28
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	20008e74 	.word	0x20008e74
 801367c:	20008e80 	.word	0x20008e80
 8013680:	20008e78 	.word	0x20008e78
 8013684:	20008e6c 	.word	0x20008e6c
 8013688:	20008e7c 	.word	0x20008e7c

0801368c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b086      	sub	sp, #24
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d04e      	beq.n	801373c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801369e:	2308      	movs	r3, #8
 80136a0:	425b      	negs	r3, r3
 80136a2:	697a      	ldr	r2, [r7, #20]
 80136a4:	4413      	add	r3, r2
 80136a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	685a      	ldr	r2, [r3, #4]
 80136b0:	4b24      	ldr	r3, [pc, #144]	@ (8013744 <vPortFree+0xb8>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	4013      	ands	r3, r2
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d10d      	bne.n	80136d6 <vPortFree+0x4a>
	__asm volatile
 80136ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136be:	b672      	cpsid	i
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	b662      	cpsie	i
 80136ce:	60fb      	str	r3, [r7, #12]
}
 80136d0:	bf00      	nop
 80136d2:	bf00      	nop
 80136d4:	e7fd      	b.n	80136d2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00d      	beq.n	80136fa <vPortFree+0x6e>
	__asm volatile
 80136de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136e2:	b672      	cpsid	i
 80136e4:	f383 8811 	msr	BASEPRI, r3
 80136e8:	f3bf 8f6f 	isb	sy
 80136ec:	f3bf 8f4f 	dsb	sy
 80136f0:	b662      	cpsie	i
 80136f2:	60bb      	str	r3, [r7, #8]
}
 80136f4:	bf00      	nop
 80136f6:	bf00      	nop
 80136f8:	e7fd      	b.n	80136f6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	685a      	ldr	r2, [r3, #4]
 80136fe:	4b11      	ldr	r3, [pc, #68]	@ (8013744 <vPortFree+0xb8>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4013      	ands	r3, r2
 8013704:	2b00      	cmp	r3, #0
 8013706:	d019      	beq.n	801373c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d115      	bne.n	801373c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	685a      	ldr	r2, [r3, #4]
 8013714:	4b0b      	ldr	r3, [pc, #44]	@ (8013744 <vPortFree+0xb8>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	43db      	mvns	r3, r3
 801371a:	401a      	ands	r2, r3
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013720:	f7fe ff94 	bl	801264c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	685a      	ldr	r2, [r3, #4]
 8013728:	4b07      	ldr	r3, [pc, #28]	@ (8013748 <vPortFree+0xbc>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4413      	add	r3, r2
 801372e:	4a06      	ldr	r2, [pc, #24]	@ (8013748 <vPortFree+0xbc>)
 8013730:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013732:	6938      	ldr	r0, [r7, #16]
 8013734:	f000 f86c 	bl	8013810 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013738:	f7fe ff96 	bl	8012668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801373c:	bf00      	nop
 801373e:	3718      	adds	r7, #24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}
 8013744:	20008e80 	.word	0x20008e80
 8013748:	20008e78 	.word	0x20008e78

0801374c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801374c:	b480      	push	{r7}
 801374e:	b085      	sub	sp, #20
 8013750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013758:	4b27      	ldr	r3, [pc, #156]	@ (80137f8 <prvHeapInit+0xac>)
 801375a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	f003 0307 	and.w	r3, r3, #7
 8013762:	2b00      	cmp	r3, #0
 8013764:	d00c      	beq.n	8013780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	3307      	adds	r3, #7
 801376a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f023 0307 	bic.w	r3, r3, #7
 8013772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	1ad3      	subs	r3, r2, r3
 801377a:	4a1f      	ldr	r2, [pc, #124]	@ (80137f8 <prvHeapInit+0xac>)
 801377c:	4413      	add	r3, r2
 801377e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013784:	4a1d      	ldr	r2, [pc, #116]	@ (80137fc <prvHeapInit+0xb0>)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801378a:	4b1c      	ldr	r3, [pc, #112]	@ (80137fc <prvHeapInit+0xb0>)
 801378c:	2200      	movs	r2, #0
 801378e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	68ba      	ldr	r2, [r7, #8]
 8013794:	4413      	add	r3, r2
 8013796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013798:	2208      	movs	r2, #8
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	1a9b      	subs	r3, r3, r2
 801379e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f023 0307 	bic.w	r3, r3, #7
 80137a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	4a15      	ldr	r2, [pc, #84]	@ (8013800 <prvHeapInit+0xb4>)
 80137ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80137ae:	4b14      	ldr	r3, [pc, #80]	@ (8013800 <prvHeapInit+0xb4>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2200      	movs	r2, #0
 80137b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80137b6:	4b12      	ldr	r3, [pc, #72]	@ (8013800 <prvHeapInit+0xb4>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2200      	movs	r2, #0
 80137bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	1ad2      	subs	r2, r2, r3
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80137cc:	4b0c      	ldr	r3, [pc, #48]	@ (8013800 <prvHeapInit+0xb4>)
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	4a0a      	ldr	r2, [pc, #40]	@ (8013804 <prvHeapInit+0xb8>)
 80137da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	4a09      	ldr	r2, [pc, #36]	@ (8013808 <prvHeapInit+0xbc>)
 80137e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80137e4:	4b09      	ldr	r3, [pc, #36]	@ (801380c <prvHeapInit+0xc0>)
 80137e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80137ea:	601a      	str	r2, [r3, #0]
}
 80137ec:	bf00      	nop
 80137ee:	3714      	adds	r7, #20
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr
 80137f8:	20000e6c 	.word	0x20000e6c
 80137fc:	20008e6c 	.word	0x20008e6c
 8013800:	20008e74 	.word	0x20008e74
 8013804:	20008e7c 	.word	0x20008e7c
 8013808:	20008e78 	.word	0x20008e78
 801380c:	20008e80 	.word	0x20008e80

08013810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013810:	b480      	push	{r7}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013818:	4b28      	ldr	r3, [pc, #160]	@ (80138bc <prvInsertBlockIntoFreeList+0xac>)
 801381a:	60fb      	str	r3, [r7, #12]
 801381c:	e002      	b.n	8013824 <prvInsertBlockIntoFreeList+0x14>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	60fb      	str	r3, [r7, #12]
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	429a      	cmp	r2, r3
 801382c:	d8f7      	bhi.n	801381e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	68ba      	ldr	r2, [r7, #8]
 8013838:	4413      	add	r3, r2
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	429a      	cmp	r2, r3
 801383e:	d108      	bne.n	8013852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	685a      	ldr	r2, [r3, #4]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	441a      	add	r2, r3
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	68ba      	ldr	r2, [r7, #8]
 801385c:	441a      	add	r2, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	429a      	cmp	r2, r3
 8013864:	d118      	bne.n	8013898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	4b15      	ldr	r3, [pc, #84]	@ (80138c0 <prvInsertBlockIntoFreeList+0xb0>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d00d      	beq.n	801388e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	685a      	ldr	r2, [r3, #4]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	441a      	add	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	601a      	str	r2, [r3, #0]
 801388c:	e008      	b.n	80138a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801388e:	4b0c      	ldr	r3, [pc, #48]	@ (80138c0 <prvInsertBlockIntoFreeList+0xb0>)
 8013890:	681a      	ldr	r2, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	e003      	b.n	80138a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d002      	beq.n	80138ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138ae:	bf00      	nop
 80138b0:	3714      	adds	r7, #20
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop
 80138bc:	20008e6c 	.word	0x20008e6c
 80138c0:	20008e74 	.word	0x20008e74

080138c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80138c8:	2201      	movs	r2, #1
 80138ca:	490e      	ldr	r1, [pc, #56]	@ (8013904 <MX_USB_HOST_Init+0x40>)
 80138cc:	480e      	ldr	r0, [pc, #56]	@ (8013908 <MX_USB_HOST_Init+0x44>)
 80138ce:	f7fb fd41 	bl	800f354 <USBH_Init>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d001      	beq.n	80138dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80138d8:	f7ed ffa2 	bl	8001820 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80138dc:	490b      	ldr	r1, [pc, #44]	@ (801390c <MX_USB_HOST_Init+0x48>)
 80138de:	480a      	ldr	r0, [pc, #40]	@ (8013908 <MX_USB_HOST_Init+0x44>)
 80138e0:	f7fb fe0d 	bl	800f4fe <USBH_RegisterClass>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d001      	beq.n	80138ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80138ea:	f7ed ff99 	bl	8001820 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80138ee:	4806      	ldr	r0, [pc, #24]	@ (8013908 <MX_USB_HOST_Init+0x44>)
 80138f0:	f7fb fe91 	bl	800f616 <USBH_Start>
 80138f4:	4603      	mov	r3, r0
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d001      	beq.n	80138fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80138fa:	f7ed ff91 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80138fe:	bf00      	nop
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	08013911 	.word	0x08013911
 8013908:	20008e84 	.word	0x20008e84
 801390c:	2000000c 	.word	0x2000000c

08013910 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801391c:	78fb      	ldrb	r3, [r7, #3]
 801391e:	3b01      	subs	r3, #1
 8013920:	2b04      	cmp	r3, #4
 8013922:	d819      	bhi.n	8013958 <USBH_UserProcess+0x48>
 8013924:	a201      	add	r2, pc, #4	@ (adr r2, 801392c <USBH_UserProcess+0x1c>)
 8013926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801392a:	bf00      	nop
 801392c:	08013959 	.word	0x08013959
 8013930:	08013949 	.word	0x08013949
 8013934:	08013959 	.word	0x08013959
 8013938:	08013951 	.word	0x08013951
 801393c:	08013941 	.word	0x08013941
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013940:	4b09      	ldr	r3, [pc, #36]	@ (8013968 <USBH_UserProcess+0x58>)
 8013942:	2203      	movs	r2, #3
 8013944:	701a      	strb	r2, [r3, #0]
  break;
 8013946:	e008      	b.n	801395a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013948:	4b07      	ldr	r3, [pc, #28]	@ (8013968 <USBH_UserProcess+0x58>)
 801394a:	2202      	movs	r2, #2
 801394c:	701a      	strb	r2, [r3, #0]
  break;
 801394e:	e004      	b.n	801395a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013950:	4b05      	ldr	r3, [pc, #20]	@ (8013968 <USBH_UserProcess+0x58>)
 8013952:	2201      	movs	r2, #1
 8013954:	701a      	strb	r2, [r3, #0]
  break;
 8013956:	e000      	b.n	801395a <USBH_UserProcess+0x4a>

  default:
  break;
 8013958:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801395a:	bf00      	nop
 801395c:	370c      	adds	r7, #12
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr
 8013966:	bf00      	nop
 8013968:	20009268 	.word	0x20009268

0801396c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b08a      	sub	sp, #40	@ 0x28
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013974:	f107 0314 	add.w	r3, r7, #20
 8013978:	2200      	movs	r2, #0
 801397a:	601a      	str	r2, [r3, #0]
 801397c:	605a      	str	r2, [r3, #4]
 801397e:	609a      	str	r2, [r3, #8]
 8013980:	60da      	str	r2, [r3, #12]
 8013982:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801398c:	d13c      	bne.n	8013a08 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801398e:	4b20      	ldr	r3, [pc, #128]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 8013990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013992:	4a1f      	ldr	r2, [pc, #124]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 8013994:	f043 0301 	orr.w	r3, r3, #1
 8013998:	6313      	str	r3, [r2, #48]	@ 0x30
 801399a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 801399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801399e:	f003 0301 	and.w	r3, r3, #1
 80139a2:	613b      	str	r3, [r7, #16]
 80139a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80139a6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80139aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139ac:	2302      	movs	r3, #2
 80139ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139b0:	2300      	movs	r3, #0
 80139b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80139b4:	2303      	movs	r3, #3
 80139b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80139b8:	230a      	movs	r3, #10
 80139ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139bc:	f107 0314 	add.w	r3, r7, #20
 80139c0:	4619      	mov	r1, r3
 80139c2:	4814      	ldr	r0, [pc, #80]	@ (8013a14 <HAL_HCD_MspInit+0xa8>)
 80139c4:	f7f0 fd1c 	bl	8004400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80139c8:	4b11      	ldr	r3, [pc, #68]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139cc:	4a10      	ldr	r2, [pc, #64]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80139d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80139d4:	4b0e      	ldr	r3, [pc, #56]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139dc:	60fb      	str	r3, [r7, #12]
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139e4:	4a0a      	ldr	r2, [pc, #40]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80139ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80139ec:	4b08      	ldr	r3, [pc, #32]	@ (8013a10 <HAL_HCD_MspInit+0xa4>)
 80139ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80139f4:	60bb      	str	r3, [r7, #8]
 80139f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80139f8:	2200      	movs	r2, #0
 80139fa:	2105      	movs	r1, #5
 80139fc:	2043      	movs	r0, #67	@ 0x43
 80139fe:	f7ef fd03 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a02:	2043      	movs	r0, #67	@ 0x43
 8013a04:	f7ef fd1c 	bl	8003440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a08:	bf00      	nop
 8013a0a:	3728      	adds	r7, #40	@ 0x28
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	40023800 	.word	0x40023800
 8013a14:	40020000 	.word	0x40020000

08013a18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fc faa7 	bl	800ff7a <USBH_LL_IncTimer>
}
 8013a2c:	bf00      	nop
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fc faeb 	bl	801001e <USBH_LL_Connect>
}
 8013a48:	bf00      	nop
 8013a4a:	3708      	adds	r7, #8
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fc fb00 	bl	8010064 <USBH_LL_Disconnect>
}
 8013a64:	bf00      	nop
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	460b      	mov	r3, r1
 8013a76:	70fb      	strb	r3, [r7, #3]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7fc fb35 	bl	80100f2 <USBH_LL_NotifyURBChange>
#endif
}
 8013a88:	bf00      	nop
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fc fa95 	bl	800ffce <USBH_LL_PortEnabled>
}
 8013aa4:	bf00      	nop
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fc faa1 	bl	8010002 <USBH_LL_PortDisabled>
}
 8013ac0:	bf00      	nop
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d12a      	bne.n	8013b30 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013ada:	4a18      	ldr	r2, [pc, #96]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4a15      	ldr	r2, [pc, #84]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013ae6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013aea:	4b14      	ldr	r3, [pc, #80]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013aec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8013af0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013af2:	4b12      	ldr	r3, [pc, #72]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013af4:	2208      	movs	r2, #8
 8013af6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013af8:	4b10      	ldr	r3, [pc, #64]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013afa:	2201      	movs	r2, #1
 8013afc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013afe:	4b0f      	ldr	r3, [pc, #60]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013b00:	2200      	movs	r2, #0
 8013b02:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013b04:	4b0d      	ldr	r3, [pc, #52]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013b06:	2202      	movs	r2, #2
 8013b08:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013b10:	480a      	ldr	r0, [pc, #40]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013b12:	f7f0 fe52 	bl	80047ba <HAL_HCD_Init>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d001      	beq.n	8013b20 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013b1c:	f7ed fe80 	bl	8001820 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013b20:	4806      	ldr	r0, [pc, #24]	@ (8013b3c <USBH_LL_Init+0x74>)
 8013b22:	f7f1 fab3 	bl	800508c <HAL_HCD_GetCurrentFrame>
 8013b26:	4603      	mov	r3, r0
 8013b28:	4619      	mov	r1, r3
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7fc fa16 	bl	800ff5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	2000926c 	.word	0x2000926c

08013b40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7f1 fa20 	bl	8004f9c <HAL_HCD_Start>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013b60:	7bfb      	ldrb	r3, [r7, #15]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f000 f95e 	bl	8013e24 <USBH_Get_USB_Status>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3710      	adds	r7, #16
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}

08013b76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b084      	sub	sp, #16
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013b82:	2300      	movs	r3, #0
 8013b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7f1 fa28 	bl	8004fe2 <HAL_HCD_Stop>
 8013b92:	4603      	mov	r3, r0
 8013b94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f000 f943 	bl	8013e24 <USBH_Get_USB_Status>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3710      	adds	r7, #16
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f1 fa72 	bl	80050a8 <HAL_HCD_GetCurrentSpeed>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b02      	cmp	r3, #2
 8013bc8:	d00c      	beq.n	8013be4 <USBH_LL_GetSpeed+0x38>
 8013bca:	2b02      	cmp	r3, #2
 8013bcc:	d80d      	bhi.n	8013bea <USBH_LL_GetSpeed+0x3e>
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d002      	beq.n	8013bd8 <USBH_LL_GetSpeed+0x2c>
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d003      	beq.n	8013bde <USBH_LL_GetSpeed+0x32>
 8013bd6:	e008      	b.n	8013bea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	73fb      	strb	r3, [r7, #15]
    break;
 8013bdc:	e008      	b.n	8013bf0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013bde:	2301      	movs	r3, #1
 8013be0:	73fb      	strb	r3, [r7, #15]
    break;
 8013be2:	e005      	b.n	8013bf0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013be4:	2302      	movs	r3, #2
 8013be6:	73fb      	strb	r3, [r7, #15]
    break;
 8013be8:	e002      	b.n	8013bf0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013bea:	2301      	movs	r3, #1
 8013bec:	73fb      	strb	r3, [r7, #15]
    break;
 8013bee:	bf00      	nop
  }
  return  speed;
 8013bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b084      	sub	sp, #16
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c02:	2300      	movs	r3, #0
 8013c04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013c06:	2300      	movs	r3, #0
 8013c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7f1 fa03 	bl	800501c <HAL_HCD_ResetPort>
 8013c16:	4603      	mov	r3, r0
 8013c18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013c1a:	7bfb      	ldrb	r3, [r7, #15]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f000 f901 	bl	8013e24 <USBH_Get_USB_Status>
 8013c22:	4603      	mov	r3, r0
 8013c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	460b      	mov	r3, r1
 8013c3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013c42:	78fa      	ldrb	r2, [r7, #3]
 8013c44:	4611      	mov	r1, r2
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f1 fa0b 	bl	8005062 <HAL_HCD_HC_GetXferCount>
 8013c4c:	4603      	mov	r3, r0
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3708      	adds	r7, #8
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}

08013c56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013c56:	b590      	push	{r4, r7, lr}
 8013c58:	b089      	sub	sp, #36	@ 0x24
 8013c5a:	af04      	add	r7, sp, #16
 8013c5c:	6078      	str	r0, [r7, #4]
 8013c5e:	4608      	mov	r0, r1
 8013c60:	4611      	mov	r1, r2
 8013c62:	461a      	mov	r2, r3
 8013c64:	4603      	mov	r3, r0
 8013c66:	70fb      	strb	r3, [r7, #3]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	70bb      	strb	r3, [r7, #2]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c70:	2300      	movs	r3, #0
 8013c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013c74:	2300      	movs	r3, #0
 8013c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013c7e:	787c      	ldrb	r4, [r7, #1]
 8013c80:	78ba      	ldrb	r2, [r7, #2]
 8013c82:	78f9      	ldrb	r1, [r7, #3]
 8013c84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013c86:	9302      	str	r3, [sp, #8]
 8013c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	4623      	mov	r3, r4
 8013c96:	f7f0 fdf7 	bl	8004888 <HAL_HCD_HC_Init>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013c9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f000 f8bf 	bl	8013e24 <USBH_Get_USB_Status>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3714      	adds	r7, #20
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd90      	pop	{r4, r7, pc}

08013cb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013cce:	78fa      	ldrb	r2, [r7, #3]
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7f0 fe90 	bl	80049f8 <HAL_HCD_HC_Halt>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013cdc:	7bfb      	ldrb	r3, [r7, #15]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 f8a0 	bl	8013e24 <USBH_Get_USB_Status>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3710      	adds	r7, #16
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013cf2:	b590      	push	{r4, r7, lr}
 8013cf4:	b089      	sub	sp, #36	@ 0x24
 8013cf6:	af04      	add	r7, sp, #16
 8013cf8:	6078      	str	r0, [r7, #4]
 8013cfa:	4608      	mov	r0, r1
 8013cfc:	4611      	mov	r1, r2
 8013cfe:	461a      	mov	r2, r3
 8013d00:	4603      	mov	r3, r0
 8013d02:	70fb      	strb	r3, [r7, #3]
 8013d04:	460b      	mov	r3, r1
 8013d06:	70bb      	strb	r3, [r7, #2]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d10:	2300      	movs	r3, #0
 8013d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013d1a:	787c      	ldrb	r4, [r7, #1]
 8013d1c:	78ba      	ldrb	r2, [r7, #2]
 8013d1e:	78f9      	ldrb	r1, [r7, #3]
 8013d20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013d24:	9303      	str	r3, [sp, #12]
 8013d26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013d28:	9302      	str	r3, [sp, #8]
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2c:	9301      	str	r3, [sp, #4]
 8013d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	4623      	mov	r3, r4
 8013d36:	f7f0 fe83 	bl	8004a40 <HAL_HCD_HC_SubmitRequest>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013d3e:	7bfb      	ldrb	r3, [r7, #15]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 f86f 	bl	8013e24 <USBH_Get_USB_Status>
 8013d46:	4603      	mov	r3, r0
 8013d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3714      	adds	r7, #20
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd90      	pop	{r4, r7, pc}

08013d54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013d66:	78fa      	ldrb	r2, [r7, #3]
 8013d68:	4611      	mov	r1, r2
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f1 f964 	bl	8005038 <HAL_HCD_HC_GetURBState>
 8013d70:	4603      	mov	r3, r0
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3708      	adds	r7, #8
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}

08013d7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013d7a:	b580      	push	{r7, lr}
 8013d7c:	b082      	sub	sp, #8
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
 8013d82:	460b      	mov	r3, r1
 8013d84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d103      	bne.n	8013d98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f000 f872 	bl	8013e7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013d98:	20c8      	movs	r0, #200	@ 0xc8
 8013d9a:	f7ee ffc5 	bl	8002d28 <HAL_Delay>
  return USBH_OK;
 8013d9e:	2300      	movs	r3, #0
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b085      	sub	sp, #20
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	460b      	mov	r3, r1
 8013db2:	70fb      	strb	r3, [r7, #3]
 8013db4:	4613      	mov	r3, r2
 8013db6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013dbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013dc0:	78fa      	ldrb	r2, [r7, #3]
 8013dc2:	68f9      	ldr	r1, [r7, #12]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	011b      	lsls	r3, r3, #4
 8013dc8:	1a9b      	subs	r3, r3, r2
 8013dca:	009b      	lsls	r3, r3, #2
 8013dcc:	440b      	add	r3, r1
 8013dce:	3317      	adds	r3, #23
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00a      	beq.n	8013dec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013dd6:	78fa      	ldrb	r2, [r7, #3]
 8013dd8:	68f9      	ldr	r1, [r7, #12]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	011b      	lsls	r3, r3, #4
 8013dde:	1a9b      	subs	r3, r3, r2
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	440b      	add	r3, r1
 8013de4:	333c      	adds	r3, #60	@ 0x3c
 8013de6:	78ba      	ldrb	r2, [r7, #2]
 8013de8:	701a      	strb	r2, [r3, #0]
 8013dea:	e009      	b.n	8013e00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013dec:	78fa      	ldrb	r2, [r7, #3]
 8013dee:	68f9      	ldr	r1, [r7, #12]
 8013df0:	4613      	mov	r3, r2
 8013df2:	011b      	lsls	r3, r3, #4
 8013df4:	1a9b      	subs	r3, r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	440b      	add	r3, r1
 8013dfa:	333d      	adds	r3, #61	@ 0x3d
 8013dfc:	78ba      	ldrb	r2, [r7, #2]
 8013dfe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3714      	adds	r7, #20
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr

08013e0e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b082      	sub	sp, #8
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7ee ff86 	bl	8002d28 <HAL_Delay>
}
 8013e1c:	bf00      	nop
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013e32:	79fb      	ldrb	r3, [r7, #7]
 8013e34:	2b03      	cmp	r3, #3
 8013e36:	d817      	bhi.n	8013e68 <USBH_Get_USB_Status+0x44>
 8013e38:	a201      	add	r2, pc, #4	@ (adr r2, 8013e40 <USBH_Get_USB_Status+0x1c>)
 8013e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e3e:	bf00      	nop
 8013e40:	08013e51 	.word	0x08013e51
 8013e44:	08013e57 	.word	0x08013e57
 8013e48:	08013e5d 	.word	0x08013e5d
 8013e4c:	08013e63 	.word	0x08013e63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013e50:	2300      	movs	r3, #0
 8013e52:	73fb      	strb	r3, [r7, #15]
    break;
 8013e54:	e00b      	b.n	8013e6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013e56:	2302      	movs	r3, #2
 8013e58:	73fb      	strb	r3, [r7, #15]
    break;
 8013e5a:	e008      	b.n	8013e6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8013e60:	e005      	b.n	8013e6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013e62:	2302      	movs	r3, #2
 8013e64:	73fb      	strb	r3, [r7, #15]
    break;
 8013e66:	e002      	b.n	8013e6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013e68:	2302      	movs	r3, #2
 8013e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e6c:	bf00      	nop
  }
  return usb_status;
 8013e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3714      	adds	r7, #20
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	4603      	mov	r3, r0
 8013e84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013e86:	79fb      	ldrb	r3, [r7, #7]
 8013e88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d102      	bne.n	8013e96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013e90:	2300      	movs	r3, #0
 8013e92:	73fb      	strb	r3, [r7, #15]
 8013e94:	e001      	b.n	8013e9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013e96:	2301      	movs	r3, #1
 8013e98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8013e9a:	7bfb      	ldrb	r3, [r7, #15]
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	2120      	movs	r1, #32
 8013ea0:	4803      	ldr	r0, [pc, #12]	@ (8013eb0 <MX_DriverVbusFS+0x34>)
 8013ea2:	f7f0 fc71 	bl	8004788 <HAL_GPIO_WritePin>
}
 8013ea6:	bf00      	nop
 8013ea8:	3710      	adds	r7, #16
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	40020c00 	.word	0x40020c00

08013eb4 <malloc>:
 8013eb4:	4b02      	ldr	r3, [pc, #8]	@ (8013ec0 <malloc+0xc>)
 8013eb6:	4601      	mov	r1, r0
 8013eb8:	6818      	ldr	r0, [r3, #0]
 8013eba:	f000 b82d 	b.w	8013f18 <_malloc_r>
 8013ebe:	bf00      	nop
 8013ec0:	20000030 	.word	0x20000030

08013ec4 <free>:
 8013ec4:	4b02      	ldr	r3, [pc, #8]	@ (8013ed0 <free+0xc>)
 8013ec6:	4601      	mov	r1, r0
 8013ec8:	6818      	ldr	r0, [r3, #0]
 8013eca:	f000 b903 	b.w	80140d4 <_free_r>
 8013ece:	bf00      	nop
 8013ed0:	20000030 	.word	0x20000030

08013ed4 <sbrk_aligned>:
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8013f14 <sbrk_aligned+0x40>)
 8013ed8:	460c      	mov	r4, r1
 8013eda:	6831      	ldr	r1, [r6, #0]
 8013edc:	4605      	mov	r5, r0
 8013ede:	b911      	cbnz	r1, 8013ee6 <sbrk_aligned+0x12>
 8013ee0:	f000 f8ae 	bl	8014040 <_sbrk_r>
 8013ee4:	6030      	str	r0, [r6, #0]
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f000 f8a9 	bl	8014040 <_sbrk_r>
 8013eee:	1c43      	adds	r3, r0, #1
 8013ef0:	d103      	bne.n	8013efa <sbrk_aligned+0x26>
 8013ef2:	f04f 34ff 	mov.w	r4, #4294967295
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	bd70      	pop	{r4, r5, r6, pc}
 8013efa:	1cc4      	adds	r4, r0, #3
 8013efc:	f024 0403 	bic.w	r4, r4, #3
 8013f00:	42a0      	cmp	r0, r4
 8013f02:	d0f8      	beq.n	8013ef6 <sbrk_aligned+0x22>
 8013f04:	1a21      	subs	r1, r4, r0
 8013f06:	4628      	mov	r0, r5
 8013f08:	f000 f89a 	bl	8014040 <_sbrk_r>
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	d1f2      	bne.n	8013ef6 <sbrk_aligned+0x22>
 8013f10:	e7ef      	b.n	8013ef2 <sbrk_aligned+0x1e>
 8013f12:	bf00      	nop
 8013f14:	2000964c 	.word	0x2000964c

08013f18 <_malloc_r>:
 8013f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	1ccd      	adds	r5, r1, #3
 8013f1e:	f025 0503 	bic.w	r5, r5, #3
 8013f22:	3508      	adds	r5, #8
 8013f24:	2d0c      	cmp	r5, #12
 8013f26:	bf38      	it	cc
 8013f28:	250c      	movcc	r5, #12
 8013f2a:	2d00      	cmp	r5, #0
 8013f2c:	4606      	mov	r6, r0
 8013f2e:	db01      	blt.n	8013f34 <_malloc_r+0x1c>
 8013f30:	42a9      	cmp	r1, r5
 8013f32:	d904      	bls.n	8013f3e <_malloc_r+0x26>
 8013f34:	230c      	movs	r3, #12
 8013f36:	6033      	str	r3, [r6, #0]
 8013f38:	2000      	movs	r0, #0
 8013f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014014 <_malloc_r+0xfc>
 8013f42:	f000 f869 	bl	8014018 <__malloc_lock>
 8013f46:	f8d8 3000 	ldr.w	r3, [r8]
 8013f4a:	461c      	mov	r4, r3
 8013f4c:	bb44      	cbnz	r4, 8013fa0 <_malloc_r+0x88>
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4630      	mov	r0, r6
 8013f52:	f7ff ffbf 	bl	8013ed4 <sbrk_aligned>
 8013f56:	1c43      	adds	r3, r0, #1
 8013f58:	4604      	mov	r4, r0
 8013f5a:	d158      	bne.n	801400e <_malloc_r+0xf6>
 8013f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8013f60:	4627      	mov	r7, r4
 8013f62:	2f00      	cmp	r7, #0
 8013f64:	d143      	bne.n	8013fee <_malloc_r+0xd6>
 8013f66:	2c00      	cmp	r4, #0
 8013f68:	d04b      	beq.n	8014002 <_malloc_r+0xea>
 8013f6a:	6823      	ldr	r3, [r4, #0]
 8013f6c:	4639      	mov	r1, r7
 8013f6e:	4630      	mov	r0, r6
 8013f70:	eb04 0903 	add.w	r9, r4, r3
 8013f74:	f000 f864 	bl	8014040 <_sbrk_r>
 8013f78:	4581      	cmp	r9, r0
 8013f7a:	d142      	bne.n	8014002 <_malloc_r+0xea>
 8013f7c:	6821      	ldr	r1, [r4, #0]
 8013f7e:	1a6d      	subs	r5, r5, r1
 8013f80:	4629      	mov	r1, r5
 8013f82:	4630      	mov	r0, r6
 8013f84:	f7ff ffa6 	bl	8013ed4 <sbrk_aligned>
 8013f88:	3001      	adds	r0, #1
 8013f8a:	d03a      	beq.n	8014002 <_malloc_r+0xea>
 8013f8c:	6823      	ldr	r3, [r4, #0]
 8013f8e:	442b      	add	r3, r5
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	f8d8 3000 	ldr.w	r3, [r8]
 8013f96:	685a      	ldr	r2, [r3, #4]
 8013f98:	bb62      	cbnz	r2, 8013ff4 <_malloc_r+0xdc>
 8013f9a:	f8c8 7000 	str.w	r7, [r8]
 8013f9e:	e00f      	b.n	8013fc0 <_malloc_r+0xa8>
 8013fa0:	6822      	ldr	r2, [r4, #0]
 8013fa2:	1b52      	subs	r2, r2, r5
 8013fa4:	d420      	bmi.n	8013fe8 <_malloc_r+0xd0>
 8013fa6:	2a0b      	cmp	r2, #11
 8013fa8:	d917      	bls.n	8013fda <_malloc_r+0xc2>
 8013faa:	1961      	adds	r1, r4, r5
 8013fac:	42a3      	cmp	r3, r4
 8013fae:	6025      	str	r5, [r4, #0]
 8013fb0:	bf18      	it	ne
 8013fb2:	6059      	strne	r1, [r3, #4]
 8013fb4:	6863      	ldr	r3, [r4, #4]
 8013fb6:	bf08      	it	eq
 8013fb8:	f8c8 1000 	streq.w	r1, [r8]
 8013fbc:	5162      	str	r2, [r4, r5]
 8013fbe:	604b      	str	r3, [r1, #4]
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	f000 f82f 	bl	8014024 <__malloc_unlock>
 8013fc6:	f104 000b 	add.w	r0, r4, #11
 8013fca:	1d23      	adds	r3, r4, #4
 8013fcc:	f020 0007 	bic.w	r0, r0, #7
 8013fd0:	1ac2      	subs	r2, r0, r3
 8013fd2:	bf1c      	itt	ne
 8013fd4:	1a1b      	subne	r3, r3, r0
 8013fd6:	50a3      	strne	r3, [r4, r2]
 8013fd8:	e7af      	b.n	8013f3a <_malloc_r+0x22>
 8013fda:	6862      	ldr	r2, [r4, #4]
 8013fdc:	42a3      	cmp	r3, r4
 8013fde:	bf0c      	ite	eq
 8013fe0:	f8c8 2000 	streq.w	r2, [r8]
 8013fe4:	605a      	strne	r2, [r3, #4]
 8013fe6:	e7eb      	b.n	8013fc0 <_malloc_r+0xa8>
 8013fe8:	4623      	mov	r3, r4
 8013fea:	6864      	ldr	r4, [r4, #4]
 8013fec:	e7ae      	b.n	8013f4c <_malloc_r+0x34>
 8013fee:	463c      	mov	r4, r7
 8013ff0:	687f      	ldr	r7, [r7, #4]
 8013ff2:	e7b6      	b.n	8013f62 <_malloc_r+0x4a>
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	42a3      	cmp	r3, r4
 8013ffa:	d1fb      	bne.n	8013ff4 <_malloc_r+0xdc>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	6053      	str	r3, [r2, #4]
 8014000:	e7de      	b.n	8013fc0 <_malloc_r+0xa8>
 8014002:	230c      	movs	r3, #12
 8014004:	6033      	str	r3, [r6, #0]
 8014006:	4630      	mov	r0, r6
 8014008:	f000 f80c 	bl	8014024 <__malloc_unlock>
 801400c:	e794      	b.n	8013f38 <_malloc_r+0x20>
 801400e:	6005      	str	r5, [r0, #0]
 8014010:	e7d6      	b.n	8013fc0 <_malloc_r+0xa8>
 8014012:	bf00      	nop
 8014014:	20009650 	.word	0x20009650

08014018 <__malloc_lock>:
 8014018:	4801      	ldr	r0, [pc, #4]	@ (8014020 <__malloc_lock+0x8>)
 801401a:	f000 b84b 	b.w	80140b4 <__retarget_lock_acquire_recursive>
 801401e:	bf00      	nop
 8014020:	20009790 	.word	0x20009790

08014024 <__malloc_unlock>:
 8014024:	4801      	ldr	r0, [pc, #4]	@ (801402c <__malloc_unlock+0x8>)
 8014026:	f000 b846 	b.w	80140b6 <__retarget_lock_release_recursive>
 801402a:	bf00      	nop
 801402c:	20009790 	.word	0x20009790

08014030 <memset>:
 8014030:	4402      	add	r2, r0
 8014032:	4603      	mov	r3, r0
 8014034:	4293      	cmp	r3, r2
 8014036:	d100      	bne.n	801403a <memset+0xa>
 8014038:	4770      	bx	lr
 801403a:	f803 1b01 	strb.w	r1, [r3], #1
 801403e:	e7f9      	b.n	8014034 <memset+0x4>

08014040 <_sbrk_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	4d06      	ldr	r5, [pc, #24]	@ (801405c <_sbrk_r+0x1c>)
 8014044:	2300      	movs	r3, #0
 8014046:	4604      	mov	r4, r0
 8014048:	4608      	mov	r0, r1
 801404a:	602b      	str	r3, [r5, #0]
 801404c:	f7ee f896 	bl	800217c <_sbrk>
 8014050:	1c43      	adds	r3, r0, #1
 8014052:	d102      	bne.n	801405a <_sbrk_r+0x1a>
 8014054:	682b      	ldr	r3, [r5, #0]
 8014056:	b103      	cbz	r3, 801405a <_sbrk_r+0x1a>
 8014058:	6023      	str	r3, [r4, #0]
 801405a:	bd38      	pop	{r3, r4, r5, pc}
 801405c:	2000978c 	.word	0x2000978c

08014060 <__errno>:
 8014060:	4b01      	ldr	r3, [pc, #4]	@ (8014068 <__errno+0x8>)
 8014062:	6818      	ldr	r0, [r3, #0]
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop
 8014068:	20000030 	.word	0x20000030

0801406c <__libc_init_array>:
 801406c:	b570      	push	{r4, r5, r6, lr}
 801406e:	4d0d      	ldr	r5, [pc, #52]	@ (80140a4 <__libc_init_array+0x38>)
 8014070:	4c0d      	ldr	r4, [pc, #52]	@ (80140a8 <__libc_init_array+0x3c>)
 8014072:	1b64      	subs	r4, r4, r5
 8014074:	10a4      	asrs	r4, r4, #2
 8014076:	2600      	movs	r6, #0
 8014078:	42a6      	cmp	r6, r4
 801407a:	d109      	bne.n	8014090 <__libc_init_array+0x24>
 801407c:	4d0b      	ldr	r5, [pc, #44]	@ (80140ac <__libc_init_array+0x40>)
 801407e:	4c0c      	ldr	r4, [pc, #48]	@ (80140b0 <__libc_init_array+0x44>)
 8014080:	f000 f872 	bl	8014168 <_init>
 8014084:	1b64      	subs	r4, r4, r5
 8014086:	10a4      	asrs	r4, r4, #2
 8014088:	2600      	movs	r6, #0
 801408a:	42a6      	cmp	r6, r4
 801408c:	d105      	bne.n	801409a <__libc_init_array+0x2e>
 801408e:	bd70      	pop	{r4, r5, r6, pc}
 8014090:	f855 3b04 	ldr.w	r3, [r5], #4
 8014094:	4798      	blx	r3
 8014096:	3601      	adds	r6, #1
 8014098:	e7ee      	b.n	8014078 <__libc_init_array+0xc>
 801409a:	f855 3b04 	ldr.w	r3, [r5], #4
 801409e:	4798      	blx	r3
 80140a0:	3601      	adds	r6, #1
 80140a2:	e7f2      	b.n	801408a <__libc_init_array+0x1e>
 80140a4:	08014230 	.word	0x08014230
 80140a8:	08014230 	.word	0x08014230
 80140ac:	08014230 	.word	0x08014230
 80140b0:	08014234 	.word	0x08014234

080140b4 <__retarget_lock_acquire_recursive>:
 80140b4:	4770      	bx	lr

080140b6 <__retarget_lock_release_recursive>:
 80140b6:	4770      	bx	lr

080140b8 <memcpy>:
 80140b8:	440a      	add	r2, r1
 80140ba:	4291      	cmp	r1, r2
 80140bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80140c0:	d100      	bne.n	80140c4 <memcpy+0xc>
 80140c2:	4770      	bx	lr
 80140c4:	b510      	push	{r4, lr}
 80140c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140ce:	4291      	cmp	r1, r2
 80140d0:	d1f9      	bne.n	80140c6 <memcpy+0xe>
 80140d2:	bd10      	pop	{r4, pc}

080140d4 <_free_r>:
 80140d4:	b538      	push	{r3, r4, r5, lr}
 80140d6:	4605      	mov	r5, r0
 80140d8:	2900      	cmp	r1, #0
 80140da:	d041      	beq.n	8014160 <_free_r+0x8c>
 80140dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140e0:	1f0c      	subs	r4, r1, #4
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	bfb8      	it	lt
 80140e6:	18e4      	addlt	r4, r4, r3
 80140e8:	f7ff ff96 	bl	8014018 <__malloc_lock>
 80140ec:	4a1d      	ldr	r2, [pc, #116]	@ (8014164 <_free_r+0x90>)
 80140ee:	6813      	ldr	r3, [r2, #0]
 80140f0:	b933      	cbnz	r3, 8014100 <_free_r+0x2c>
 80140f2:	6063      	str	r3, [r4, #4]
 80140f4:	6014      	str	r4, [r2, #0]
 80140f6:	4628      	mov	r0, r5
 80140f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140fc:	f7ff bf92 	b.w	8014024 <__malloc_unlock>
 8014100:	42a3      	cmp	r3, r4
 8014102:	d908      	bls.n	8014116 <_free_r+0x42>
 8014104:	6820      	ldr	r0, [r4, #0]
 8014106:	1821      	adds	r1, r4, r0
 8014108:	428b      	cmp	r3, r1
 801410a:	bf01      	itttt	eq
 801410c:	6819      	ldreq	r1, [r3, #0]
 801410e:	685b      	ldreq	r3, [r3, #4]
 8014110:	1809      	addeq	r1, r1, r0
 8014112:	6021      	streq	r1, [r4, #0]
 8014114:	e7ed      	b.n	80140f2 <_free_r+0x1e>
 8014116:	461a      	mov	r2, r3
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	b10b      	cbz	r3, 8014120 <_free_r+0x4c>
 801411c:	42a3      	cmp	r3, r4
 801411e:	d9fa      	bls.n	8014116 <_free_r+0x42>
 8014120:	6811      	ldr	r1, [r2, #0]
 8014122:	1850      	adds	r0, r2, r1
 8014124:	42a0      	cmp	r0, r4
 8014126:	d10b      	bne.n	8014140 <_free_r+0x6c>
 8014128:	6820      	ldr	r0, [r4, #0]
 801412a:	4401      	add	r1, r0
 801412c:	1850      	adds	r0, r2, r1
 801412e:	4283      	cmp	r3, r0
 8014130:	6011      	str	r1, [r2, #0]
 8014132:	d1e0      	bne.n	80140f6 <_free_r+0x22>
 8014134:	6818      	ldr	r0, [r3, #0]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	6053      	str	r3, [r2, #4]
 801413a:	4408      	add	r0, r1
 801413c:	6010      	str	r0, [r2, #0]
 801413e:	e7da      	b.n	80140f6 <_free_r+0x22>
 8014140:	d902      	bls.n	8014148 <_free_r+0x74>
 8014142:	230c      	movs	r3, #12
 8014144:	602b      	str	r3, [r5, #0]
 8014146:	e7d6      	b.n	80140f6 <_free_r+0x22>
 8014148:	6820      	ldr	r0, [r4, #0]
 801414a:	1821      	adds	r1, r4, r0
 801414c:	428b      	cmp	r3, r1
 801414e:	bf04      	itt	eq
 8014150:	6819      	ldreq	r1, [r3, #0]
 8014152:	685b      	ldreq	r3, [r3, #4]
 8014154:	6063      	str	r3, [r4, #4]
 8014156:	bf04      	itt	eq
 8014158:	1809      	addeq	r1, r1, r0
 801415a:	6021      	streq	r1, [r4, #0]
 801415c:	6054      	str	r4, [r2, #4]
 801415e:	e7ca      	b.n	80140f6 <_free_r+0x22>
 8014160:	bd38      	pop	{r3, r4, r5, pc}
 8014162:	bf00      	nop
 8014164:	20009650 	.word	0x20009650

08014168 <_init>:
 8014168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416a:	bf00      	nop
 801416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801416e:	bc08      	pop	{r3}
 8014170:	469e      	mov	lr, r3
 8014172:	4770      	bx	lr

08014174 <_fini>:
 8014174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014176:	bf00      	nop
 8014178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801417a:	bc08      	pop	{r3}
 801417c:	469e      	mov	lr, r3
 801417e:	4770      	bx	lr
