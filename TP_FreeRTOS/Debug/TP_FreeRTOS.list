
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080141f0  080141f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142a4  080142a4  000161c0  2**0
                  CONTENTS
  4 .ARM          00000008  080142a4  080142a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142ac  080142ac  000161c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142ac  080142ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080142b0  080142b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080142b4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  08014334  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  080143d4  00016120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000095d4  200001c0  08014474  000161c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20009794  08014474  00016794  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000403a5  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a125  00000000  00000000  00056595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003388  00000000  00000000  000606c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000277e  00000000  00000000  00063a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a0c1  00000000  00000000  000661c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b321  00000000  00000000  000a0287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128e8a  00000000  00000000  000eb5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00214432  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d904  00000000  00000000  00214478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  00221d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080141d8 	.word	0x080141d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	080141d8 	.word	0x080141d8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC3_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC3_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC3_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC3_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC3_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC3_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC3_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000562:	f002 fc25 	bl	8002db0 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800056c:	f001 f978 	bl	8001860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000570:	2304      	movs	r3, #4
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000582:	f002 fc59 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800058c:	f001 f968 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001dc 	.word	0x200001dc
 800059c:	40012200 	.word	0x40012200
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x74>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d124      	bne.n	8000610 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80005f6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80005fa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <HAL_ADC_MspInit+0x7c>)
 800060c:	f003 ff18 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40012200 	.word	0x40012200
 800061c:	40023800 	.word	0x40023800
 8000620:	40021400 	.word	0x40021400

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f002 ff25 	bl	800349c <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f001 f902 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000224 	.word	0x20000224
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_DCMI_Init+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f6:	f002 ffc3 	bl	8003680 <HAL_DCMI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000700:	f001 f8ae 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000248 	.word	0x20000248
 800070c:	50050000 	.word	0x50050000

08000710 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	@ 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a50      	ldr	r2, [pc, #320]	@ (8000870 <HAL_DCMI_MspInit+0x160>)
 800072e:	4293      	cmp	r3, r2
 8000730:	f040 809a 	bne.w	8000868 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000734:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000738:	4a4e      	ldr	r2, [pc, #312]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000740:	4b4c      	ldr	r3, [pc, #304]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a48      	ldr	r2, [pc, #288]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
 8000758:	4b46      	ldr	r3, [pc, #280]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000770:	4b40      	ldr	r3, [pc, #256]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
 8000788:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800079a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a0:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d4:	230d      	movs	r3, #13
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	@ (8000878 <HAL_DCMI_MspInit+0x168>)
 80007e0:	f003 fe2e 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80007e4:	2308      	movs	r3, #8
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f4:	230d      	movs	r3, #13
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	@ (800087c <HAL_DCMI_MspInit+0x16c>)
 8000800:	f003 fe1e 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000816:	230d      	movs	r3, #13
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <HAL_DCMI_MspInit+0x170>)
 8000822:	f003 fe0d 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000826:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <HAL_DCMI_MspInit+0x174>)
 8000844:	f003 fdfc 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000848:	2350      	movs	r3, #80	@ 0x50
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000858:	230d      	movs	r3, #13
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_DCMI_MspInit+0x178>)
 8000864:	f003 fdec 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3738      	adds	r7, #56	@ 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	50050000 	.word	0x50050000
 8000874:	40023800 	.word	0x40023800
 8000878:	40021000 	.word	0x40021000
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021800 	.word	0x40021800
 8000884:	40021c00 	.word	0x40021c00
 8000888:	40020000 	.word	0x40020000

0800088c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <MX_DMA2D_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008c2:	f003 f883 	bl	80039cc <HAL_DMA2D_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008cc:	f000 ffc8 	bl	8001860 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d0:	2101      	movs	r1, #1
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008d4:	f003 f9d4 	bl	8003c80 <HAL_DMA2D_ConfigLayer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 ffbf 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000298 	.word	0x20000298
 80008ec:	4002b000 	.word	0x4002b000

080008f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_DMA2D_MspInit+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	205a      	movs	r0, #90	@ 0x5a
 8000920:	f002 fd92 	bl	8003448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000924:	205a      	movs	r0, #90	@ 0x5a
 8000926:	f002 fdab 	bl	8003480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	4002b000 	.word	0x4002b000
 8000938:	40023800 	.word	0x40023800

0800093c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <MX_ETH_Init+0x88>)
 8000944:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000954:	22e1      	movs	r2, #225	@ 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_ETH_Init+0x84>)
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800096e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000976:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_ETH_Init+0x84>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_ETH_Init+0x90>)
 800097c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <MX_ETH_Init+0x94>)
 8000982:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000986:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800098a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x84>)
 800098e:	f003 fa09 	bl	8003da4 <HAL_ETH_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 ff62 	bl	8001860 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a2:	f013 fb7d 	bl	80140a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a8:	2221      	movs	r2, #33	@ 0x21
 80009aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000310 	.word	0x20000310
 80009c4:	40028000 	.word	0x40028000
 80009c8:	200003c0 	.word	0x200003c0
 80009cc:	20000120 	.word	0x20000120
 80009d0:	20000080 	.word	0x20000080
 80009d4:	200002d8 	.word	0x200002d8

080009d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <HAL_ETH_MspInit+0x11c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d178      	bne.n	8000aec <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009fa:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3e      	ldr	r2, [pc, #248]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a8a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <HAL_ETH_MspInit+0x124>)
 8000aa8:	f003 fcca 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aac:	2332      	movs	r3, #50	@ 0x32
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <HAL_ETH_MspInit+0x128>)
 8000ac8:	f003 fcba 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000acc:	2386      	movs	r3, #134	@ 0x86
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_ETH_MspInit+0x12c>)
 8000ae8:	f003 fcaa 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40028000 	.word	0x40028000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <MX_FMC_Init+0x9c>)
 8000b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b8a:	f009 fd42 	bl	800a612 <HAL_SDRAM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b94:	f000 fe64 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003c8 	.word	0x200003c8
 8000ba4:	a0000140 	.word	0xa0000140

08000ba8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d16d      	bne.n	8000ca0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bce:	4a37      	ldr	r2, [pc, #220]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000be2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000be6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482c      	ldr	r0, [pc, #176]	@ (8000cb0 <HAL_FMC_MspInit+0x108>)
 8000bfe:	f003 fc1f 	bl	8004440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <HAL_FMC_MspInit+0x10c>)
 8000c1e:	f003 fc0f 	bl	8004440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <HAL_FMC_MspInit+0x110>)
 8000c3e:	f003 fbff 	bl	8004440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_FMC_MspInit+0x114>)
 8000c5e:	f003 fbef 	bl	8004440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	@ 0x28
 8000c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_FMC_MspInit+0x118>)
 8000c7c:	f003 fbe0 	bl	8004440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c80:	2308      	movs	r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c90:	230c      	movs	r3, #12
 8000c92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <HAL_FMC_MspInit+0x11c>)
 8000c9a:	f003 fbd1 	bl	8004440 <HAL_GPIO_Init>
 8000c9e:	e000      	b.n	8000ca2 <HAL_FMC_MspInit+0xfa>
    return;
 8000ca0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200003fc 	.word	0x200003fc
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021400 	.word	0x40021400
 8000cc0:	40021c00 	.word	0x40021c00
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cd0:	f7ff ff6a 	bl	8000ba8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <vApplicationGetIdleTaskMemory+0x30>)
 8000d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000404 	.word	0x20000404
 8000d40:	2000045c 	.word	0x2000045c

08000d44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_FREERTOS_Init+0x30>)
 8000d4c:	1d3c      	adds	r4, r7, #4
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f010 faf1 	bl	8011348 <osThreadCreate>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <MX_FREERTOS_Init+0x34>)
 8000d6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	080141fc 	.word	0x080141fc
 8000d78:	20000400 	.word	0x20000400

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d84:	f012 fdd6 	bl	8013934 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f010 fb29 	bl	80113e0 <osDelay>
 8000d8e:	e7fb      	b.n	8000d88 <StartDefaultTask+0xc>

08000d90 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	@ 0x40
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4aaf      	ldr	r2, [pc, #700]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4bad      	ldr	r3, [pc, #692]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	4baa      	ldr	r3, [pc, #680]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4aa9      	ldr	r2, [pc, #676]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4ba7      	ldr	r3, [pc, #668]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4aa3      	ldr	r2, [pc, #652]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4ba1      	ldr	r3, [pc, #644]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b9e      	ldr	r3, [pc, #632]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a9d      	ldr	r2, [pc, #628]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b98      	ldr	r3, [pc, #608]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a97      	ldr	r2, [pc, #604]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b95      	ldr	r3, [pc, #596]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b92      	ldr	r3, [pc, #584]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e36:	4b8c      	ldr	r3, [pc, #560]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4e:	4b86      	ldr	r3, [pc, #536]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a85      	ldr	r2, [pc, #532]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b83      	ldr	r3, [pc, #524]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e66:	4b80      	ldr	r3, [pc, #512]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b7d      	ldr	r3, [pc, #500]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a79      	ldr	r2, [pc, #484]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b77      	ldr	r3, [pc, #476]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a73      	ldr	r2, [pc, #460]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b71      	ldr	r3, [pc, #452]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	486e      	ldr	r0, [pc, #440]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000eb4:	f003 fc88 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	210e      	movs	r1, #14
 8000ebc:	486c      	ldr	r0, [pc, #432]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ebe:	f003 fc83 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	486b      	ldr	r0, [pc, #428]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000ec8:	f003 fc7e 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed2:	4867      	ldr	r0, [pc, #412]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ed4:	f003 fc78 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ede:	4866      	ldr	r0, [pc, #408]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ee0:	f003 fc72 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21c8      	movs	r1, #200	@ 0xc8
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <MX_GPIO_Init+0x2ec>)
 8000eea:	f003 fc6d 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	485f      	ldr	r0, [pc, #380]	@ (8001080 <MX_GPIO_Init+0x2f0>)
 8000f02:	f003 fa9d 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f06:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4858      	ldr	r0, [pc, #352]	@ (8001084 <MX_GPIO_Init+0x2f4>)
 8000f24:	f003 fa8c 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4852      	ldr	r0, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x2f8>)
 8000f3e:	f003 fa7f 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f58:	f003 fa72 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	483e      	ldr	r0, [pc, #248]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f74:	f003 fa64 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000f78:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000f92:	f003 fa55 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4838      	ldr	r0, [pc, #224]	@ (800108c <MX_GPIO_Init+0x2fc>)
 8000fac:	f003 fa48 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482b      	ldr	r0, [pc, #172]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f003 fa3a 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4823      	ldr	r0, [pc, #140]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000fe0:	f003 fa2e 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f003 fa21 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8001018:	f003 fa12 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8001032:	f003 fa05 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800103c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 800104e:	f003 f9f7 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x300>
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40022000 	.word	0x40022000
 8001074:	40022800 	.word	0x40022800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40021800 	.word	0x40021800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020400 	.word	0x40020400
 8001088:	40022400 	.word	0x40022400
 800108c:	40020800 	.word	0x40020800
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <MX_GPIO_Init+0x3ac>)
 800109a:	f003 f9d1 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800109e:	23c8      	movs	r3, #200	@ 0xc8
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4822      	ldr	r0, [pc, #136]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010b6:	f003 f9c3 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010ba:	2305      	movs	r3, #5
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ca:	230a      	movs	r3, #10
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <MX_GPIO_Init+0x3b4>)
 80010d6:	f003 f9b3 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010ee:	f003 f9a7 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010f2:	2328      	movs	r3, #40	@ 0x28
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001102:	230a      	movs	r3, #10
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_GPIO_Init+0x3b8>)
 800110e:	f003 f997 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001112:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001124:	2305      	movs	r3, #5
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_GPIO_Init+0x3bc>)
 8001130:	f003 f986 	bl	8004440 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	@ 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40021800 	.word	0x40021800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C1_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f005 fc6a 	bl	8006a64 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fb63 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f005 fcfd 	bl	8006b9c <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb5a 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f005 fd3f 	bl	8006c32 <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fb51 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000065c 	.word	0x2000065c
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_I2C3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <MX_I2C3_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_I2C3_Init+0x74>)
 800120c:	f005 fc2a 	bl	8006a64 <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fb23 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <MX_I2C3_Init+0x74>)
 800121e:	f005 fcbd 	bl	8006b9c <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 fb1a 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001230:	f005 fcff 	bl	8006c32 <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fb11 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200006b0 	.word	0x200006b0
 8001248:	40005c00 	.word	0x40005c00
 800124c:	00c0eaff 	.word	0x00c0eaff

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	@ 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f012 ff15 	bl	80140a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a44      	ldr	r2, [pc, #272]	@ (800138c <HAL_I2C_MspInit+0x13c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13d      	bne.n	80012fc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fe64 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129a:	f000 fae1 	bl	8001860 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80012b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012da:	4619      	mov	r1, r3
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <HAL_I2C_MspInit+0x144>)
 80012de:	f003 f8af 	bl	8004440 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012fa:	e042      	b.n	8001382 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_I2C_MspInit+0x148>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d13d      	bne.n	8001382 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f006 fe20 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001322:	f000 fa9d 	bl	8001860 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800133e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <HAL_I2C_MspInit+0x14c>)
 8001366:	f003 f86b 	bl	8004440 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	@ 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40005c00 	.word	0x40005c00
 800139c:	40021c00 	.word	0x40021c00

080013a0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2234      	movs	r2, #52	@ 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f012 fe77 	bl	80140a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013b4:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <MX_LTDC_Init+0x100>)
 80013b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013b8:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d2:	2228      	movs	r2, #40	@ 0x28
 80013d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d8:	2209      	movs	r2, #9
 80013da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013de:	2235      	movs	r2, #53	@ 0x35
 80013e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ea:	f240 2215 	movw	r2, #533	@ 0x215
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013f2:	f240 121b 	movw	r2, #283	@ 0x11b
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013fa:	f240 2235 	movw	r2, #565	@ 0x235
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001402:	f240 121d 	movw	r2, #285	@ 0x11d
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_LTDC_Init+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_LTDC_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001420:	481e      	ldr	r0, [pc, #120]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001422:	f005 fc53 	bl	8006ccc <HAL_LTDC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fa18 	bl	8001860 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001434:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001438:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800143e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001442:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001448:	23ff      	movs	r3, #255	@ 0xff
 800144a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001450:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001454:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800145a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001460:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001466:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001486:	f005 fdb3 	bl	8006ff0 <HAL_LTDC_ConfigLayer>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001490:	f000 f9e6 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000704 	.word	0x20000704
 80014a0:	40016800 	.word	0x40016800

080014a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <HAL_LTDC_MspInit+0x174>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 80a3 	bne.w	800160e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c8:	4b54      	ldr	r3, [pc, #336]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	4a53      	ldr	r2, [pc, #332]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001510:	4b42      	ldr	r3, [pc, #264]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a41      	ldr	r2, [pc, #260]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	6313      	str	r3, [r2, #48]	@ 0x30
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a35      	ldr	r2, [pc, #212]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b33      	ldr	r3, [pc, #204]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001558:	2310      	movs	r3, #16
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001568:	230e      	movs	r3, #14
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <HAL_LTDC_MspInit+0x17c>)
 8001574:	f002 ff64 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001578:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800158a:	230e      	movs	r3, #14
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <HAL_LTDC_MspInit+0x180>)
 8001596:	f002 ff53 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800159a:	23f7      	movs	r3, #247	@ 0xf7
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015aa:	230e      	movs	r3, #14
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	@ (8001628 <HAL_LTDC_MspInit+0x184>)
 80015b6:	f002 ff43 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015cc:	2309      	movs	r3, #9
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <HAL_LTDC_MspInit+0x188>)
 80015d8:	f002 ff32 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015dc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ee:	230e      	movs	r3, #14
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <HAL_LTDC_MspInit+0x18c>)
 80015fa:	f002 ff21 	bl	8004440 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2058      	movs	r0, #88	@ 0x58
 8001604:	f001 ff20 	bl	8003448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001608:	2058      	movs	r0, #88	@ 0x58
 800160a:	f001 ff39 	bl	8003480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	@ 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40016800 	.word	0x40016800
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40022400 	.word	0x40022400
 8001628:	40022800 	.word	0x40022800
 800162c:	40021800 	.word	0x40021800
 8001630:	40022000 	.word	0x40022000

08001634 <task_led>:
	}
}


void task_led(void *unused)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 800163c:	2102      	movs	r1, #2
 800163e:	4804      	ldr	r0, [pc, #16]	@ (8001650 <task_led+0x1c>)
 8001640:	f003 f8db 	bl	80047fa <HAL_GPIO_TogglePin>
		//printf("La LED change d'etat\r\n");
		vTaskDelay(100);
 8001644:	2064      	movs	r0, #100	@ 0x64
 8001646:	f010 ff9d 	bl	8012584 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 800164a:	bf00      	nop
 800164c:	e7f6      	b.n	800163c <task_led+0x8>
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000

08001654 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800165a:	f001 fb58 	bl	8002d0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800165e:	f000 f849 	bl	80016f4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001662:	f000 f8b9 	bl	80017d8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001666:	f7ff fb93 	bl	8000d90 <MX_GPIO_Init>
	MX_ADC3_Init();
 800166a:	f7fe ff49 	bl	8000500 <MX_ADC3_Init>
	MX_CRC_Init();
 800166e:	f7fe ffd9 	bl	8000624 <MX_CRC_Init>
	MX_DCMI_Init();
 8001672:	f7ff f819 	bl	80006a8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001676:	f7ff f909 	bl	800088c <MX_DMA2D_Init>
	MX_ETH_Init();
 800167a:	f7ff f95f 	bl	800093c <MX_ETH_Init>
	MX_FMC_Init();
 800167e:	f7ff fa43 	bl	8000b08 <MX_FMC_Init>
	MX_I2C1_Init();
 8001682:	f7ff fd65 	bl	8001150 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001686:	f7ff fda3 	bl	80011d0 <MX_I2C3_Init>
	MX_LTDC_Init();
 800168a:	f7ff fe89 	bl	80013a0 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800168e:	f000 f8ed 	bl	800186c <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001692:	f000 f9a7 	bl	80019e4 <MX_RTC_Init>
	MX_SAI2_Init();
 8001696:	f000 fa77 	bl	8001b88 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 800169a:	f000 fb87 	bl	8001dac <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 800169e:	f000 fc09 	bl	8001eb4 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80016a2:	f000 fdd3 	bl	800224c <MX_TIM1_Init>
	MX_TIM2_Init();
 80016a6:	f000 fe7d 	bl	80023a4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80016aa:	f000 fef1 	bl	8002490 <MX_TIM3_Init>
	MX_TIM5_Init();
 80016ae:	f000 ff67 	bl	8002580 <MX_TIM5_Init>
	MX_TIM8_Init();
 80016b2:	f000 ffdd 	bl	8002670 <MX_TIM8_Init>
	MX_TIM12_Init();//
 80016b6:	f001 f82f 	bl	8002718 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80016ba:	f001 f9cf 	bl	8002a5c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80016be:	f001 f9fd 	bl	8002abc <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80016c2:	f00d f86b 	bl	800e79c <MX_FATFS_Init>

	//xTaskCreate(task_give, "Task GIVE", TASK_GIVE_STACK_DEPTH, NULL, TASK_GIVE_PRIORITY, NULL);
	//xTaskCreate(task_take, "Task TAKE", TASK_TAKE_STACK_DEPTH, NULL, TASK_TAKE_PRIORITY, NULL);

	BaseType_t returned_value;
	returned_value = xTaskCreate(task_led, "Task LED", TASK_LED_STACK_DEPTH, NULL, TASK_LED_PRIORITY, NULL);
 80016c6:	2300      	movs	r3, #0
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2304      	movs	r3, #4
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	22fa      	movs	r2, #250	@ 0xfa
 80016d2:	4906      	ldr	r1, [pc, #24]	@ (80016ec <main+0x98>)
 80016d4:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <main+0x9c>)
 80016d6:	f010 fe11 	bl	80122fc <xTaskCreate>
 80016da:	6078      	str	r0, [r7, #4]
	//	Error_Handler();
	//}

	//xTaskCreate(task_led_bouton, "Task LED Bouton", TASK_LED_BOUTON_STACK_DEPTH, NULL, TASK_LED_BOUTON_PRIORITY, NULL);

	vTaskStartScheduler(); // Appelle l'OS (avec une fonction freertos)
 80016dc:	f010 ff8a 	bl	80125f4 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80016e0:	f7ff fb30 	bl	8000d44 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80016e4:	f00f fe0d 	bl	8011302 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <main+0x94>
 80016ec:	08014218 	.word	0x08014218
 80016f0:	08001635 	.word	0x08001635

080016f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	@ 0x50
 80016f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	@ 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f012 fccc 	bl	80140a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001718:	f005 fe42 	bl	80073a0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <SystemClock_Config+0xdc>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	4a2b      	ldr	r2, [pc, #172]	@ (80017d0 <SystemClock_Config+0xdc>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	@ 0x40
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <SystemClock_Config+0xdc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <SystemClock_Config+0xe0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a26      	ldr	r2, [pc, #152]	@ (80017d4 <SystemClock_Config+0xe0>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <SystemClock_Config+0xe0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800174c:	2309      	movs	r3, #9
 800174e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001756:	2301      	movs	r3, #1
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001764:	2319      	movs	r3, #25
 8001766:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001768:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800176c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001772:	2309      	movs	r3, #9
 8001774:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	4618      	mov	r0, r3
 800177c:	f005 ff32 	bl	80075e4 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001786:	f000 f86b 	bl	8001860 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800178a:	f005 fe19 	bl	80073c0 <HAL_PWREx_EnableOverDrive>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001794:	f000 f864 	bl	8001860 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2106      	movs	r1, #6
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 f9b8 	bl	8007b2c <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80017c2:	f000 f84d 	bl	8001860 <Error_Handler>
	}
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	@ 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0a2      	sub	sp, #136	@ 0x88
 80017dc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2284      	movs	r2, #132	@ 0x84
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f012 fc5b 	bl	80140a0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <PeriphCommonClock_Config+0x60>)
 80017ec:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017ee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017f2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017fc:	2303      	movs	r3, #3
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001804:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800180a:	2300      	movs	r3, #0
 800180c:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800180e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fb9c 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 800182a:	f000 f819 	bl	8001860 <Error_Handler>
	}
}
 800182e:	bf00      	nop
 8001830:	3788      	adds	r7, #136	@ 0x88
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	00b00008 	.word	0x00b00008

0800183c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800184e:	f001 fa6b 	bl	8002d28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40001000 	.word	0x40001000

08001860 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <Error_Handler+0x8>

0800186c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 8001872:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <MX_QUADSPI_Init+0x54>)
 8001874:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 8001878:	2201      	movs	r2, #1
 800187a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 800187e:	2204      	movs	r2, #4
 8001880:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 8001884:	2210      	movs	r2, #16
 8001886:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 800188a:	2218      	movs	r2, #24
 800188c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 8001890:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001894:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	@ (80018bc <MX_QUADSPI_Init+0x50>)
 80018aa:	f005 fdd9 	bl	8007460 <HAL_QSPI_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f7ff ffd4 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200007ac 	.word	0x200007ac
 80018c0:	a0001000 	.word	0xa0001000

080018c4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	@ 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3b      	ldr	r2, [pc, #236]	@ (80019d0 <HAL_QSPI_MspInit+0x10c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d170      	bne.n	80019c8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018e6:	4b3b      	ldr	r3, [pc, #236]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 80018e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ea:	4a3a      	ldr	r2, [pc, #232]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 80018f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a28      	ldr	r2, [pc, #160]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_QSPI_MspInit+0x110>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001946:	2304      	movs	r3, #4
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001956:	2309      	movs	r3, #9
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	481d      	ldr	r0, [pc, #116]	@ (80019d8 <HAL_QSPI_MspInit+0x114>)
 8001962:	f002 fd6d 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001966:	2340      	movs	r3, #64	@ 0x40
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001976:	230a      	movs	r3, #10
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4816      	ldr	r0, [pc, #88]	@ (80019dc <HAL_QSPI_MspInit+0x118>)
 8001982:	f002 fd5d 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001986:	2304      	movs	r3, #4
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001996:	2309      	movs	r3, #9
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	480e      	ldr	r0, [pc, #56]	@ (80019dc <HAL_QSPI_MspInit+0x118>)
 80019a2:	f002 fd4d 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80019a6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019b8:	2309      	movs	r3, #9
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <HAL_QSPI_MspInit+0x11c>)
 80019c4:	f002 fd3c 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019c8:	bf00      	nop
 80019ca:	3730      	adds	r7, #48	@ 0x30
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	a0001000 	.word	0xa0001000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	@ 0x40
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2228      	movs	r2, #40	@ 0x28
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f012 fb4b 	bl	80140a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a0a:	4b46      	ldr	r3, [pc, #280]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a0c:	4a46      	ldr	r2, [pc, #280]	@ (8001b28 <MX_RTC_Init+0x144>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a10:	4b44      	ldr	r3, [pc, #272]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a16:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a18:	227f      	movs	r2, #127	@ 0x7f
 8001a1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a1c:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a22:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a28:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a34:	483b      	ldr	r0, [pc, #236]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a36:	f006 ffc1 	bl	80089bc <HAL_RTC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a40:	f7ff ff0e 	bl	8001860 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	482f      	ldr	r0, [pc, #188]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a68:	f007 f82c 	bl	8008ac4 <HAL_RTC_SetTime>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a72:	f7ff fef5 	bl	8001860 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	4823      	ldr	r0, [pc, #140]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001a98:	f007 f8ae 	bl	8008bf8 <HAL_RTC_SetDate>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001aa2:	f7ff fedd 	bl	8001860 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4619      	mov	r1, r3
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001ade:	f007 f90f 	bl	8008d00 <HAL_RTC_SetAlarm>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ae8:	f7ff feba 	bl	8001860 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	2201      	movs	r2, #1
 8001af6:	4619      	mov	r1, r3
 8001af8:	480a      	ldr	r0, [pc, #40]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001afa:	f007 f901 	bl	8008d00 <HAL_RTC_SetAlarm>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001b04:	f7ff feac 	bl	8001860 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_RTC_Init+0x140>)
 8001b0e:	f007 fac1 	bl	8009094 <HAL_RTCEx_SetTimeStamp>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001b18:	f7ff fea2 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3740      	adds	r7, #64	@ 0x40
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200007f8 	.word	0x200007f8
 8001b28:	40002800 	.word	0x40002800

08001b2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0a4      	sub	sp, #144	@ 0x90
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2284      	movs	r2, #132	@ 0x84
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f012 faaf 	bl	80140a0 <memset>
  if(rtcHandle->Instance==RTC)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_RTC_MspInit+0x54>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d114      	bne.n	8001b76 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f006 f9fe 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001b66:	f7ff fe7b 	bl	8001860 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_RTC_MspInit+0x58>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <HAL_RTC_MspInit+0x58>)
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b74:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3790      	adds	r7, #144	@ 0x90
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40002800 	.word	0x40002800
 8001b84:	40023800 	.word	0x40023800

08001b88 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc8 <MX_SAI2_Init+0x140>)
 8001b90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b92:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b98:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b9e:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001ba0:	2240      	movs	r2, #64	@ 0x40
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ba4:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bb0:	4b44      	ldr	r3, [pc, #272]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bb6:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bc2:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bca:	4a40      	ldr	r2, [pc, #256]	@ (8001ccc <MX_SAI2_Init+0x144>)
 8001bcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bce:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001be0:	4b38      	ldr	r3, [pc, #224]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001be8:	2208      	movs	r2, #8
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001bec:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bfe:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c1c:	4829      	ldr	r0, [pc, #164]	@ (8001cc4 <MX_SAI2_Init+0x13c>)
 8001c1e:	f007 faa1 	bl	8009164 <HAL_SAI_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c28:	f7ff fe1a 	bl	8001860 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c2c:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c2e:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <MX_SAI2_Init+0x14c>)
 8001c30:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c32:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c40:	2240      	movs	r2, #64	@ 0x40
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cb0:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <MX_SAI2_Init+0x148>)
 8001cb2:	f007 fa57 	bl	8009164 <HAL_SAI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001cbc:	f7ff fdd0 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000818 	.word	0x20000818
 8001cc8:	40015c04 	.word	0x40015c04
 8001ccc:	0002ee00 	.word	0x0002ee00
 8001cd0:	2000089c 	.word	0x2000089c
 8001cd4:	40015c24 	.word	0x40015c24

08001cd8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <HAL_SAI_MspInit+0xbc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d124      	bne.n	8001d34 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a29      	ldr	r2, [pc, #164]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001d12:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d14:	23f0      	movs	r3, #240	@ 0xf0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d24:	230a      	movs	r3, #10
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481c      	ldr	r0, [pc, #112]	@ (8001da0 <HAL_SAI_MspInit+0xc8>)
 8001d30:	f002 fb86 	bl	8004440 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_SAI_MspInit+0xcc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d125      	bne.n	8001d8a <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10b      	bne.n	8001d5e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_SAI_MspInit+0xc4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_SAI_MspInit+0xc0>)
 8001d66:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <HAL_SAI_MspInit+0xd0>)
 8001d86:	f002 fb5b 	bl	8004440 <HAL_GPIO_Init>

    }
}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	@ 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40015c04 	.word	0x40015c04
 8001d98:	20000920 	.word	0x20000920
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40015c24 	.word	0x40015c24
 8001da8:	40021800 	.word	0x40021800

08001dac <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <MX_SDMMC1_SD_Init+0x40>)
 8001db4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dce:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <MX_SDMMC1_SD_Init+0x3c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000924 	.word	0x20000924
 8001dec:	40012c00 	.word	0x40012c00

08001df0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ea4 <HAL_SD_MspInit+0xb4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d144      	bne.n	8001e9c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_SD_MspInit+0xb8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e5a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480d      	ldr	r0, [pc, #52]	@ (8001eac <HAL_SD_MspInit+0xbc>)
 8001e78:	f002 fae2 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	@ (8001eb0 <HAL_SD_MspInit+0xc0>)
 8001e98:	f002 fad2 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00

08001eb4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001ebe:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001efe:	f008 fbbd 	bl	800a67c <HAL_SPDIFRX_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f08:	f7ff fcaa 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200009a8 	.word	0x200009a8

08001f14 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0aa      	sub	sp, #168	@ 0xa8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	2284      	movs	r2, #132	@ 0x84
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f012 f8b3 	bl	80140a0 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001f42:	d143      	bne.n	8001fcc <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f4a:	2364      	movs	r3, #100	@ 0x64
 8001f4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4618      	mov	r0, r3
 8001f64:	f005 fffa 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f6e:	f7ff fc77 	bl	8001860 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4804      	ldr	r0, [pc, #16]	@ (8001fd8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001fc8:	f002 fa3a 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001fcc:	bf00      	nop
 8001fce:	37a8      	adds	r7, #168	@ 0xa8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020c00 	.word	0x40020c00

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <HAL_MspInit+0x4c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	210f      	movs	r1, #15
 8002016:	f06f 0001 	mvn.w	r0, #1
 800201a:	f001 fa15 	bl	8003448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	@ 0x38
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800203c:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_InitTick+0xe0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <HAL_InitTick+0xe0>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6413      	str	r3, [r2, #64]	@ 0x40
 8002048:	4b30      	ldr	r3, [pc, #192]	@ (800210c <HAL_InitTick+0xe0>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002054:	f107 0210 	add.w	r2, r7, #16
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f005 ff4a 	bl	8007ef8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800206e:	f005 ff1b 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 8002072:	6378      	str	r0, [r7, #52]	@ 0x34
 8002074:	e004      	b.n	8002080 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002076:	f005 ff17 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800207a:	4603      	mov	r3, r0
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <HAL_InitTick+0xe4>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3b01      	subs	r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800208e:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <HAL_InitTick+0xe8>)
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <HAL_InitTick+0xec>)
 8002092:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002094:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <HAL_InitTick+0xe8>)
 8002096:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800209a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_InitTick+0xe8>)
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <HAL_InitTick+0xe8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_InitTick+0xe8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_InitTick+0xe8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020b4:	4817      	ldr	r0, [pc, #92]	@ (8002114 <HAL_InitTick+0xe8>)
 80020b6:	f008 fb3d 	bl	800a734 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11b      	bne.n	8002100 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020c8:	4812      	ldr	r0, [pc, #72]	@ (8002114 <HAL_InitTick+0xe8>)
 80020ca:	f008 fb8b 	bl	800a7e4 <HAL_TIM_Base_Start_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020dc:	2036      	movs	r0, #54	@ 0x36
 80020de:	f001 f9cf 	bl	8003480 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d808      	bhi.n	80020fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	2036      	movs	r0, #54	@ 0x36
 80020ee:	f001 f9ab 	bl	8003448 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <HAL_InitTick+0xf0>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	e002      	b.n	8002100 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002104:	4618      	mov	r0, r3
 8002106:	3738      	adds	r7, #56	@ 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	431bde83 	.word	0x431bde83
 8002114:	200009f4 	.word	0x200009f4
 8002118:	40001000 	.word	0x40001000
 800211c:	20000004 	.word	0x20000004

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <USART1_IRQHandler+0x10>)
 800215e:	f009 fc39 	bl	800b9d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000c0c 	.word	0x20000c0c

0800216c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <TIM6_DAC_IRQHandler+0x10>)
 8002172:	f008 fc06 	bl	800a982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200009f4 	.word	0x200009f4

08002180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <OTG_FS_IRQHandler+0x10>)
 8002186:	f002 fe33 	bl	8004df0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000926c 	.word	0x2000926c

08002194 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <LTDC_IRQHandler+0x10>)
 800219a:	f004 fe67 	bl	8006e6c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000704 	.word	0x20000704

080021a8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <DMA2D_IRQHandler+0x10>)
 80021ae:	f001 fc57 	bl	8003a60 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000298 	.word	0x20000298

080021bc <_sbrk>:
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
 80021ec:	f011 ff70 	bl	80140d0 <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	220c      	movs	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20050000 	.word	0x20050000
 800221c:	00000400 	.word	0x00000400
 8002220:	20000a40 	.word	0x20000a40
 8002224:	20009798 	.word	0x20009798

08002228 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <SystemInit+0x20>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <SystemInit+0x20>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b09a      	sub	sp, #104	@ 0x68
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	222c      	movs	r2, #44	@ 0x2c
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f011 ff0a 	bl	80140a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800228c:	4b43      	ldr	r3, [pc, #268]	@ (800239c <MX_TIM1_Init+0x150>)
 800228e:	4a44      	ldr	r2, [pc, #272]	@ (80023a0 <MX_TIM1_Init+0x154>)
 8002290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002292:	4b42      	ldr	r3, [pc, #264]	@ (800239c <MX_TIM1_Init+0x150>)
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b40      	ldr	r3, [pc, #256]	@ (800239c <MX_TIM1_Init+0x150>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800229e:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <MX_TIM1_Init+0x150>)
 80022a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <MX_TIM1_Init+0x150>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ac:	4b3b      	ldr	r3, [pc, #236]	@ (800239c <MX_TIM1_Init+0x150>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <MX_TIM1_Init+0x150>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022b8:	4838      	ldr	r0, [pc, #224]	@ (800239c <MX_TIM1_Init+0x150>)
 80022ba:	f008 fa3b 	bl	800a734 <HAL_TIM_Base_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022c4:	f7ff facc 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022d2:	4619      	mov	r1, r3
 80022d4:	4831      	ldr	r0, [pc, #196]	@ (800239c <MX_TIM1_Init+0x150>)
 80022d6:	f008 fd6f 	bl	800adb8 <HAL_TIM_ConfigClockSource>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022e0:	f7ff fabe 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022e4:	482d      	ldr	r0, [pc, #180]	@ (800239c <MX_TIM1_Init+0x150>)
 80022e6:	f008 faf5 	bl	800a8d4 <HAL_TIM_PWM_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80022f0:	f7ff fab6 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002300:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002304:	4619      	mov	r1, r3
 8002306:	4825      	ldr	r0, [pc, #148]	@ (800239c <MX_TIM1_Init+0x150>)
 8002308:	f009 f9ec 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002312:	f7ff faa5 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	@ 0x60
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002332:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4818      	ldr	r0, [pc, #96]	@ (800239c <MX_TIM1_Init+0x150>)
 800233c:	f008 fc28 	bl	800ab90 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002346:	f7ff fa8b 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800236c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <MX_TIM1_Init+0x150>)
 8002380:	f009 fa3e 	bl	800b800 <HAL_TIMEx_ConfigBreakDeadTime>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800238a:	f7ff fa69 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800238e:	4803      	ldr	r0, [pc, #12]	@ (800239c <MX_TIM1_Init+0x150>)
 8002390:	f000 fa96 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8002394:	bf00      	nop
 8002396:	3768      	adds	r7, #104	@ 0x68
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000a44 	.word	0x20000a44
 80023a0:	40010000 	.word	0x40010000

080023a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	@ 0x38
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d6:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023de:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023ea:	4b28      	ldr	r3, [pc, #160]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f2:	4b26      	ldr	r3, [pc, #152]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f8:	4b24      	ldr	r3, [pc, #144]	@ (800248c <MX_TIM2_Init+0xe8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023fe:	4823      	ldr	r0, [pc, #140]	@ (800248c <MX_TIM2_Init+0xe8>)
 8002400:	f008 f998 	bl	800a734 <HAL_TIM_Base_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800240a:	f7ff fa29 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002414:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002418:	4619      	mov	r1, r3
 800241a:	481c      	ldr	r0, [pc, #112]	@ (800248c <MX_TIM2_Init+0xe8>)
 800241c:	f008 fccc 	bl	800adb8 <HAL_TIM_ConfigClockSource>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002426:	f7ff fa1b 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800242a:	4818      	ldr	r0, [pc, #96]	@ (800248c <MX_TIM2_Init+0xe8>)
 800242c:	f008 fa52 	bl	800a8d4 <HAL_TIM_PWM_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002436:	f7ff fa13 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	4810      	ldr	r0, [pc, #64]	@ (800248c <MX_TIM2_Init+0xe8>)
 800244a:	f009 f94b 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002454:	f7ff fa04 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002458:	2360      	movs	r3, #96	@ 0x60
 800245a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	4807      	ldr	r0, [pc, #28]	@ (800248c <MX_TIM2_Init+0xe8>)
 8002470:	f008 fb8e 	bl	800ab90 <HAL_TIM_PWM_ConfigChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800247a:	f7ff f9f1 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800247e:	4803      	ldr	r0, [pc, #12]	@ (800248c <MX_TIM2_Init+0xe8>)
 8002480:	f000 fa1e 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8002484:	bf00      	nop
 8002486:	3738      	adds	r7, #56	@ 0x38
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000a90 	.word	0x20000a90

08002490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	@ 0x38
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024c4:	4a2d      	ldr	r2, [pc, #180]	@ (800257c <MX_TIM3_Init+0xec>)
 80024c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024e8:	4823      	ldr	r0, [pc, #140]	@ (8002578 <MX_TIM3_Init+0xe8>)
 80024ea:	f008 f923 	bl	800a734 <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80024f4:	f7ff f9b4 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002502:	4619      	mov	r1, r3
 8002504:	481c      	ldr	r0, [pc, #112]	@ (8002578 <MX_TIM3_Init+0xe8>)
 8002506:	f008 fc57 	bl	800adb8 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002510:	f7ff f9a6 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002514:	4818      	ldr	r0, [pc, #96]	@ (8002578 <MX_TIM3_Init+0xe8>)
 8002516:	f008 f9dd 	bl	800a8d4 <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002520:	f7ff f99e 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4811      	ldr	r0, [pc, #68]	@ (8002578 <MX_TIM3_Init+0xe8>)
 8002534:	f009 f8d6 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800253e:	f7ff f98f 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002542:	2360      	movs	r3, #96	@ 0x60
 8002544:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002552:	463b      	mov	r3, r7
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	@ (8002578 <MX_TIM3_Init+0xe8>)
 800255a:	f008 fb19 	bl	800ab90 <HAL_TIM_PWM_ConfigChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002564:	f7ff f97c 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <MX_TIM3_Init+0xe8>)
 800256a:	f000 f9a9 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3738      	adds	r7, #56	@ 0x38
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000adc 	.word	0x20000adc
 800257c:	40000400 	.word	0x40000400

08002580 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	@ 0x38
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	615a      	str	r2, [r3, #20]
 80025b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025b4:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <MX_TIM5_Init+0xec>)
 80025b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025c4:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025d8:	4823      	ldr	r0, [pc, #140]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025da:	f008 f8ab 	bl	800a734 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80025e4:	f7ff f93c 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f2:	4619      	mov	r1, r3
 80025f4:	481c      	ldr	r0, [pc, #112]	@ (8002668 <MX_TIM5_Init+0xe8>)
 80025f6:	f008 fbdf 	bl	800adb8 <HAL_TIM_ConfigClockSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002600:	f7ff f92e 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002604:	4818      	ldr	r0, [pc, #96]	@ (8002668 <MX_TIM5_Init+0xe8>)
 8002606:	f008 f965 	bl	800a8d4 <HAL_TIM_PWM_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002610:	f7ff f926 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	4811      	ldr	r0, [pc, #68]	@ (8002668 <MX_TIM5_Init+0xe8>)
 8002624:	f009 f85e 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800262e:	f7ff f917 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002632:	2360      	movs	r3, #96	@ 0x60
 8002634:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	220c      	movs	r2, #12
 8002646:	4619      	mov	r1, r3
 8002648:	4807      	ldr	r0, [pc, #28]	@ (8002668 <MX_TIM5_Init+0xe8>)
 800264a:	f008 faa1 	bl	800ab90 <HAL_TIM_PWM_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002654:	f7ff f904 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002658:	4803      	ldr	r0, [pc, #12]	@ (8002668 <MX_TIM5_Init+0xe8>)
 800265a:	f000 f931 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 800265e:	bf00      	nop
 8002660:	3738      	adds	r7, #56	@ 0x38
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000b28 	.word	0x20000b28
 800266c:	40000c00 	.word	0x40000c00

08002670 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <MX_TIM8_Init+0xa0>)
 8002690:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <MX_TIM8_Init+0xa4>)
 8002692:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002694:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <MX_TIM8_Init+0xa0>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <MX_TIM8_Init+0xa0>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026ba:	4815      	ldr	r0, [pc, #84]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026bc:	f008 f83a 	bl	800a734 <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80026c6:	f7ff f8cb 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4619      	mov	r1, r3
 80026d6:	480e      	ldr	r0, [pc, #56]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026d8:	f008 fb6e 	bl	800adb8 <HAL_TIM_ConfigClockSource>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80026e2:	f7ff f8bd 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	@ (8002710 <MX_TIM8_Init+0xa0>)
 80026f8:	f008 fff4 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002702:	f7ff f8ad 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000b74 	.word	0x20000b74
 8002714:	40010400 	.word	0x40010400

08002718 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	615a      	str	r2, [r3, #20]
 800272e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002730:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <MX_TIM12_Init+0x84>)
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <MX_TIM12_Init+0x88>)
 8002734:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <MX_TIM12_Init+0x84>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b17      	ldr	r3, [pc, #92]	@ (800279c <MX_TIM12_Init+0x84>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <MX_TIM12_Init+0x84>)
 8002744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002748:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <MX_TIM12_Init+0x84>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <MX_TIM12_Init+0x84>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002756:	4811      	ldr	r0, [pc, #68]	@ (800279c <MX_TIM12_Init+0x84>)
 8002758:	f008 f8bc 	bl	800a8d4 <HAL_TIM_PWM_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002762:	f7ff f87d 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	@ 0x60
 8002768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	4807      	ldr	r0, [pc, #28]	@ (800279c <MX_TIM12_Init+0x84>)
 800277e:	f008 fa07 	bl	800ab90 <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002788:	f7ff f86a 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800278c:	4803      	ldr	r0, [pc, #12]	@ (800279c <MX_TIM12_Init+0x84>)
 800278e:	f000 f897 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000bc0 	.word	0x20000bc0
 80027a0:	40001800 	.word	0x40001800

080027a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2e      	ldr	r2, [pc, #184]	@ (800286c <HAL_TIM_Base_MspInit+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80027ce:	e046      	b.n	800285e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	69bb      	ldr	r3, [r7, #24]
}
 80027f2:	e034      	b.n	800285e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <HAL_TIM_Base_MspInit+0xd0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
}
 8002816:	e022      	b.n	800285e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_TIM_Base_MspInit+0xd4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10c      	bne.n	800283c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
}
 800283a:	e010      	b.n	800285e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0e      	ldr	r2, [pc, #56]	@ (800287c <HAL_TIM_Base_MspInit+0xd8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10b      	bne.n	800285e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_TIM_Base_MspInit+0xcc>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40023800 	.word	0x40023800
 8002874:	40000400 	.word	0x40000400
 8002878:	40000c00 	.word	0x40000c00
 800287c:	40010400 	.word	0x40010400

08002880 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <HAL_TIM_PWM_MspInit+0x38>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10b      	bne.n	80028aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002892:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_TIM_PWM_MspInit+0x3c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40001800 	.word	0x40001800
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_TIM_MspPostInit+0x178>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11d      	bne.n	800291e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b56      	ldr	r3, [pc, #344]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a55      	ldr	r2, [pc, #340]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290c:	2301      	movs	r3, #1
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	484a      	ldr	r0, [pc, #296]	@ (8002a40 <HAL_TIM_MspPostInit+0x180>)
 8002918:	f001 fd92 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800291c:	e087      	b.n	8002a2e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002926:	d11d      	bne.n	8002964 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b44      	ldr	r3, [pc, #272]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	4a43      	ldr	r2, [pc, #268]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6313      	str	r3, [r2, #48]	@ 0x30
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002940:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002952:	2301      	movs	r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	4838      	ldr	r0, [pc, #224]	@ (8002a40 <HAL_TIM_MspPostInit+0x180>)
 800295e:	f001 fd6f 	bl	8004440 <HAL_GPIO_Init>
}
 8002962:	e064      	b.n	8002a2e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a36      	ldr	r2, [pc, #216]	@ (8002a44 <HAL_TIM_MspPostInit+0x184>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11c      	bne.n	80029a8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	4b33      	ldr	r3, [pc, #204]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a32      	ldr	r2, [pc, #200]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002986:	2310      	movs	r3, #16
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4829      	ldr	r0, [pc, #164]	@ (8002a48 <HAL_TIM_MspPostInit+0x188>)
 80029a2:	f001 fd4d 	bl	8004440 <HAL_GPIO_Init>
}
 80029a6:	e042      	b.n	8002a2e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a27      	ldr	r2, [pc, #156]	@ (8002a4c <HAL_TIM_MspPostInit+0x18c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11c      	bne.n	80029ec <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a21      	ldr	r2, [pc, #132]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029da:	2302      	movs	r3, #2
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	481a      	ldr	r0, [pc, #104]	@ (8002a50 <HAL_TIM_MspPostInit+0x190>)
 80029e6:	f001 fd2b 	bl	8004440 <HAL_GPIO_Init>
}
 80029ea:	e020      	b.n	8002a2e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a18      	ldr	r2, [pc, #96]	@ (8002a54 <HAL_TIM_MspPostInit+0x194>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11b      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 80029fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_TIM_MspPostInit+0x17c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a0e:	2340      	movs	r3, #64	@ 0x40
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a1e:	2309      	movs	r3, #9
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	480b      	ldr	r0, [pc, #44]	@ (8002a58 <HAL_TIM_MspPostInit+0x198>)
 8002a2a:	f001 fd09 	bl	8004440 <HAL_GPIO_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	3730      	adds	r7, #48	@ 0x30
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40021c00 	.word	0x40021c00

08002a5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <MX_USART1_UART_Init+0x5c>)
 8002a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a82:	220c      	movs	r2, #12
 8002a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <MX_USART1_UART_Init+0x58>)
 8002aa0:	f008 ff4a 	bl	800b938 <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002aaa:	f7fe fed9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000c0c 	.word	0x20000c0c
 8002ab8:	40011000 	.word	0x40011000

08002abc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ac2:	4a15      	ldr	r2, [pc, #84]	@ (8002b18 <MX_USART6_UART_Init+0x5c>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002acc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002afe:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <MX_USART6_UART_Init+0x58>)
 8002b00:	f008 ff1a 	bl	800b938 <HAL_UART_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002b0a:	f7fe fea9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000c94 	.word	0x20000c94
 8002b18:	40011400 	.word	0x40011400

08002b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0ae      	sub	sp, #184	@ 0xb8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	2284      	movs	r2, #132	@ 0x84
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f011 faaf 	bl	80140a0 <memset>
  if(uartHandle->Instance==USART1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a57      	ldr	r2, [pc, #348]	@ (8002ca4 <HAL_UART_MspInit+0x188>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d165      	bne.n	8002c18 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b4c:	2340      	movs	r3, #64	@ 0x40
 8002b4e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b50:	2300      	movs	r3, #0
 8002b52:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b54:	f107 0320 	add.w	r3, r7, #32
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 f9ff 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b64:	f7fe fe7c 	bl	8001860 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b74:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b80:	4b49      	ldr	r3, [pc, #292]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	4a48      	ldr	r2, [pc, #288]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba4:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4835      	ldr	r0, [pc, #212]	@ (8002cac <HAL_UART_MspInit+0x190>)
 8002bd6:	f001 fc33 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf4:	2307      	movs	r3, #7
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bfa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	482b      	ldr	r0, [pc, #172]	@ (8002cb0 <HAL_UART_MspInit+0x194>)
 8002c02:	f001 fc1d 	bl	8004440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2105      	movs	r1, #5
 8002c0a:	2025      	movs	r0, #37	@ 0x25
 8002c0c:	f000 fc1c 	bl	8003448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c10:	2025      	movs	r0, #37	@ 0x25
 8002c12:	f000 fc35 	bl	8003480 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c16:	e040      	b.n	8002c9a <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <HAL_UART_MspInit+0x198>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d13b      	bne.n	8002c9a <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c2c:	f107 0320 	add.w	r3, r7, #32
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 f993 	bl	8007f5c <HAL_RCCEx_PeriphCLKConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002c3c:	f7fe fe10 	bl	8001860 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c46:	f043 0320 	orr.w	r3, r3, #32
 8002c4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_UART_MspInit+0x18c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002c70:	23c0      	movs	r3, #192	@ 0xc0
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4808      	ldr	r0, [pc, #32]	@ (8002cb8 <HAL_UART_MspInit+0x19c>)
 8002c96:	f001 fbd3 	bl	8004440 <HAL_GPIO_Init>
}
 8002c9a:	bf00      	nop
 8002c9c:	37b8      	adds	r7, #184	@ 0xb8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40011400 	.word	0x40011400
 8002cb8:	40020800 	.word	0x40020800

08002cbc <Reset_Handler>:
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf4 <LoopFillZerobss+0xe>
 8002cc0:	f7ff fab2 	bl	8002228 <SystemInit>
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <LoopFillZerobss+0x12>)
 8002cc6:	490d      	ldr	r1, [pc, #52]	@ (8002cfc <LoopFillZerobss+0x16>)
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <LoopFillZerobss+0x1a>)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e002      	b.n	8002cd4 <LoopCopyDataInit>

08002cce <CopyDataInit>:
 8002cce:	58d4      	ldr	r4, [r2, r3]
 8002cd0:	50c4      	str	r4, [r0, r3]
 8002cd2:	3304      	adds	r3, #4

08002cd4 <LoopCopyDataInit>:
 8002cd4:	18c4      	adds	r4, r0, r3
 8002cd6:	428c      	cmp	r4, r1
 8002cd8:	d3f9      	bcc.n	8002cce <CopyDataInit>
 8002cda:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <LoopFillZerobss+0x1e>)
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d08 <LoopFillZerobss+0x22>)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e001      	b.n	8002ce6 <LoopFillZerobss>

08002ce2 <FillZerobss>:
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	3204      	adds	r2, #4

08002ce6 <LoopFillZerobss>:
 8002ce6:	42a2      	cmp	r2, r4
 8002ce8:	d3fb      	bcc.n	8002ce2 <FillZerobss>
 8002cea:	f011 f9f7 	bl	80140dc <__libc_init_array>
 8002cee:	f7fe fcb1 	bl	8001654 <main>
 8002cf2:	4770      	bx	lr
 8002cf4:	20050000 	.word	0x20050000
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000080 	.word	0x20000080
 8002d00:	080142b4 	.word	0x080142b4
 8002d04:	200001c0 	.word	0x200001c0
 8002d08:	20009794 	.word	0x20009794

08002d0c <ADC_IRQHandler>:
 8002d0c:	e7fe      	b.n	8002d0c <ADC_IRQHandler>

08002d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f000 fb8d 	bl	8003432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d18:	200f      	movs	r0, #15
 8002d1a:	f7ff f987 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1e:	f7ff f95d 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_IncTick+0x20>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_IncTick+0x24>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <HAL_IncTick+0x24>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	20000d1c 	.word	0x20000d1c

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <HAL_GetTick+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000d1c 	.word	0x20000d1c

08002d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff ffee 	bl	8002d50 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d80:	d005      	beq.n	8002d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <HAL_Delay+0x44>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8e:	bf00      	nop
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d8f7      	bhi.n	8002d90 <HAL_Delay+0x28>
  {
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000008 	.word	0x20000008

08002db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e031      	b.n	8002e2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fbe8 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_ADC_Init+0x84>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f970 	bl	80030e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e1a:	e001      	b.n	8002e20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	ffffeefd 	.word	0xffffeefd

08002e38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e136      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x28a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d93a      	bls.n	8002eda <HAL_ADC_ConfigChannel+0xa2>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e6c:	d035      	beq.n	8002eda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68d9      	ldr	r1, [r3, #12]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	3b1e      	subs	r3, #30
 8002e84:	2207      	movs	r2, #7
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a8d      	ldr	r2, [pc, #564]	@ (80030d0 <HAL_ADC_ConfigChannel+0x298>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68d9      	ldr	r1, [r3, #12]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	061a      	lsls	r2, r3, #24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb2:	e035      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4403      	add	r3, r0
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed8:	e022      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6919      	ldr	r1, [r3, #16]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	2207      	movs	r2, #7
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	400a      	ands	r2, r1
 8002efc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	409a      	lsls	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d824      	bhi.n	8002f72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	3b05      	subs	r3, #5
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43da      	mvns	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	400a      	ands	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b05      	subs	r3, #5
 8002f64:	fa00 f203 	lsl.w	r2, r0, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f70:	e04c      	b.n	800300c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d824      	bhi.n	8002fc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b23      	subs	r3, #35	@ 0x23
 8002f8c:	221f      	movs	r2, #31
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b23      	subs	r3, #35	@ 0x23
 8002fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc2:	e023      	b.n	800300c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b41      	subs	r3, #65	@ 0x41
 8002fd6:	221f      	movs	r2, #31
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b41      	subs	r3, #65	@ 0x41
 8003000:	fa00 f203 	lsl.w	r2, r0, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a30      	ldr	r2, [pc, #192]	@ (80030d4 <HAL_ADC_ConfigChannel+0x29c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1f4>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800301e:	d105      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003020:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a2c      	ldr	r2, [pc, #176]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003026:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800302a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a28      	ldr	r2, [pc, #160]	@ (80030d4 <HAL_ADC_ConfigChannel+0x29c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10f      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x21e>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b12      	cmp	r3, #18
 800303c:	d10b      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a25      	ldr	r2, [pc, #148]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003044:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003048:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003054:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_ADC_ConfigChannel+0x29c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d12b      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x280>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <HAL_ADC_ConfigChannel+0x298>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x23a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b11      	cmp	r3, #17
 8003070:	d122      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003072:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003078:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800307c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800307e:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a15      	ldr	r2, [pc, #84]	@ (80030d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003084:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003088:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <HAL_ADC_ConfigChannel+0x298>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d111      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_ADC_ConfigChannel+0x2a4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9a      	lsrs	r2, r3, #18
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030aa:	e002      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f9      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	10000012 	.word	0x10000012
 80030d4:	40012000 	.word	0x40012000
 80030d8:	40012300 	.word	0x40012300
 80030dc:	20000000 	.word	0x20000000
 80030e0:	431bde83 	.word	0x431bde83

080030e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030ec:	4b78      	ldr	r3, [pc, #480]	@ (80032d0 <ADC_Init+0x1ec>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a77      	ldr	r2, [pc, #476]	@ (80032d0 <ADC_Init+0x1ec>)
 80030f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80030f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80030f8:	4b75      	ldr	r3, [pc, #468]	@ (80032d0 <ADC_Init+0x1ec>)
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4973      	ldr	r1, [pc, #460]	@ (80032d0 <ADC_Init+0x1ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	4a58      	ldr	r2, [pc, #352]	@ (80032d4 <ADC_Init+0x1f0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d022      	beq.n	80031be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6899      	ldr	r1, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	e00f      	b.n	80031de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0202 	bic.w	r2, r2, #2
 80031ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	005a      	lsls	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800321a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800322a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	3b01      	subs	r3, #1
 8003238:	035a      	lsls	r2, r3, #13
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e007      	b.n	8003254 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	3b01      	subs	r3, #1
 8003270:	051a      	lsls	r2, r3, #20
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003296:	025a      	lsls	r2, r3, #9
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	029a      	lsls	r2, r3, #10
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012300 	.word	0x40012300
 80032d4:	0f000001 	.word	0x0f000001

080032d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <__NVIC_SetPriorityGrouping+0x40>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	4313      	orrs	r3, r2
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x40>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00
 800331c:	05fa0000 	.word	0x05fa0000

08003320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <__NVIC_GetPriorityGrouping+0x18>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0b      	blt.n	8003366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	@ (8003374 <__NVIC_EnableIRQ+0x38>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	@ (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	@ (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	@ 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	@ 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ff4c 	bl	80032d8 <__NVIC_SetPriorityGrouping>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800345a:	f7ff ff61 	bl	8003320 <__NVIC_GetPriorityGrouping>
 800345e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	f7ff ffb1 	bl	80033cc <NVIC_EncodePriority>
 800346a:	4602      	mov	r2, r0
 800346c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff80 	bl	8003378 <__NVIC_SetPriority>
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff54 	bl	800333c <__NVIC_EnableIRQ>
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e054      	b.n	8003558 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7f5b      	ldrb	r3, [r3, #29]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd f8d2 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a22      	ldr	r2, [pc, #136]	@ (8003560 <HAL_CRC_Init+0xc4>)
 80034d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0218 	bic.w	r2, r2, #24
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	e00c      	b.n	8003506 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6899      	ldr	r1, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f834 	bl	8003564 <HAL_CRCEx_Polynomial_Set>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e028      	b.n	8003558 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	795b      	ldrb	r3, [r3, #5]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003516:	611a      	str	r2, [r3, #16]
 8003518:	e004      	b.n	8003524 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6912      	ldr	r2, [r2, #16]
 8003522:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	04c11db7 	.word	0x04c11db7

08003564 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003574:	231f      	movs	r3, #31
 8003576:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
 8003586:	e063      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003588:	bf00      	nop
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	613a      	str	r2, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b18      	cmp	r3, #24
 80035ac:	d846      	bhi.n	800363c <HAL_CRCEx_Polynomial_Set+0xd8>
 80035ae:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	08003643 	.word	0x08003643
 80035b8:	0800363d 	.word	0x0800363d
 80035bc:	0800363d 	.word	0x0800363d
 80035c0:	0800363d 	.word	0x0800363d
 80035c4:	0800363d 	.word	0x0800363d
 80035c8:	0800363d 	.word	0x0800363d
 80035cc:	0800363d 	.word	0x0800363d
 80035d0:	0800363d 	.word	0x0800363d
 80035d4:	08003631 	.word	0x08003631
 80035d8:	0800363d 	.word	0x0800363d
 80035dc:	0800363d 	.word	0x0800363d
 80035e0:	0800363d 	.word	0x0800363d
 80035e4:	0800363d 	.word	0x0800363d
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	0800363d 	.word	0x0800363d
 80035f0:	0800363d 	.word	0x0800363d
 80035f4:	08003625 	.word	0x08003625
 80035f8:	0800363d 	.word	0x0800363d
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	0800363d 	.word	0x0800363d
 8003604:	0800363d 	.word	0x0800363d
 8003608:	0800363d 	.word	0x0800363d
 800360c:	0800363d 	.word	0x0800363d
 8003610:	0800363d 	.word	0x0800363d
 8003614:	08003619 	.word	0x08003619
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d913      	bls.n	8003646 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003622:	e010      	b.n	8003646 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d90f      	bls.n	800364a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800362e:	e00c      	b.n	800364a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d90b      	bls.n	800364e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800363a:	e008      	b.n	800364e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
        break;
 8003640:	e006      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800364e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 0118 	bic.w	r1, r3, #24
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
}
 8003674:	4618      	mov	r0, r3
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e069      	b.n	8003766 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd f836 	bl	8000710 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <HAL_DCMI_Init+0xf0>)
 80036c6:	400b      	ands	r3, r1
 80036c8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80036de:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80036ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80036f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003702:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800370e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b10      	cmp	r3, #16
 800371e:	d112      	bne.n	8003746 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7f1b      	ldrb	r3, [r3, #28]
 8003724:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7f5b      	ldrb	r3, [r3, #29]
 800372a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800372c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7f9b      	ldrb	r3, [r3, #30]
 8003732:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003734:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7fdb      	ldrb	r3, [r3, #31]
 800373c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003742:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003744:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 021e 	orr.w	r2, r2, #30
 8003754:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	ffe0f007 	.word	0xffe0f007

08003774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_DMA_Start_IT+0x26>
 8003796:	2302      	movs	r3, #2
 8003798:	e048      	b.n	800382c <HAL_DMA_Start_IT+0xb8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d137      	bne.n	800381e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f8d4 	bl	8003970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	223f      	movs	r2, #63	@ 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0216 	orr.w	r2, r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7ff fa85 	bl	8002d50 <HAL_GetTick>
 8003846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e052      	b.n	800390c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0216 	bic.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMA_Abort+0x62>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b6:	e013      	b.n	80038e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b8:	f7ff fa4a 	bl	8002d50 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d90c      	bls.n	80038e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e015      	b.n	800390c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e4      	bne.n	80038b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f2:	223f      	movs	r2, #63	@ 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	@ 0x80
 800392c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00c      	b.n	800394c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800398c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d108      	bne.n	80039b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ae:	e007      	b.n	80039c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e039      	b.n	8003a52 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fc ff7c 	bl	80008f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1c:	f023 0107 	bic.w	r1, r3, #7
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_DMA2D_Init+0x90>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68d1      	ldr	r1, [r2, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	ffffc000 	.word	0xffffc000

08003a60 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d026      	beq.n	8003ad0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d021      	beq.n	8003ad0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d026      	beq.n	8003b28 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d021      	beq.n	8003b28 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2220      	movs	r2, #32
 8003afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d026      	beq.n	8003b80 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d021      	beq.n	8003b80 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2208      	movs	r2, #8
 8003b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f853 	bl	8003c58 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d024      	beq.n	8003c06 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01f      	beq.n	8003c06 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01f      	beq.n	8003c50 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01a      	beq.n	8003c50 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f80e 	bl	8003c6c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_DMA2D_ConfigLayer+0x20>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e079      	b.n	8003d94 <HAL_DMA2D_ConfigLayer+0x114>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cca:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003ccc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b0a      	cmp	r3, #10
 8003cd4:	d003      	beq.n	8003cde <HAL_DMA2D_ConfigLayer+0x5e>
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b09      	cmp	r3, #9
 8003cdc:	d107      	bne.n	8003cee <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e005      	b.n	8003cfa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d120      	bne.n	8003d42 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	ea02 0103 	and.w	r1, r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b0a      	cmp	r3, #10
 8003d28:	d003      	beq.n	8003d32 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	d127      	bne.n	8003d82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d40:	e01f      	b.n	8003d82 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	ea02 0103 	and.w	r1, r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b0a      	cmp	r3, #10
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b09      	cmp	r3, #9
 8003d72:	d106      	bne.n	8003d82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d80:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	ff03000f 	.word	0xff03000f

08003da4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e086      	b.n	8003ec4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2223      	movs	r2, #35	@ 0x23
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fc fe05 	bl	80009d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_ETH_Init+0x128>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ecc <HAL_ETH_Init+0x128>)
 8003dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ecc <HAL_ETH_Init+0x128>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003de6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <HAL_ETH_Init+0x12c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a39      	ldr	r2, [pc, #228]	@ (8003ed0 <HAL_ETH_Init+0x12c>)
 8003dec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003df0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <HAL_ETH_Init+0x12c>)
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4935      	ldr	r1, [pc, #212]	@ (8003ed0 <HAL_ETH_Init+0x12c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003e00:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <HAL_ETH_Init+0x12c>)
 8003e02:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7fe ff98 	bl	8002d50 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e22:	e011      	b.n	8003e48 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e24:	f7fe ff94 	bl	8002d50 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e32:	d909      	bls.n	8003e48 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2204      	movs	r2, #4
 8003e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	22e0      	movs	r2, #224	@ 0xe0
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e03d      	b.n	8003ec4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e4      	bne.n	8003e24 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f97a 	bl	8004154 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa25 	bl	80042b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa7b 	bl	8004362 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	461a      	mov	r2, r3
 8003e72:	2100      	movs	r1, #0
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9e3 	bl	8004240 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <HAL_ETH_Init+0x130>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003eae:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	00020060 	.word	0x00020060

08003ed8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4b53      	ldr	r3, [pc, #332]	@ (800403c <ETH_SetMACConfig+0x164>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	7b9b      	ldrb	r3, [r3, #14]
 8003ef6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	7c12      	ldrb	r2, [r2, #16]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d102      	bne.n	8003f06 <ETH_SetMACConfig+0x2e>
 8003f00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f04:	e000      	b.n	8003f08 <ETH_SetMACConfig+0x30>
 8003f06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	7c52      	ldrb	r2, [r2, #17]
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	d102      	bne.n	8003f18 <ETH_SetMACConfig+0x40>
 8003f12:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003f16:	e000      	b.n	8003f1a <ETH_SetMACConfig+0x42>
 8003f18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f1a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	7fdb      	ldrb	r3, [r3, #31]
 8003f26:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f28:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	7f92      	ldrb	r2, [r2, #30]
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d102      	bne.n	8003f3e <ETH_SetMACConfig+0x66>
 8003f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f3c:	e000      	b.n	8003f40 <ETH_SetMACConfig+0x68>
 8003f3e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7f1b      	ldrb	r3, [r3, #28]
 8003f46:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f48:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	791b      	ldrb	r3, [r3, #4]
 8003f54:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	d102      	bne.n	8003f68 <ETH_SetMACConfig+0x90>
 8003f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f66:	e000      	b.n	8003f6a <ETH_SetMACConfig+0x92>
 8003f68:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	7bdb      	ldrb	r3, [r3, #15]
 8003f70:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f72:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f80:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f82:	4313      	orrs	r3, r2
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f7fe fee4 	bl	8002d68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d101      	bne.n	8003fce <ETH_SetMACConfig+0xf6>
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	e000      	b.n	8003fd0 <ETH_SetMACConfig+0xf8>
 8003fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fd0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003fde:	2a01      	cmp	r2, #1
 8003fe0:	d101      	bne.n	8003fe6 <ETH_SetMACConfig+0x10e>
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	e000      	b.n	8003fe8 <ETH_SetMACConfig+0x110>
 8003fe6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003fe8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003ff0:	2a01      	cmp	r2, #1
 8003ff2:	d101      	bne.n	8003ff8 <ETH_SetMACConfig+0x120>
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	e000      	b.n	8003ffa <ETH_SetMACConfig+0x122>
 8003ff8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ffa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004002:	2a01      	cmp	r2, #1
 8004004:	d101      	bne.n	800400a <ETH_SetMACConfig+0x132>
 8004006:	2202      	movs	r2, #2
 8004008:	e000      	b.n	800400c <ETH_SetMACConfig+0x134>
 800400a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800400c:	4313      	orrs	r3, r2
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004024:	2001      	movs	r0, #1
 8004026:	f7fe fe9f 	bl	8002d68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	619a      	str	r2, [r3, #24]
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	fd20810f 	.word	0xfd20810f

08004040 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <ETH_SetDMAConfig+0x110>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	7b1b      	ldrb	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <ETH_SetDMAConfig+0x2c>
 8004066:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800406a:	e000      	b.n	800406e <ETH_SetDMAConfig+0x2e>
 800406c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	7b5b      	ldrb	r3, [r3, #13]
 8004072:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004074:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	7f52      	ldrb	r2, [r2, #29]
 800407a:	2a00      	cmp	r2, #0
 800407c:	d102      	bne.n	8004084 <ETH_SetDMAConfig+0x44>
 800407e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004082:	e000      	b.n	8004086 <ETH_SetDMAConfig+0x46>
 8004084:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004086:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	7b9b      	ldrb	r3, [r3, #14]
 800408c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800408e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004094:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	7f1b      	ldrb	r3, [r3, #28]
 800409a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800409c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7f9b      	ldrb	r3, [r3, #30]
 80040a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040b4:	4313      	orrs	r3, r2
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7fe fe46 	bl	8002d68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040e4:	461a      	mov	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	791b      	ldrb	r3, [r3, #4]
 80040ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80040fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004100:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004108:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800410a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004112:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004118:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004122:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004126:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004134:	2001      	movs	r0, #1
 8004136:	f7fe fe17 	bl	8002d68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	f8de3f23 	.word	0xf8de3f23

08004154 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b0a6      	sub	sp, #152	@ 0x98
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004196:	2300      	movs	r3, #0
 8004198:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80041bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80041ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe7f 	bl	8003ed8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80041da:	2301      	movs	r3, #1
 80041dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80041de:	2301      	movs	r3, #1
 80041e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004206:	2301      	movs	r3, #1
 8004208:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800420a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800420e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004210:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004214:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800421a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004222:	2300      	movs	r3, #0
 8004224:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff05 	bl	8004040 <ETH_SetDMAConfig>
}
 8004236:	bf00      	nop
 8004238:	3798      	adds	r7, #152	@ 0x98
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3305      	adds	r3, #5
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	3204      	adds	r2, #4
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <ETH_MACAddressConfig+0x68>)
 8004262:	4413      	add	r3, r2
 8004264:	461a      	mov	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3303      	adds	r3, #3
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	061a      	lsls	r2, r3, #24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3302      	adds	r3, #2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <ETH_MACAddressConfig+0x6c>)
 8004292:	4413      	add	r3, r2
 8004294:	461a      	mov	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40028040 	.word	0x40028040
 80042ac:	40028044 	.word	0x40028044

080042b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e03e      	b.n	800433c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	3206      	adds	r2, #6
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d80c      	bhi.n	8004320 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68d9      	ldr	r1, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e004      	b.n	800432a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d9bd      	bls.n	80042be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004354:	611a      	str	r2, [r3, #16]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e048      	b.n	8004402 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6919      	ldr	r1, [r3, #16]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	440b      	add	r3, r1
 8004380:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	3212      	adds	r2, #18
 80043ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d80c      	bhi.n	80043f2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	440b      	add	r3, r1
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e004      	b.n	80043fc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d9b3      	bls.n	8004370 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004432:	60da      	str	r2, [r3, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	@ 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e175      	b.n	800474c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004460:	2201      	movs	r2, #1
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	f040 8164 	bne.w	8004746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d005      	beq.n	8004496 <HAL_GPIO_Init+0x56>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d130      	bne.n	80044f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 0201 	and.w	r2, r3, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d017      	beq.n	8004534 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d123      	bne.n	8004588 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	08da      	lsrs	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3208      	adds	r2, #8
 8004548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	220f      	movs	r2, #15
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	08da      	lsrs	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3208      	adds	r2, #8
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80be 	beq.w	8004746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	4b66      	ldr	r3, [pc, #408]	@ (8004764 <HAL_GPIO_Init+0x324>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	4a65      	ldr	r2, [pc, #404]	@ (8004764 <HAL_GPIO_Init+0x324>)
 80045d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045d6:	4b63      	ldr	r3, [pc, #396]	@ (8004764 <HAL_GPIO_Init+0x324>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045e2:	4a61      	ldr	r2, [pc, #388]	@ (8004768 <HAL_GPIO_Init+0x328>)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	220f      	movs	r2, #15
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a58      	ldr	r2, [pc, #352]	@ (800476c <HAL_GPIO_Init+0x32c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d037      	beq.n	800467e <HAL_GPIO_Init+0x23e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a57      	ldr	r2, [pc, #348]	@ (8004770 <HAL_GPIO_Init+0x330>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_GPIO_Init+0x23a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a56      	ldr	r2, [pc, #344]	@ (8004774 <HAL_GPIO_Init+0x334>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02b      	beq.n	8004676 <HAL_GPIO_Init+0x236>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a55      	ldr	r2, [pc, #340]	@ (8004778 <HAL_GPIO_Init+0x338>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d025      	beq.n	8004672 <HAL_GPIO_Init+0x232>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a54      	ldr	r2, [pc, #336]	@ (800477c <HAL_GPIO_Init+0x33c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01f      	beq.n	800466e <HAL_GPIO_Init+0x22e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a53      	ldr	r2, [pc, #332]	@ (8004780 <HAL_GPIO_Init+0x340>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d019      	beq.n	800466a <HAL_GPIO_Init+0x22a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a52      	ldr	r2, [pc, #328]	@ (8004784 <HAL_GPIO_Init+0x344>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_GPIO_Init+0x226>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a51      	ldr	r2, [pc, #324]	@ (8004788 <HAL_GPIO_Init+0x348>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00d      	beq.n	8004662 <HAL_GPIO_Init+0x222>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a50      	ldr	r2, [pc, #320]	@ (800478c <HAL_GPIO_Init+0x34c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <HAL_GPIO_Init+0x21e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4f      	ldr	r2, [pc, #316]	@ (8004790 <HAL_GPIO_Init+0x350>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_GPIO_Init+0x21a>
 8004656:	2309      	movs	r3, #9
 8004658:	e012      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800465a:	230a      	movs	r3, #10
 800465c:	e010      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800465e:	2308      	movs	r3, #8
 8004660:	e00e      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004662:	2307      	movs	r3, #7
 8004664:	e00c      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004666:	2306      	movs	r3, #6
 8004668:	e00a      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800466a:	2305      	movs	r3, #5
 800466c:	e008      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800466e:	2304      	movs	r3, #4
 8004670:	e006      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004672:	2303      	movs	r3, #3
 8004674:	e004      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004676:	2302      	movs	r3, #2
 8004678:	e002      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800467e:	2300      	movs	r3, #0
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	f002 0203 	and.w	r2, r2, #3
 8004686:	0092      	lsls	r2, r2, #2
 8004688:	4093      	lsls	r3, r2
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004690:	4935      	ldr	r1, [pc, #212]	@ (8004768 <HAL_GPIO_Init+0x328>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	3302      	adds	r3, #2
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469e:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_GPIO_Init+0x354>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046c2:	4a34      	ldr	r2, [pc, #208]	@ (8004794 <HAL_GPIO_Init+0x354>)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c8:	4b32      	ldr	r3, [pc, #200]	@ (8004794 <HAL_GPIO_Init+0x354>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <HAL_GPIO_Init+0x354>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046f2:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_GPIO_Init+0x354>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004716:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_GPIO_Init+0x354>)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800471c:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_GPIO_Init+0x354>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <HAL_GPIO_Init+0x354>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	f67f ae86 	bls.w	8004460 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3724      	adds	r7, #36	@ 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	40013800 	.word	0x40013800
 800476c:	40020000 	.word	0x40020000
 8004770:	40020400 	.word	0x40020400
 8004774:	40020800 	.word	0x40020800
 8004778:	40020c00 	.word	0x40020c00
 800477c:	40021000 	.word	0x40021000
 8004780:	40021400 	.word	0x40021400
 8004784:	40021800 	.word	0x40021800
 8004788:	40021c00 	.word	0x40021c00
 800478c:	40022000 	.word	0x40022000
 8004790:	40022400 	.word	0x40022400
 8004794:	40013c00 	.word	0x40013c00

08004798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e001      	b.n	80047ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
 80047d4:	4613      	mov	r3, r2
 80047d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d8:	787b      	ldrb	r3, [r7, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047e4:	e003      	b.n	80047ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	041a      	lsls	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	619a      	str	r2, [r3, #24]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800480c:	887a      	ldrh	r2, [r7, #2]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4013      	ands	r3, r2
 8004812:	041a      	lsls	r2, r3, #16
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43d9      	mvns	r1, r3
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	400b      	ands	r3, r1
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af02      	add	r7, sp, #8
 8004834:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e059      	b.n	80048f4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f00f f8be 	bl	80139dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800486e:	d102      	bne.n	8004876 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f008 fea1 	bl	800d5c2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7c1a      	ldrb	r2, [r3, #16]
 8004888:	f88d 2000 	strb.w	r2, [sp]
 800488c:	3304      	adds	r3, #4
 800488e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004890:	f008 fe2c 	bl	800d4ec <USB_CoreInit>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e026      	b.n	80048f4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f008 fe99 	bl	800d5e4 <USB_SetCurrentMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e017      	b.n	80048f4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	7c1a      	ldrb	r2, [r3, #16]
 80048cc:	f88d 2000 	strb.w	r2, [sp]
 80048d0:	3304      	adds	r3, #4
 80048d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d4:	f009 f83c 	bl	800d950 <USB_HostInit>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e004      	b.n	80048f4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b08b      	sub	sp, #44	@ 0x2c
 8004900:	af04      	add	r7, sp, #16
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	70fb      	strb	r3, [r7, #3]
 800490e:	460b      	mov	r3, r1
 8004910:	70bb      	strb	r3, [r7, #2]
 8004912:	4613      	mov	r3, r2
 8004914:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004916:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004918:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_HCD_HC_Init+0x2c>
 8004924:	2302      	movs	r3, #2
 8004926:	e09d      	b.n	8004a64 <HAL_HCD_HC_Init+0x168>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	3319      	adds	r3, #25
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3314      	adds	r3, #20
 8004954:	787a      	ldrb	r2, [r7, #1]
 8004956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	3315      	adds	r3, #21
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3326      	adds	r3, #38	@ 0x26
 800497c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	78bb      	ldrb	r3, [r7, #2]
 8004986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498a:	b2d8      	uxtb	r0, r3
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3316      	adds	r3, #22
 800499a:	4602      	mov	r2, r0
 800499c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fbc8 	bl	8005138 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80049a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da0a      	bge.n	80049c6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	3317      	adds	r3, #23
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e009      	b.n	80049da <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3317      	adds	r3, #23
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f009 f90e 	bl	800dc00 <USB_GetHostSpeed>
 80049e4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80049e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10b      	bne.n	8004a06 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80049ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_HCD_HC_Init+0x10a>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8004a00:	d901      	bls.n	8004a06 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004a02:	23bc      	movs	r3, #188	@ 0xbc
 8004a04:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3318      	adds	r3, #24
 8004a16:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	b298      	uxth	r0, r3
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3328      	adds	r3, #40	@ 0x28
 8004a30:	4602      	mov	r2, r0
 8004a32:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	787c      	ldrb	r4, [r7, #1]
 8004a3e:	78ba      	ldrb	r2, [r7, #2]
 8004a40:	78f9      	ldrb	r1, [r7, #3]
 8004a42:	9302      	str	r3, [sp, #8]
 8004a44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4623      	mov	r3, r4
 8004a52:	f009 f8fd 	bl	800dc50 <USB_HC_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_HCD_HC_Halt+0x1e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e00f      	b.n	8004aaa <HAL_HCD_HC_Halt+0x3e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f009 fc8f 	bl	800e3be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	70fb      	strb	r3, [r7, #3]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70bb      	strb	r3, [r7, #2]
 8004aca:	4613      	mov	r3, r2
 8004acc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3317      	adds	r3, #23
 8004ade:	78ba      	ldrb	r2, [r7, #2]
 8004ae0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3326      	adds	r3, #38	@ 0x26
 8004af2:	787a      	ldrb	r2, [r7, #1]
 8004af4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004af6:	7c3b      	ldrb	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d114      	bne.n	8004b26 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	332a      	adds	r3, #42	@ 0x2a
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3319      	adds	r3, #25
 8004b20:	7f3a      	ldrb	r2, [r7, #28]
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e009      	b.n	8004b3a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	332a      	adds	r3, #42	@ 0x2a
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b3a:	787b      	ldrb	r3, [r7, #1]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	f200 8102 	bhi.w	8004d46 <HAL_HCD_HC_SubmitRequest+0x292>
 8004b42:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004d31 	.word	0x08004d31
 8004b50:	08004c1d 	.word	0x08004c1d
 8004b54:	08004ca7 	.word	0x08004ca7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004b58:	7c3b      	ldrb	r3, [r7, #16]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f040 80f5 	bne.w	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004b60:	78bb      	ldrb	r3, [r7, #2]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d12d      	bne.n	8004bc2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004b66:	8b3b      	ldrh	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	333d      	adds	r3, #61	@ 0x3d
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	333d      	adds	r3, #61	@ 0x3d
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	332a      	adds	r3, #42	@ 0x2a
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004baa:	e0ce      	b.n	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	332a      	adds	r3, #42	@ 0x2a
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
      break;
 8004bc0:	e0c3      	b.n	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	331a      	adds	r3, #26
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 80b8 	bne.w	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	333c      	adds	r3, #60	@ 0x3c
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	332a      	adds	r3, #42	@ 0x2a
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
      break;
 8004c04:	e0a1      	b.n	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	332a      	adds	r3, #42	@ 0x2a
 8004c16:	2202      	movs	r2, #2
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e096      	b.n	8004d4a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c1c:	78bb      	ldrb	r3, [r7, #2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d120      	bne.n	8004c64 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	333d      	adds	r3, #61	@ 0x3d
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	332a      	adds	r3, #42	@ 0x2a
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c4c:	e07e      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	332a      	adds	r3, #42	@ 0x2a
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
      break;
 8004c62:	e073      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	333c      	adds	r3, #60	@ 0x3c
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	332a      	adds	r3, #42	@ 0x2a
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
      break;
 8004c8e:	e05d      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	332a      	adds	r3, #42	@ 0x2a
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	701a      	strb	r2, [r3, #0]
      break;
 8004ca4:	e052      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004ca6:	78bb      	ldrb	r3, [r7, #2]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d120      	bne.n	8004cee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	333d      	adds	r3, #61	@ 0x3d
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	332a      	adds	r3, #42	@ 0x2a
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cd6:	e039      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	332a      	adds	r3, #42	@ 0x2a
 8004ce8:	2202      	movs	r2, #2
 8004cea:	701a      	strb	r2, [r3, #0]
      break;
 8004cec:	e02e      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	333c      	adds	r3, #60	@ 0x3c
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	332a      	adds	r3, #42	@ 0x2a
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
      break;
 8004d18:	e018      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	332a      	adds	r3, #42	@ 0x2a
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]
      break;
 8004d2e:	e00d      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	332a      	adds	r3, #42	@ 0x2a
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
      break;
 8004d44:	e002      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004d4a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	332c      	adds	r3, #44	@ 0x2c
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	8b39      	ldrh	r1, [r7, #24]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4403      	add	r3, r0
 8004d70:	3334      	adds	r3, #52	@ 0x34
 8004d72:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	334c      	adds	r3, #76	@ 0x4c
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3338      	adds	r3, #56	@ 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3315      	adds	r3, #21
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334d      	adds	r3, #77	@ 0x4d
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	1d19      	adds	r1, r3, #4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	799b      	ldrb	r3, [r3, #6]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f009 f862 	bl	800dea8 <USB_HC_StartXfer>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop

08004df0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f008 fd62 	bl	800d8d0 <USB_GetMode>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 80fb 	bne.w	800500a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f008 fd25 	bl	800d868 <USB_ReadInterrupts>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80f1 	beq.w	8005008 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f008 fd1c 	bl	800d868 <USB_ReadInterrupts>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e3a:	d104      	bne.n	8004e46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004e44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f008 fd0c 	bl	800d868 <USB_ReadInterrupts>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5a:	d104      	bne.n	8004e66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f008 fcfc 	bl	800d868 <USB_ReadInterrupts>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e7a:	d104      	bne.n	8004e86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004e84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f008 fcec 	bl	800d868 <USB_ReadInterrupts>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f008 fcde 	bl	800d868 <USB_ReadInterrupts>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb6:	d120      	bne.n	8004efa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004ec0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d113      	bne.n	8004efa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	6938      	ldr	r0, [r7, #16]
 8004ed6:	f008 fbd1 	bl	800d67c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f008 fc00 	bl	800d6e0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7a5b      	ldrb	r3, [r3, #9]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d105      	bne.n	8004ef4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f008 fde6 	bl	800dac0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f00e fde3 	bl	8013ac0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f008 fcb2 	bl	800d868 <USB_ReadInterrupts>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0e:	d102      	bne.n	8004f16 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fd33 	bl	800697c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f008 fca4 	bl	800d868 <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d106      	bne.n	8004f38 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f00e fdac 	bl	8013a88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2208      	movs	r2, #8
 8004f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f008 fc93 	bl	800d868 <USB_ReadInterrupts>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f4c:	d139      	bne.n	8004fc2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f009 fa22 	bl	800e39c <USB_HC_ReadInterrupt>
 8004f58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e025      	b.n	8004fac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d018      	beq.n	8004fa6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f8a:	d106      	bne.n	8004f9a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f905 	bl	80051a2 <HCD_HC_IN_IRQHandler>
 8004f98:	e005      	b.n	8004fa6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 ff67 	bl	8005e74 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	795b      	ldrb	r3, [r3, #5]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d3d3      	bcc.n	8004f60 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f008 fc4e 	bl	800d868 <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d101      	bne.n	8004fda <HAL_HCD_IRQHandler+0x1ea>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_HCD_IRQHandler+0x1ec>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d014      	beq.n	800500a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0210 	bic.w	r2, r2, #16
 8004fee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fbe4 	bl	80067be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699a      	ldr	r2, [r3, #24]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0210 	orr.w	r2, r2, #16
 8005004:	619a      	str	r2, [r3, #24]
 8005006:	e000      	b.n	800500a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005008:	bf00      	nop
    }
  }
}
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_HCD_Start+0x16>
 8005022:	2302      	movs	r3, #2
 8005024:	e013      	b.n	800504e <HAL_HCD_Start+0x3e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2101      	movs	r1, #1
 8005034:	4618      	mov	r0, r3
 8005036:	f008 fdaa 	bl	800db8e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f008 faae 	bl	800d5a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_HCD_Stop+0x16>
 8005068:	2302      	movs	r3, #2
 800506a:	e00d      	b.n	8005088 <HAL_HCD_Stop+0x32>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f009 fafd 	bl	800e678 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f008 fd4c 	bl	800db3a <USB_ResetPort>
 80050a2:	4603      	mov	r3, r0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	334c      	adds	r3, #76	@ 0x4c
 80050c8:	781b      	ldrb	r3, [r3, #0]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3338      	adds	r3, #56	@ 0x38
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f008 fd8e 	bl	800dc2e <USB_GetCurrentFrame>
 8005112:	4603      	mov	r3, r0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f008 fd69 	bl	800dc00 <USB_GetHostSpeed>
 800512e:	4603      	mov	r3, r0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	331a      	adds	r3, #26
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	331b      	adds	r3, #27
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3325      	adds	r3, #37	@ 0x25
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3324      	adds	r3, #36	@ 0x24
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	4611      	mov	r1, r2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f008 fb64 	bl	800d88e <USB_ReadChInterrupts>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d11a      	bne.n	8005206 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	2304      	movs	r3, #4
 80051e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	334d      	adds	r3, #77	@ 0x4d
 80051f2:	2207      	movs	r2, #7
 80051f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f009 f8dd 	bl	800e3be <USB_HC_Halt>
 8005204:	e09e      	b.n	8005344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f008 fb3d 	bl	800d88e <USB_ReadChInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521e:	d11b      	bne.n	8005258 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522c:	461a      	mov	r2, r3
 800522e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005232:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	334d      	adds	r3, #77	@ 0x4d
 8005244:	2208      	movs	r2, #8
 8005246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f009 f8b4 	bl	800e3be <USB_HC_Halt>
 8005256:	e075      	b.n	8005344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f008 fb14 	bl	800d88e <USB_ReadChInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d11a      	bne.n	80052a6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527c:	461a      	mov	r2, r3
 800527e:	2308      	movs	r3, #8
 8005280:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	334d      	adds	r3, #77	@ 0x4d
 8005292:	2206      	movs	r2, #6
 8005294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	4611      	mov	r1, r2
 800529e:	4618      	mov	r0, r3
 80052a0:	f009 f88d 	bl	800e3be <USB_HC_Halt>
 80052a4:	e04e      	b.n	8005344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f008 faed 	bl	800d88e <USB_ReadChInterrupts>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052be:	d11b      	bne.n	80052f8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	334d      	adds	r3, #77	@ 0x4d
 80052e4:	2209      	movs	r2, #9
 80052e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f009 f864 	bl	800e3be <USB_HC_Halt>
 80052f6:	e025      	b.n	8005344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f008 fac4 	bl	800d88e <USB_ReadChInterrupts>
 8005306:	4603      	mov	r3, r0
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b80      	cmp	r3, #128	@ 0x80
 800530e:	d119      	bne.n	8005344 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	334d      	adds	r3, #77	@ 0x4d
 8005332:	2207      	movs	r2, #7
 8005334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f009 f83d 	bl	800e3be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f008 fa9e 	bl	800d88e <USB_ReadChInterrupts>
 8005352:	4603      	mov	r3, r0
 8005354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800535c:	d112      	bne.n	8005384 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f009 f829 	bl	800e3be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005378:	461a      	mov	r2, r3
 800537a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800537e:	6093      	str	r3, [r2, #8]
 8005380:	f000 bd75 	b.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f008 fa7e 	bl	800d88e <USB_ReadChInterrupts>
 8005392:	4603      	mov	r3, r0
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	f040 8128 	bne.w	80055ee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	2320      	movs	r3, #32
 80053ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	331b      	adds	r3, #27
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d119      	bne.n	80053fa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	331b      	adds	r3, #27
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	799b      	ldrb	r3, [r3, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3330      	adds	r3, #48	@ 0x30
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	1ac9      	subs	r1, r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4403      	add	r3, r0
 8005436:	3338      	adds	r3, #56	@ 0x38
 8005438:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	334d      	adds	r3, #77	@ 0x4d
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3344      	adds	r3, #68	@ 0x44
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546e:	461a      	mov	r2, r3
 8005470:	2301      	movs	r3, #1
 8005472:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	3326      	adds	r3, #38	@ 0x26
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3326      	adds	r3, #38	@ 0x26
 800549a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800549c:	2b02      	cmp	r3, #2
 800549e:	d110      	bne.n	80054c2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f008 ff88 	bl	800e3be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ba:	461a      	mov	r2, r3
 80054bc:	2310      	movs	r3, #16
 80054be:	6093      	str	r3, [r2, #8]
 80054c0:	e03d      	b.n	800553e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3326      	adds	r3, #38	@ 0x26
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d00a      	beq.n	80054ee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	3326      	adds	r3, #38	@ 0x26
 80054e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d127      	bne.n	800553e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	440a      	add	r2, r1
 8005504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800550c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	334c      	adds	r3, #76	@ 0x4c
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	334c      	adds	r3, #76	@ 0x4c
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f00e facf 	bl	8013adc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	799b      	ldrb	r3, [r3, #6]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d13b      	bne.n	80055be <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3338      	adds	r3, #56	@ 0x38
 8005556:	6819      	ldr	r1, [r3, #0]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4403      	add	r3, r0
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	440b      	add	r3, r1
 800556c:	1e59      	subs	r1, r3, #1
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4403      	add	r3, r0
 800557c:	3328      	adds	r3, #40	@ 0x28
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	fbb1 f3f3 	udiv	r3, r1, r3
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8470 	beq.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	333c      	adds	r3, #60	@ 0x3c
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	f083 0301 	eor.w	r3, r3, #1
 80055a6:	b2d8      	uxtb	r0, r3
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	333c      	adds	r3, #60	@ 0x3c
 80055b6:	4602      	mov	r2, r0
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	f000 bc58 	b.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	333c      	adds	r3, #60	@ 0x3c
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	f083 0301 	eor.w	r3, r3, #1
 80055d6:	b2d8      	uxtb	r0, r3
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	333c      	adds	r3, #60	@ 0x3c
 80055e6:	4602      	mov	r2, r0
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	f000 bc40 	b.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f008 f949 	bl	800d88e <USB_ReadChInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b20      	cmp	r3, #32
 8005604:	d131      	bne.n	800566a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	2320      	movs	r3, #32
 8005616:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	331a      	adds	r3, #26
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	f040 841f 	bne.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	331b      	adds	r3, #27
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334d      	adds	r3, #77	@ 0x4d
 8005654:	2203      	movs	r2, #3
 8005656:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f008 feac 	bl	800e3be <USB_HC_Halt>
 8005666:	f000 bc02 	b.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f008 f90b 	bl	800d88e <USB_ReadChInterrupts>
 8005678:	4603      	mov	r3, r0
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	f040 8305 	bne.w	8005c8e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005690:	461a      	mov	r2, r3
 8005692:	2302      	movs	r3, #2
 8005694:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	334d      	adds	r3, #77	@ 0x4d
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d114      	bne.n	80056d6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	334d      	adds	r3, #77	@ 0x4d
 80056bc:	2202      	movs	r2, #2
 80056be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	334c      	adds	r3, #76	@ 0x4c
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e2cc      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	334d      	adds	r3, #77	@ 0x4d
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d114      	bne.n	8005716 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	334d      	adds	r3, #77	@ 0x4d
 80056fc:	2202      	movs	r2, #2
 80056fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	334c      	adds	r3, #76	@ 0x4c
 8005710:	2205      	movs	r2, #5
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e2ac      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	334d      	adds	r3, #77	@ 0x4d
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b07      	cmp	r3, #7
 800572a:	d00b      	beq.n	8005744 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	334d      	adds	r3, #77	@ 0x4d
 800573c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800573e:	2b09      	cmp	r3, #9
 8005740:	f040 80a6 	bne.w	8005890 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	334d      	adds	r3, #77	@ 0x4d
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	3344      	adds	r3, #68	@ 0x44
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4403      	add	r3, r0
 8005778:	3344      	adds	r3, #68	@ 0x44
 800577a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3344      	adds	r3, #68	@ 0x44
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d943      	bls.n	800581a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3344      	adds	r3, #68	@ 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	331a      	adds	r3, #26
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d123      	bne.n	8005804 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	331b      	adds	r3, #27
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	331c      	adds	r3, #28
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005802:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	334c      	adds	r3, #76	@ 0x4c
 8005814:	2204      	movs	r2, #4
 8005816:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005818:	e229      	b.n	8005c6e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	334c      	adds	r3, #76	@ 0x4c
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3326      	adds	r3, #38	@ 0x26
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3326      	adds	r3, #38	@ 0x26
 8005854:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005856:	2b02      	cmp	r3, #2
 8005858:	f040 8209 	bne.w	8005c6e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005872:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800588e:	e1ee      	b.n	8005c6e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	334d      	adds	r3, #77	@ 0x4d
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	f040 80c8 	bne.w	8005a38 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	334d      	adds	r3, #77	@ 0x4d
 80058b8:	2202      	movs	r2, #2
 80058ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	331b      	adds	r3, #27
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	f040 81ce 	bne.w	8005c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	3326      	adds	r3, #38	@ 0x26
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d16b      	bne.n	80059c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	3348      	adds	r3, #72	@ 0x48
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4403      	add	r3, r0
 800590a:	3348      	adds	r3, #72	@ 0x48
 800590c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3348      	adds	r3, #72	@ 0x48
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d943      	bls.n	80059ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	3348      	adds	r3, #72	@ 0x48
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	331b      	adds	r3, #27
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	3344      	adds	r3, #68	@ 0x44
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d809      	bhi.n	8005976 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	331c      	adds	r3, #28
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	78fa      	ldrb	r2, [r7, #3]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	440a      	add	r2, r1
 800598c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005994:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	334c      	adds	r3, #76	@ 0x4c
 80059a6:	2204      	movs	r2, #4
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e014      	b.n	80059d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	334c      	adds	r3, #76	@ 0x4c
 80059bc:	2202      	movs	r2, #2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e009      	b.n	80059d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	334c      	adds	r3, #76	@ 0x4c
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	3326      	adds	r3, #38	@ 0x26
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3326      	adds	r3, #38	@ 0x26
 80059fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	f040 8136 	bne.w	8005c70 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a1a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a22:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a30:	461a      	mov	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e11b      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	334d      	adds	r3, #77	@ 0x4d
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	f040 8081 	bne.w	8005b52 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a50:	78fa      	ldrb	r2, [r7, #3]
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	334d      	adds	r3, #77	@ 0x4d
 8005a60:	2202      	movs	r2, #2
 8005a62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	331b      	adds	r3, #27
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	f040 80fa 	bne.w	8005c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	334c      	adds	r3, #76	@ 0x4c
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ace:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aea:	f023 0320 	bic.w	r3, r3, #32
 8005aee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3326      	adds	r3, #38	@ 0x26
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3326      	adds	r3, #38	@ 0x26
 8005b16:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	f040 80a9 	bne.w	8005c70 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	e08e      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	334d      	adds	r3, #77	@ 0x4d
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d143      	bne.n	8005bf0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	334d      	adds	r3, #77	@ 0x4d
 8005b78:	2202      	movs	r2, #2
 8005b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b7c:	78fa      	ldrb	r2, [r7, #3]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	334c      	adds	r3, #76	@ 0x4c
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3326      	adds	r3, #38	@ 0x26
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3326      	adds	r3, #38	@ 0x26
 8005bb6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d159      	bne.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bd2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bda:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be8:	461a      	mov	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e03f      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	334d      	adds	r3, #77	@ 0x4d
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d126      	bne.n	8005c54 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	334d      	adds	r3, #77	@ 0x4d
 8005c16:	2202      	movs	r2, #2
 8005c18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	3344      	adds	r3, #68	@ 0x44
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4613      	mov	r3, r2
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4403      	add	r3, r0
 8005c3a:	3344      	adds	r3, #68	@ 0x44
 8005c3c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	334c      	adds	r3, #76	@ 0x4c
 8005c4e:	2204      	movs	r2, #4
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e00d      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	334d      	adds	r3, #77	@ 0x4d
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	f000 8100 	beq.w	8005e6c <HCD_HC_IN_IRQHandler+0xcca>
 8005c6c:	e000      	b.n	8005c70 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c6e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	334c      	adds	r3, #76	@ 0x4c
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f00d ff28 	bl	8013adc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c8c:	e0ef      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f007 fdf9 	bl	800d88e <USB_ReadChInterrupts>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d12f      	bne.n	8005d06 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2340      	movs	r3, #64	@ 0x40
 8005cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	334d      	adds	r3, #77	@ 0x4d
 8005cc8:	2205      	movs	r2, #5
 8005cca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	331a      	adds	r3, #26
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ce2:	78fa      	ldrb	r2, [r7, #3]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	3344      	adds	r3, #68	@ 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f008 fb5d 	bl	800e3be <USB_HC_Halt>
 8005d04:	e0b3      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f007 fdbd 	bl	800d88e <USB_ReadChInterrupts>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	f040 80a7 	bne.w	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3326      	adds	r3, #38	@ 0x26
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d11b      	bne.n	8005d6e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3344      	adds	r3, #68	@ 0x44
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	334d      	adds	r3, #77	@ 0x4d
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f008 fb29 	bl	800e3be <USB_HC_Halt>
 8005d6c:	e03f      	b.n	8005dee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3326      	adds	r3, #38	@ 0x26
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	3326      	adds	r3, #38	@ 0x26
 8005d94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d129      	bne.n	8005dee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3344      	adds	r3, #68	@ 0x44
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	799b      	ldrb	r3, [r3, #6]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HCD_HC_IN_IRQHandler+0xc2a>
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	331b      	adds	r3, #27
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d110      	bne.n	8005dee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	334d      	adds	r3, #77	@ 0x4d
 8005ddc:	2204      	movs	r2, #4
 8005dde:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f008 fae8 	bl	800e3be <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	331b      	adds	r3, #27
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d129      	bne.n	8005e58 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	331b      	adds	r3, #27
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e36:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	2310      	movs	r3, #16
 8005e68:	6093      	str	r3, [r2, #8]
 8005e6a:	e000      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005e6c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f007 fcfb 	bl	800d88e <USB_ReadChInterrupts>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d11b      	bne.n	8005eda <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	334d      	adds	r3, #77	@ 0x4d
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f008 fa74 	bl	800e3be <USB_HC_Halt>
 8005ed6:	f000 bc6f 	b.w	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f007 fcd3 	bl	800d88e <USB_ReadChInterrupts>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	f040 8082 	bne.w	8005ff8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	2320      	movs	r3, #32
 8005f04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3319      	adds	r3, #25
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d124      	bne.n	8005f66 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3319      	adds	r3, #25
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	334c      	adds	r3, #76	@ 0x4c
 8005f40:	2202      	movs	r2, #2
 8005f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	334d      	adds	r3, #77	@ 0x4d
 8005f54:	2203      	movs	r2, #3
 8005f56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f008 fa2c 	bl	800e3be <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	331a      	adds	r3, #26
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 841d 	bne.w	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	331b      	adds	r3, #27
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8411 	bne.w	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3326      	adds	r3, #38	@ 0x26
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d009      	beq.n	8005fc0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	331b      	adds	r3, #27
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	334d      	adds	r3, #77	@ 0x4d
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f008 f9ee 	bl	800e3be <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3344      	adds	r3, #68	@ 0x44
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e3df      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f007 fc44 	bl	800d88e <USB_ReadChInterrupts>
 8006006:	4603      	mov	r3, r0
 8006008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800600c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006010:	d111      	bne.n	8006036 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800601e:	461a      	mov	r2, r3
 8006020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006024:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	78fa      	ldrb	r2, [r7, #3]
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f008 f9c5 	bl	800e3be <USB_HC_Halt>
 8006034:	e3c0      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f007 fc25 	bl	800d88e <USB_ReadChInterrupts>
 8006044:	4603      	mov	r3, r0
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d168      	bne.n	8006120 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3344      	adds	r3, #68	@ 0x44
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f007 fc0f 	bl	800d88e <USB_ReadChInterrupts>
 8006070:	4603      	mov	r3, r0
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b40      	cmp	r3, #64	@ 0x40
 8006078:	d112      	bne.n	80060a0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3319      	adds	r3, #25
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	2340      	movs	r3, #64	@ 0x40
 800609e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	331b      	adds	r3, #27
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d019      	beq.n	80060ea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	331b      	adds	r3, #27
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	2301      	movs	r3, #1
 80060fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	334d      	adds	r3, #77	@ 0x4d
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f008 f950 	bl	800e3be <USB_HC_Halt>
 800611e:	e34b      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f007 fbb0 	bl	800d88e <USB_ReadChInterrupts>
 800612e:	4603      	mov	r3, r0
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d139      	bne.n	80061ac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	334d      	adds	r3, #77	@ 0x4d
 8006148:	2205      	movs	r2, #5
 800614a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800614c:	78fa      	ldrb	r2, [r7, #3]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	331a      	adds	r3, #26
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3319      	adds	r3, #25
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3344      	adds	r3, #68	@ 0x44
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f008 f913 	bl	800e3be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a4:	461a      	mov	r2, r3
 80061a6:	2340      	movs	r3, #64	@ 0x40
 80061a8:	6093      	str	r3, [r2, #8]
 80061aa:	e305      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f007 fb6a 	bl	800d88e <USB_ReadChInterrupts>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d11a      	bne.n	80061fa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d0:	461a      	mov	r2, r3
 80061d2:	2308      	movs	r3, #8
 80061d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	334d      	adds	r3, #77	@ 0x4d
 80061e6:	2206      	movs	r2, #6
 80061e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f008 f8e3 	bl	800e3be <USB_HC_Halt>
 80061f8:	e2de      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f007 fb43 	bl	800d88e <USB_ReadChInterrupts>
 8006208:	4603      	mov	r3, r0
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b10      	cmp	r3, #16
 8006210:	d144      	bne.n	800629c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3344      	adds	r3, #68	@ 0x44
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	334d      	adds	r3, #77	@ 0x4d
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	3319      	adds	r3, #25
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d114      	bne.n	800627a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3318      	adds	r3, #24
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3319      	adds	r3, #25
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f008 f89b 	bl	800e3be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	2310      	movs	r3, #16
 8006298:	6093      	str	r3, [r2, #8]
 800629a:	e28d      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	78fa      	ldrb	r2, [r7, #3]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f007 faf2 	bl	800d88e <USB_ReadChInterrupts>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b0:	2b80      	cmp	r3, #128	@ 0x80
 80062b2:	d169      	bne.n	8006388 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	799b      	ldrb	r3, [r3, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d111      	bne.n	80062e0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	334d      	adds	r3, #77	@ 0x4d
 80062cc:	2207      	movs	r2, #7
 80062ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f008 f870 	bl	800e3be <USB_HC_Halt>
 80062de:	e049      	b.n	8006374 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	3344      	adds	r3, #68	@ 0x44
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4403      	add	r3, r0
 8006300:	3344      	adds	r3, #68	@ 0x44
 8006302:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	3344      	adds	r3, #68	@ 0x44
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d922      	bls.n	8006360 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3344      	adds	r3, #68	@ 0x44
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	334c      	adds	r3, #76	@ 0x4c
 800633e:	2204      	movs	r2, #4
 8006340:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	334c      	adds	r3, #76	@ 0x4c
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f00d fbbf 	bl	8013adc <HAL_HCD_HC_NotifyURBChange_Callback>
 800635e:	e009      	b.n	8006374 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	334c      	adds	r3, #76	@ 0x4c
 8006370:	2202      	movs	r2, #2
 8006372:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	461a      	mov	r2, r3
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	6093      	str	r3, [r2, #8]
 8006386:	e217      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	4611      	mov	r1, r2
 8006390:	4618      	mov	r0, r3
 8006392:	f007 fa7c 	bl	800d88e <USB_ReadChInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a0:	d11b      	bne.n	80063da <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	334d      	adds	r3, #77	@ 0x4d
 80063b2:	2209      	movs	r2, #9
 80063b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f007 fffd 	bl	800e3be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d0:	461a      	mov	r2, r3
 80063d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063d6:	6093      	str	r3, [r2, #8]
 80063d8:	e1ee      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f007 fa53 	bl	800d88e <USB_ReadChInterrupts>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	f040 81df 	bne.w	80067b2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006400:	461a      	mov	r2, r3
 8006402:	2302      	movs	r3, #2
 8006404:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	334d      	adds	r3, #77	@ 0x4d
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	f040 8093 	bne.w	8006544 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	334d      	adds	r3, #77	@ 0x4d
 800642e:	2202      	movs	r2, #2
 8006430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	334c      	adds	r3, #76	@ 0x4c
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3326      	adds	r3, #38	@ 0x26
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d00b      	beq.n	8006474 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3326      	adds	r3, #38	@ 0x26
 800646c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800646e:	2b03      	cmp	r3, #3
 8006470:	f040 8190 	bne.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	799b      	ldrb	r3, [r3, #6]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d115      	bne.n	80064a8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	333d      	adds	r3, #61	@ 0x3d
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	f083 0301 	eor.w	r3, r3, #1
 8006494:	b2d8      	uxtb	r0, r3
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	333d      	adds	r3, #61	@ 0x3d
 80064a4:	4602      	mov	r2, r0
 80064a6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	799b      	ldrb	r3, [r3, #6]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	f040 8171 	bne.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	3334      	adds	r3, #52	@ 0x34
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8165 	beq.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	3334      	adds	r3, #52	@ 0x34
 80064da:	6819      	ldr	r1, [r3, #0]
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4403      	add	r3, r0
 80064ea:	3328      	adds	r3, #40	@ 0x28
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	440b      	add	r3, r1
 80064f0:	1e59      	subs	r1, r3, #1
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4403      	add	r3, r0
 8006500:	3328      	adds	r3, #40	@ 0x28
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	fbb1 f3f3 	udiv	r3, r1, r3
 8006508:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 813f 	beq.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	333d      	adds	r3, #61	@ 0x3d
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2d8      	uxtb	r0, r3
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	333d      	adds	r3, #61	@ 0x3d
 800653e:	4602      	mov	r2, r0
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e127      	b.n	8006794 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	334d      	adds	r3, #77	@ 0x4d
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d120      	bne.n	800659c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	334d      	adds	r3, #77	@ 0x4d
 800656a:	2202      	movs	r2, #2
 800656c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	331b      	adds	r3, #27
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	f040 8107 	bne.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	334c      	adds	r3, #76	@ 0x4c
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e0fb      	b.n	8006794 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	334d      	adds	r3, #77	@ 0x4d
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d13a      	bne.n	8006628 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	334d      	adds	r3, #77	@ 0x4d
 80065c2:	2202      	movs	r2, #2
 80065c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	334c      	adds	r3, #76	@ 0x4c
 80065d6:	2202      	movs	r2, #2
 80065d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	331b      	adds	r3, #27
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	f040 80d1 	bne.w	8006794 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	331b      	adds	r3, #27
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	440a      	add	r2, r1
 800661c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006624:	6053      	str	r3, [r2, #4]
 8006626:	e0b5      	b.n	8006794 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	334d      	adds	r3, #77	@ 0x4d
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b05      	cmp	r3, #5
 800663c:	d114      	bne.n	8006668 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	334d      	adds	r3, #77	@ 0x4d
 800664e:	2202      	movs	r2, #2
 8006650:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	334c      	adds	r3, #76	@ 0x4c
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e095      	b.n	8006794 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	334d      	adds	r3, #77	@ 0x4d
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b06      	cmp	r3, #6
 800667c:	d114      	bne.n	80066a8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	334d      	adds	r3, #77	@ 0x4d
 800668e:	2202      	movs	r2, #2
 8006690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	334c      	adds	r3, #76	@ 0x4c
 80066a2:	2205      	movs	r2, #5
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e075      	b.n	8006794 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	334d      	adds	r3, #77	@ 0x4d
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b07      	cmp	r3, #7
 80066bc:	d00a      	beq.n	80066d4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	334d      	adds	r3, #77	@ 0x4d
 80066ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d170      	bne.n	80067b6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4613      	mov	r3, r2
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	334d      	adds	r3, #77	@ 0x4d
 80066e4:	2202      	movs	r2, #2
 80066e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	3344      	adds	r3, #68	@ 0x44
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1c59      	adds	r1, r3, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4403      	add	r3, r0
 8006708:	3344      	adds	r3, #68	@ 0x44
 800670a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3344      	adds	r3, #68	@ 0x44
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d914      	bls.n	800674c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006722:	78fa      	ldrb	r2, [r7, #3]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	3344      	adds	r3, #68	@ 0x44
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	334c      	adds	r3, #76	@ 0x4c
 8006746:	2204      	movs	r2, #4
 8006748:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800674a:	e022      	b.n	8006792 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	334c      	adds	r3, #76	@ 0x4c
 800675c:	2202      	movs	r2, #2
 800675e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006776:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800677e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	461a      	mov	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006792:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	334c      	adds	r3, #76	@ 0x4c
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f00d f996 	bl	8013adc <HAL_HCD_HC_NotifyURBChange_Callback>
 80067b0:	e002      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80067b6:	bf00      	nop
  }
}
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b08a      	sub	sp, #40	@ 0x28
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	0c5b      	lsrs	r3, r3, #17
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d004      	beq.n	8006804 <HCD_RXQLVL_IRQHandler+0x46>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	f000 80b6 	beq.w	800696e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006802:	e0b7      	b.n	8006974 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80b3 	beq.w	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	4613      	mov	r3, r2
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	332c      	adds	r3, #44	@ 0x2c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80a7 	beq.w	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4613      	mov	r3, r2
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3338      	adds	r3, #56	@ 0x38
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	18d1      	adds	r1, r2, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4613      	mov	r3, r2
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	3334      	adds	r3, #52	@ 0x34
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4299      	cmp	r1, r3
 800684e:	f200 8083 	bhi.w	8006958 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	4613      	mov	r3, r2
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	332c      	adds	r3, #44	@ 0x2c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	b292      	uxth	r2, r2
 800686c:	4619      	mov	r1, r3
 800686e:	f006 ffa3 	bl	800d7b8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4613      	mov	r3, r2
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	332c      	adds	r3, #44	@ 0x2c
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	18d1      	adds	r1, r2, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4613      	mov	r3, r2
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4403      	add	r3, r0
 8006896:	332c      	adds	r3, #44	@ 0x2c
 8006898:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	4613      	mov	r3, r2
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3338      	adds	r3, #56	@ 0x38
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	18d1      	adds	r1, r2, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4613      	mov	r3, r2
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4403      	add	r3, r0
 80068be:	3338      	adds	r3, #56	@ 0x38
 80068c0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	0cdb      	lsrs	r3, r3, #19
 80068d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4613      	mov	r3, r2
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3328      	adds	r3, #40	@ 0x28
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d13f      	bne.n	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d03c      	beq.n	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800690e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006916:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006924:	461a      	mov	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4613      	mov	r3, r2
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	333c      	adds	r3, #60	@ 0x3c
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f083 0301 	eor.w	r3, r3, #1
 8006940:	b2d8      	uxtb	r0, r3
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	4613      	mov	r3, r2
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	333c      	adds	r3, #60	@ 0x3c
 8006952:	4602      	mov	r2, r0
 8006954:	701a      	strb	r2, [r3, #0]
      break;
 8006956:	e00c      	b.n	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	4613      	mov	r3, r2
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	334c      	adds	r3, #76	@ 0x4c
 8006968:	2204      	movs	r2, #4
 800696a:	701a      	strb	r2, [r3, #0]
      break;
 800696c:	e001      	b.n	8006972 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006972:	bf00      	nop
  }
}
 8006974:	bf00      	nop
 8006976:	3728      	adds	r7, #40	@ 0x28
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80069a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d10b      	bne.n	80069cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d102      	bne.n	80069c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f00d f870 	bl	8013aa4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d132      	bne.n	8006a3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f043 0308 	orr.w	r3, r3, #8
 80069dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d126      	bne.n	8006a36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7a5b      	ldrb	r3, [r3, #9]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d113      	bne.n	8006a18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80069f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069fa:	d106      	bne.n	8006a0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2102      	movs	r1, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f007 f85c 	bl	800dac0 <USB_InitFSLSPClkSel>
 8006a08:	e011      	b.n	8006a2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f007 f855 	bl	800dac0 <USB_InitFSLSPClkSel>
 8006a16:	e00a      	b.n	8006a2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	79db      	ldrb	r3, [r3, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d106      	bne.n	8006a2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a26:	461a      	mov	r2, r3
 8006a28:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006a2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f00d f866 	bl	8013b00 <HAL_HCD_PortEnabled_Callback>
 8006a34:	e002      	b.n	8006a3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f00d f870 	bl	8013b1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d103      	bne.n	8006a4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f043 0320 	orr.w	r3, r3, #32
 8006a4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6013      	str	r3, [r2, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e08b      	b.n	8006b8e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fa fbe0 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2224      	movs	r2, #36	@ 0x24
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	e006      	b.n	8006aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d108      	bne.n	8006b06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b02:	605a      	str	r2, [r3, #4]
 8006b04:	e007      	b.n	8006b16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <HAL_I2C_Init+0x134>)
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69d9      	ldr	r1, [r3, #28]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	02008000 	.word	0x02008000

08006b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d138      	bne.n	8006c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e032      	b.n	8006c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2224      	movs	r2, #36	@ 0x24
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6819      	ldr	r1, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e000      	b.n	8006c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d139      	bne.n	8006cbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e033      	b.n	8006cbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2224      	movs	r2, #36	@ 0x24
 8006c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
  }
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0bf      	b.n	8006e5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa fbd6 	bl	80014a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006d0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6899      	ldr	r1, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e68 <HAL_LTDC_Init+0x19c>)
 8006d40:	400b      	ands	r3, r1
 8006d42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68d9      	ldr	r1, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e68 <HAL_LTDC_Init+0x19c>)
 8006d6e:	400b      	ands	r3, r1
 8006d70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68d9      	ldr	r1, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1a      	ldr	r2, [r3, #32]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6919      	ldr	r1, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b33      	ldr	r3, [pc, #204]	@ (8006e68 <HAL_LTDC_Init+0x19c>)
 8006d9c:	400b      	ands	r3, r1
 8006d9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	041b      	lsls	r3, r3, #16
 8006da6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6919      	ldr	r1, [r3, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6959      	ldr	r1, [r3, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <HAL_LTDC_Init+0x19c>)
 8006dca:	400b      	ands	r3, r1
 8006dcc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6959      	ldr	r1, [r3, #20]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0206 	orr.w	r2, r2, #6
 8006e3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	f000f800 	.word	0xf000f800

08006e6c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d023      	beq.n	8006ed6 <HAL_LTDC_IRQHandler+0x6a>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01e      	beq.n	8006ed6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0204 	bic.w	r2, r2, #4
 8006ea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2204      	movs	r2, #4
 8006eae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006eb6:	f043 0201 	orr.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f86f 	bl	8006fb4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d023      	beq.n	8006f28 <HAL_LTDC_IRQHandler+0xbc>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01e      	beq.n	8006f28 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0202 	bic.w	r2, r2, #2
 8006ef8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2202      	movs	r2, #2
 8006f00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f08:	f043 0202 	orr.w	r2, r3, #2
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2204      	movs	r2, #4
 8006f16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f846 	bl	8006fb4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01b      	beq.n	8006f6a <HAL_LTDC_IRQHandler+0xfe>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f82f 	bl	8006fc8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01b      	beq.n	8006fac <HAL_LTDC_IRQHandler+0x140>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0208 	bic.w	r2, r2, #8
 8006f8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2208      	movs	r2, #8
 8006f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f818 	bl	8006fdc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_LTDC_ConfigLayer+0x1a>
 8007006:	2302      	movs	r3, #2
 8007008:	e02c      	b.n	8007064 <HAL_LTDC_ConfigLayer+0x74>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2134      	movs	r1, #52	@ 0x34
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	4413      	add	r3, r2
 8007026:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4614      	mov	r4, r2
 800702e:	461d      	mov	r5, r3
 8007030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800703a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f811 	bl	800706c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2201      	movs	r2, #1
 8007050:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bdb0      	pop	{r4, r5, r7, pc}

0800706c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007088:	4413      	add	r3, r2
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	01db      	lsls	r3, r3, #7
 8007098:	4413      	add	r3, r2
 800709a:	3384      	adds	r3, #132	@ 0x84
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	4611      	mov	r1, r2
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	01d2      	lsls	r2, r2, #7
 80070a8:	440a      	add	r2, r1
 80070aa:	3284      	adds	r2, #132	@ 0x84
 80070ac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80070b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070c2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070c4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	01db      	lsls	r3, r3, #7
 80070d0:	440b      	add	r3, r1
 80070d2:	3384      	adds	r3, #132	@ 0x84
 80070d4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ea:	4413      	add	r3, r2
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	01db      	lsls	r3, r3, #7
 80070fa:	4413      	add	r3, r2
 80070fc:	3384      	adds	r3, #132	@ 0x84
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	4611      	mov	r1, r2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	01d2      	lsls	r2, r2, #7
 800710a:	440a      	add	r2, r1
 800710c:	3284      	adds	r2, #132	@ 0x84
 800710e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007112:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007122:	4413      	add	r3, r2
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	440b      	add	r3, r1
 8007132:	3384      	adds	r3, #132	@ 0x84
 8007134:	4619      	mov	r1, r3
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4313      	orrs	r3, r2
 800713a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	01db      	lsls	r3, r3, #7
 8007146:	4413      	add	r3, r2
 8007148:	3384      	adds	r3, #132	@ 0x84
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	4611      	mov	r1, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	01d2      	lsls	r2, r2, #7
 8007156:	440a      	add	r2, r1
 8007158:	3284      	adds	r2, #132	@ 0x84
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	01db      	lsls	r3, r3, #7
 800716a:	4413      	add	r3, r2
 800716c:	3384      	adds	r3, #132	@ 0x84
 800716e:	461a      	mov	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	01db      	lsls	r3, r3, #7
 800719c:	4413      	add	r3, r2
 800719e:	3384      	adds	r3, #132	@ 0x84
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	01db      	lsls	r3, r3, #7
 80071ac:	4413      	add	r3, r2
 80071ae:	3384      	adds	r3, #132	@ 0x84
 80071b0:	461a      	mov	r2, r3
 80071b2:	2300      	movs	r3, #0
 80071b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071bc:	461a      	mov	r2, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	01db      	lsls	r3, r3, #7
 80071d0:	440b      	add	r3, r1
 80071d2:	3384      	adds	r3, #132	@ 0x84
 80071d4:	4619      	mov	r1, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	01db      	lsls	r3, r3, #7
 80071e6:	4413      	add	r3, r2
 80071e8:	3384      	adds	r3, #132	@ 0x84
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	4611      	mov	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	01d2      	lsls	r2, r2, #7
 80071f6:	440a      	add	r2, r1
 80071f8:	3284      	adds	r2, #132	@ 0x84
 80071fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80071fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	01db      	lsls	r3, r3, #7
 800720a:	4413      	add	r3, r2
 800720c:	3384      	adds	r3, #132	@ 0x84
 800720e:	461a      	mov	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	01db      	lsls	r3, r3, #7
 8007220:	4413      	add	r3, r2
 8007222:	3384      	adds	r3, #132	@ 0x84
 8007224:	69da      	ldr	r2, [r3, #28]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	01db      	lsls	r3, r3, #7
 8007230:	440b      	add	r3, r1
 8007232:	3384      	adds	r3, #132	@ 0x84
 8007234:	4619      	mov	r1, r3
 8007236:	4b58      	ldr	r3, [pc, #352]	@ (8007398 <LTDC_SetConfig+0x32c>)
 8007238:	4013      	ands	r3, r2
 800723a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	68f9      	ldr	r1, [r7, #12]
 8007246:	6809      	ldr	r1, [r1, #0]
 8007248:	4608      	mov	r0, r1
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	01c9      	lsls	r1, r1, #7
 800724e:	4401      	add	r1, r0
 8007250:	3184      	adds	r1, #132	@ 0x84
 8007252:	4313      	orrs	r3, r2
 8007254:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	01db      	lsls	r3, r3, #7
 8007260:	4413      	add	r3, r2
 8007262:	3384      	adds	r3, #132	@ 0x84
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	01db      	lsls	r3, r3, #7
 8007270:	4413      	add	r3, r2
 8007272:	3384      	adds	r3, #132	@ 0x84
 8007274:	461a      	mov	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	4413      	add	r3, r2
 8007286:	3384      	adds	r3, #132	@ 0x84
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007298:	2304      	movs	r3, #4
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	e01b      	b.n	80072d6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d102      	bne.n	80072ac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80072a6:	2303      	movs	r3, #3
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	e014      	b.n	80072d6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d00b      	beq.n	80072cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d007      	beq.n	80072cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d003      	beq.n	80072cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80072c8:	2b07      	cmp	r3, #7
 80072ca:	d102      	bne.n	80072d2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80072cc:	2302      	movs	r3, #2
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e001      	b.n	80072d6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80072d2:	2301      	movs	r3, #1
 80072d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	01db      	lsls	r3, r3, #7
 80072e0:	4413      	add	r3, r2
 80072e2:	3384      	adds	r3, #132	@ 0x84
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	4611      	mov	r1, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	01d2      	lsls	r2, r2, #7
 80072f0:	440a      	add	r2, r1
 80072f2:	3284      	adds	r2, #132	@ 0x84
 80072f4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80072f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	fb02 f303 	mul.w	r3, r2, r3
 8007304:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	1acb      	subs	r3, r1, r3
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	fb01 f303 	mul.w	r3, r1, r3
 8007316:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	6809      	ldr	r1, [r1, #0]
 800731c:	4608      	mov	r0, r1
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	01c9      	lsls	r1, r1, #7
 8007322:	4401      	add	r1, r0
 8007324:	3184      	adds	r1, #132	@ 0x84
 8007326:	4313      	orrs	r3, r2
 8007328:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	01db      	lsls	r3, r3, #7
 8007334:	4413      	add	r3, r2
 8007336:	3384      	adds	r3, #132	@ 0x84
 8007338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4619      	mov	r1, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	01db      	lsls	r3, r3, #7
 8007344:	440b      	add	r3, r1
 8007346:	3384      	adds	r3, #132	@ 0x84
 8007348:	4619      	mov	r1, r3
 800734a:	4b14      	ldr	r3, [pc, #80]	@ (800739c <LTDC_SetConfig+0x330>)
 800734c:	4013      	ands	r3, r2
 800734e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	4413      	add	r3, r2
 800735c:	3384      	adds	r3, #132	@ 0x84
 800735e:	461a      	mov	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007364:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	01db      	lsls	r3, r3, #7
 8007370:	4413      	add	r3, r2
 8007372:	3384      	adds	r3, #132	@ 0x84
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	4611      	mov	r1, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	01d2      	lsls	r2, r2, #7
 8007380:	440a      	add	r2, r1
 8007382:	3284      	adds	r2, #132	@ 0x84
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	6013      	str	r3, [r2, #0]
}
 800738a:	bf00      	nop
 800738c:	3724      	adds	r7, #36	@ 0x24
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	fffff8f8 	.word	0xfffff8f8
 800739c:	fffff800 	.word	0xfffff800

080073a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a04      	ldr	r2, [pc, #16]	@ (80073bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40007000 	.word	0x40007000

080073c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80073ca:	4b23      	ldr	r3, [pc, #140]	@ (8007458 <HAL_PWREx_EnableOverDrive+0x98>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	4a22      	ldr	r2, [pc, #136]	@ (8007458 <HAL_PWREx_EnableOverDrive+0x98>)
 80073d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80073d6:	4b20      	ldr	r3, [pc, #128]	@ (8007458 <HAL_PWREx_EnableOverDrive+0x98>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80073e2:	4b1e      	ldr	r3, [pc, #120]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1d      	ldr	r2, [pc, #116]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073ee:	f7fb fcaf 	bl	8002d50 <HAL_GetTick>
 80073f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073f4:	e009      	b.n	800740a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073f6:	f7fb fcab 	bl	8002d50 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007404:	d901      	bls.n	800740a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e022      	b.n	8007450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800740a:	4b14      	ldr	r3, [pc, #80]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007416:	d1ee      	bne.n	80073f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007418:	4b10      	ldr	r3, [pc, #64]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a0f      	ldr	r2, [pc, #60]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007424:	f7fb fc94 	bl	8002d50 <HAL_GetTick>
 8007428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800742a:	e009      	b.n	8007440 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800742c:	f7fb fc90 	bl	8002d50 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800743a:	d901      	bls.n	8007440 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e007      	b.n	8007450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007440:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744c:	d1ee      	bne.n	800742c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40023800 	.word	0x40023800
 800745c:	40007000 	.word	0x40007000

08007460 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af02      	add	r7, sp, #8
 8007466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007468:	f7fb fc72 	bl	8002d50 <HAL_GetTick>
 800746c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e067      	b.n	8007548 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10b      	bne.n	800749c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7fa fa19 	bl	80018c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007492:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f85e 	bl	8007558 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	021a      	lsls	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	2120      	movs	r1, #32
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f856 	bl	8007574 <QSPI_WaitFlagStateUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d135      	bne.n	800753e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007550 <HAL_QSPI_Init+0xf0>)
 80074da:	4013      	ands	r3, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6852      	ldr	r2, [r2, #4]
 80074e0:	0611      	lsls	r1, r2, #24
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68d2      	ldr	r2, [r2, #12]
 80074e6:	4311      	orrs	r1, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	69d2      	ldr	r2, [r2, #28]
 80074ec:	4311      	orrs	r1, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6a12      	ldr	r2, [r2, #32]
 80074f2:	4311      	orrs	r1, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	4b14      	ldr	r3, [pc, #80]	@ (8007554 <HAL_QSPI_Init+0xf4>)
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6912      	ldr	r2, [r2, #16]
 800750a:	0411      	lsls	r1, r2, #16
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6952      	ldr	r2, [r2, #20]
 8007510:	4311      	orrs	r1, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6992      	ldr	r2, [r2, #24]
 8007516:	4311      	orrs	r1, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	430b      	orrs	r3, r1
 800751e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007546:	7afb      	ldrb	r3, [r7, #11]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	00ffff2f 	.word	0x00ffff2f
 8007554:	ffe0f8fe 	.word	0xffe0f8fe

08007558 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4613      	mov	r3, r2
 8007582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007584:	e01a      	b.n	80075bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800758c:	d016      	beq.n	80075bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800758e:	f7fb fbdf 	bl	8002d50 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	429a      	cmp	r2, r3
 800759c:	d302      	bcc.n	80075a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b0:	f043 0201 	orr.w	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e00e      	b.n	80075da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf14      	ite	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	2300      	moveq	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d1d6      	bne.n	8007586 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e291      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8087 	beq.w	8007716 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007608:	4b96      	ldr	r3, [pc, #600]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b04      	cmp	r3, #4
 8007612:	d00c      	beq.n	800762e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007614:	4b93      	ldr	r3, [pc, #588]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 030c 	and.w	r3, r3, #12
 800761c:	2b08      	cmp	r3, #8
 800761e:	d112      	bne.n	8007646 <HAL_RCC_OscConfig+0x62>
 8007620:	4b90      	ldr	r3, [pc, #576]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800762c:	d10b      	bne.n	8007646 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800762e:	4b8d      	ldr	r3, [pc, #564]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d06c      	beq.n	8007714 <HAL_RCC_OscConfig+0x130>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d168      	bne.n	8007714 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e26b      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800764e:	d106      	bne.n	800765e <HAL_RCC_OscConfig+0x7a>
 8007650:	4b84      	ldr	r3, [pc, #528]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a83      	ldr	r2, [pc, #524]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	e02e      	b.n	80076bc <HAL_RCC_OscConfig+0xd8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10c      	bne.n	8007680 <HAL_RCC_OscConfig+0x9c>
 8007666:	4b7f      	ldr	r3, [pc, #508]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a7e      	ldr	r2, [pc, #504]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800766c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4b7c      	ldr	r3, [pc, #496]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7b      	ldr	r2, [pc, #492]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	e01d      	b.n	80076bc <HAL_RCC_OscConfig+0xd8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007688:	d10c      	bne.n	80076a4 <HAL_RCC_OscConfig+0xc0>
 800768a:	4b76      	ldr	r3, [pc, #472]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a75      	ldr	r2, [pc, #468]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b73      	ldr	r3, [pc, #460]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a72      	ldr	r2, [pc, #456]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e00b      	b.n	80076bc <HAL_RCC_OscConfig+0xd8>
 80076a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80076aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6b      	ldr	r2, [pc, #428]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80076b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d013      	beq.n	80076ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c4:	f7fb fb44 	bl	8002d50 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076cc:	f7fb fb40 	bl	8002d50 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b64      	cmp	r3, #100	@ 0x64
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e21f      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076de:	4b61      	ldr	r3, [pc, #388]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <HAL_RCC_OscConfig+0xe8>
 80076ea:	e014      	b.n	8007716 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fb fb30 	bl	8002d50 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f4:	f7fb fb2c 	bl	8002d50 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	@ 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e20b      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007706:	4b57      	ldr	r3, [pc, #348]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f0      	bne.n	80076f4 <HAL_RCC_OscConfig+0x110>
 8007712:	e000      	b.n	8007716 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d069      	beq.n	80077f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007722:	4b50      	ldr	r3, [pc, #320]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 030c 	and.w	r3, r3, #12
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800772e:	4b4d      	ldr	r3, [pc, #308]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b08      	cmp	r3, #8
 8007738:	d11c      	bne.n	8007774 <HAL_RCC_OscConfig+0x190>
 800773a:	4b4a      	ldr	r3, [pc, #296]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d116      	bne.n	8007774 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007746:	4b47      	ldr	r3, [pc, #284]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_RCC_OscConfig+0x17a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d001      	beq.n	800775e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e1df      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775e:	4b41      	ldr	r3, [pc, #260]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	493d      	ldr	r1, [pc, #244]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800776e:	4313      	orrs	r3, r2
 8007770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007772:	e040      	b.n	80077f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d023      	beq.n	80077c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800777c:	4b39      	ldr	r3, [pc, #228]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a38      	ldr	r2, [pc, #224]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007788:	f7fb fae2 	bl	8002d50 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007790:	f7fb fade 	bl	8002d50 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e1bd      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a2:	4b30      	ldr	r3, [pc, #192]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	4929      	ldr	r1, [pc, #164]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	600b      	str	r3, [r1, #0]
 80077c2:	e018      	b.n	80077f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077c4:	4b27      	ldr	r3, [pc, #156]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a26      	ldr	r2, [pc, #152]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fb fabe 	bl	8002d50 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d8:	f7fb faba 	bl	8002d50 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e199      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d038      	beq.n	8007874 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d019      	beq.n	800783e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800780a:	4b16      	ldr	r3, [pc, #88]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007816:	f7fb fa9b 	bl	8002d50 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800781e:	f7fb fa97 	bl	8002d50 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e176      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007830:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <HAL_RCC_OscConfig+0x23a>
 800783c:	e01a      	b.n	8007874 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800783e:	4b09      	ldr	r3, [pc, #36]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007842:	4a08      	ldr	r2, [pc, #32]	@ (8007864 <HAL_RCC_OscConfig+0x280>)
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784a:	f7fb fa81 	bl	8002d50 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007850:	e00a      	b.n	8007868 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007852:	f7fb fa7d 	bl	8002d50 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d903      	bls.n	8007868 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e15c      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
 8007864:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007868:	4b91      	ldr	r3, [pc, #580]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800786a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1ee      	bne.n	8007852 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80a4 	beq.w	80079ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007882:	4b8b      	ldr	r3, [pc, #556]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800788e:	4b88      	ldr	r3, [pc, #544]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	4a87      	ldr	r2, [pc, #540]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007898:	6413      	str	r3, [r2, #64]	@ 0x40
 800789a:	4b85      	ldr	r3, [pc, #532]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078a6:	2301      	movs	r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078aa:	4b82      	ldr	r3, [pc, #520]	@ (8007ab4 <HAL_RCC_OscConfig+0x4d0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d118      	bne.n	80078e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078b6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ab4 <HAL_RCC_OscConfig+0x4d0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a7e      	ldr	r2, [pc, #504]	@ (8007ab4 <HAL_RCC_OscConfig+0x4d0>)
 80078bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078c2:	f7fb fa45 	bl	8002d50 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078c8:	e008      	b.n	80078dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ca:	f7fb fa41 	bl	8002d50 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b64      	cmp	r3, #100	@ 0x64
 80078d6:	d901      	bls.n	80078dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e120      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078dc:	4b75      	ldr	r3, [pc, #468]	@ (8007ab4 <HAL_RCC_OscConfig+0x4d0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0f0      	beq.n	80078ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d106      	bne.n	80078fe <HAL_RCC_OscConfig+0x31a>
 80078f0:	4b6f      	ldr	r3, [pc, #444]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f4:	4a6e      	ldr	r2, [pc, #440]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80078fc:	e02d      	b.n	800795a <HAL_RCC_OscConfig+0x376>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10c      	bne.n	8007920 <HAL_RCC_OscConfig+0x33c>
 8007906:	4b6a      	ldr	r3, [pc, #424]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	4a69      	ldr	r2, [pc, #420]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	6713      	str	r3, [r2, #112]	@ 0x70
 8007912:	4b67      	ldr	r3, [pc, #412]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007916:	4a66      	ldr	r2, [pc, #408]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007918:	f023 0304 	bic.w	r3, r3, #4
 800791c:	6713      	str	r3, [r2, #112]	@ 0x70
 800791e:	e01c      	b.n	800795a <HAL_RCC_OscConfig+0x376>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b05      	cmp	r3, #5
 8007926:	d10c      	bne.n	8007942 <HAL_RCC_OscConfig+0x35e>
 8007928:	4b61      	ldr	r3, [pc, #388]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792c:	4a60      	ldr	r2, [pc, #384]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800792e:	f043 0304 	orr.w	r3, r3, #4
 8007932:	6713      	str	r3, [r2, #112]	@ 0x70
 8007934:	4b5e      	ldr	r3, [pc, #376]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007938:	4a5d      	ldr	r2, [pc, #372]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007940:	e00b      	b.n	800795a <HAL_RCC_OscConfig+0x376>
 8007942:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007946:	4a5a      	ldr	r2, [pc, #360]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	6713      	str	r3, [r2, #112]	@ 0x70
 800794e:	4b58      	ldr	r3, [pc, #352]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007952:	4a57      	ldr	r2, [pc, #348]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007954:	f023 0304 	bic.w	r3, r3, #4
 8007958:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d015      	beq.n	800798e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007962:	f7fb f9f5 	bl	8002d50 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007968:	e00a      	b.n	8007980 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796a:	f7fb f9f1 	bl	8002d50 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007978:	4293      	cmp	r3, r2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e0ce      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007980:	4b4b      	ldr	r3, [pc, #300]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0ee      	beq.n	800796a <HAL_RCC_OscConfig+0x386>
 800798c:	e014      	b.n	80079b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800798e:	f7fb f9df 	bl	8002d50 <HAL_GetTick>
 8007992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007994:	e00a      	b.n	80079ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007996:	f7fb f9db 	bl	8002d50 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d901      	bls.n	80079ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e0b8      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ac:	4b40      	ldr	r3, [pc, #256]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1ee      	bne.n	8007996 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d105      	bne.n	80079ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079be:	4b3c      	ldr	r3, [pc, #240]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	4a3b      	ldr	r2, [pc, #236]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80a4 	beq.w	8007b1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079d4:	4b36      	ldr	r3, [pc, #216]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 030c 	and.w	r3, r3, #12
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d06b      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d149      	bne.n	8007a7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079e8:	4b31      	ldr	r3, [pc, #196]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a30      	ldr	r2, [pc, #192]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 80079ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fb f9ac 	bl	8002d50 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fb f9a8 	bl	8002d50 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e087      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a0e:	4b28      	ldr	r3, [pc, #160]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	019b      	lsls	r3, r3, #6
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	3b01      	subs	r3, #1
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a48:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fb f97c 	bl	8002d50 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a5c:	f7fb f978 	bl	8002d50 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e057      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6e:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0x478>
 8007a7a:	e04f      	b.n	8007b1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0b      	ldr	r2, [pc, #44]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fb f962 	bl	8002d50 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a90:	f7fb f95e 	bl	8002d50 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e03d      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa2:	4b03      	ldr	r3, [pc, #12]	@ (8007ab0 <HAL_RCC_OscConfig+0x4cc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x4ac>
 8007aae:	e035      	b.n	8007b1c <HAL_RCC_OscConfig+0x538>
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b28 <HAL_RCC_OscConfig+0x544>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d028      	beq.n	8007b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d121      	bne.n	8007b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d11a      	bne.n	8007b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ae8:	4013      	ands	r3, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007aee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d111      	bne.n	8007b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	3b01      	subs	r3, #1
 8007b02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d107      	bne.n	8007b18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800

08007b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0d0      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b44:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d910      	bls.n	8007b74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b52:	4b67      	ldr	r3, [pc, #412]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f023 020f 	bic.w	r2, r3, #15
 8007b5a:	4965      	ldr	r1, [pc, #404]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b62:	4b63      	ldr	r3, [pc, #396]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d001      	beq.n	8007b74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0b8      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d020      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b8c:	4b59      	ldr	r3, [pc, #356]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	4a58      	ldr	r2, [pc, #352]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ba4:	4b53      	ldr	r3, [pc, #332]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4a52      	ldr	r2, [pc, #328]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb0:	4b50      	ldr	r3, [pc, #320]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	494d      	ldr	r1, [pc, #308]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d040      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd6:	4b47      	ldr	r3, [pc, #284]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d115      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e07f      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	4b41      	ldr	r3, [pc, #260]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e073      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e06b      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c0e:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4936      	ldr	r1, [pc, #216]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c20:	f7fb f896 	bl	8002d50 <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c26:	e00a      	b.n	8007c3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c28:	f7fb f892 	bl	8002d50 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e053      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 020c 	and.w	r2, r3, #12
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1eb      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c50:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d210      	bcs.n	8007c80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5e:	4b24      	ldr	r3, [pc, #144]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f023 020f 	bic.w	r2, r3, #15
 8007c66:	4922      	ldr	r1, [pc, #136]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d001      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e032      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c8c:	4b19      	ldr	r3, [pc, #100]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4916      	ldr	r1, [pc, #88]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007caa:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	490e      	ldr	r1, [pc, #56]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cbe:	f000 f821 	bl	8007d04 <HAL_RCC_GetSysClockFreq>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	490a      	ldr	r1, [pc, #40]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8007cd0:	5ccb      	ldrb	r3, [r1, r3]
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <HAL_RCC_ClockConfig+0x1d0>)
 8007cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cda:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <HAL_RCC_ClockConfig+0x1d4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fa f9a4 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40023c00 	.word	0x40023c00
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	08014278 	.word	0x08014278
 8007cfc:	20000000 	.word	0x20000000
 8007d00:	20000004 	.word	0x20000004

08007d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b090      	sub	sp, #64	@ 0x40
 8007d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d14:	2300      	movs	r3, #0
 8007d16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d1c:	4b59      	ldr	r3, [pc, #356]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 030c 	and.w	r3, r3, #12
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d00d      	beq.n	8007d44 <HAL_RCC_GetSysClockFreq+0x40>
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	f200 80a1 	bhi.w	8007e70 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_RCC_GetSysClockFreq+0x34>
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d003      	beq.n	8007d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d36:	e09b      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d38:	4b53      	ldr	r3, [pc, #332]	@ (8007e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d3c:	e09b      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d3e:	4b53      	ldr	r3, [pc, #332]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d42:	e098      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d44:	4b4f      	ldr	r3, [pc, #316]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d028      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	099b      	lsrs	r3, r3, #6
 8007d60:	2200      	movs	r2, #0
 8007d62:	623b      	str	r3, [r7, #32]
 8007d64:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4b47      	ldr	r3, [pc, #284]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d70:	fb03 f201 	mul.w	r2, r3, r1
 8007d74:	2300      	movs	r3, #0
 8007d76:	fb00 f303 	mul.w	r3, r0, r3
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4a43      	ldr	r2, [pc, #268]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8007d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d84:	460a      	mov	r2, r1
 8007d86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d8a:	4413      	add	r3, r2
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d90:	2200      	movs	r2, #0
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	61fa      	str	r2, [r7, #28]
 8007d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d9e:	f7f8 fa37 	bl	8000210 <__aeabi_uldivmod>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4613      	mov	r3, r2
 8007da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007daa:	e053      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dac:	4b35      	ldr	r3, [pc, #212]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	099b      	lsrs	r3, r3, #6
 8007db2:	2200      	movs	r2, #0
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	617a      	str	r2, [r7, #20]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007dbe:	f04f 0b00 	mov.w	fp, #0
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	f04f 0000 	mov.w	r0, #0
 8007dca:	f04f 0100 	mov.w	r1, #0
 8007dce:	0159      	lsls	r1, r3, #5
 8007dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dd4:	0150      	lsls	r0, r2, #5
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	ebb2 080a 	subs.w	r8, r2, sl
 8007dde:	eb63 090b 	sbc.w	r9, r3, fp
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007dee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007df2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007df6:	ebb2 0408 	subs.w	r4, r2, r8
 8007dfa:	eb63 0509 	sbc.w	r5, r3, r9
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	00eb      	lsls	r3, r5, #3
 8007e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e0c:	00e2      	lsls	r2, r4, #3
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461d      	mov	r5, r3
 8007e12:	eb14 030a 	adds.w	r3, r4, sl
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	eb45 030b 	adc.w	r3, r5, fp
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	028b      	lsls	r3, r1, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e34:	4621      	mov	r1, r4
 8007e36:	028a      	lsls	r2, r1, #10
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	2200      	movs	r2, #0
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	60fa      	str	r2, [r7, #12]
 8007e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e48:	f7f8 f9e2 	bl	8000210 <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4613      	mov	r3, r2
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e54:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	3301      	adds	r3, #1
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e6e:	e002      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e70:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3740      	adds	r7, #64	@ 0x40
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
 8007e88:	00f42400 	.word	0x00f42400
 8007e8c:	017d7840 	.word	0x017d7840

08007e90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e94:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e96:	681b      	ldr	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000000 	.word	0x20000000

08007ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007eac:	f7ff fff0 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	0a9b      	lsrs	r3, r3, #10
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	4903      	ldr	r1, [pc, #12]	@ (8007ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ebe:	5ccb      	ldrb	r3, [r1, r3]
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	08014288 	.word	0x08014288

08007ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ed4:	f7ff ffdc 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	0b5b      	lsrs	r3, r3, #13
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	4903      	ldr	r1, [pc, #12]	@ (8007ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee6:	5ccb      	ldrb	r3, [r1, r3]
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	08014288 	.word	0x08014288

08007ef8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220f      	movs	r2, #15
 8007f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f08:	4b12      	ldr	r3, [pc, #72]	@ (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0203 	and.w	r2, r3, #3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f14:	4b0f      	ldr	r3, [pc, #60]	@ (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <HAL_RCC_GetClockConfig+0x60>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 020f 	and.w	r2, r3, #15
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40023c00 	.word	0x40023c00

08007f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d012      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f84:	4b69      	ldr	r3, [pc, #420]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	4a68      	ldr	r2, [pc, #416]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f8e:	6093      	str	r3, [r2, #8]
 8007f90:	4b66      	ldr	r3, [pc, #408]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f98:	4964      	ldr	r1, [pc, #400]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d017      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fbc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc4:	4959      	ldr	r1, [pc, #356]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fd4:	d101      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d017      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ff8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	494a      	ldr	r1, [pc, #296]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008002:	4313      	orrs	r3, r2
 8008004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008010:	d101      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008012:	2301      	movs	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800801e:	2301      	movs	r3, #1
 8008020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 808b 	beq.w	8008156 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008040:	4b3a      	ldr	r3, [pc, #232]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008044:	4a39      	ldr	r2, [pc, #228]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800804a:	6413      	str	r3, [r2, #64]	@ 0x40
 800804c:	4b37      	ldr	r3, [pc, #220]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008058:	4b35      	ldr	r3, [pc, #212]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a34      	ldr	r2, [pc, #208]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800805e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008064:	f7fa fe74 	bl	8002d50 <HAL_GetTick>
 8008068:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800806a:	e008      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800806c:	f7fa fe70 	bl	8002d50 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b64      	cmp	r3, #100	@ 0x64
 8008078:	d901      	bls.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e357      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800807e:	4b2c      	ldr	r3, [pc, #176]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0f0      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800808a:	4b28      	ldr	r3, [pc, #160]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008092:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d035      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d02e      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080a8:	4b20      	ldr	r3, [pc, #128]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080b2:	4b1e      	ldr	r3, [pc, #120]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b6:	4a1d      	ldr	r2, [pc, #116]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080bc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080be:	4b1b      	ldr	r3, [pc, #108]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080c2:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80080ca:	4a18      	ldr	r2, [pc, #96]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080d0:	4b16      	ldr	r3, [pc, #88]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d114      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fa fe38 	bl	8002d50 <HAL_GetTick>
 80080e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080e2:	e00a      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080e4:	f7fa fe34 	bl	8002d50 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d901      	bls.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e319      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fa:	4b0c      	ldr	r3, [pc, #48]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ee      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800810e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008112:	d111      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008114:	4b05      	ldr	r3, [pc, #20]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008120:	4b04      	ldr	r3, [pc, #16]	@ (8008134 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008122:	400b      	ands	r3, r1
 8008124:	4901      	ldr	r1, [pc, #4]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008126:	4313      	orrs	r3, r2
 8008128:	608b      	str	r3, [r1, #8]
 800812a:	e00b      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800812c:	40023800 	.word	0x40023800
 8008130:	40007000 	.word	0x40007000
 8008134:	0ffffcff 	.word	0x0ffffcff
 8008138:	4baa      	ldr	r3, [pc, #680]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	4aa9      	ldr	r2, [pc, #676]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008142:	6093      	str	r3, [r2, #8]
 8008144:	4ba7      	ldr	r3, [pc, #668]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008146:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008150:	49a4      	ldr	r1, [pc, #656]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008152:	4313      	orrs	r3, r2
 8008154:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	2b00      	cmp	r3, #0
 8008160:	d010      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008162:	4ba0      	ldr	r3, [pc, #640]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008168:	4a9e      	ldr	r2, [pc, #632]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800816a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800816e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008172:	4b9c      	ldr	r3, [pc, #624]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008174:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	4999      	ldr	r1, [pc, #612]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008190:	4b94      	ldr	r3, [pc, #592]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008196:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819e:	4991      	ldr	r1, [pc, #580]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081b2:	4b8c      	ldr	r3, [pc, #560]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081c0:	4988      	ldr	r1, [pc, #544]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081d4:	4b83      	ldr	r3, [pc, #524]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e2:	4980      	ldr	r1, [pc, #512]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081f6:	4b7b      	ldr	r3, [pc, #492]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008204:	4977      	ldr	r1, [pc, #476]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008218:	4b72      	ldr	r3, [pc, #456]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821e:	f023 0203 	bic.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008226:	496f      	ldr	r1, [pc, #444]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800823a:	4b6a      	ldr	r3, [pc, #424]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008240:	f023 020c 	bic.w	r2, r3, #12
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008248:	4966      	ldr	r1, [pc, #408]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800825c:	4b61      	ldr	r3, [pc, #388]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008262:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826a:	495e      	ldr	r1, [pc, #376]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800827e:	4b59      	ldr	r3, [pc, #356]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008284:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828c:	4955      	ldr	r1, [pc, #340]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800828e:	4313      	orrs	r3, r2
 8008290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082a0:	4b50      	ldr	r3, [pc, #320]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	494d      	ldr	r1, [pc, #308]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80082c2:	4b48      	ldr	r3, [pc, #288]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d0:	4944      	ldr	r1, [pc, #272]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082e4:	4b3f      	ldr	r3, [pc, #252]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082f2:	493c      	ldr	r1, [pc, #240]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008306:	4b37      	ldr	r3, [pc, #220]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008314:	4933      	ldr	r1, [pc, #204]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008328:	4b2e      	ldr	r3, [pc, #184]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008336:	492b      	ldr	r1, [pc, #172]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008338:	4313      	orrs	r3, r2
 800833a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800834a:	4b26      	ldr	r3, [pc, #152]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008350:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008358:	4922      	ldr	r1, [pc, #136]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008368:	d101      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800838a:	4b16      	ldr	r3, [pc, #88]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800838c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008390:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008398:	4912      	ldr	r1, [pc, #72]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083ac:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083bc:	4909      	ldr	r1, [pc, #36]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d006      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 80d9 	beq.w	800858a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083d8:	4b02      	ldr	r3, [pc, #8]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a01      	ldr	r2, [pc, #4]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083e2:	e001      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80083e4:	40023800 	.word	0x40023800
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7fa fcb1 	bl	8002d50 <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083f0:	e008      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083f2:	f7fa fcad 	bl	8002d50 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b64      	cmp	r3, #100	@ 0x64
 80083fe:	d901      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e194      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008404:	4b6c      	ldr	r3, [pc, #432]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f0      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d021      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008420:	2b00      	cmp	r3, #0
 8008422:	d11d      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008424:	4b64      	ldr	r3, [pc, #400]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008432:	4b61      	ldr	r3, [pc, #388]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008438:	0e1b      	lsrs	r3, r3, #24
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	019a      	lsls	r2, r3, #6
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	431a      	orrs	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	061b      	lsls	r3, r3, #24
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	071b      	lsls	r3, r3, #28
 8008458:	4957      	ldr	r1, [pc, #348]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800845a:	4313      	orrs	r3, r2
 800845c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008474:	d00a      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800847e:	2b00      	cmp	r3, #0
 8008480:	d02e      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800848a:	d129      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800848c:	4b4a      	ldr	r3, [pc, #296]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800848e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	f003 0303 	and.w	r3, r3, #3
 8008498:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800849a:	4b47      	ldr	r3, [pc, #284]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084a0:	0f1b      	lsrs	r3, r3, #28
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	019a      	lsls	r2, r3, #6
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	041b      	lsls	r3, r3, #16
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	431a      	orrs	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	071b      	lsls	r3, r3, #28
 80084c0:	493d      	ldr	r1, [pc, #244]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084c8:	4b3b      	ldr	r3, [pc, #236]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ce:	f023 021f 	bic.w	r2, r3, #31
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4937      	ldr	r1, [pc, #220]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01d      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084ec:	4b32      	ldr	r3, [pc, #200]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084f2:	0e1b      	lsrs	r3, r3, #24
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084fa:	4b2f      	ldr	r3, [pc, #188]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008500:	0f1b      	lsrs	r3, r3, #28
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	019a      	lsls	r2, r3, #6
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	431a      	orrs	r2, r3
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	061b      	lsls	r3, r3, #24
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	071b      	lsls	r3, r3, #28
 8008520:	4925      	ldr	r1, [pc, #148]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d011      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	019a      	lsls	r2, r3, #6
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	041b      	lsls	r3, r3, #16
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	061b      	lsls	r3, r3, #24
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	071b      	lsls	r3, r3, #28
 8008550:	4919      	ldr	r1, [pc, #100]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008558:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a16      	ldr	r2, [pc, #88]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800855e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008564:	f7fa fbf4 	bl	8002d50 <HAL_GetTick>
 8008568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800856a:	e008      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800856c:	f7fa fbf0 	bl	8002d50 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b64      	cmp	r3, #100	@ 0x64
 8008578:	d901      	bls.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e0d7      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800857e:	4b0e      	ldr	r3, [pc, #56]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	f040 80cd 	bne.w	800872c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008592:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a08      	ldr	r2, [pc, #32]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800859c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800859e:	f7fa fbd7 	bl	8002d50 <HAL_GetTick>
 80085a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085a4:	e00a      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085a6:	f7fa fbd3 	bl	8002d50 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b64      	cmp	r3, #100	@ 0x64
 80085b2:	d903      	bls.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e0ba      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80085b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c8:	d0ed      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d02e      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d12a      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085f2:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f8:	0c1b      	lsrs	r3, r3, #16
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008600:	4b4d      	ldr	r3, [pc, #308]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	0f1b      	lsrs	r3, r3, #28
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	019a      	lsls	r2, r3, #6
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	431a      	orrs	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	071b      	lsls	r3, r3, #28
 8008626:	4944      	ldr	r1, [pc, #272]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800862e:	4b42      	ldr	r3, [pc, #264]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008634:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	3b01      	subs	r3, #1
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	493d      	ldr	r1, [pc, #244]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d022      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800865c:	d11d      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800865e:	4b36      	ldr	r3, [pc, #216]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008664:	0e1b      	lsrs	r3, r3, #24
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800866c:	4b32      	ldr	r3, [pc, #200]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800866e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	019a      	lsls	r2, r3, #6
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	431a      	orrs	r2, r3
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	061b      	lsls	r3, r3, #24
 800868c:	431a      	orrs	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	071b      	lsls	r3, r3, #28
 8008692:	4929      	ldr	r1, [pc, #164]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d028      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086a6:	4b24      	ldr	r3, [pc, #144]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	0e1b      	lsrs	r3, r3, #24
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086b4:	4b20      	ldr	r3, [pc, #128]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	019a      	lsls	r2, r3, #6
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	431a      	orrs	r2, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	061b      	lsls	r3, r3, #24
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	071b      	lsls	r3, r3, #28
 80086da:	4917      	ldr	r1, [pc, #92]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80086e2:	4b15      	ldr	r3, [pc, #84]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f0:	4911      	ldr	r1, [pc, #68]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80086f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008704:	f7fa fb24 	bl	8002d50 <HAL_GetTick>
 8008708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800870a:	e008      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800870c:	f7fa fb20 	bl	8002d50 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b64      	cmp	r3, #100	@ 0x64
 8008718:	d901      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e007      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800871e:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800872a:	d1ef      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40023800 	.word	0x40023800

0800873c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800875a:	f040 808d 	bne.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800875e:	4b93      	ldr	r3, [pc, #588]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008764:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800876c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008774:	d07c      	beq.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800877c:	d87b      	bhi.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800878a:	d039      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800878c:	e073      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800878e:	4b87      	ldr	r3, [pc, #540]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800879a:	4b84      	ldr	r3, [pc, #528]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087a2:	4a83      	ldr	r2, [pc, #524]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	e007      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087ac:	4b7f      	ldr	r3, [pc, #508]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b4:	4a7f      	ldr	r2, [pc, #508]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80087bc:	4b7b      	ldr	r3, [pc, #492]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c2:	0e1b      	lsrs	r3, r3, #24
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80087ca:	4b78      	ldr	r3, [pc, #480]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	fb03 f202 	mul.w	r2, r3, r2
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80087e4:	4b71      	ldr	r3, [pc, #452]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]
        break;
 80087fe:	e03b      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008800:	4b6a      	ldr	r3, [pc, #424]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800880c:	4b67      	ldr	r3, [pc, #412]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008814:	4a66      	ldr	r2, [pc, #408]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	e007      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800881e:	4b63      	ldr	r3, [pc, #396]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008826:	4a63      	ldr	r2, [pc, #396]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008828:	fbb2 f3f3 	udiv	r3, r2, r3
 800882c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800882e:	4b5f      	ldr	r3, [pc, #380]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008834:	0e1b      	lsrs	r3, r3, #24
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800883c:	4b5b      	ldr	r3, [pc, #364]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008842:	099b      	lsrs	r3, r3, #6
 8008844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	fb03 f202 	mul.w	r2, r3, r2
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008856:	4b55      	ldr	r3, [pc, #340]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]
        break;
 800886e:	e003      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008870:	4b51      	ldr	r3, [pc, #324]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008872:	617b      	str	r3, [r7, #20]
        break;
 8008874:	e000      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008876:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800887e:	f040 808d 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008882:	4b4a      	ldr	r3, [pc, #296]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008888:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008890:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008898:	d07c      	beq.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088a0:	d87b      	bhi.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ae:	d039      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80088b0:	e073      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088b2:	4b3e      	ldr	r3, [pc, #248]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d108      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088be:	4b3b      	ldr	r3, [pc, #236]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088c6:	4a3a      	ldr	r2, [pc, #232]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	e007      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088d0:	4b36      	ldr	r3, [pc, #216]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d8:	4a36      	ldr	r2, [pc, #216]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80088e0:	4b32      	ldr	r3, [pc, #200]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e6:	0e1b      	lsrs	r3, r3, #24
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80088ee:	4b2f      	ldr	r3, [pc, #188]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	099b      	lsrs	r3, r3, #6
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	fb03 f202 	mul.w	r2, r3, r2
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008908:	4b28      	ldr	r3, [pc, #160]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 031f 	and.w	r3, r3, #31
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
        break;
 8008922:	e03b      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008924:	4b21      	ldr	r3, [pc, #132]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008930:	4b1e      	ldr	r3, [pc, #120]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008938:	4a1d      	ldr	r2, [pc, #116]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	e007      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008942:	4b1a      	ldr	r3, [pc, #104]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800894a:	4a1a      	ldr	r2, [pc, #104]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008952:	4b16      	ldr	r3, [pc, #88]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008958:	0e1b      	lsrs	r3, r3, #24
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008960:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008966:	099b      	lsrs	r3, r3, #6
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	fb03 f202 	mul.w	r2, r3, r2
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800897c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	3301      	adds	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008990:	617b      	str	r3, [r7, #20]
        break;
 8008992:	e003      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008994:	4b08      	ldr	r3, [pc, #32]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008996:	617b      	str	r3, [r7, #20]
        break;
 8008998:	e000      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800899a:	bf00      	nop
      }
    }
  }

  return frequency;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40023800 	.word	0x40023800
 80089b0:	00f42400 	.word	0x00f42400
 80089b4:	017d7840 	.word	0x017d7840
 80089b8:	00bb8000 	.word	0x00bb8000

080089bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e071      	b.n	8008ab6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7f5b      	ldrb	r3, [r3, #29]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7f9 f8a2 	bl	8001b2c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d053      	beq.n	8008aa4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	22ca      	movs	r2, #202	@ 0xca
 8008a02:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2253      	movs	r2, #83	@ 0x53
 8008a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fac7 	bl	8008fa0 <RTC_EnterInitMode>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d12a      	bne.n	8008a72 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6899      	ldr	r1, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b26      	ldr	r3, [pc, #152]	@ (8008ac0 <HAL_RTC_Init+0x104>)
 8008a28:	400b      	ands	r3, r1
 8008a2a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6899      	ldr	r1, [r3, #8]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68d2      	ldr	r2, [r2, #12]
 8008a52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6919      	ldr	r1, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	041a      	lsls	r2, r3, #16
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fad0 	bl	800900e <RTC_ExitInitMode>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d110      	bne.n	8008a9a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0208 	bic.w	r2, r2, #8
 8008a86:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	22ff      	movs	r2, #255	@ 0xff
 8008aa0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aa2:	e001      	b.n	8008aa8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	ff8fffbf 	.word	0xff8fffbf

08008ac4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	7f1b      	ldrb	r3, [r3, #28]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_RTC_SetTime+0x1c>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e085      	b.n	8008bec <HAL_RTC_SetTime+0x128>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d126      	bne.n	8008b40 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2200      	movs	r2, #0
 8008b04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 faa4 	bl	8009058 <RTC_ByteToBcd2>
 8008b10:	4603      	mov	r3, r0
 8008b12:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fa9d 	bl	8009058 <RTC_ByteToBcd2>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b22:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	789b      	ldrb	r3, [r3, #2]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fa95 	bl	8009058 <RTC_ByteToBcd2>
 8008b2e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	78db      	ldrb	r3, [r3, #3]
 8008b38:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e018      	b.n	8008b72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2200      	movs	r2, #0
 8008b52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b60:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	78db      	ldrb	r3, [r3, #3]
 8008b6c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	22ca      	movs	r2, #202	@ 0xca
 8008b78:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2253      	movs	r2, #83	@ 0x53
 8008b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fa0c 	bl	8008fa0 <RTC_EnterInitMode>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b8c:	7cfb      	ldrb	r3, [r7, #19]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d11e      	bne.n	8008bd0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	6979      	ldr	r1, [r7, #20]
 8008b98:	4b16      	ldr	r3, [pc, #88]	@ (8008bf4 <HAL_RTC_SetTime+0x130>)
 8008b9a:	400b      	ands	r3, r1
 8008b9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008bac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6899      	ldr	r1, [r3, #8]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fa21 	bl	800900e <RTC_ExitInitMode>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008bd0:	7cfb      	ldrb	r3, [r7, #19]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	22ff      	movs	r2, #255	@ 0xff
 8008be2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	771a      	strb	r2, [r3, #28]

  return status;
 8008bea:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}
 8008bf4:	007f7f7f 	.word	0x007f7f7f

08008bf8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	7f1b      	ldrb	r3, [r3, #28]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_RTC_SetDate+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e06f      	b.n	8008cf4 <HAL_RTC_SetDate+0xfc>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10e      	bne.n	8008c44 <HAL_RTC_SetDate+0x4c>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	f003 0310 	and.w	r3, r3, #16
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d008      	beq.n	8008c44 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	330a      	adds	r3, #10
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d11c      	bne.n	8008c84 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	78db      	ldrb	r3, [r3, #3]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fa02 	bl	8009058 <RTC_ByteToBcd2>
 8008c54:	4603      	mov	r3, r0
 8008c56:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f9fb 	bl	8009058 <RTC_ByteToBcd2>
 8008c62:	4603      	mov	r3, r0
 8008c64:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c66:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	789b      	ldrb	r3, [r3, #2]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f9f3 	bl	8009058 <RTC_ByteToBcd2>
 8008c72:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c74:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	e00e      	b.n	8008ca2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	78db      	ldrb	r3, [r3, #3]
 8008c88:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c90:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c96:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	22ca      	movs	r2, #202	@ 0xca
 8008ca8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2253      	movs	r2, #83	@ 0x53
 8008cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f974 	bl	8008fa0 <RTC_EnterInitMode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008cbc:	7cfb      	ldrb	r3, [r7, #19]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	6979      	ldr	r1, [r7, #20]
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cfc <HAL_RTC_SetDate+0x104>)
 8008cca:	400b      	ands	r3, r1
 8008ccc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f99d 	bl	800900e <RTC_ExitInitMode>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008cd8:	7cfb      	ldrb	r3, [r7, #19]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	22ff      	movs	r2, #255	@ 0xff
 8008cea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	771a      	strb	r2, [r3, #28]

  return status;
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}
 8008cfc:	00ffff3f 	.word	0x00ffff3f

08008d00 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b089      	sub	sp, #36	@ 0x24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	7f1b      	ldrb	r3, [r3, #28]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_RTC_SetAlarm+0x24>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e113      	b.n	8008f4c <HAL_RTC_SetAlarm+0x24c>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d137      	bne.n	8008da6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f982 	bl	8009058 <RTC_ByteToBcd2>
 8008d54:	4603      	mov	r3, r0
 8008d56:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f97b 	bl	8009058 <RTC_ByteToBcd2>
 8008d62:	4603      	mov	r3, r0
 8008d64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d66:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	789b      	ldrb	r3, [r3, #2]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 f973 	bl	8009058 <RTC_ByteToBcd2>
 8008d72:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008d74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	78db      	ldrb	r3, [r3, #3]
 8008d7c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d7e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f965 	bl	8009058 <RTC_ByteToBcd2>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d92:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d9a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	e023      	b.n	8008dee <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008dc6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008dcc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	78db      	ldrb	r3, [r3, #3]
 8008dd2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008dd4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ddc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008dde:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008de4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008dea:	4313      	orrs	r3, r2
 8008dec:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	22ca      	movs	r2, #202	@ 0xca
 8008e00:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2253      	movs	r2, #83	@ 0x53
 8008e08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e12:	d148      	bne.n	8008ea6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e22:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e32:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008e44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e46:	f7f9 ff83 	bl	8002d50 <HAL_GetTick>
 8008e4a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e4c:	e013      	b.n	8008e76 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e4e:	f7f9 ff7f 	bl	8002d50 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e5c:	d90b      	bls.n	8008e76 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	22ff      	movs	r2, #255	@ 0xff
 8008e64:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e06a      	b.n	8008f4c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0e4      	beq.n	8008e4e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea2:	609a      	str	r2, [r3, #8]
 8008ea4:	e047      	b.n	8008f36 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008eb4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ec4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008ed6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ed8:	f7f9 ff3a 	bl	8002d50 <HAL_GetTick>
 8008edc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ede:	e013      	b.n	8008f08 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ee0:	f7f9 ff36 	bl	8002d50 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008eee:	d90b      	bls.n	8008f08 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	22ff      	movs	r2, #255	@ 0xff
 8008ef6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2203      	movs	r2, #3
 8008efc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e021      	b.n	8008f4c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0e4      	beq.n	8008ee0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f34:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	22ff      	movs	r2, #255	@ 0xff
 8008f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3724      	adds	r7, #36	@ 0x24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd90      	pop	{r4, r7, pc}

08008f54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0d      	ldr	r2, [pc, #52]	@ (8008f9c <HAL_RTC_WaitForSynchro+0x48>)
 8008f66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f68:	f7f9 fef2 	bl	8002d50 <HAL_GetTick>
 8008f6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f6e:	e009      	b.n	8008f84 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f70:	f7f9 feee 	bl	8002d50 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f7e:	d901      	bls.n	8008f84 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e007      	b.n	8008f94 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0ee      	beq.n	8008f70 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	0001ff5f 	.word	0x0001ff5f

08008fa0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d122      	bne.n	8009004 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fce:	f7f9 febf 	bl	8002d50 <HAL_GetTick>
 8008fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008fd4:	e00c      	b.n	8008ff0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fd6:	f7f9 febb 	bl	8002d50 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fe4:	d904      	bls.n	8008ff0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <RTC_EnterInitMode+0x64>
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d1e8      	bne.n	8008fd6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009028:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ff8b 	bl	8008f54 <HAL_RTC_WaitForSynchro>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2204      	movs	r2, #4
 8009048:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009066:	e005      	b.n	8009074 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	3b0a      	subs	r3, #10
 8009072:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b09      	cmp	r3, #9
 8009078:	d8f6      	bhi.n	8009068 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	b2da      	uxtb	r2, r3
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	4313      	orrs	r3, r2
 8009086:	b2db      	uxtb	r3, r3
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	7f1b      	ldrb	r3, [r3, #28]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e050      	b.n	8009152 <HAL_RTCEx_SetTimeStamp+0xbe>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2202      	movs	r2, #2
 80090ba:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0206 	bic.w	r2, r2, #6
 80090ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	430a      	orrs	r2, r1
 80090da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009160 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	22ca      	movs	r2, #202	@ 0xca
 80090f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2253      	movs	r2, #83	@ 0x53
 80090fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	b2da      	uxtb	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009118:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800912a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800913a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	22ff      	movs	r2, #255	@ 0xff
 8009142:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	fffff7f7 	.word	0xfffff7f7

08009164 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e156      	b.n	8009430 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7f8 fd9e 	bl	8001cd8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f95b 	bl	8009460 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d00c      	beq.n	80091cc <HAL_SAI_Init+0x68>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d80d      	bhi.n	80091d2 <HAL_SAI_Init+0x6e>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <HAL_SAI_Init+0x5c>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d003      	beq.n	80091c6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80091be:	e008      	b.n	80091d2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]
      break;
 80091c4:	e006      	b.n	80091d4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80091c6:	2310      	movs	r3, #16
 80091c8:	61fb      	str	r3, [r7, #28]
      break;
 80091ca:	e003      	b.n	80091d4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80091cc:	2320      	movs	r3, #32
 80091ce:	61fb      	str	r3, [r7, #28]
      break;
 80091d0:	e000      	b.n	80091d4 <HAL_SAI_Init+0x70>
      break;
 80091d2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d81e      	bhi.n	800921a <HAL_SAI_Init+0xb6>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <HAL_SAI_Init+0x80>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	080091fb 	.word	0x080091fb
 80091ec:	08009203 	.word	0x08009203
 80091f0:	0800920b 	.word	0x0800920b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
    }
    break;
 80091f8:	e010      	b.n	800921c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80091fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091fe:	617b      	str	r3, [r7, #20]
    }
    break;
 8009200:	e00c      	b.n	800921c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009206:	617b      	str	r3, [r7, #20]
    }
    break;
 8009208:	e008      	b.n	800921c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800920a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800920e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009218:	e000      	b.n	800921c <HAL_SAI_Init+0xb8>
    default:
      break;
 800921a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a85      	ldr	r2, [pc, #532]	@ (8009438 <HAL_SAI_Init+0x2d4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d004      	beq.n	8009230 <HAL_SAI_Init+0xcc>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a84      	ldr	r2, [pc, #528]	@ (800943c <HAL_SAI_Init+0x2d8>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d103      	bne.n	8009238 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009230:	4a83      	ldr	r2, [pc, #524]	@ (8009440 <HAL_SAI_Init+0x2dc>)
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	e002      	b.n	800923e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009238:	4a82      	ldr	r2, [pc, #520]	@ (8009444 <HAL_SAI_Init+0x2e0>)
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d04c      	beq.n	80092e0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a7a      	ldr	r2, [pc, #488]	@ (8009438 <HAL_SAI_Init+0x2d4>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_SAI_Init+0xfa>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a78      	ldr	r2, [pc, #480]	@ (800943c <HAL_SAI_Init+0x2d8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d104      	bne.n	8009268 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800925e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009262:	f7ff fa6b 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 8009266:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a76      	ldr	r2, [pc, #472]	@ (8009448 <HAL_SAI_Init+0x2e4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d004      	beq.n	800927c <HAL_SAI_Init+0x118>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a75      	ldr	r2, [pc, #468]	@ (800944c <HAL_SAI_Init+0x2e8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d104      	bne.n	8009286 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800927c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009280:	f7ff fa5c 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 8009284:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	461a      	mov	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	025b      	lsls	r3, r3, #9
 8009298:	fbb2 f3f3 	udiv	r3, r2, r3
 800929c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a6b      	ldr	r2, [pc, #428]	@ (8009450 <HAL_SAI_Init+0x2ec>)
 80092a2:	fba2 2303 	umull	r2, r3, r2, r3
 80092a6:	08da      	lsrs	r2, r3, #3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	4b68      	ldr	r3, [pc, #416]	@ (8009450 <HAL_SAI_Init+0x2ec>)
 80092b0:	fba3 2301 	umull	r2, r3, r3, r1
 80092b4:	08da      	lsrs	r2, r3, #3
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	1aca      	subs	r2, r1, r3
 80092c0:	2a08      	cmp	r2, #8
 80092c2:	d904      	bls.n	80092ce <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d104      	bne.n	80092e0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	085a      	lsrs	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <HAL_SAI_Init+0x18c>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d109      	bne.n	8009304 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_SAI_Init+0x198>
 80092f8:	2300      	movs	r3, #0
 80092fa:	e001      	b.n	8009300 <HAL_SAI_Init+0x19c>
 80092fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	e008      	b.n	8009316 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d102      	bne.n	8009312 <HAL_SAI_Init+0x1ae>
 800930c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009310:	e000      	b.n	8009314 <HAL_SAI_Init+0x1b0>
 8009312:	2300      	movs	r3, #0
 8009314:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6819      	ldr	r1, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4b4c      	ldr	r3, [pc, #304]	@ (8009454 <HAL_SAI_Init+0x2f0>)
 8009322:	400b      	ands	r3, r1
 8009324:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009334:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800933a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	431a      	orrs	r2, r3
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800934e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800935a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	051b      	lsls	r3, r3, #20
 8009362:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6859      	ldr	r1, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b38      	ldr	r3, [pc, #224]	@ (8009458 <HAL_SAI_Init+0x2f4>)
 8009378:	400b      	ands	r3, r1
 800937a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699a      	ldr	r2, [r3, #24]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	431a      	orrs	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6899      	ldr	r1, [r3, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	4b2d      	ldr	r3, [pc, #180]	@ (800945c <HAL_SAI_Init+0x2f8>)
 80093a6:	400b      	ands	r3, r1
 80093a8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6899      	ldr	r1, [r3, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80093ba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80093c0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80093c6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093cc:	3b01      	subs	r3, #1
 80093ce:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80093d0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68d9      	ldr	r1, [r3, #12]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80093e8:	400b      	ands	r3, r1
 80093ea:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68d9      	ldr	r1, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fa:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009400:	041b      	lsls	r3, r3, #16
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009408:	3b01      	subs	r3, #1
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	40015804 	.word	0x40015804
 800943c:	40015824 	.word	0x40015824
 8009440:	40015800 	.word	0x40015800
 8009444:	40015c00 	.word	0x40015c00
 8009448:	40015c04 	.word	0x40015c04
 800944c:	40015c24 	.word	0x40015c24
 8009450:	cccccccd 	.word	0xcccccccd
 8009454:	ff05c010 	.word	0xff05c010
 8009458:	ffff1ff0 	.word	0xffff1ff0
 800945c:	fff88000 	.word	0xfff88000

08009460 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009468:	4b17      	ldr	r3, [pc, #92]	@ (80094c8 <SAI_Disable+0x68>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a17      	ldr	r2, [pc, #92]	@ (80094cc <SAI_Disable+0x6c>)
 800946e:	fba2 2303 	umull	r2, r3, r2, r3
 8009472:	0b1b      	lsrs	r3, r3, #12
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800948a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	1e5a      	subs	r2, r3, #1
 8009490:	60fa      	str	r2, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	72fb      	strb	r3, [r7, #11]
      break;
 80094aa:	e006      	b.n	80094ba <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e8      	bne.n	800948c <SAI_Disable+0x2c>

  return status;
 80094ba:	7afb      	ldrb	r3, [r7, #11]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	20000000 	.word	0x20000000
 80094cc:	95cbec1b 	.word	0x95cbec1b

080094d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e022      	b.n	8009528 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7f8 fc7b 	bl	8001df0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2203      	movs	r2, #3
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f814 	bl	8009530 <HAL_SD_InitCard>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e00a      	b.n	8009528 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b08e      	sub	sp, #56	@ 0x38
 8009534:	af04      	add	r7, sp, #16
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009538:	2300      	movs	r3, #0
 800953a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009540:	2300      	movs	r3, #0
 8009542:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009544:	2300      	movs	r3, #0
 8009546:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800954c:	2376      	movs	r3, #118	@ 0x76
 800954e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681d      	ldr	r5, [r3, #0]
 8009554:	466c      	mov	r4, sp
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800955e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009568:	4628      	mov	r0, r5
 800956a:	f003 fa59 	bl	800ca20 <SDMMC_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e059      	b.n	8009634 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800958e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4618      	mov	r0, r3
 8009596:	f003 fa7c 	bl	800ca92 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095a8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80095aa:	2002      	movs	r0, #2
 80095ac:	f7f9 fbdc 	bl	8002d68 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fe0f 	bl	800a1d4 <SD_PowerON>
 80095b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00b      	beq.n	80095d6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e02e      	b.n	8009634 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fd2e 	bl	800a038 <SD_InitCard>
 80095dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e01b      	b.n	8009634 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009604:	4618      	mov	r0, r3
 8009606:	f003 fad7 	bl	800cbb8 <SDMMC_CmdBlockLength>
 800960a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00f      	beq.n	8009632 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a09      	ldr	r2, [pc, #36]	@ (800963c <HAL_SD_InitCard+0x10c>)
 8009618:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3728      	adds	r7, #40	@ 0x28
 8009638:	46bd      	mov	sp, r7
 800963a:	bdb0      	pop	{r4, r5, r7, pc}
 800963c:	004005ff 	.word	0x004005ff

08009640 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08c      	sub	sp, #48	@ 0x30
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d107      	bne.n	8009668 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0c3      	b.n	80097f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b01      	cmp	r3, #1
 8009672:	f040 80bc 	bne.w	80097ee <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800967c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009686:	429a      	cmp	r2, r3
 8009688:	d907      	bls.n	800969a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0aa      	b.n	80097f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2203      	movs	r2, #3
 800969e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2200      	movs	r2, #0
 80096a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80096b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096be:	4a4e      	ldr	r2, [pc, #312]	@ (80097f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80096c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	4a4d      	ldr	r2, [pc, #308]	@ (80097fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80096c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ce:	2200      	movs	r2, #0
 80096d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3380      	adds	r3, #128	@ 0x80
 8009700:	4619      	mov	r1, r3
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	025b      	lsls	r3, r3, #9
 8009708:	089b      	lsrs	r3, r3, #2
 800970a:	f7fa f833 	bl	8003774 <HAL_DMA_Start_IT>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d017      	beq.n	8009744 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009722:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a35      	ldr	r2, [pc, #212]	@ (8009800 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800972a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e055      	b.n	80097f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0208 	orr.w	r2, r2, #8
 8009752:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009758:	2b01      	cmp	r3, #1
 800975a:	d002      	beq.n	8009762 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	025b      	lsls	r3, r3, #9
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009766:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	025b      	lsls	r3, r3, #9
 800976c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800976e:	2390      	movs	r3, #144	@ 0x90
 8009770:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009772:	2302      	movs	r3, #2
 8009774:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009776:	2300      	movs	r3, #0
 8009778:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800977a:	2301      	movs	r3, #1
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f107 0210 	add.w	r2, r7, #16
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f003 f9e9 	bl	800cb60 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d90a      	bls.n	80097aa <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2282      	movs	r2, #130	@ 0x82
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097a0:	4618      	mov	r0, r3
 80097a2:	f003 fa4d 	bl	800cc40 <SDMMC_CmdReadMultiBlock>
 80097a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80097a8:	e009      	b.n	80097be <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2281      	movs	r2, #129	@ 0x81
 80097ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097b6:	4618      	mov	r0, r3
 80097b8:	f003 fa20 	bl	800cbfc <SDMMC_CmdReadSingleBlock>
 80097bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80097be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d012      	beq.n	80097ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009800 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80097ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d2:	431a      	orrs	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e002      	b.n	80097f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	e000      	b.n	80097f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80097ee:	2302      	movs	r3, #2
  }
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3730      	adds	r7, #48	@ 0x30
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	08009f23 	.word	0x08009f23
 80097fc:	08009f95 	.word	0x08009f95
 8009800:	004005ff 	.word	0x004005ff

08009804 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08c      	sub	sp, #48	@ 0x30
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d107      	bne.n	800982c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e0c6      	b.n	80099ba <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b01      	cmp	r3, #1
 8009836:	f040 80bf 	bne.w	80099b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	441a      	add	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800984a:	429a      	cmp	r2, r3
 800984c:	d907      	bls.n	800985e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009852:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e0ad      	b.n	80099ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2203      	movs	r2, #3
 8009862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 021a 	orr.w	r2, r2, #26
 800987c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009882:	4a50      	ldr	r2, [pc, #320]	@ (80099c4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	4a4f      	ldr	r2, [pc, #316]	@ (80099c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800988c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009892:	2200      	movs	r2, #0
 8009894:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	2b01      	cmp	r3, #1
 800989c:	d002      	beq.n	80098a4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d90a      	bls.n	80098c0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22a0      	movs	r2, #160	@ 0xa0
 80098ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098b6:	4618      	mov	r0, r3
 80098b8:	f003 fa06 	bl	800ccc8 <SDMMC_CmdWriteMultiBlock>
 80098bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80098be:	e009      	b.n	80098d4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2290      	movs	r2, #144	@ 0x90
 80098c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098cc:	4618      	mov	r0, r3
 80098ce:	f003 f9d9 	bl	800cc84 <SDMMC_CmdWriteSingleBlock>
 80098d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d012      	beq.n	8009900 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a3b      	ldr	r2, [pc, #236]	@ (80099cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	431a      	orrs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e05c      	b.n	80099ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0208 	orr.w	r2, r2, #8
 800990e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009914:	2240      	movs	r2, #64	@ 0x40
 8009916:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3380      	adds	r3, #128	@ 0x80
 8009940:	461a      	mov	r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	025b      	lsls	r3, r3, #9
 8009946:	089b      	lsrs	r3, r3, #2
 8009948:	f7f9 ff14 	bl	8003774 <HAL_DMA_Start_IT>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01a      	beq.n	8009988 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 021a 	bic.w	r2, r2, #26
 8009960:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a19      	ldr	r2, [pc, #100]	@ (80099cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009968:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e018      	b.n	80099ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800998c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	025b      	lsls	r3, r3, #9
 8009992:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009994:	2390      	movs	r3, #144	@ 0x90
 8009996:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800999c:	2300      	movs	r3, #0
 800999e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f107 0210 	add.w	r2, r7, #16
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f003 f8d6 	bl	800cb60 <SDMMC_ConfigData>

      return HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	e000      	b.n	80099ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80099b8:	2302      	movs	r3, #2
  }
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3730      	adds	r7, #48	@ 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	08009ef9 	.word	0x08009ef9
 80099c8:	08009f95 	.word	0x08009f95
 80099cc:	004005ff 	.word	0x004005ff

080099d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099f2:	0f9b      	lsrs	r3, r3, #30
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099fe:	0e9b      	lsrs	r3, r3, #26
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 030f 	and.w	r3, r3, #15
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a10:	0e1b      	lsrs	r3, r3, #24
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a22:	0c1b      	lsrs	r3, r3, #16
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a44:	0d1b      	lsrs	r3, r3, #20
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a62:	0bdb      	lsrs	r3, r3, #15
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a74:	0b9b      	lsrs	r3, r3, #14
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a86:	0b5b      	lsrs	r3, r3, #13
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a98:	0b1b      	lsrs	r3, r3, #12
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d163      	bne.n	8009b7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ab8:	009a      	lsls	r2, r3, #2
 8009aba:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009abe:	4013      	ands	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009ac4:	0f92      	lsrs	r2, r2, #30
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad0:	0edb      	lsrs	r3, r3, #27
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 0307 	and.w	r3, r3, #7
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae2:	0e1b      	lsrs	r3, r3, #24
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af4:	0d5b      	lsrs	r3, r3, #21
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b06:	0c9b      	lsrs	r3, r3, #18
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b18:	0bdb      	lsrs	r3, r3, #15
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	7e1b      	ldrb	r3, [r3, #24]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009b46:	fb03 f202 	mul.w	r2, r3, r2
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	7a1b      	ldrb	r3, [r3, #8]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 030f 	and.w	r3, r3, #15
 8009b58:	2201      	movs	r2, #1
 8009b5a:	409a      	lsls	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009b68:	0a52      	lsrs	r2, r2, #9
 8009b6a:	fb03 f202 	mul.w	r2, r3, r2
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b78:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b7a:	e031      	b.n	8009be0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d11d      	bne.n	8009bc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b88:	041b      	lsls	r3, r3, #16
 8009b8a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	431a      	orrs	r2, r3
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	029a      	lsls	r2, r3, #10
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bb4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009bbe:	e00f      	b.n	8009be0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a58      	ldr	r2, [pc, #352]	@ (8009d28 <HAL_SD_GetCardCSD+0x344>)
 8009bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e09d      	b.n	8009d1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be4:	0b9b      	lsrs	r3, r3, #14
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bf6:	09db      	lsrs	r3, r3, #7
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c18:	0fdb      	lsrs	r3, r3, #31
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c24:	0f5b      	lsrs	r3, r3, #29
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 0303 	and.w	r3, r3, #3
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c36:	0e9b      	lsrs	r3, r3, #26
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c48:	0d9b      	lsrs	r3, r3, #22
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c5a:	0d5b      	lsrs	r3, r3, #21
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8a:	0bdb      	lsrs	r3, r3, #15
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c9e:	0b9b      	lsrs	r3, r3, #14
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb2:	0b5b      	lsrs	r3, r3, #13
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cc6:	0b1b      	lsrs	r3, r3, #12
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cda:	0a9b      	lsrs	r3, r3, #10
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 0303 	and.w	r3, r3, #3
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d02:	085b      	lsrs	r3, r3, #1
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	004005ff 	.word	0x004005ff

08009d2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d84:	b5b0      	push	{r4, r5, r7, lr}
 8009d86:	b08e      	sub	sp, #56	@ 0x38
 8009d88:	af04      	add	r7, sp, #16
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2203      	movs	r2, #3
 8009d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d02e      	beq.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009daa:	d106      	bne.n	8009dba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009db8:	e029      	b.n	8009e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dc0:	d10a      	bne.n	8009dd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fabc 	bl	800a340 <SD_WideBus_Enable>
 8009dc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009dd6:	e01a      	b.n	8009e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 faf9 	bl	800a3d6 <SD_WideBus_Disable>
 8009de4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	639a      	str	r2, [r3, #56]	@ 0x38
 8009df2:	e00c      	b.n	8009e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e00:	e005      	b.n	8009e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e06:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a26      	ldr	r2, [pc, #152]	@ (8009eb4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e2c:	e01f      	b.n	8009e6e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681d      	ldr	r5, [r3, #0]
 8009e54:	466c      	mov	r4, sp
 8009e56:	f107 0314 	add.w	r3, r7, #20
 8009e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e62:	f107 0308 	add.w	r3, r7, #8
 8009e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f002 fdd9 	bl	800ca20 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e76:	4618      	mov	r0, r3
 8009e78:	f002 fe9e 	bl	800cbb8 <SDMMC_CmdBlockLength>
 8009e7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3728      	adds	r7, #40	@ 0x28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	004005ff 	.word	0x004005ff

08009eb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009ec4:	f107 030c 	add.w	r3, r7, #12
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa10 	bl	800a2f0 <SD_SendStatus>
 8009ed0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009eee:	693b      	ldr	r3, [r7, #16]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f14:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f34:	2b82      	cmp	r3, #130	@ 0x82
 8009f36:	d111      	bne.n	8009f5c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f002 fee5 	bl	800cd0c <SDMMC_CmdStopTransfer>
 8009f42:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	431a      	orrs	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fd3a 	bl	80099d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0208 	bic.w	r2, r2, #8
 8009f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f74:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f004 fc93 	bl	800e8b0 <HAL_SD_RxCpltCallback>
#endif
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7f9 fcd8 	bl	8003958 <HAL_DMA_GetError>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d03e      	beq.n	800a02c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fbc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d002      	beq.n	8009fca <SD_DMAError+0x36>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d12d      	bne.n	800a026 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a19      	ldr	r2, [pc, #100]	@ (800a034 <SD_DMAError+0xa0>)
 8009fd0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009fee:	6978      	ldr	r0, [r7, #20]
 8009ff0:	f7ff ff62 	bl	8009eb8 <HAL_SD_GetCardState>
 8009ff4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b06      	cmp	r3, #6
 8009ffa:	d002      	beq.n	800a002 <SD_DMAError+0x6e>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d10a      	bne.n	800a018 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f002 fe80 	bl	800cd0c <SDMMC_CmdStopTransfer>
 800a00c:	4602      	mov	r2, r0
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a012:	431a      	orrs	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a026:	6978      	ldr	r0, [r7, #20]
 800a028:	f7ff fcd2 	bl	80099d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a02c:	bf00      	nop
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	004005ff 	.word	0x004005ff

0800a038 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a038:	b5b0      	push	{r4, r5, r7, lr}
 800a03a:	b094      	sub	sp, #80	@ 0x50
 800a03c:	af04      	add	r7, sp, #16
 800a03e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a040:	2301      	movs	r3, #1
 800a042:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 fd30 	bl	800caae <SDMMC_GetPowerState>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a054:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a058:	e0b8      	b.n	800a1cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d02f      	beq.n	800a0c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4618      	mov	r0, r3
 800a068:	f002 ff5b 	bl	800cf22 <SDMMC_CmdSendCID>
 800a06c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <SD_InitCard+0x40>
    {
      return errorstate;
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	e0a9      	b.n	800a1cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 fd5b 	bl	800cb3a <SDMMC_GetResponse>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2104      	movs	r1, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f002 fd52 	bl	800cb3a <SDMMC_GetResponse>
 800a096:	4602      	mov	r2, r0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2108      	movs	r1, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 fd49 	bl	800cb3a <SDMMC_GetResponse>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	210c      	movs	r1, #12
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fd40 	bl	800cb3a <SDMMC_GetResponse>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d00d      	beq.n	800a0e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f107 020e 	add.w	r2, r7, #14
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f002 ff61 	bl	800cf9c <SDMMC_CmdSetRelAdd>
 800a0da:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <SD_InitCard+0xae>
    {
      return errorstate;
 800a0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e4:	e072      	b.n	800a1cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d036      	beq.n	800a15c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f002 ff2b 	bl	800cf5e <SDMMC_CmdSendCSD>
 800a108:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a112:	e05b      	b.n	800a1cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2100      	movs	r1, #0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f002 fd0d 	bl	800cb3a <SDMMC_GetResponse>
 800a120:	4602      	mov	r2, r0
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2104      	movs	r1, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f002 fd04 	bl	800cb3a <SDMMC_GetResponse>
 800a132:	4602      	mov	r2, r0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2108      	movs	r1, #8
 800a13e:	4618      	mov	r0, r3
 800a140:	f002 fcfb 	bl	800cb3a <SDMMC_GetResponse>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	210c      	movs	r1, #12
 800a150:	4618      	mov	r0, r3
 800a152:	f002 fcf2 	bl	800cb3a <SDMMC_GetResponse>
 800a156:	4602      	mov	r2, r0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2104      	movs	r1, #4
 800a162:	4618      	mov	r0, r3
 800a164:	f002 fce9 	bl	800cb3a <SDMMC_GetResponse>
 800a168:	4603      	mov	r3, r0
 800a16a:	0d1a      	lsrs	r2, r3, #20
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a170:	f107 0310 	add.w	r3, r7, #16
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff fc34 	bl	80099e4 <HAL_SD_GetCardCSD>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a182:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a186:	e021      	b.n	800a1cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6819      	ldr	r1, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a190:	041b      	lsls	r3, r3, #16
 800a192:	2200      	movs	r2, #0
 800a194:	461c      	mov	r4, r3
 800a196:	4615      	mov	r5, r2
 800a198:	4622      	mov	r2, r4
 800a19a:	462b      	mov	r3, r5
 800a19c:	4608      	mov	r0, r1
 800a19e:	f002 fdd7 	bl	800cd50 <SDMMC_CmdSelDesel>
 800a1a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <SD_InitCard+0x176>
  {
    return errorstate;
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ac:	e00e      	b.n	800a1cc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	466c      	mov	r4, sp
 800a1b6:	f103 0210 	add.w	r2, r3, #16
 800a1ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f002 fc2b 	bl	800ca20 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3740      	adds	r7, #64	@ 0x40
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bdb0      	pop	{r4, r5, r7, pc}

0800a1d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f002 fdd2 	bl	800cd96 <SDMMC_CmdGoIdleState>
 800a1f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <SD_PowerON+0x2a>
  {
    return errorstate;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	e072      	b.n	800a2e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f002 fde5 	bl	800cdd2 <SDMMC_CmdOperCond>
 800a208:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00d      	beq.n	800a22c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 fdbb 	bl	800cd96 <SDMMC_CmdGoIdleState>
 800a220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	e05b      	b.n	800a2e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a236:	2b01      	cmp	r3, #1
 800a238:	d137      	bne.n	800a2aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f002 fde5 	bl	800ce10 <SDMMC_CmdAppCommand>
 800a246:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d02d      	beq.n	800a2aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a24e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a252:	e047      	b.n	800a2e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f002 fdd8 	bl	800ce10 <SDMMC_CmdAppCommand>
 800a260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <SD_PowerON+0x98>
    {
      return errorstate;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	e03b      	b.n	800a2e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	491e      	ldr	r1, [pc, #120]	@ (800a2ec <SD_PowerON+0x118>)
 800a272:	4618      	mov	r0, r3
 800a274:	f002 fdee 	bl	800ce54 <SDMMC_CmdAppOperCommand>
 800a278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a280:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a284:	e02e      	b.n	800a2e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2100      	movs	r1, #0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f002 fc54 	bl	800cb3a <SDMMC_GetResponse>
 800a292:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	0fdb      	lsrs	r3, r3, #31
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <SD_PowerON+0xcc>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <SD_PowerON+0xce>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	613b      	str	r3, [r7, #16]

    count++;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d802      	bhi.n	800a2ba <SD_PowerON+0xe6>
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0cc      	beq.n	800a254 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d902      	bls.n	800a2ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a2c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2c8:	e00c      	b.n	800a2e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	645a      	str	r2, [r3, #68]	@ 0x44
 800a2da:	e002      	b.n	800a2e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	c1100000 	.word	0xc1100000

0800a2f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a300:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a304:	e018      	b.n	800a338 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	4619      	mov	r1, r3
 800a312:	4610      	mov	r0, r2
 800a314:	f002 fe63 	bl	800cfde <SDMMC_CmdSendStatus>
 800a318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	e009      	b.n	800a338 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2100      	movs	r1, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 fc05 	bl	800cb3a <SDMMC_GetResponse>
 800a330:	4602      	mov	r2, r0
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2100      	movs	r1, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f002 fbef 	bl	800cb3a <SDMMC_GetResponse>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a366:	d102      	bne.n	800a36e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a36c:	e02f      	b.n	800a3ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a36e:	f107 030c 	add.w	r3, r7, #12
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f879 	bl	800a46c <SD_FindSCR>
 800a37a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	e023      	b.n	800a3ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01c      	beq.n	800a3ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a398:	041b      	lsls	r3, r3, #16
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f002 fd37 	bl	800ce10 <SDMMC_CmdAppCommand>
 800a3a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	e00f      	b.n	800a3ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2102      	movs	r1, #2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f002 fd71 	bl	800ce9c <SDMMC_CmdBusWidth>
 800a3ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	e003      	b.n	800a3ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e001      	b.n	800a3ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 fba4 	bl	800cb3a <SDMMC_GetResponse>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3fc:	d102      	bne.n	800a404 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a3fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a402:	e02f      	b.n	800a464 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f82e 	bl	800a46c <SD_FindSCR>
 800a410:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	e023      	b.n	800a464 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01c      	beq.n	800a460 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a42e:	041b      	lsls	r3, r3, #16
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f002 fcec 	bl	800ce10 <SDMMC_CmdAppCommand>
 800a438:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	e00f      	b.n	800a464 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2100      	movs	r1, #0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fd26 	bl	800ce9c <SDMMC_CmdBusWidth>
 800a450:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	e003      	b.n	800a464 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e001      	b.n	800a464 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a460:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b08f      	sub	sp, #60	@ 0x3c
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a476:	f7f8 fc6b 	bl	8002d50 <HAL_GetTick>
 800a47a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a480:	2300      	movs	r3, #0
 800a482:	60bb      	str	r3, [r7, #8]
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2108      	movs	r1, #8
 800a492:	4618      	mov	r0, r3
 800a494:	f002 fb90 	bl	800cbb8 <SDMMC_CmdBlockLength>
 800a498:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	e0b2      	b.n	800a60a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ac:	041b      	lsls	r3, r3, #16
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f002 fcad 	bl	800ce10 <SDMMC_CmdAppCommand>
 800a4b6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	e0a3      	b.n	800a60a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a4cc:	2330      	movs	r3, #48	@ 0x30
 800a4ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f107 0210 	add.w	r2, r7, #16
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 fb3a 	bl	800cb60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 fcf5 	bl	800cee0 <SDMMC_CmdSendSCR>
 800a4f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02a      	beq.n	800a554 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	e083      	b.n	800a60a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00f      	beq.n	800a530 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6819      	ldr	r1, [r3, #0]
 800a514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	f107 0208 	add.w	r2, r7, #8
 800a51c:	18d4      	adds	r4, r2, r3
 800a51e:	4608      	mov	r0, r1
 800a520:	f002 faaa 	bl	800ca78 <SDMMC_ReadFIFO>
 800a524:	4603      	mov	r3, r0
 800a526:	6023      	str	r3, [r4, #0]
      index++;
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	3301      	adds	r3, #1
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52e:	e006      	b.n	800a53e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d012      	beq.n	800a564 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a53e:	f7f8 fc07 	bl	8002d50 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a54c:	d102      	bne.n	800a554 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a54e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a552:	e05a      	b.n	800a60a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a55a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0cf      	beq.n	800a502 <SD_FindSCR+0x96>
 800a562:	e000      	b.n	800a566 <SD_FindSCR+0xfa>
      break;
 800a564:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a56c:	f003 0308 	and.w	r3, r3, #8
 800a570:	2b00      	cmp	r3, #0
 800a572:	d005      	beq.n	800a580 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2208      	movs	r2, #8
 800a57a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a57c:	2308      	movs	r3, #8
 800a57e:	e044      	b.n	800a60a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2202      	movs	r2, #2
 800a594:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a596:	2302      	movs	r3, #2
 800a598:	e037      	b.n	800a60a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	e02a      	b.n	800a60a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a5bc:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	061a      	lsls	r2, r3, #24
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a5ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	0e1b      	lsrs	r3, r3, #24
 800a5da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	601a      	str	r2, [r3, #0]
    scr++;
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	061a      	lsls	r2, r3, #24
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a5f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a5fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	0e1b      	lsrs	r3, r3, #24
 800a602:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	373c      	adds	r7, #60	@ 0x3c
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}

0800a612 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e025      	b.n	800a672 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7f6 fb44 	bl	8000cc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3304      	adds	r3, #4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f002 f91e 	bl	800c894 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	461a      	mov	r2, r3
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	f002 f972 	bl	800c94c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e04c      	b.n	800a728 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d106      	bne.n	800a6a8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7f7 fc36 	bl	8001f14 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0203 	bic.w	r2, r2, #3
 800a6be:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4b19      	ldr	r3, [pc, #100]	@ (800a730 <HAL_SPDIFRX_Init+0xb4>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a6d8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a6de:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a6e4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a6ea:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a6f0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a6f6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a6fc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a702:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a708:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	fff88407 	.word	0xfff88407

0800a734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e049      	b.n	800a7da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7f8 f822 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f000 fc12 	bl	800af9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d001      	beq.n	800a7fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e054      	b.n	800a8a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0201 	orr.w	r2, r2, #1
 800a812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a26      	ldr	r2, [pc, #152]	@ (800a8b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d022      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a826:	d01d      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a22      	ldr	r2, [pc, #136]	@ (800a8b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d018      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a21      	ldr	r2, [pc, #132]	@ (800a8bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d013      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00e      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d009      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <HAL_TIM_Base_Start_IT+0x80>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8cc <HAL_TIM_Base_Start_IT+0xe8>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d115      	bne.n	800a890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689a      	ldr	r2, [r3, #8]
 800a86a:	4b19      	ldr	r3, [pc, #100]	@ (800a8d0 <HAL_TIM_Base_Start_IT+0xec>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b06      	cmp	r3, #6
 800a874:	d015      	beq.n	800a8a2 <HAL_TIM_Base_Start_IT+0xbe>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a87c:	d011      	beq.n	800a8a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0201 	orr.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a88e:	e008      	b.n	800a8a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f042 0201 	orr.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	e000      	b.n	800a8a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40000800 	.word	0x40000800
 800a8c0:	40000c00 	.word	0x40000c00
 800a8c4:	40010400 	.word	0x40010400
 800a8c8:	40014000 	.word	0x40014000
 800a8cc:	40001800 	.word	0x40001800
 800a8d0:	00010007 	.word	0x00010007

0800a8d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e049      	b.n	800a97a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d106      	bne.n	800a900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7f7 ffc0 	bl	8002880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3304      	adds	r3, #4
 800a910:	4619      	mov	r1, r3
 800a912:	4610      	mov	r0, r2
 800a914:	f000 fb42 	bl	800af9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d020      	beq.n	800a9e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d01b      	beq.n	800a9e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f06f 0202 	mvn.w	r2, #2
 800a9b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fac7 	bl	800af60 <HAL_TIM_IC_CaptureCallback>
 800a9d2:	e005      	b.n	800a9e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fab9 	bl	800af4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 faca 	bl	800af74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d020      	beq.n	800aa32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01b      	beq.n	800aa32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f06f 0204 	mvn.w	r2, #4
 800aa02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 faa1 	bl	800af60 <HAL_TIM_IC_CaptureCallback>
 800aa1e:	e005      	b.n	800aa2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fa93 	bl	800af4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 faa4 	bl	800af74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d020      	beq.n	800aa7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01b      	beq.n	800aa7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f06f 0208 	mvn.w	r2, #8
 800aa4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2204      	movs	r2, #4
 800aa54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa7b 	bl	800af60 <HAL_TIM_IC_CaptureCallback>
 800aa6a:	e005      	b.n	800aa78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fa6d 	bl	800af4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa7e 	bl	800af74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d020      	beq.n	800aaca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f003 0310 	and.w	r3, r3, #16
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d01b      	beq.n	800aaca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f06f 0210 	mvn.w	r2, #16
 800aa9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fa55 	bl	800af60 <HAL_TIM_IC_CaptureCallback>
 800aab6:	e005      	b.n	800aac4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa47 	bl	800af4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa58 	bl	800af74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00c      	beq.n	800aaee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d007      	beq.n	800aaee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f06f 0201 	mvn.w	r2, #1
 800aae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7f6 fea7 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00c      	beq.n	800ab1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fefa 	bl	800b910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00c      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fef2 	bl	800b924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00c      	beq.n	800ab64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d007      	beq.n	800ab64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa12 	bl	800af88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00c      	beq.n	800ab88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f003 0320 	and.w	r3, r3, #32
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f06f 0220 	mvn.w	r2, #32
 800ab80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 feba 	bl	800b8fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d101      	bne.n	800abae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abaa:	2302      	movs	r3, #2
 800abac:	e0ff      	b.n	800adae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b14      	cmp	r3, #20
 800abba:	f200 80f0 	bhi.w	800ad9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abbe:	a201      	add	r2, pc, #4	@ (adr r2, 800abc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800ac19 	.word	0x0800ac19
 800abc8:	0800ad9f 	.word	0x0800ad9f
 800abcc:	0800ad9f 	.word	0x0800ad9f
 800abd0:	0800ad9f 	.word	0x0800ad9f
 800abd4:	0800ac59 	.word	0x0800ac59
 800abd8:	0800ad9f 	.word	0x0800ad9f
 800abdc:	0800ad9f 	.word	0x0800ad9f
 800abe0:	0800ad9f 	.word	0x0800ad9f
 800abe4:	0800ac9b 	.word	0x0800ac9b
 800abe8:	0800ad9f 	.word	0x0800ad9f
 800abec:	0800ad9f 	.word	0x0800ad9f
 800abf0:	0800ad9f 	.word	0x0800ad9f
 800abf4:	0800acdb 	.word	0x0800acdb
 800abf8:	0800ad9f 	.word	0x0800ad9f
 800abfc:	0800ad9f 	.word	0x0800ad9f
 800ac00:	0800ad9f 	.word	0x0800ad9f
 800ac04:	0800ad1d 	.word	0x0800ad1d
 800ac08:	0800ad9f 	.word	0x0800ad9f
 800ac0c:	0800ad9f 	.word	0x0800ad9f
 800ac10:	0800ad9f 	.word	0x0800ad9f
 800ac14:	0800ad5d 	.word	0x0800ad5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fa68 	bl	800b0f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0208 	orr.w	r2, r2, #8
 800ac32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0204 	bic.w	r2, r2, #4
 800ac42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6999      	ldr	r1, [r3, #24]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	619a      	str	r2, [r3, #24]
      break;
 800ac56:	e0a5      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68b9      	ldr	r1, [r7, #8]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 faba 	bl	800b1d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699a      	ldr	r2, [r3, #24]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6999      	ldr	r1, [r3, #24]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	021a      	lsls	r2, r3, #8
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	619a      	str	r2, [r3, #24]
      break;
 800ac98:	e084      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fb11 	bl	800b2c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f042 0208 	orr.w	r2, r2, #8
 800acb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69da      	ldr	r2, [r3, #28]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0204 	bic.w	r2, r2, #4
 800acc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69d9      	ldr	r1, [r3, #28]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	61da      	str	r2, [r3, #28]
      break;
 800acd8:	e064      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fb67 	bl	800b3b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	69da      	ldr	r2, [r3, #28]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800acf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69da      	ldr	r2, [r3, #28]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69d9      	ldr	r1, [r3, #28]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	021a      	lsls	r2, r3, #8
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	61da      	str	r2, [r3, #28]
      break;
 800ad1a:	e043      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fb9e 	bl	800b464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0208 	orr.w	r2, r2, #8
 800ad36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0204 	bic.w	r2, r2, #4
 800ad46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	691a      	ldr	r2, [r3, #16]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ad5a:	e023      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68b9      	ldr	r1, [r7, #8]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fbd0 	bl	800b508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	021a      	lsls	r2, r3, #8
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ad9c:	e002      	b.n	800ada4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	75fb      	strb	r3, [r7, #23]
      break;
 800ada2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop

0800adb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d101      	bne.n	800add4 <HAL_TIM_ConfigClockSource+0x1c>
 800add0:	2302      	movs	r3, #2
 800add2:	e0b4      	b.n	800af3e <HAL_TIM_ConfigClockSource+0x186>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2202      	movs	r2, #2
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	4b56      	ldr	r3, [pc, #344]	@ (800af48 <HAL_TIM_ConfigClockSource+0x190>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae0c:	d03e      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0xd4>
 800ae0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae12:	f200 8087 	bhi.w	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae1a:	f000 8086 	beq.w	800af2a <HAL_TIM_ConfigClockSource+0x172>
 800ae1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae22:	d87f      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae24:	2b70      	cmp	r3, #112	@ 0x70
 800ae26:	d01a      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0xa6>
 800ae28:	2b70      	cmp	r3, #112	@ 0x70
 800ae2a:	d87b      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae2c:	2b60      	cmp	r3, #96	@ 0x60
 800ae2e:	d050      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x11a>
 800ae30:	2b60      	cmp	r3, #96	@ 0x60
 800ae32:	d877      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae34:	2b50      	cmp	r3, #80	@ 0x50
 800ae36:	d03c      	beq.n	800aeb2 <HAL_TIM_ConfigClockSource+0xfa>
 800ae38:	2b50      	cmp	r3, #80	@ 0x50
 800ae3a:	d873      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae3c:	2b40      	cmp	r3, #64	@ 0x40
 800ae3e:	d058      	beq.n	800aef2 <HAL_TIM_ConfigClockSource+0x13a>
 800ae40:	2b40      	cmp	r3, #64	@ 0x40
 800ae42:	d86f      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae44:	2b30      	cmp	r3, #48	@ 0x30
 800ae46:	d064      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x15a>
 800ae48:	2b30      	cmp	r3, #48	@ 0x30
 800ae4a:	d86b      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d060      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x15a>
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	d867      	bhi.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05c      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x15a>
 800ae58:	2b10      	cmp	r3, #16
 800ae5a:	d05a      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x15a>
 800ae5c:	e062      	b.n	800af24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae6e:	f000 fc19 	bl	800b6a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	609a      	str	r2, [r3, #8]
      break;
 800ae8a:	e04f      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae9c:	f000 fc02 	bl	800b6a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aeae:	609a      	str	r2, [r3, #8]
      break;
 800aeb0:	e03c      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aebe:	461a      	mov	r2, r3
 800aec0:	f000 fb76 	bl	800b5b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2150      	movs	r1, #80	@ 0x50
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fbcf 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800aed0:	e02c      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aede:	461a      	mov	r2, r3
 800aee0:	f000 fb95 	bl	800b60e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2160      	movs	r1, #96	@ 0x60
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fbbf 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800aef0:	e01c      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aefe:	461a      	mov	r2, r3
 800af00:	f000 fb56 	bl	800b5b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2140      	movs	r1, #64	@ 0x40
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fbaf 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800af10:	e00c      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f000 fba6 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800af22:	e003      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	73fb      	strb	r3, [r7, #15]
      break;
 800af28:	e000      	b.n	800af2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800af2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	fffeff88 	.word	0xfffeff88

0800af4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a46      	ldr	r2, [pc, #280]	@ (800b0c8 <TIM_Base_SetConfig+0x12c>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d013      	beq.n	800afdc <TIM_Base_SetConfig+0x40>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afba:	d00f      	beq.n	800afdc <TIM_Base_SetConfig+0x40>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a43      	ldr	r2, [pc, #268]	@ (800b0cc <TIM_Base_SetConfig+0x130>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00b      	beq.n	800afdc <TIM_Base_SetConfig+0x40>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a42      	ldr	r2, [pc, #264]	@ (800b0d0 <TIM_Base_SetConfig+0x134>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d007      	beq.n	800afdc <TIM_Base_SetConfig+0x40>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a41      	ldr	r2, [pc, #260]	@ (800b0d4 <TIM_Base_SetConfig+0x138>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d003      	beq.n	800afdc <TIM_Base_SetConfig+0x40>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a40      	ldr	r2, [pc, #256]	@ (800b0d8 <TIM_Base_SetConfig+0x13c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d108      	bne.n	800afee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4313      	orrs	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a35      	ldr	r2, [pc, #212]	@ (800b0c8 <TIM_Base_SetConfig+0x12c>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d02b      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affc:	d027      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a32      	ldr	r2, [pc, #200]	@ (800b0cc <TIM_Base_SetConfig+0x130>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d023      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a31      	ldr	r2, [pc, #196]	@ (800b0d0 <TIM_Base_SetConfig+0x134>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d01f      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a30      	ldr	r2, [pc, #192]	@ (800b0d4 <TIM_Base_SetConfig+0x138>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d01b      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a2f      	ldr	r2, [pc, #188]	@ (800b0d8 <TIM_Base_SetConfig+0x13c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d017      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a2e      	ldr	r2, [pc, #184]	@ (800b0dc <TIM_Base_SetConfig+0x140>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d013      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a2d      	ldr	r2, [pc, #180]	@ (800b0e0 <TIM_Base_SetConfig+0x144>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00f      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e4 <TIM_Base_SetConfig+0x148>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00b      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e8 <TIM_Base_SetConfig+0x14c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d007      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a2a      	ldr	r2, [pc, #168]	@ (800b0ec <TIM_Base_SetConfig+0x150>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d003      	beq.n	800b04e <TIM_Base_SetConfig+0xb2>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a29      	ldr	r2, [pc, #164]	@ (800b0f0 <TIM_Base_SetConfig+0x154>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d108      	bne.n	800b060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a10      	ldr	r2, [pc, #64]	@ (800b0c8 <TIM_Base_SetConfig+0x12c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d003      	beq.n	800b094 <TIM_Base_SetConfig+0xf8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a12      	ldr	r2, [pc, #72]	@ (800b0d8 <TIM_Base_SetConfig+0x13c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d103      	bne.n	800b09c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d105      	bne.n	800b0ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f023 0201 	bic.w	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	611a      	str	r2, [r3, #16]
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	40010000 	.word	0x40010000
 800b0cc:	40000400 	.word	0x40000400
 800b0d0:	40000800 	.word	0x40000800
 800b0d4:	40000c00 	.word	0x40000c00
 800b0d8:	40010400 	.word	0x40010400
 800b0dc:	40014000 	.word	0x40014000
 800b0e0:	40014400 	.word	0x40014400
 800b0e4:	40014800 	.word	0x40014800
 800b0e8:	40001800 	.word	0x40001800
 800b0ec:	40001c00 	.word	0x40001c00
 800b0f0:	40002000 	.word	0x40002000

0800b0f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	f023 0201 	bic.w	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4b2b      	ldr	r3, [pc, #172]	@ (800b1cc <TIM_OC1_SetConfig+0xd8>)
 800b120:	4013      	ands	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f023 0302 	bic.w	r3, r3, #2
 800b13c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a21      	ldr	r2, [pc, #132]	@ (800b1d0 <TIM_OC1_SetConfig+0xdc>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d003      	beq.n	800b158 <TIM_OC1_SetConfig+0x64>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a20      	ldr	r2, [pc, #128]	@ (800b1d4 <TIM_OC1_SetConfig+0xe0>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d10c      	bne.n	800b172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f023 0308 	bic.w	r3, r3, #8
 800b15e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f023 0304 	bic.w	r3, r3, #4
 800b170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a16      	ldr	r2, [pc, #88]	@ (800b1d0 <TIM_OC1_SetConfig+0xdc>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d003      	beq.n	800b182 <TIM_OC1_SetConfig+0x8e>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a15      	ldr	r2, [pc, #84]	@ (800b1d4 <TIM_OC1_SetConfig+0xe0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d111      	bne.n	800b1a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	4313      	orrs	r3, r2
 800b19a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	621a      	str	r2, [r3, #32]
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	fffeff8f 	.word	0xfffeff8f
 800b1d0:	40010000 	.word	0x40010000
 800b1d4:	40010400 	.word	0x40010400

0800b1d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	f023 0210 	bic.w	r2, r3, #16
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4b2e      	ldr	r3, [pc, #184]	@ (800b2bc <TIM_OC2_SetConfig+0xe4>)
 800b204:	4013      	ands	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	021b      	lsls	r3, r3, #8
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f023 0320 	bic.w	r3, r3, #32
 800b222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a23      	ldr	r2, [pc, #140]	@ (800b2c0 <TIM_OC2_SetConfig+0xe8>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d003      	beq.n	800b240 <TIM_OC2_SetConfig+0x68>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a22      	ldr	r2, [pc, #136]	@ (800b2c4 <TIM_OC2_SetConfig+0xec>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d10d      	bne.n	800b25c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b25a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a18      	ldr	r2, [pc, #96]	@ (800b2c0 <TIM_OC2_SetConfig+0xe8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d003      	beq.n	800b26c <TIM_OC2_SetConfig+0x94>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a17      	ldr	r2, [pc, #92]	@ (800b2c4 <TIM_OC2_SetConfig+0xec>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d113      	bne.n	800b294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b27a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	4313      	orrs	r3, r2
 800b292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	621a      	str	r2, [r3, #32]
}
 800b2ae:	bf00      	nop
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	feff8fff 	.word	0xfeff8fff
 800b2c0:	40010000 	.word	0x40010000
 800b2c4:	40010400 	.word	0x40010400

0800b2c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b3a8 <TIM_OC3_SetConfig+0xe0>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0303 	bic.w	r3, r3, #3
 800b2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a22      	ldr	r2, [pc, #136]	@ (800b3ac <TIM_OC3_SetConfig+0xe4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC3_SetConfig+0x66>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a21      	ldr	r2, [pc, #132]	@ (800b3b0 <TIM_OC3_SetConfig+0xe8>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d10d      	bne.n	800b34a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a17      	ldr	r2, [pc, #92]	@ (800b3ac <TIM_OC3_SetConfig+0xe4>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d003      	beq.n	800b35a <TIM_OC3_SetConfig+0x92>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a16      	ldr	r2, [pc, #88]	@ (800b3b0 <TIM_OC3_SetConfig+0xe8>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d113      	bne.n	800b382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	621a      	str	r2, [r3, #32]
}
 800b39c:	bf00      	nop
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	fffeff8f 	.word	0xfffeff8f
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40010400 	.word	0x40010400

0800b3b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4b1e      	ldr	r3, [pc, #120]	@ (800b458 <TIM_OC4_SetConfig+0xa4>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	031b      	lsls	r3, r3, #12
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	4313      	orrs	r3, r2
 800b40a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a13      	ldr	r2, [pc, #76]	@ (800b45c <TIM_OC4_SetConfig+0xa8>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_OC4_SetConfig+0x68>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a12      	ldr	r2, [pc, #72]	@ (800b460 <TIM_OC4_SetConfig+0xac>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d109      	bne.n	800b430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	019b      	lsls	r3, r3, #6
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	621a      	str	r2, [r3, #32]
}
 800b44a:	bf00      	nop
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	feff8fff 	.word	0xfeff8fff
 800b45c:	40010000 	.word	0x40010000
 800b460:	40010400 	.word	0x40010400

0800b464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4b1b      	ldr	r3, [pc, #108]	@ (800b4fc <TIM_OC5_SetConfig+0x98>)
 800b490:	4013      	ands	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b4a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	041b      	lsls	r3, r3, #16
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a12      	ldr	r2, [pc, #72]	@ (800b500 <TIM_OC5_SetConfig+0x9c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d003      	beq.n	800b4c2 <TIM_OC5_SetConfig+0x5e>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a11      	ldr	r2, [pc, #68]	@ (800b504 <TIM_OC5_SetConfig+0xa0>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d109      	bne.n	800b4d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	021b      	lsls	r3, r3, #8
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	621a      	str	r2, [r3, #32]
}
 800b4f0:	bf00      	nop
 800b4f2:	371c      	adds	r7, #28
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	fffeff8f 	.word	0xfffeff8f
 800b500:	40010000 	.word	0x40010000
 800b504:	40010400 	.word	0x40010400

0800b508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a4 <TIM_OC6_SetConfig+0x9c>)
 800b534:	4013      	ands	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b54a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	051b      	lsls	r3, r3, #20
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	4313      	orrs	r3, r2
 800b556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a13      	ldr	r2, [pc, #76]	@ (800b5a8 <TIM_OC6_SetConfig+0xa0>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d003      	beq.n	800b568 <TIM_OC6_SetConfig+0x60>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a12      	ldr	r2, [pc, #72]	@ (800b5ac <TIM_OC6_SetConfig+0xa4>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d109      	bne.n	800b57c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b56e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	029b      	lsls	r3, r3, #10
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	4313      	orrs	r3, r2
 800b57a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	621a      	str	r2, [r3, #32]
}
 800b596:	bf00      	nop
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	feff8fff 	.word	0xfeff8fff
 800b5a8:	40010000 	.word	0x40010000
 800b5ac:	40010400 	.word	0x40010400

0800b5b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	f023 0201 	bic.w	r2, r3, #1
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b5da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	011b      	lsls	r3, r3, #4
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f023 030a 	bic.w	r3, r3, #10
 800b5ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	621a      	str	r2, [r3, #32]
}
 800b602:	bf00      	nop
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b60e:	b480      	push	{r7}
 800b610:	b087      	sub	sp, #28
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	f023 0210 	bic.w	r2, r3, #16
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	031b      	lsls	r3, r3, #12
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	4313      	orrs	r3, r2
 800b642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b64a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f043 0307 	orr.w	r3, r3, #7
 800b690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	609a      	str	r2, [r3, #8]
}
 800b698:	bf00      	nop
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	021a      	lsls	r2, r3, #8
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	609a      	str	r2, [r3, #8]
}
 800b6d8:	bf00      	nop
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e06d      	b.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a30      	ldr	r2, [pc, #192]	@ (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a2f      	ldr	r2, [pc, #188]	@ (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d108      	bne.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b736:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4313      	orrs	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a20      	ldr	r2, [pc, #128]	@ (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d022      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b76e:	d01d      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a1d      	ldr	r2, [pc, #116]	@ (800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d018      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a1c      	ldr	r2, [pc, #112]	@ (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d013      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1a      	ldr	r2, [pc, #104]	@ (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d00e      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a15      	ldr	r2, [pc, #84]	@ (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d009      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a16      	ldr	r2, [pc, #88]	@ (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d004      	beq.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a15      	ldr	r2, [pc, #84]	@ (800b7fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d10c      	bne.n	800b7c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	40010000 	.word	0x40010000
 800b7e8:	40010400 	.word	0x40010400
 800b7ec:	40000400 	.word	0x40000400
 800b7f0:	40000800 	.word	0x40000800
 800b7f4:	40000c00 	.word	0x40000c00
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	40001800 	.word	0x40001800

0800b800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b814:	2b01      	cmp	r3, #1
 800b816:	d101      	bne.n	800b81c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b818:	2302      	movs	r3, #2
 800b81a:	e065      	b.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4313      	orrs	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	4313      	orrs	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	041b      	lsls	r3, r3, #16
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a16      	ldr	r2, [pc, #88]	@ (800b8f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d004      	beq.n	800b8aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a14      	ldr	r2, [pc, #80]	@ (800b8f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d115      	bne.n	800b8d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b4:	051b      	lsls	r3, r3, #20
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	40010000 	.word	0x40010000
 800b8f8:	40010400 	.word	0x40010400

0800b8fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e040      	b.n	800b9cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f7 f8de 	bl	8002b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2224      	movs	r2, #36	@ 0x24
 800b964:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f022 0201 	bic.w	r2, r2, #1
 800b974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fd7e 	bl	800c480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fb17 	bl	800bfb8 <UART_SetConfig>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e01b      	b.n	800b9cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b9b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f042 0201 	orr.w	r2, r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fdfd 	bl	800c5c4 <UART_CheckIdleState>
 800b9ca:	4603      	mov	r3, r0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b0ba      	sub	sp, #232	@ 0xe8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b9fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba02:	4013      	ands	r3, r2
 800ba04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d115      	bne.n	800ba3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00f      	beq.n	800ba3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba20:	f003 0320 	and.w	r3, r3, #32
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d009      	beq.n	800ba3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8297 	beq.w	800bf60 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
      }
      return;
 800ba3a:	e291      	b.n	800bf60 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 8117 	beq.w	800bc74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ba46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ba52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba56:	4b85      	ldr	r3, [pc, #532]	@ (800bc6c <HAL_UART_IRQHandler+0x298>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 810a 	beq.w	800bc74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d011      	beq.n	800ba90 <HAL_UART_IRQHandler+0xbc>
 800ba6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00b      	beq.n	800ba90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba86:	f043 0201 	orr.w	r2, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d011      	beq.n	800bac0 <HAL_UART_IRQHandler+0xec>
 800ba9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2202      	movs	r2, #2
 800baae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bab6:	f043 0204 	orr.w	r2, r3, #4
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d011      	beq.n	800baf0 <HAL_UART_IRQHandler+0x11c>
 800bacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00b      	beq.n	800baf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2204      	movs	r2, #4
 800bade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae6:	f043 0202 	orr.w	r2, r3, #2
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800baf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d017      	beq.n	800bb2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb00:	f003 0320 	and.w	r3, r3, #32
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bb08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2208      	movs	r2, #8
 800bb1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb22:	f043 0208 	orr.w	r2, r3, #8
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d012      	beq.n	800bb5e <HAL_UART_IRQHandler+0x18a>
 800bb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00c      	beq.n	800bb5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb54:	f043 0220 	orr.w	r2, r3, #32
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 81fd 	beq.w	800bf64 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00d      	beq.n	800bb92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bb76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d007      	beq.n	800bb92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba6:	2b40      	cmp	r3, #64	@ 0x40
 800bba8:	d005      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d04f      	beq.n	800bc56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fdc8 	bl	800c74c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d141      	bne.n	800bc4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bbfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1d9      	bne.n	800bbca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d013      	beq.n	800bc46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc22:	4a13      	ldr	r2, [pc, #76]	@ (800bc70 <HAL_UART_IRQHandler+0x29c>)
 800bc24:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f7 fe72 	bl	8003914 <HAL_DMA_Abort_IT>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d017      	beq.n	800bc66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc44:	e00f      	b.n	800bc66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f9a0 	bl	800bf8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc4c:	e00b      	b.n	800bc66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f99c 	bl	800bf8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc54:	e007      	b.n	800bc66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f998 	bl	800bf8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bc64:	e17e      	b.n	800bf64 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc66:	bf00      	nop
    return;
 800bc68:	e17c      	b.n	800bf64 <HAL_UART_IRQHandler+0x590>
 800bc6a:	bf00      	nop
 800bc6c:	04000120 	.word	0x04000120
 800bc70:	0800c815 	.word	0x0800c815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	f040 814c 	bne.w	800bf16 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc82:	f003 0310 	and.w	r3, r3, #16
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 8145 	beq.w	800bf16 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc90:	f003 0310 	and.w	r3, r3, #16
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 813e 	beq.w	800bf16 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2210      	movs	r2, #16
 800bca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcac:	2b40      	cmp	r3, #64	@ 0x40
 800bcae:	f040 80b6 	bne.w	800be1e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8150 	beq.w	800bf68 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bcce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	f080 8148 	bcs.w	800bf68 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bce6:	69db      	ldr	r3, [r3, #28]
 800bce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcec:	f000 8086 	beq.w	800bdfc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcfc:	e853 3f00 	ldrex	r3, [r3]
 800bd00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bd04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	461a      	mov	r2, r3
 800bd16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bd1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1da      	bne.n	800bcf0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd4c:	f023 0301 	bic.w	r3, r3, #1
 800bd50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd6a:	e841 2300 	strex	r3, r2, [r1]
 800bd6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1e1      	bne.n	800bd3a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd80:	e853 3f00 	ldrex	r3, [r3]
 800bd84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3308      	adds	r3, #8
 800bd96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bda0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bda8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1e3      	bne.n	800bd76 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdc4:	e853 3f00 	ldrex	r3, [r3]
 800bdc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bdca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdcc:	f023 0310 	bic.w	r3, r3, #16
 800bdd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdde:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bde0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bde4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bdec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e4      	bne.n	800bdbc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7f7 fd1c 	bl	8003834 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2202      	movs	r2, #2
 800be00:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be0e:	b29b      	uxth	r3, r3
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	b29b      	uxth	r3, r3
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f8c2 	bl	800bfa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be1c:	e0a4      	b.n	800bf68 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 8096 	beq.w	800bf6c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800be40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 8091 	beq.w	800bf6c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e4      	bne.n	800be4a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	623b      	str	r3, [r7, #32]
   return(result);
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	f023 0301 	bic.w	r3, r3, #1
 800be96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bea4:	633a      	str	r2, [r7, #48]	@ 0x30
 800bea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800beaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e3      	bne.n	800be80 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	60fb      	str	r3, [r7, #12]
   return(result);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f023 0310 	bic.w	r3, r3, #16
 800bee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800beee:	61fb      	str	r3, [r7, #28]
 800bef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	69b9      	ldr	r1, [r7, #24]
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	617b      	str	r3, [r7, #20]
   return(result);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e4      	bne.n	800becc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2202      	movs	r2, #2
 800bf06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f846 	bl	800bfa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf14:	e02a      	b.n	800bf6c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bf22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d008      	beq.n	800bf40 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d01c      	beq.n	800bf70 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	4798      	blx	r3
    }
    return;
 800bf3e:	e017      	b.n	800bf70 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d012      	beq.n	800bf72 <HAL_UART_IRQHandler+0x59e>
 800bf4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00c      	beq.n	800bf72 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fc71 	bl	800c840 <UART_EndTransmit_IT>
    return;
 800bf5e:	e008      	b.n	800bf72 <HAL_UART_IRQHandler+0x59e>
      return;
 800bf60:	bf00      	nop
 800bf62:	e006      	b.n	800bf72 <HAL_UART_IRQHandler+0x59e>
    return;
 800bf64:	bf00      	nop
 800bf66:	e004      	b.n	800bf72 <HAL_UART_IRQHandler+0x59e>
      return;
 800bf68:	bf00      	nop
 800bf6a:	e002      	b.n	800bf72 <HAL_UART_IRQHandler+0x59e>
      return;
 800bf6c:	bf00      	nop
 800bf6e:	e000      	b.n	800bf72 <HAL_UART_IRQHandler+0x59e>
    return;
 800bf70:	bf00      	nop
  }

}
 800bf72:	37e8      	adds	r7, #232	@ 0xe8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	4ba6      	ldr	r3, [pc, #664]	@ (800c27c <UART_SetConfig+0x2c4>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	6812      	ldr	r2, [r2, #0]
 800bfea:	6979      	ldr	r1, [r7, #20]
 800bfec:	430b      	orrs	r3, r1
 800bfee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	4313      	orrs	r3, r2
 800c014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	430a      	orrs	r2, r1
 800c028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a94      	ldr	r2, [pc, #592]	@ (800c280 <UART_SetConfig+0x2c8>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d120      	bne.n	800c076 <UART_SetConfig+0xbe>
 800c034:	4b93      	ldr	r3, [pc, #588]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d816      	bhi.n	800c070 <UART_SetConfig+0xb8>
 800c042:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <UART_SetConfig+0x90>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c059 	.word	0x0800c059
 800c04c:	0800c065 	.word	0x0800c065
 800c050:	0800c05f 	.word	0x0800c05f
 800c054:	0800c06b 	.word	0x0800c06b
 800c058:	2301      	movs	r3, #1
 800c05a:	77fb      	strb	r3, [r7, #31]
 800c05c:	e150      	b.n	800c300 <UART_SetConfig+0x348>
 800c05e:	2302      	movs	r3, #2
 800c060:	77fb      	strb	r3, [r7, #31]
 800c062:	e14d      	b.n	800c300 <UART_SetConfig+0x348>
 800c064:	2304      	movs	r3, #4
 800c066:	77fb      	strb	r3, [r7, #31]
 800c068:	e14a      	b.n	800c300 <UART_SetConfig+0x348>
 800c06a:	2308      	movs	r3, #8
 800c06c:	77fb      	strb	r3, [r7, #31]
 800c06e:	e147      	b.n	800c300 <UART_SetConfig+0x348>
 800c070:	2310      	movs	r3, #16
 800c072:	77fb      	strb	r3, [r7, #31]
 800c074:	e144      	b.n	800c300 <UART_SetConfig+0x348>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a83      	ldr	r2, [pc, #524]	@ (800c288 <UART_SetConfig+0x2d0>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d132      	bne.n	800c0e6 <UART_SetConfig+0x12e>
 800c080:	4b80      	ldr	r3, [pc, #512]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c086:	f003 030c 	and.w	r3, r3, #12
 800c08a:	2b0c      	cmp	r3, #12
 800c08c:	d828      	bhi.n	800c0e0 <UART_SetConfig+0x128>
 800c08e:	a201      	add	r2, pc, #4	@ (adr r2, 800c094 <UART_SetConfig+0xdc>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0c9 	.word	0x0800c0c9
 800c098:	0800c0e1 	.word	0x0800c0e1
 800c09c:	0800c0e1 	.word	0x0800c0e1
 800c0a0:	0800c0e1 	.word	0x0800c0e1
 800c0a4:	0800c0d5 	.word	0x0800c0d5
 800c0a8:	0800c0e1 	.word	0x0800c0e1
 800c0ac:	0800c0e1 	.word	0x0800c0e1
 800c0b0:	0800c0e1 	.word	0x0800c0e1
 800c0b4:	0800c0cf 	.word	0x0800c0cf
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c0db 	.word	0x0800c0db
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	77fb      	strb	r3, [r7, #31]
 800c0cc:	e118      	b.n	800c300 <UART_SetConfig+0x348>
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	77fb      	strb	r3, [r7, #31]
 800c0d2:	e115      	b.n	800c300 <UART_SetConfig+0x348>
 800c0d4:	2304      	movs	r3, #4
 800c0d6:	77fb      	strb	r3, [r7, #31]
 800c0d8:	e112      	b.n	800c300 <UART_SetConfig+0x348>
 800c0da:	2308      	movs	r3, #8
 800c0dc:	77fb      	strb	r3, [r7, #31]
 800c0de:	e10f      	b.n	800c300 <UART_SetConfig+0x348>
 800c0e0:	2310      	movs	r3, #16
 800c0e2:	77fb      	strb	r3, [r7, #31]
 800c0e4:	e10c      	b.n	800c300 <UART_SetConfig+0x348>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a68      	ldr	r2, [pc, #416]	@ (800c28c <UART_SetConfig+0x2d4>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d120      	bne.n	800c132 <UART_SetConfig+0x17a>
 800c0f0:	4b64      	ldr	r3, [pc, #400]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c0fa:	2b30      	cmp	r3, #48	@ 0x30
 800c0fc:	d013      	beq.n	800c126 <UART_SetConfig+0x16e>
 800c0fe:	2b30      	cmp	r3, #48	@ 0x30
 800c100:	d814      	bhi.n	800c12c <UART_SetConfig+0x174>
 800c102:	2b20      	cmp	r3, #32
 800c104:	d009      	beq.n	800c11a <UART_SetConfig+0x162>
 800c106:	2b20      	cmp	r3, #32
 800c108:	d810      	bhi.n	800c12c <UART_SetConfig+0x174>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <UART_SetConfig+0x15c>
 800c10e:	2b10      	cmp	r3, #16
 800c110:	d006      	beq.n	800c120 <UART_SetConfig+0x168>
 800c112:	e00b      	b.n	800c12c <UART_SetConfig+0x174>
 800c114:	2300      	movs	r3, #0
 800c116:	77fb      	strb	r3, [r7, #31]
 800c118:	e0f2      	b.n	800c300 <UART_SetConfig+0x348>
 800c11a:	2302      	movs	r3, #2
 800c11c:	77fb      	strb	r3, [r7, #31]
 800c11e:	e0ef      	b.n	800c300 <UART_SetConfig+0x348>
 800c120:	2304      	movs	r3, #4
 800c122:	77fb      	strb	r3, [r7, #31]
 800c124:	e0ec      	b.n	800c300 <UART_SetConfig+0x348>
 800c126:	2308      	movs	r3, #8
 800c128:	77fb      	strb	r3, [r7, #31]
 800c12a:	e0e9      	b.n	800c300 <UART_SetConfig+0x348>
 800c12c:	2310      	movs	r3, #16
 800c12e:	77fb      	strb	r3, [r7, #31]
 800c130:	e0e6      	b.n	800c300 <UART_SetConfig+0x348>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a56      	ldr	r2, [pc, #344]	@ (800c290 <UART_SetConfig+0x2d8>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d120      	bne.n	800c17e <UART_SetConfig+0x1c6>
 800c13c:	4b51      	ldr	r3, [pc, #324]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c142:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c146:	2bc0      	cmp	r3, #192	@ 0xc0
 800c148:	d013      	beq.n	800c172 <UART_SetConfig+0x1ba>
 800c14a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c14c:	d814      	bhi.n	800c178 <UART_SetConfig+0x1c0>
 800c14e:	2b80      	cmp	r3, #128	@ 0x80
 800c150:	d009      	beq.n	800c166 <UART_SetConfig+0x1ae>
 800c152:	2b80      	cmp	r3, #128	@ 0x80
 800c154:	d810      	bhi.n	800c178 <UART_SetConfig+0x1c0>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <UART_SetConfig+0x1a8>
 800c15a:	2b40      	cmp	r3, #64	@ 0x40
 800c15c:	d006      	beq.n	800c16c <UART_SetConfig+0x1b4>
 800c15e:	e00b      	b.n	800c178 <UART_SetConfig+0x1c0>
 800c160:	2300      	movs	r3, #0
 800c162:	77fb      	strb	r3, [r7, #31]
 800c164:	e0cc      	b.n	800c300 <UART_SetConfig+0x348>
 800c166:	2302      	movs	r3, #2
 800c168:	77fb      	strb	r3, [r7, #31]
 800c16a:	e0c9      	b.n	800c300 <UART_SetConfig+0x348>
 800c16c:	2304      	movs	r3, #4
 800c16e:	77fb      	strb	r3, [r7, #31]
 800c170:	e0c6      	b.n	800c300 <UART_SetConfig+0x348>
 800c172:	2308      	movs	r3, #8
 800c174:	77fb      	strb	r3, [r7, #31]
 800c176:	e0c3      	b.n	800c300 <UART_SetConfig+0x348>
 800c178:	2310      	movs	r3, #16
 800c17a:	77fb      	strb	r3, [r7, #31]
 800c17c:	e0c0      	b.n	800c300 <UART_SetConfig+0x348>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a44      	ldr	r2, [pc, #272]	@ (800c294 <UART_SetConfig+0x2dc>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d125      	bne.n	800c1d4 <UART_SetConfig+0x21c>
 800c188:	4b3e      	ldr	r3, [pc, #248]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c18e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c196:	d017      	beq.n	800c1c8 <UART_SetConfig+0x210>
 800c198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c19c:	d817      	bhi.n	800c1ce <UART_SetConfig+0x216>
 800c19e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a2:	d00b      	beq.n	800c1bc <UART_SetConfig+0x204>
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a8:	d811      	bhi.n	800c1ce <UART_SetConfig+0x216>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <UART_SetConfig+0x1fe>
 800c1ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1b2:	d006      	beq.n	800c1c2 <UART_SetConfig+0x20a>
 800c1b4:	e00b      	b.n	800c1ce <UART_SetConfig+0x216>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	77fb      	strb	r3, [r7, #31]
 800c1ba:	e0a1      	b.n	800c300 <UART_SetConfig+0x348>
 800c1bc:	2302      	movs	r3, #2
 800c1be:	77fb      	strb	r3, [r7, #31]
 800c1c0:	e09e      	b.n	800c300 <UART_SetConfig+0x348>
 800c1c2:	2304      	movs	r3, #4
 800c1c4:	77fb      	strb	r3, [r7, #31]
 800c1c6:	e09b      	b.n	800c300 <UART_SetConfig+0x348>
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	77fb      	strb	r3, [r7, #31]
 800c1cc:	e098      	b.n	800c300 <UART_SetConfig+0x348>
 800c1ce:	2310      	movs	r3, #16
 800c1d0:	77fb      	strb	r3, [r7, #31]
 800c1d2:	e095      	b.n	800c300 <UART_SetConfig+0x348>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a2f      	ldr	r2, [pc, #188]	@ (800c298 <UART_SetConfig+0x2e0>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d125      	bne.n	800c22a <UART_SetConfig+0x272>
 800c1de:	4b29      	ldr	r3, [pc, #164]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c1e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1ec:	d017      	beq.n	800c21e <UART_SetConfig+0x266>
 800c1ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1f2:	d817      	bhi.n	800c224 <UART_SetConfig+0x26c>
 800c1f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1f8:	d00b      	beq.n	800c212 <UART_SetConfig+0x25a>
 800c1fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1fe:	d811      	bhi.n	800c224 <UART_SetConfig+0x26c>
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <UART_SetConfig+0x254>
 800c204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c208:	d006      	beq.n	800c218 <UART_SetConfig+0x260>
 800c20a:	e00b      	b.n	800c224 <UART_SetConfig+0x26c>
 800c20c:	2301      	movs	r3, #1
 800c20e:	77fb      	strb	r3, [r7, #31]
 800c210:	e076      	b.n	800c300 <UART_SetConfig+0x348>
 800c212:	2302      	movs	r3, #2
 800c214:	77fb      	strb	r3, [r7, #31]
 800c216:	e073      	b.n	800c300 <UART_SetConfig+0x348>
 800c218:	2304      	movs	r3, #4
 800c21a:	77fb      	strb	r3, [r7, #31]
 800c21c:	e070      	b.n	800c300 <UART_SetConfig+0x348>
 800c21e:	2308      	movs	r3, #8
 800c220:	77fb      	strb	r3, [r7, #31]
 800c222:	e06d      	b.n	800c300 <UART_SetConfig+0x348>
 800c224:	2310      	movs	r3, #16
 800c226:	77fb      	strb	r3, [r7, #31]
 800c228:	e06a      	b.n	800c300 <UART_SetConfig+0x348>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a1b      	ldr	r2, [pc, #108]	@ (800c29c <UART_SetConfig+0x2e4>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d138      	bne.n	800c2a6 <UART_SetConfig+0x2ee>
 800c234:	4b13      	ldr	r3, [pc, #76]	@ (800c284 <UART_SetConfig+0x2cc>)
 800c236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c23a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c23e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c242:	d017      	beq.n	800c274 <UART_SetConfig+0x2bc>
 800c244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c248:	d82a      	bhi.n	800c2a0 <UART_SetConfig+0x2e8>
 800c24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c24e:	d00b      	beq.n	800c268 <UART_SetConfig+0x2b0>
 800c250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c254:	d824      	bhi.n	800c2a0 <UART_SetConfig+0x2e8>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <UART_SetConfig+0x2aa>
 800c25a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c25e:	d006      	beq.n	800c26e <UART_SetConfig+0x2b6>
 800c260:	e01e      	b.n	800c2a0 <UART_SetConfig+0x2e8>
 800c262:	2300      	movs	r3, #0
 800c264:	77fb      	strb	r3, [r7, #31]
 800c266:	e04b      	b.n	800c300 <UART_SetConfig+0x348>
 800c268:	2302      	movs	r3, #2
 800c26a:	77fb      	strb	r3, [r7, #31]
 800c26c:	e048      	b.n	800c300 <UART_SetConfig+0x348>
 800c26e:	2304      	movs	r3, #4
 800c270:	77fb      	strb	r3, [r7, #31]
 800c272:	e045      	b.n	800c300 <UART_SetConfig+0x348>
 800c274:	2308      	movs	r3, #8
 800c276:	77fb      	strb	r3, [r7, #31]
 800c278:	e042      	b.n	800c300 <UART_SetConfig+0x348>
 800c27a:	bf00      	nop
 800c27c:	efff69f3 	.word	0xefff69f3
 800c280:	40011000 	.word	0x40011000
 800c284:	40023800 	.word	0x40023800
 800c288:	40004400 	.word	0x40004400
 800c28c:	40004800 	.word	0x40004800
 800c290:	40004c00 	.word	0x40004c00
 800c294:	40005000 	.word	0x40005000
 800c298:	40011400 	.word	0x40011400
 800c29c:	40007800 	.word	0x40007800
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	77fb      	strb	r3, [r7, #31]
 800c2a4:	e02c      	b.n	800c300 <UART_SetConfig+0x348>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a72      	ldr	r2, [pc, #456]	@ (800c474 <UART_SetConfig+0x4bc>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d125      	bne.n	800c2fc <UART_SetConfig+0x344>
 800c2b0:	4b71      	ldr	r3, [pc, #452]	@ (800c478 <UART_SetConfig+0x4c0>)
 800c2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c2ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c2be:	d017      	beq.n	800c2f0 <UART_SetConfig+0x338>
 800c2c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c2c4:	d817      	bhi.n	800c2f6 <UART_SetConfig+0x33e>
 800c2c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2ca:	d00b      	beq.n	800c2e4 <UART_SetConfig+0x32c>
 800c2cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2d0:	d811      	bhi.n	800c2f6 <UART_SetConfig+0x33e>
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <UART_SetConfig+0x326>
 800c2d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2da:	d006      	beq.n	800c2ea <UART_SetConfig+0x332>
 800c2dc:	e00b      	b.n	800c2f6 <UART_SetConfig+0x33e>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	77fb      	strb	r3, [r7, #31]
 800c2e2:	e00d      	b.n	800c300 <UART_SetConfig+0x348>
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	77fb      	strb	r3, [r7, #31]
 800c2e8:	e00a      	b.n	800c300 <UART_SetConfig+0x348>
 800c2ea:	2304      	movs	r3, #4
 800c2ec:	77fb      	strb	r3, [r7, #31]
 800c2ee:	e007      	b.n	800c300 <UART_SetConfig+0x348>
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	77fb      	strb	r3, [r7, #31]
 800c2f4:	e004      	b.n	800c300 <UART_SetConfig+0x348>
 800c2f6:	2310      	movs	r3, #16
 800c2f8:	77fb      	strb	r3, [r7, #31]
 800c2fa:	e001      	b.n	800c300 <UART_SetConfig+0x348>
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	69db      	ldr	r3, [r3, #28]
 800c304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c308:	d15b      	bne.n	800c3c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c30a:	7ffb      	ldrb	r3, [r7, #31]
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	d828      	bhi.n	800c362 <UART_SetConfig+0x3aa>
 800c310:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <UART_SetConfig+0x360>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c33d 	.word	0x0800c33d
 800c31c:	0800c345 	.word	0x0800c345
 800c320:	0800c34d 	.word	0x0800c34d
 800c324:	0800c363 	.word	0x0800c363
 800c328:	0800c353 	.word	0x0800c353
 800c32c:	0800c363 	.word	0x0800c363
 800c330:	0800c363 	.word	0x0800c363
 800c334:	0800c363 	.word	0x0800c363
 800c338:	0800c35b 	.word	0x0800c35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c33c:	f7fb fdb4 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800c340:	61b8      	str	r0, [r7, #24]
        break;
 800c342:	e013      	b.n	800c36c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c344:	f7fb fdc4 	bl	8007ed0 <HAL_RCC_GetPCLK2Freq>
 800c348:	61b8      	str	r0, [r7, #24]
        break;
 800c34a:	e00f      	b.n	800c36c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c34c:	4b4b      	ldr	r3, [pc, #300]	@ (800c47c <UART_SetConfig+0x4c4>)
 800c34e:	61bb      	str	r3, [r7, #24]
        break;
 800c350:	e00c      	b.n	800c36c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c352:	f7fb fcd7 	bl	8007d04 <HAL_RCC_GetSysClockFreq>
 800c356:	61b8      	str	r0, [r7, #24]
        break;
 800c358:	e008      	b.n	800c36c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c35e:	61bb      	str	r3, [r7, #24]
        break;
 800c360:	e004      	b.n	800c36c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	77bb      	strb	r3, [r7, #30]
        break;
 800c36a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d074      	beq.n	800c45c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	005a      	lsls	r2, r3, #1
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	085b      	lsrs	r3, r3, #1
 800c37c:	441a      	add	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	fbb2 f3f3 	udiv	r3, r2, r3
 800c386:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b0f      	cmp	r3, #15
 800c38c:	d916      	bls.n	800c3bc <UART_SetConfig+0x404>
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c394:	d212      	bcs.n	800c3bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	b29b      	uxth	r3, r3
 800c39a:	f023 030f 	bic.w	r3, r3, #15
 800c39e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f003 0307 	and.w	r3, r3, #7
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	89fb      	ldrh	r3, [r7, #14]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	89fa      	ldrh	r2, [r7, #14]
 800c3b8:	60da      	str	r2, [r3, #12]
 800c3ba:	e04f      	b.n	800c45c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	77bb      	strb	r3, [r7, #30]
 800c3c0:	e04c      	b.n	800c45c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d828      	bhi.n	800c41a <UART_SetConfig+0x462>
 800c3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d0 <UART_SetConfig+0x418>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c3f5 	.word	0x0800c3f5
 800c3d4:	0800c3fd 	.word	0x0800c3fd
 800c3d8:	0800c405 	.word	0x0800c405
 800c3dc:	0800c41b 	.word	0x0800c41b
 800c3e0:	0800c40b 	.word	0x0800c40b
 800c3e4:	0800c41b 	.word	0x0800c41b
 800c3e8:	0800c41b 	.word	0x0800c41b
 800c3ec:	0800c41b 	.word	0x0800c41b
 800c3f0:	0800c413 	.word	0x0800c413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3f4:	f7fb fd58 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800c3f8:	61b8      	str	r0, [r7, #24]
        break;
 800c3fa:	e013      	b.n	800c424 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3fc:	f7fb fd68 	bl	8007ed0 <HAL_RCC_GetPCLK2Freq>
 800c400:	61b8      	str	r0, [r7, #24]
        break;
 800c402:	e00f      	b.n	800c424 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c404:	4b1d      	ldr	r3, [pc, #116]	@ (800c47c <UART_SetConfig+0x4c4>)
 800c406:	61bb      	str	r3, [r7, #24]
        break;
 800c408:	e00c      	b.n	800c424 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c40a:	f7fb fc7b 	bl	8007d04 <HAL_RCC_GetSysClockFreq>
 800c40e:	61b8      	str	r0, [r7, #24]
        break;
 800c410:	e008      	b.n	800c424 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c416:	61bb      	str	r3, [r7, #24]
        break;
 800c418:	e004      	b.n	800c424 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	77bb      	strb	r3, [r7, #30]
        break;
 800c422:	bf00      	nop
    }

    if (pclk != 0U)
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d018      	beq.n	800c45c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	085a      	lsrs	r2, r3, #1
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	441a      	add	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2b0f      	cmp	r3, #15
 800c442:	d909      	bls.n	800c458 <UART_SetConfig+0x4a0>
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c44a:	d205      	bcs.n	800c458 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60da      	str	r2, [r3, #12]
 800c456:	e001      	b.n	800c45c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c468:	7fbb      	ldrb	r3, [r7, #30]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	40007c00 	.word	0x40007c00
 800c478:	40023800 	.word	0x40023800
 800c47c:	00f42400 	.word	0x00f42400

0800c480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c48c:	f003 0308 	and.w	r3, r3, #8
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00a      	beq.n	800c4aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00a      	beq.n	800c4cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d0:	f003 0302 	and.w	r3, r3, #2
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00a      	beq.n	800c4ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c514:	f003 0310 	and.w	r3, r3, #16
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00a      	beq.n	800c532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01a      	beq.n	800c596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c57e:	d10a      	bne.n	800c596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	605a      	str	r2, [r3, #4]
  }
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08c      	sub	sp, #48	@ 0x30
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5d4:	f7f6 fbbc 	bl	8002d50 <HAL_GetTick>
 800c5d8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 0308 	and.w	r3, r3, #8
 800c5e4:	2b08      	cmp	r3, #8
 800c5e6:	d12e      	bne.n	800c646 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f83b 	bl	800c672 <UART_WaitOnFlagUntilTimeout>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d021      	beq.n	800c646 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c616:	623b      	str	r3, [r7, #32]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	461a      	mov	r2, r3
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	69b9      	ldr	r1, [r7, #24]
 800c626:	69fa      	ldr	r2, [r7, #28]
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	617b      	str	r3, [r7, #20]
   return(result);
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e6      	bne.n	800c602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c642:	2303      	movs	r3, #3
 800c644:	e011      	b.n	800c66a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2220      	movs	r2, #32
 800c650:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3728      	adds	r7, #40	@ 0x28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	60f8      	str	r0, [r7, #12]
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c682:	e04f      	b.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c68a:	d04b      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c68c:	f7f6 fb60 	bl	8002d50 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	e04e      	b.n	800c744 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d037      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2b80      	cmp	r3, #128	@ 0x80
 800c6b8:	d034      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b40      	cmp	r3, #64	@ 0x40
 800c6be:	d031      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	f003 0308 	and.w	r3, r3, #8
 800c6ca:	2b08      	cmp	r3, #8
 800c6cc:	d110      	bne.n	800c6f0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 f838 	bl	800c74c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2208      	movs	r2, #8
 800c6e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e029      	b.n	800c744 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6fe:	d111      	bne.n	800c724 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c708:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 f81e 	bl	800c74c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2220      	movs	r2, #32
 800c714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e00f      	b.n	800c744 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	69da      	ldr	r2, [r3, #28]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4013      	ands	r3, r2
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	429a      	cmp	r2, r3
 800c732:	bf0c      	ite	eq
 800c734:	2301      	moveq	r3, #1
 800c736:	2300      	movne	r3, #0
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	461a      	mov	r2, r3
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d0a0      	beq.n	800c684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b095      	sub	sp, #84	@ 0x54
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c772:	643b      	str	r3, [r7, #64]	@ 0x40
 800c774:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e6      	bne.n	800c754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	61fb      	str	r3, [r7, #28]
   return(result);
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f023 0301 	bic.w	r3, r3, #1
 800c79c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e5      	bne.n	800c786 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d118      	bne.n	800c7f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	e853 3f00 	ldrex	r3, [r3]
 800c7ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	f023 0310 	bic.w	r3, r3, #16
 800c7d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e0:	61bb      	str	r3, [r7, #24]
 800c7e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e4:	6979      	ldr	r1, [r7, #20]
 800c7e6:	69ba      	ldr	r2, [r7, #24]
 800c7e8:	e841 2300 	strex	r3, r2, [r1]
 800c7ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1e6      	bne.n	800c7c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2220      	movs	r2, #32
 800c7f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c808:	bf00      	nop
 800c80a:	3754      	adds	r7, #84	@ 0x54
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff fbaa 	bl	800bf8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	60bb      	str	r3, [r7, #8]
   return(result);
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	6979      	ldr	r1, [r7, #20]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	e841 2300 	strex	r3, r2, [r1]
 800c872:	613b      	str	r3, [r7, #16]
   return(result);
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1e6      	bne.n	800c848 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2220      	movs	r2, #32
 800c87e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff fb76 	bl	800bf78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c88c:	bf00      	nop
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d121      	bne.n	800c8ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	4b27      	ldr	r3, [pc, #156]	@ (800c948 <FMC_SDRAM_Init+0xb4>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	6851      	ldr	r1, [r2, #4]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	6892      	ldr	r2, [r2, #8]
 800c8b6:	4311      	orrs	r1, r2
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	68d2      	ldr	r2, [r2, #12]
 800c8bc:	4311      	orrs	r1, r2
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	6912      	ldr	r2, [r2, #16]
 800c8c2:	4311      	orrs	r1, r2
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	6952      	ldr	r2, [r2, #20]
 800c8c8:	4311      	orrs	r1, r2
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	6992      	ldr	r2, [r2, #24]
 800c8ce:	4311      	orrs	r1, r2
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	69d2      	ldr	r2, [r2, #28]
 800c8d4:	4311      	orrs	r1, r2
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	6a12      	ldr	r2, [r2, #32]
 800c8da:	4311      	orrs	r1, r2
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c8e0:	430a      	orrs	r2, r1
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	e026      	b.n	800c938 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	69d9      	ldr	r1, [r3, #28]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	4319      	orrs	r1, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c900:	430b      	orrs	r3, r1
 800c902:	431a      	orrs	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	4b0e      	ldr	r3, [pc, #56]	@ (800c948 <FMC_SDRAM_Init+0xb4>)
 800c90e:	4013      	ands	r3, r2
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	6851      	ldr	r1, [r2, #4]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	6892      	ldr	r2, [r2, #8]
 800c918:	4311      	orrs	r1, r2
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	68d2      	ldr	r2, [r2, #12]
 800c91e:	4311      	orrs	r1, r2
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	6912      	ldr	r2, [r2, #16]
 800c924:	4311      	orrs	r1, r2
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	6952      	ldr	r2, [r2, #20]
 800c92a:	4311      	orrs	r1, r2
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	6992      	ldr	r2, [r2, #24]
 800c930:	430a      	orrs	r2, r1
 800c932:	431a      	orrs	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	ffff8000 	.word	0xffff8000

0800c94c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d128      	bne.n	800c9b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	1e59      	subs	r1, r3, #1
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	3b01      	subs	r3, #1
 800c972:	011b      	lsls	r3, r3, #4
 800c974:	4319      	orrs	r1, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	021b      	lsls	r3, r3, #8
 800c97e:	4319      	orrs	r1, r3
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	3b01      	subs	r3, #1
 800c986:	031b      	lsls	r3, r3, #12
 800c988:	4319      	orrs	r1, r3
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	3b01      	subs	r3, #1
 800c990:	041b      	lsls	r3, r3, #16
 800c992:	4319      	orrs	r1, r3
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	695b      	ldr	r3, [r3, #20]
 800c998:	3b01      	subs	r3, #1
 800c99a:	051b      	lsls	r3, r3, #20
 800c99c:	4319      	orrs	r1, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	061b      	lsls	r3, r3, #24
 800c9a6:	430b      	orrs	r3, r1
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	609a      	str	r2, [r3, #8]
 800c9ae:	e02d      	b.n	800ca0c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	689a      	ldr	r2, [r3, #8]
 800c9b4:	4b19      	ldr	r3, [pc, #100]	@ (800ca1c <FMC_SDRAM_Timing_Init+0xd0>)
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	68d2      	ldr	r2, [r2, #12]
 800c9bc:	3a01      	subs	r2, #1
 800c9be:	0311      	lsls	r1, r2, #12
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	6952      	ldr	r2, [r2, #20]
 800c9c4:	3a01      	subs	r2, #1
 800c9c6:	0512      	lsls	r2, r2, #20
 800c9c8:	430a      	orrs	r2, r1
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	1e59      	subs	r1, r3, #1
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	4319      	orrs	r1, r3
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	021b      	lsls	r3, r3, #8
 800c9f0:	4319      	orrs	r1, r3
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	041b      	lsls	r3, r3, #16
 800c9fa:	4319      	orrs	r1, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	061b      	lsls	r3, r3, #24
 800ca04:	430b      	orrs	r3, r1
 800ca06:	431a      	orrs	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	ff0f0fff 	.word	0xff0f0fff

0800ca20 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ca20:	b084      	sub	sp, #16
 800ca22:	b480      	push	{r7}
 800ca24:	b085      	sub	sp, #20
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	f107 001c 	add.w	r0, r7, #28
 800ca2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ca36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ca38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ca3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ca42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ca46:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ca4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <SDMMC_Init+0x54>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	b004      	add	sp, #16
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	ffff8100 	.word	0xffff8100

0800ca78 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800caae:	b480      	push	{r7}
 800cab0:	b083      	sub	sp, #12
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 0303 	and.w	r3, r3, #3
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
	...

0800cacc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800caea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800caf0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800caf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68da      	ldr	r2, [r3, #12]
 800cb02:	4b06      	ldr	r3, [pc, #24]	@ (800cb1c <SDMMC_SendCommand+0x50>)
 800cb04:	4013      	ands	r3, r2
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	fffff000 	.word	0xfffff000

0800cb20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	b2db      	uxtb	r3, r3
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	370c      	adds	r7, #12
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b085      	sub	sp, #20
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3314      	adds	r3, #20
 800cb48:	461a      	mov	r2, r3
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
}  
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cb8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cb92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	431a      	orrs	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0

}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b088      	sub	sp, #32
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cbc6:	2310      	movs	r3, #16
 800cbc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbca:	2340      	movs	r3, #64	@ 0x40
 800cbcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbd8:	f107 0308 	add.w	r3, r7, #8
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff ff74 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cbe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbe8:	2110      	movs	r1, #16
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fa1a 	bl	800d024 <SDMMC_GetCmdResp1>
 800cbf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbf2:	69fb      	ldr	r3, [r7, #28]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3720      	adds	r7, #32
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b088      	sub	sp, #32
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc0a:	2311      	movs	r3, #17
 800cc0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc0e:	2340      	movs	r3, #64	@ 0x40
 800cc10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc1c:	f107 0308 	add.w	r3, r7, #8
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff ff52 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc2c:	2111      	movs	r1, #17
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f9f8 	bl	800d024 <SDMMC_GetCmdResp1>
 800cc34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc36:	69fb      	ldr	r3, [r7, #28]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3720      	adds	r7, #32
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b088      	sub	sp, #32
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cc4e:	2312      	movs	r3, #18
 800cc50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc52:	2340      	movs	r3, #64	@ 0x40
 800cc54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc60:	f107 0308 	add.w	r3, r7, #8
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff ff30 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc70:	2112      	movs	r1, #18
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f9d6 	bl	800d024 <SDMMC_GetCmdResp1>
 800cc78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc92:	2318      	movs	r3, #24
 800cc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc96:	2340      	movs	r3, #64	@ 0x40
 800cc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cca4:	f107 0308 	add.w	r3, r7, #8
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff ff0e 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ccb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccb4:	2118      	movs	r1, #24
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f9b4 	bl	800d024 <SDMMC_GetCmdResp1>
 800ccbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ccd6:	2319      	movs	r3, #25
 800ccd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccda:	2340      	movs	r3, #64	@ 0x40
 800ccdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccde:	2300      	movs	r3, #0
 800cce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cce8:	f107 0308 	add.w	r3, r7, #8
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff feec 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ccf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccf8:	2119      	movs	r1, #25
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f992 	bl	800d024 <SDMMC_GetCmdResp1>
 800cd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd02:	69fb      	ldr	r3, [r7, #28]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd18:	230c      	movs	r3, #12
 800cd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd1c:	2340      	movs	r3, #64	@ 0x40
 800cd1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff fecb 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cd36:	4a05      	ldr	r2, [pc, #20]	@ (800cd4c <SDMMC_CmdStopTransfer+0x40>)
 800cd38:	210c      	movs	r1, #12
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 f972 	bl	800d024 <SDMMC_GetCmdResp1>
 800cd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd42:	69fb      	ldr	r3, [r7, #28]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3720      	adds	r7, #32
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	05f5e100 	.word	0x05f5e100

0800cd50 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	@ 0x28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cd60:	2307      	movs	r3, #7
 800cd62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd64:	2340      	movs	r3, #64	@ 0x40
 800cd66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd70:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd72:	f107 0310 	add.w	r3, r7, #16
 800cd76:	4619      	mov	r1, r3
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7ff fea7 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cd7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd82:	2107      	movs	r1, #7
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f94d 	bl	800d024 <SDMMC_GetCmdResp1>
 800cd8a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3728      	adds	r7, #40	@ 0x28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cda6:	2300      	movs	r3, #0
 800cda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb4:	f107 0308 	add.w	r3, r7, #8
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff fe86 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fb67 	bl	800d494 <SDMMC_GetCmdError>
 800cdc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b088      	sub	sp, #32
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cdda:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cdde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cde0:	2308      	movs	r3, #8
 800cde2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cde4:	2340      	movs	r3, #64	@ 0x40
 800cde6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf2:	f107 0308 	add.w	r3, r7, #8
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fe67 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fafa 	bl	800d3f8 <SDMMC_GetCmdResp7>
 800ce04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce06:	69fb      	ldr	r3, [r7, #28]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3720      	adds	r7, #32
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce1e:	2337      	movs	r3, #55	@ 0x37
 800ce20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce22:	2340      	movs	r3, #64	@ 0x40
 800ce24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce26:	2300      	movs	r3, #0
 800ce28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce30:	f107 0308 	add.w	r3, r7, #8
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7ff fe48 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ce3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce40:	2137      	movs	r1, #55	@ 0x37
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f8ee 	bl	800d024 <SDMMC_GetCmdResp1>
 800ce48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce4a:	69fb      	ldr	r3, [r7, #28]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <SDMMC_CmdAppOperCommand+0x44>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ce66:	2329      	movs	r3, #41	@ 0x29
 800ce68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce6a:	2340      	movs	r3, #64	@ 0x40
 800ce6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce78:	f107 0308 	add.w	r3, r7, #8
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fe24 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fa03 	bl	800d290 <SDMMC_GetCmdResp3>
 800ce8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce8c:	69fb      	ldr	r3, [r7, #28]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3720      	adds	r7, #32
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	80100000 	.word	0x80100000

0800ce9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ceaa:	2306      	movs	r3, #6
 800ceac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceae:	2340      	movs	r3, #64	@ 0x40
 800ceb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cebc:	f107 0308 	add.w	r3, r7, #8
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7ff fe02 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cecc:	2106      	movs	r1, #6
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f8a8 	bl	800d024 <SDMMC_GetCmdResp1>
 800ced4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ced6:	69fb      	ldr	r3, [r7, #28]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3720      	adds	r7, #32
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ceec:	2333      	movs	r3, #51	@ 0x33
 800ceee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cef0:	2340      	movs	r3, #64	@ 0x40
 800cef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cefc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff fde1 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf0e:	2133      	movs	r1, #51	@ 0x33
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f887 	bl	800d024 <SDMMC_GetCmdResp1>
 800cf16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf18:	69fb      	ldr	r3, [r7, #28]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b088      	sub	sp, #32
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf2e:	2302      	movs	r3, #2
 800cf30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf32:	23c0      	movs	r3, #192	@ 0xc0
 800cf34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf36:	2300      	movs	r3, #0
 800cf38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf40:	f107 0308 	add.w	r3, r7, #8
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff fdc0 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f957 	bl	800d200 <SDMMC_GetCmdResp2>
 800cf52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf54:	69fb      	ldr	r3, [r7, #28]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3720      	adds	r7, #32
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b088      	sub	sp, #32
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf6c:	2309      	movs	r3, #9
 800cf6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf70:	23c0      	movs	r3, #192	@ 0xc0
 800cf72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf74:	2300      	movs	r3, #0
 800cf76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf7e:	f107 0308 	add.w	r3, r7, #8
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff fda1 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f938 	bl	800d200 <SDMMC_GetCmdResp2>
 800cf90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf92:	69fb      	ldr	r3, [r7, #28]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3720      	adds	r7, #32
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfae:	2340      	movs	r3, #64	@ 0x40
 800cfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfbc:	f107 0308 	add.w	r3, r7, #8
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff fd82 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	2103      	movs	r1, #3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f99d 	bl	800d30c <SDMMC_GetCmdResp6>
 800cfd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b088      	sub	sp, #32
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cfec:	230d      	movs	r3, #13
 800cfee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cff0:	2340      	movs	r3, #64	@ 0x40
 800cff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cff4:	2300      	movs	r3, #0
 800cff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cffe:	f107 0308 	add.w	r3, r7, #8
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff fd61 	bl	800cacc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d00e:	210d      	movs	r1, #13
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f807 	bl	800d024 <SDMMC_GetCmdResp1>
 800d016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d018:	69fb      	ldr	r3, [r7, #28]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3720      	adds	r7, #32
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	460b      	mov	r3, r1
 800d02e:	607a      	str	r2, [r7, #4]
 800d030:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d032:	4b70      	ldr	r3, [pc, #448]	@ (800d1f4 <SDMMC_GetCmdResp1+0x1d0>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a70      	ldr	r2, [pc, #448]	@ (800d1f8 <SDMMC_GetCmdResp1+0x1d4>)
 800d038:	fba2 2303 	umull	r2, r3, r2, r3
 800d03c:	0a5a      	lsrs	r2, r3, #9
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	fb02 f303 	mul.w	r3, r2, r3
 800d044:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	1e5a      	subs	r2, r3, #1
 800d04a:	61fa      	str	r2, [r7, #28]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d054:	e0c9      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0ef      	beq.n	800d046 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1ea      	bne.n	800d046 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d074:	f003 0304 	and.w	r3, r3, #4
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2204      	movs	r2, #4
 800d080:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d082:	2304      	movs	r3, #4
 800d084:	e0b1      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d004      	beq.n	800d09c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d098:	2301      	movs	r3, #1
 800d09a:	e0a6      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	22c5      	movs	r2, #197	@ 0xc5
 800d0a0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f7ff fd3c 	bl	800cb20 <SDMMC_GetCommandResponse>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	7afb      	ldrb	r3, [r7, #11]
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d001      	beq.n	800d0b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e099      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7ff fd3e 	bl	800cb3a <SDMMC_GetResponse>
 800d0be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d0c0:	697a      	ldr	r2, [r7, #20]
 800d0c2:	4b4e      	ldr	r3, [pc, #312]	@ (800d1fc <SDMMC_GetCmdResp1+0x1d8>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e08d      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	da02      	bge.n	800d0da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d0d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d0d8:	e087      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0e4:	2340      	movs	r3, #64	@ 0x40
 800d0e6:	e080      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d0f2:	2380      	movs	r3, #128	@ 0x80
 800d0f4:	e079      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d104:	e071      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d114:	e069      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d124:	e061      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d130:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d134:	e059      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d144:	e051      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d154:	e049      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d160:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d164:	e041      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d170:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d174:	e039      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d184:	e031      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d190:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d194:	e029      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d1a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1a4:	e021      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d1b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d1b4:	e019      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d1c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d1c4:	e011      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d1d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d1d4:	e009      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f003 0308 	and.w	r3, r3, #8
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d1e4:	e001      	b.n	800d1ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3720      	adds	r7, #32
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20000000 	.word	0x20000000
 800d1f8:	10624dd3 	.word	0x10624dd3
 800d1fc:	fdffe008 	.word	0xfdffe008

0800d200 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d208:	4b1f      	ldr	r3, [pc, #124]	@ (800d288 <SDMMC_GetCmdResp2+0x88>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a1f      	ldr	r2, [pc, #124]	@ (800d28c <SDMMC_GetCmdResp2+0x8c>)
 800d20e:	fba2 2303 	umull	r2, r3, r2, r3
 800d212:	0a5b      	lsrs	r3, r3, #9
 800d214:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	1e5a      	subs	r2, r3, #1
 800d222:	60fa      	str	r2, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d228:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d22c:	e026      	b.n	800d27c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d232:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0ef      	beq.n	800d21e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1ea      	bne.n	800d21e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d004      	beq.n	800d25e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2204      	movs	r2, #4
 800d258:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d25a:	2304      	movs	r3, #4
 800d25c:	e00e      	b.n	800d27c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d004      	beq.n	800d274 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d270:	2301      	movs	r3, #1
 800d272:	e003      	b.n	800d27c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	22c5      	movs	r2, #197	@ 0xc5
 800d278:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr
 800d288:	20000000 	.word	0x20000000
 800d28c:	10624dd3 	.word	0x10624dd3

0800d290 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d298:	4b1a      	ldr	r3, [pc, #104]	@ (800d304 <SDMMC_GetCmdResp3+0x74>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a1a      	ldr	r2, [pc, #104]	@ (800d308 <SDMMC_GetCmdResp3+0x78>)
 800d29e:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a2:	0a5b      	lsrs	r3, r3, #9
 800d2a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2a8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	1e5a      	subs	r2, r3, #1
 800d2b2:	60fa      	str	r2, [r7, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2bc:	e01b      	b.n	800d2f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d0ef      	beq.n	800d2ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1ea      	bne.n	800d2ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2204      	movs	r2, #4
 800d2e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2ea:	2304      	movs	r3, #4
 800d2ec:	e003      	b.n	800d2f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	22c5      	movs	r2, #197	@ 0xc5
 800d2f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000000 	.word	0x20000000
 800d308:	10624dd3 	.word	0x10624dd3

0800d30c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	460b      	mov	r3, r1
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d31a:	4b35      	ldr	r3, [pc, #212]	@ (800d3f0 <SDMMC_GetCmdResp6+0xe4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a35      	ldr	r2, [pc, #212]	@ (800d3f4 <SDMMC_GetCmdResp6+0xe8>)
 800d320:	fba2 2303 	umull	r2, r3, r2, r3
 800d324:	0a5b      	lsrs	r3, r3, #9
 800d326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d32a:	fb02 f303 	mul.w	r3, r2, r3
 800d32e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	1e5a      	subs	r2, r3, #1
 800d334:	61fa      	str	r2, [r7, #28]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d33a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d33e:	e052      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d344:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0ef      	beq.n	800d330 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1ea      	bne.n	800d330 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d35e:	f003 0304 	and.w	r3, r3, #4
 800d362:	2b00      	cmp	r3, #0
 800d364:	d004      	beq.n	800d370 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2204      	movs	r2, #4
 800d36a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d36c:	2304      	movs	r3, #4
 800d36e:	e03a      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d382:	2301      	movs	r3, #1
 800d384:	e02f      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f7ff fbca 	bl	800cb20 <SDMMC_GetCommandResponse>
 800d38c:	4603      	mov	r3, r0
 800d38e:	461a      	mov	r2, r3
 800d390:	7afb      	ldrb	r3, [r7, #11]
 800d392:	4293      	cmp	r3, r2
 800d394:	d001      	beq.n	800d39a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d396:	2301      	movs	r3, #1
 800d398:	e025      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	22c5      	movs	r2, #197	@ 0xc5
 800d39e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f7ff fbc9 	bl	800cb3a <SDMMC_GetResponse>
 800d3a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	0c1b      	lsrs	r3, r3, #16
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e011      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3d0:	e009      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3e0:	e001      	b.n	800d3e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d3e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20000000 	.word	0x20000000
 800d3f4:	10624dd3 	.word	0x10624dd3

0800d3f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d400:	4b22      	ldr	r3, [pc, #136]	@ (800d48c <SDMMC_GetCmdResp7+0x94>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a22      	ldr	r2, [pc, #136]	@ (800d490 <SDMMC_GetCmdResp7+0x98>)
 800d406:	fba2 2303 	umull	r2, r3, r2, r3
 800d40a:	0a5b      	lsrs	r3, r3, #9
 800d40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d410:	fb02 f303 	mul.w	r3, r2, r3
 800d414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1e5a      	subs	r2, r3, #1
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d102      	bne.n	800d426 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d424:	e02c      	b.n	800d480 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0ef      	beq.n	800d416 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1ea      	bne.n	800d416 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d004      	beq.n	800d456 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2204      	movs	r2, #4
 800d450:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d452:	2304      	movs	r3, #4
 800d454:	e014      	b.n	800d480 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2201      	movs	r2, #1
 800d466:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d468:	2301      	movs	r3, #1
 800d46a:	e009      	b.n	800d480 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2240      	movs	r2, #64	@ 0x40
 800d47c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d47e:	2300      	movs	r3, #0
  
}
 800d480:	4618      	mov	r0, r3
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	20000000 	.word	0x20000000
 800d490:	10624dd3 	.word	0x10624dd3

0800d494 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d49c:	4b11      	ldr	r3, [pc, #68]	@ (800d4e4 <SDMMC_GetCmdError+0x50>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a11      	ldr	r2, [pc, #68]	@ (800d4e8 <SDMMC_GetCmdError+0x54>)
 800d4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4a6:	0a5b      	lsrs	r3, r3, #9
 800d4a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4ac:	fb02 f303 	mul.w	r3, r2, r3
 800d4b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	60fa      	str	r2, [r7, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d102      	bne.n	800d4c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4c0:	e009      	b.n	800d4d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0f1      	beq.n	800d4b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	22c5      	movs	r2, #197	@ 0xc5
 800d4d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	20000000 	.word	0x20000000
 800d4e8:	10624dd3 	.word	0x10624dd3

0800d4ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4ec:	b084      	sub	sp, #16
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b084      	sub	sp, #16
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	f107 001c 	add.w	r0, r7, #28
 800d4fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d4fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d502:	2b01      	cmp	r3, #1
 800d504:	d121      	bne.n	800d54a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d50a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	4b21      	ldr	r3, [pc, #132]	@ (800d59c <USB_CoreInit+0xb0>)
 800d518:	4013      	ands	r3, r2
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d52a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d105      	bne.n	800d53e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f9d4 	bl	800d8ec <USB_CoreReset>
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]
 800d548:	e010      	b.n	800d56c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f9c8 	bl	800d8ec <USB_CoreReset>
 800d55c:	4603      	mov	r3, r0
 800d55e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d56c:	7fbb      	ldrb	r3, [r7, #30]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d10b      	bne.n	800d58a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	f043 0206 	orr.w	r2, r3, #6
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f043 0220 	orr.w	r2, r3, #32
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d596:	b004      	add	sp, #16
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	ffbdffbf 	.word	0xffbdffbf

0800d5a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f043 0201 	orr.w	r2, r3, #1
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	f023 0201 	bic.w	r2, r3, #1
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d600:	78fb      	ldrb	r3, [r7, #3]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d115      	bne.n	800d632 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d612:	200a      	movs	r0, #10
 800d614:	f7f5 fba8 	bl	8002d68 <HAL_Delay>
      ms += 10U;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	330a      	adds	r3, #10
 800d61c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f956 	bl	800d8d0 <USB_GetMode>
 800d624:	4603      	mov	r3, r0
 800d626:	2b01      	cmp	r3, #1
 800d628:	d01e      	beq.n	800d668 <USB_SetCurrentMode+0x84>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2bc7      	cmp	r3, #199	@ 0xc7
 800d62e:	d9f0      	bls.n	800d612 <USB_SetCurrentMode+0x2e>
 800d630:	e01a      	b.n	800d668 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d115      	bne.n	800d664 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d644:	200a      	movs	r0, #10
 800d646:	f7f5 fb8f 	bl	8002d68 <HAL_Delay>
      ms += 10U;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	330a      	adds	r3, #10
 800d64e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f93d 	bl	800d8d0 <USB_GetMode>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <USB_SetCurrentMode+0x84>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2bc7      	cmp	r3, #199	@ 0xc7
 800d660:	d9f0      	bls.n	800d644 <USB_SetCurrentMode+0x60>
 800d662:	e001      	b.n	800d668 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e005      	b.n	800d674 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2bc8      	cmp	r3, #200	@ 0xc8
 800d66c:	d101      	bne.n	800d672 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3301      	adds	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d696:	d901      	bls.n	800d69c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e01b      	b.n	800d6d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	daf2      	bge.n	800d68a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	019b      	lsls	r3, r3, #6
 800d6ac:	f043 0220 	orr.w	r2, r3, #32
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6c0:	d901      	bls.n	800d6c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	e006      	b.n	800d6d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f003 0320 	and.w	r3, r3, #32
 800d6ce:	2b20      	cmp	r3, #32
 800d6d0:	d0f0      	beq.n	800d6b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6f8:	d901      	bls.n	800d6fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	e018      	b.n	800d730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	daf2      	bge.n	800d6ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d706:	2300      	movs	r3, #0
 800d708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2210      	movs	r2, #16
 800d70e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	3301      	adds	r3, #1
 800d714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d71c:	d901      	bls.n	800d722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d71e:	2303      	movs	r3, #3
 800d720:	e006      	b.n	800d730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	f003 0310 	and.w	r3, r3, #16
 800d72a:	2b10      	cmp	r3, #16
 800d72c:	d0f0      	beq.n	800d710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b089      	sub	sp, #36	@ 0x24
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4611      	mov	r1, r2
 800d748:	461a      	mov	r2, r3
 800d74a:	460b      	mov	r3, r1
 800d74c:	71fb      	strb	r3, [r7, #7]
 800d74e:	4613      	mov	r3, r2
 800d750:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d75a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d123      	bne.n	800d7aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d762:	88bb      	ldrh	r3, [r7, #4]
 800d764:	3303      	adds	r3, #3
 800d766:	089b      	lsrs	r3, r3, #2
 800d768:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d76a:	2300      	movs	r3, #0
 800d76c:	61bb      	str	r3, [r7, #24]
 800d76e:	e018      	b.n	800d7a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	031a      	lsls	r2, r3, #12
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	4413      	add	r3, r2
 800d778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d77c:	461a      	mov	r2, r3
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	3301      	adds	r3, #1
 800d788:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	3301      	adds	r3, #1
 800d78e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	3301      	adds	r3, #1
 800d794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	3301      	adds	r3, #1
 800d79a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	61bb      	str	r3, [r7, #24]
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d3e2      	bcc.n	800d770 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3724      	adds	r7, #36	@ 0x24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b08b      	sub	sp, #44	@ 0x2c
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	089b      	lsrs	r3, r3, #2
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	f003 0303 	and.w	r3, r3, #3
 800d7dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d7de:	2300      	movs	r3, #0
 800d7e0:	623b      	str	r3, [r7, #32]
 800d7e2:	e014      	b.n	800d80e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fe:	3301      	adds	r3, #1
 800d800:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d804:	3301      	adds	r3, #1
 800d806:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	3301      	adds	r3, #1
 800d80c:	623b      	str	r3, [r7, #32]
 800d80e:	6a3a      	ldr	r2, [r7, #32]
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	429a      	cmp	r2, r3
 800d814:	d3e6      	bcc.n	800d7e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d816:	8bfb      	ldrh	r3, [r7, #30]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d01e      	beq.n	800d85a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d826:	461a      	mov	r2, r3
 800d828:	f107 0310 	add.w	r3, r7, #16
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	b2db      	uxtb	r3, r3
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	fa22 f303 	lsr.w	r3, r2, r3
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	701a      	strb	r2, [r3, #0]
      i++;
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	3301      	adds	r3, #1
 800d846:	623b      	str	r3, [r7, #32]
      pDest++;
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	3301      	adds	r3, #1
 800d84c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d84e:	8bfb      	ldrh	r3, [r7, #30]
 800d850:	3b01      	subs	r3, #1
 800d852:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d854:	8bfb      	ldrh	r3, [r7, #30]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1ea      	bne.n	800d830 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	372c      	adds	r7, #44	@ 0x2c
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	4013      	ands	r3, r2
 800d87e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d880:	68fb      	ldr	r3, [r7, #12]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d88e:	b480      	push	{r7}
 800d890:	b085      	sub	sp, #20
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	460b      	mov	r3, r1
 800d898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d89e:	78fb      	ldrb	r3, [r7, #3]
 800d8a0:	015a      	lsls	r2, r3, #5
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d8ae:	78fb      	ldrb	r3, [r7, #3]
 800d8b0:	015a      	lsls	r2, r3, #5
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	4013      	ands	r3, r2
 800d8c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8c2:	68bb      	ldr	r3, [r7, #8]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	f003 0301 	and.w	r3, r3, #1
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d904:	d901      	bls.n	800d90a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e01b      	b.n	800d942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	daf2      	bge.n	800d8f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	f043 0201 	orr.w	r2, r3, #1
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3301      	adds	r3, #1
 800d926:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d92e:	d901      	bls.n	800d934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d930:	2303      	movs	r3, #3
 800d932:	e006      	b.n	800d942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d0f0      	beq.n	800d922 <USB_CoreReset+0x36>

  return HAL_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3714      	adds	r7, #20
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
	...

0800d950 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d950:	b084      	sub	sp, #16
 800d952:	b580      	push	{r7, lr}
 800d954:	b086      	sub	sp, #24
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d95e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d970:	461a      	mov	r2, r3
 800d972:	2300      	movs	r3, #0
 800d974:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d119      	bne.n	800d9c2 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d98e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d992:	2b01      	cmp	r3, #1
 800d994:	d10a      	bne.n	800d9ac <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d9a4:	f043 0304 	orr.w	r3, r3, #4
 800d9a8:	6013      	str	r3, [r2, #0]
 800d9aa:	e014      	b.n	800d9d6 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d9ba:	f023 0304 	bic.w	r3, r3, #4
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	e009      	b.n	800d9d6 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d9d0:	f023 0304 	bic.w	r3, r3, #4
 800d9d4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d9d6:	2110      	movs	r1, #16
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7ff fe4f 	bl	800d67c <USB_FlushTxFifo>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff fe79 	bl	800d6e0 <USB_FlushRxFifo>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	e015      	b.n	800da2a <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4413      	add	r3, r2
 800da06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da0a:	461a      	mov	r2, r3
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da10:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	015a      	lsls	r2, r3, #5
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	4413      	add	r3, r2
 800da1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da1e:	461a      	mov	r2, r3
 800da20:	2300      	movs	r3, #0
 800da22:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	3301      	adds	r3, #1
 800da28:	613b      	str	r3, [r7, #16]
 800da2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800da2e:	461a      	mov	r2, r3
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	4293      	cmp	r3, r2
 800da34:	d3e3      	bcc.n	800d9fe <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da42:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a18      	ldr	r2, [pc, #96]	@ (800daa8 <USB_HostInit+0x158>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d10b      	bne.n	800da64 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da52:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a15      	ldr	r2, [pc, #84]	@ (800daac <USB_HostInit+0x15c>)
 800da58:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a14      	ldr	r2, [pc, #80]	@ (800dab0 <USB_HostInit+0x160>)
 800da5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800da62:	e009      	b.n	800da78 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2280      	movs	r2, #128	@ 0x80
 800da68:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a11      	ldr	r2, [pc, #68]	@ (800dab4 <USB_HostInit+0x164>)
 800da6e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a11      	ldr	r2, [pc, #68]	@ (800dab8 <USB_HostInit+0x168>)
 800da74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d105      	bne.n	800da8c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	f043 0210 	orr.w	r2, r3, #16
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	699a      	ldr	r2, [r3, #24]
 800da90:	4b0a      	ldr	r3, [pc, #40]	@ (800dabc <USB_HostInit+0x16c>)
 800da92:	4313      	orrs	r3, r2
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800da98:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daa4:	b004      	add	sp, #16
 800daa6:	4770      	bx	lr
 800daa8:	40040000 	.word	0x40040000
 800daac:	01000200 	.word	0x01000200
 800dab0:	00e00300 	.word	0x00e00300
 800dab4:	00600080 	.word	0x00600080
 800dab8:	004000e0 	.word	0x004000e0
 800dabc:	a3200008 	.word	0xa3200008

0800dac0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dade:	f023 0303 	bic.w	r3, r3, #3
 800dae2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	78fb      	ldrb	r3, [r7, #3]
 800daee:	f003 0303 	and.w	r3, r3, #3
 800daf2:	68f9      	ldr	r1, [r7, #12]
 800daf4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800daf8:	4313      	orrs	r3, r2
 800dafa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d107      	bne.n	800db12 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db08:	461a      	mov	r2, r3
 800db0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800db0e:	6053      	str	r3, [r2, #4]
 800db10:	e00c      	b.n	800db2c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800db12:	78fb      	ldrb	r3, [r7, #3]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d107      	bne.n	800db28 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db1e:	461a      	mov	r2, r3
 800db20:	f241 7370 	movw	r3, #6000	@ 0x1770
 800db24:	6053      	str	r3, [r2, #4]
 800db26:	e001      	b.n	800db2c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800db46:	2300      	movs	r3, #0
 800db48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800db5a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db68:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800db6a:	2064      	movs	r0, #100	@ 0x64
 800db6c:	f7f5 f8fc 	bl	8002d68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db7c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800db7e:	200a      	movs	r0, #10
 800db80:	f7f5 f8f2 	bl	8002d68 <HAL_Delay>

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800db8e:	b480      	push	{r7}
 800db90:	b085      	sub	sp, #20
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
 800db96:	460b      	mov	r3, r1
 800db98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800db9e:	2300      	movs	r3, #0
 800dba0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800dbb2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d109      	bne.n	800dbd2 <USB_DriveVbus+0x44>
 800dbbe:	78fb      	ldrb	r3, [r7, #3]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d106      	bne.n	800dbd2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dbcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dbd0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dbd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbdc:	d109      	bne.n	800dbf2 <USB_DriveVbus+0x64>
 800dbde:	78fb      	ldrb	r3, [r7, #3]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d106      	bne.n	800dbf2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dbec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbf0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	0c5b      	lsrs	r3, r3, #17
 800dc1e:	f003 0303 	and.w	r3, r3, #3
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b085      	sub	sp, #20
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	b29b      	uxth	r3, r3
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	4608      	mov	r0, r1
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4603      	mov	r3, r0
 800dc60:	70fb      	strb	r3, [r7, #3]
 800dc62:	460b      	mov	r3, r1
 800dc64:	70bb      	strb	r3, [r7, #2]
 800dc66:	4613      	mov	r3, r2
 800dc68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dc72:	78fb      	ldrb	r3, [r7, #3]
 800dc74:	015a      	lsls	r2, r3, #5
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	4413      	add	r3, r2
 800dc7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc7e:	461a      	mov	r2, r3
 800dc80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc84:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dc86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	d87c      	bhi.n	800dd88 <USB_HC_Init+0x138>
 800dc8e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc94 <USB_HC_Init+0x44>)
 800dc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc94:	0800dca5 	.word	0x0800dca5
 800dc98:	0800dd4b 	.word	0x0800dd4b
 800dc9c:	0800dca5 	.word	0x0800dca5
 800dca0:	0800dd0d 	.word	0x0800dd0d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dca4:	78fb      	ldrb	r3, [r7, #3]
 800dca6:	015a      	lsls	r2, r3, #5
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	f240 439d 	movw	r3, #1181	@ 0x49d
 800dcb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dcb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da10      	bge.n	800dce2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	015a      	lsls	r2, r3, #5
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	78fa      	ldrb	r2, [r7, #3]
 800dcd0:	0151      	lsls	r1, r2, #5
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	440a      	add	r2, r1
 800dcd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcde:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dce0:	e055      	b.n	800dd8e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a6f      	ldr	r2, [pc, #444]	@ (800dea4 <USB_HC_Init+0x254>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d151      	bne.n	800dd8e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dcea:	78fb      	ldrb	r3, [r7, #3]
 800dcec:	015a      	lsls	r2, r3, #5
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	78fa      	ldrb	r2, [r7, #3]
 800dcfa:	0151      	lsls	r1, r2, #5
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	440a      	add	r2, r1
 800dd00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dd08:	60d3      	str	r3, [r2, #12]
      break;
 800dd0a:	e040      	b.n	800dd8e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	015a      	lsls	r2, r3, #5
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	4413      	add	r3, r2
 800dd14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd18:	461a      	mov	r2, r3
 800dd1a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dd1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dd20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	da34      	bge.n	800dd92 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dd28:	78fb      	ldrb	r3, [r7, #3]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	78fa      	ldrb	r2, [r7, #3]
 800dd38:	0151      	lsls	r1, r2, #5
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	440a      	add	r2, r1
 800dd3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd46:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dd48:	e023      	b.n	800dd92 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd56:	461a      	mov	r2, r3
 800dd58:	f240 2325 	movw	r3, #549	@ 0x225
 800dd5c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dd5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	da17      	bge.n	800dd96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dd66:	78fb      	ldrb	r3, [r7, #3]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	78fa      	ldrb	r2, [r7, #3]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd80:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dd84:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dd86:	e006      	b.n	800dd96 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	77fb      	strb	r3, [r7, #31]
      break;
 800dd8c:	e004      	b.n	800dd98 <USB_HC_Init+0x148>
      break;
 800dd8e:	bf00      	nop
 800dd90:	e002      	b.n	800dd98 <USB_HC_Init+0x148>
      break;
 800dd92:	bf00      	nop
 800dd94:	e000      	b.n	800dd98 <USB_HC_Init+0x148>
      break;
 800dd96:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	015a      	lsls	r2, r3, #5
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	4413      	add	r3, r2
 800dda0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dda4:	461a      	mov	r2, r3
 800dda6:	2300      	movs	r3, #0
 800dda8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	0151      	lsls	r1, r2, #5
 800ddbc:	693a      	ldr	r2, [r7, #16]
 800ddbe:	440a      	add	r2, r1
 800ddc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ddc4:	f043 0302 	orr.w	r3, r3, #2
 800ddc8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ddd0:	699a      	ldr	r2, [r3, #24]
 800ddd2:	78fb      	ldrb	r3, [r7, #3]
 800ddd4:	f003 030f 	and.w	r3, r3, #15
 800ddd8:	2101      	movs	r1, #1
 800ddda:	fa01 f303 	lsl.w	r3, r1, r3
 800ddde:	6939      	ldr	r1, [r7, #16]
 800dde0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dde4:	4313      	orrs	r3, r2
 800dde6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ddf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da03      	bge.n	800de04 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ddfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de00:	61bb      	str	r3, [r7, #24]
 800de02:	e001      	b.n	800de08 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800de04:	2300      	movs	r3, #0
 800de06:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff fef9 	bl	800dc00 <USB_GetHostSpeed>
 800de0e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800de10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de14:	2b02      	cmp	r3, #2
 800de16:	d106      	bne.n	800de26 <USB_HC_Init+0x1d6>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d003      	beq.n	800de26 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800de1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	e001      	b.n	800de2a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800de26:	2300      	movs	r3, #0
 800de28:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de2a:	787b      	ldrb	r3, [r7, #1]
 800de2c:	059b      	lsls	r3, r3, #22
 800de2e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800de32:	78bb      	ldrb	r3, [r7, #2]
 800de34:	02db      	lsls	r3, r3, #11
 800de36:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de3a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800de3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de40:	049b      	lsls	r3, r3, #18
 800de42:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800de46:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800de48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800de4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800de4e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	431a      	orrs	r2, r3
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de58:	78fa      	ldrb	r2, [r7, #3]
 800de5a:	0151      	lsls	r1, r2, #5
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	440a      	add	r2, r1
 800de60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800de64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de68:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800de6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de6e:	2b03      	cmp	r3, #3
 800de70:	d003      	beq.n	800de7a <USB_HC_Init+0x22a>
 800de72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de76:	2b01      	cmp	r3, #1
 800de78:	d10f      	bne.n	800de9a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800de7a:	78fb      	ldrb	r3, [r7, #3]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	4413      	add	r3, r2
 800de82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	78fa      	ldrb	r2, [r7, #3]
 800de8a:	0151      	lsls	r1, r2, #5
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	440a      	add	r2, r1
 800de90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de98:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800de9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3720      	adds	r7, #32
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	40040000 	.word	0x40040000

0800dea8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b08c      	sub	sp, #48	@ 0x30
 800deac:	af02      	add	r7, sp, #8
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4613      	mov	r3, r2
 800deb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	785b      	ldrb	r3, [r3, #1]
 800debe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800dec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dec4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	4a5d      	ldr	r2, [pc, #372]	@ (800e040 <USB_HC_StartXfer+0x198>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d12f      	bne.n	800df2e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800dece:	79fb      	ldrb	r3, [r7, #7]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d11c      	bne.n	800df0e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	7c9b      	ldrb	r3, [r3, #18]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d003      	beq.n	800dee4 <USB_HC_StartXfer+0x3c>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	7c9b      	ldrb	r3, [r3, #18]
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	d124      	bne.n	800df2e <USB_HC_StartXfer+0x86>
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	799b      	ldrb	r3, [r3, #6]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d120      	bne.n	800df2e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	4413      	add	r3, r2
 800def4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	0151      	lsls	r1, r2, #5
 800defe:	6a3a      	ldr	r2, [r7, #32]
 800df00:	440a      	add	r2, r1
 800df02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df0a:	60d3      	str	r3, [r2, #12]
 800df0c:	e00f      	b.n	800df2e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	791b      	ldrb	r3, [r3, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10b      	bne.n	800df2e <USB_HC_StartXfer+0x86>
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	795b      	ldrb	r3, [r3, #5]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d107      	bne.n	800df2e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	785b      	ldrb	r3, [r3, #1]
 800df22:	4619      	mov	r1, r3
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 fb6b 	bl	800e600 <USB_DoPing>
        return HAL_OK;
 800df2a:	2300      	movs	r3, #0
 800df2c:	e232      	b.n	800e394 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	799b      	ldrb	r3, [r3, #6]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d158      	bne.n	800dfe8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800df36:	2301      	movs	r3, #1
 800df38:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	78db      	ldrb	r3, [r3, #3]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d007      	beq.n	800df52 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	8a92      	ldrh	r2, [r2, #20]
 800df48:	fb03 f202 	mul.w	r2, r3, r2
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	61da      	str	r2, [r3, #28]
 800df50:	e07c      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	7c9b      	ldrb	r3, [r3, #18]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d130      	bne.n	800dfbc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	2bbc      	cmp	r3, #188	@ 0xbc
 800df60:	d918      	bls.n	800df94 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	8a9b      	ldrh	r3, [r3, #20]
 800df66:	461a      	mov	r2, r3
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	69da      	ldr	r2, [r3, #28]
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d003      	beq.n	800df84 <USB_HC_StartXfer+0xdc>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	2b02      	cmp	r3, #2
 800df82:	d103      	bne.n	800df8c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2202      	movs	r2, #2
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	e05f      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2201      	movs	r2, #1
 800df90:	60da      	str	r2, [r3, #12]
 800df92:	e05b      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6a1a      	ldr	r2, [r3, #32]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d007      	beq.n	800dfb4 <USB_HC_StartXfer+0x10c>
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d003      	beq.n	800dfb4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	2204      	movs	r2, #4
 800dfb0:	60da      	str	r2, [r3, #12]
 800dfb2:	e04b      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2203      	movs	r2, #3
 800dfb8:	60da      	str	r2, [r3, #12]
 800dfba:	e047      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800dfbc:	79fb      	ldrb	r3, [r7, #7]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d10d      	bne.n	800dfde <USB_HC_StartXfer+0x136>
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	8a92      	ldrh	r2, [r2, #20]
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d907      	bls.n	800dfde <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	8a92      	ldrh	r2, [r2, #20]
 800dfd4:	fb03 f202 	mul.w	r2, r3, r2
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	61da      	str	r2, [r3, #28]
 800dfdc:	e036      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	6a1a      	ldr	r2, [r3, #32]
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	61da      	str	r2, [r3, #28]
 800dfe6:	e031      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	6a1b      	ldr	r3, [r3, #32]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d018      	beq.n	800e022 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	8a92      	ldrh	r2, [r2, #20]
 800dff8:	4413      	add	r3, r2
 800dffa:	3b01      	subs	r3, #1
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	8a92      	ldrh	r2, [r2, #20]
 800e000:	fbb3 f3f2 	udiv	r3, r3, r2
 800e004:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e006:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e008:	8b7b      	ldrh	r3, [r7, #26]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d90b      	bls.n	800e026 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e00e:	8b7b      	ldrh	r3, [r7, #26]
 800e010:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e012:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	8a92      	ldrh	r2, [r2, #20]
 800e018:	fb03 f202 	mul.w	r2, r3, r2
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	61da      	str	r2, [r3, #28]
 800e020:	e001      	b.n	800e026 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e022:	2301      	movs	r3, #1
 800e024:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	78db      	ldrb	r3, [r3, #3]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00a      	beq.n	800e044 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e02e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	8a92      	ldrh	r2, [r2, #20]
 800e034:	fb03 f202 	mul.w	r2, r3, r2
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	61da      	str	r2, [r3, #28]
 800e03c:	e006      	b.n	800e04c <USB_HC_StartXfer+0x1a4>
 800e03e:	bf00      	nop
 800e040:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	6a1a      	ldr	r2, [r3, #32]
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	69db      	ldr	r3, [r3, #28]
 800e050:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e056:	04d9      	lsls	r1, r3, #19
 800e058:	4ba3      	ldr	r3, [pc, #652]	@ (800e2e8 <USB_HC_StartXfer+0x440>)
 800e05a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e05c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	7d9b      	ldrb	r3, [r3, #22]
 800e062:	075b      	lsls	r3, r3, #29
 800e064:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e068:	69f9      	ldr	r1, [r7, #28]
 800e06a:	0148      	lsls	r0, r1, #5
 800e06c:	6a39      	ldr	r1, [r7, #32]
 800e06e:	4401      	add	r1, r0
 800e070:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e074:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e076:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d009      	beq.n	800e092 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	6999      	ldr	r1, [r3, #24]
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e08e:	460a      	mov	r2, r1
 800e090:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bf0c      	ite	eq
 800e0a2:	2301      	moveq	r3, #1
 800e0a4:	2300      	movne	r3, #0
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69fa      	ldr	r2, [r7, #28]
 800e0ba:	0151      	lsls	r1, r2, #5
 800e0bc:	6a3a      	ldr	r2, [r7, #32]
 800e0be:	440a      	add	r2, r1
 800e0c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e0c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	7e7b      	ldrb	r3, [r7, #25]
 800e0da:	075b      	lsls	r3, r3, #29
 800e0dc:	69f9      	ldr	r1, [r7, #28]
 800e0de:	0148      	lsls	r0, r1, #5
 800e0e0:	6a39      	ldr	r1, [r7, #32]
 800e0e2:	4401      	add	r1, r0
 800e0e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	799b      	ldrb	r3, [r3, #6]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	f040 80c3 	bne.w	800e27c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	7c5b      	ldrb	r3, [r3, #17]
 800e0fa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e100:	4313      	orrs	r3, r2
 800e102:	69fa      	ldr	r2, [r7, #28]
 800e104:	0151      	lsls	r1, r2, #5
 800e106:	6a3a      	ldr	r2, [r7, #32]
 800e108:	440a      	add	r2, r1
 800e10a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e10e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e112:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	015a      	lsls	r2, r3, #5
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	4413      	add	r3, r2
 800e11c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	69fa      	ldr	r2, [r7, #28]
 800e124:	0151      	lsls	r1, r2, #5
 800e126:	6a3a      	ldr	r2, [r7, #32]
 800e128:	440a      	add	r2, r1
 800e12a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e12e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e132:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	79db      	ldrb	r3, [r3, #7]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d123      	bne.n	800e184 <USB_HC_StartXfer+0x2dc>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	78db      	ldrb	r3, [r3, #3]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d11f      	bne.n	800e184 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	015a      	lsls	r2, r3, #5
 800e148:	6a3b      	ldr	r3, [r7, #32]
 800e14a:	4413      	add	r3, r2
 800e14c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	0151      	lsls	r1, r2, #5
 800e156:	6a3a      	ldr	r2, [r7, #32]
 800e158:	440a      	add	r2, r1
 800e15a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e15e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e162:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	69fa      	ldr	r2, [r7, #28]
 800e174:	0151      	lsls	r1, r2, #5
 800e176:	6a3a      	ldr	r2, [r7, #32]
 800e178:	440a      	add	r2, r1
 800e17a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e182:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	7c9b      	ldrb	r3, [r3, #18]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d003      	beq.n	800e194 <USB_HC_StartXfer+0x2ec>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	7c9b      	ldrb	r3, [r3, #18]
 800e190:	2b03      	cmp	r3, #3
 800e192:	d117      	bne.n	800e1c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d113      	bne.n	800e1c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	78db      	ldrb	r3, [r3, #3]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d10f      	bne.n	800e1c4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	69fa      	ldr	r2, [r7, #28]
 800e1b4:	0151      	lsls	r1, r2, #5
 800e1b6:	6a3a      	ldr	r2, [r7, #32]
 800e1b8:	440a      	add	r2, r1
 800e1ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1c2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	7c9b      	ldrb	r3, [r3, #18]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d162      	bne.n	800e292 <USB_HC_StartXfer+0x3ea>
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	78db      	ldrb	r3, [r3, #3]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d15e      	bne.n	800e292 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	2b03      	cmp	r3, #3
 800e1dc:	d858      	bhi.n	800e290 <USB_HC_StartXfer+0x3e8>
 800e1de:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e4 <USB_HC_StartXfer+0x33c>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e1f5 	.word	0x0800e1f5
 800e1e8:	0800e217 	.word	0x0800e217
 800e1ec:	0800e239 	.word	0x0800e239
 800e1f0:	0800e25b 	.word	0x0800e25b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	69fa      	ldr	r2, [r7, #28]
 800e204:	0151      	lsls	r1, r2, #5
 800e206:	6a3a      	ldr	r2, [r7, #32]
 800e208:	440a      	add	r2, r1
 800e20a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e20e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e212:	6053      	str	r3, [r2, #4]
          break;
 800e214:	e03d      	b.n	800e292 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	69fa      	ldr	r2, [r7, #28]
 800e226:	0151      	lsls	r1, r2, #5
 800e228:	6a3a      	ldr	r2, [r7, #32]
 800e22a:	440a      	add	r2, r1
 800e22c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e230:	f043 030e 	orr.w	r3, r3, #14
 800e234:	6053      	str	r3, [r2, #4]
          break;
 800e236:	e02c      	b.n	800e292 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	69fa      	ldr	r2, [r7, #28]
 800e248:	0151      	lsls	r1, r2, #5
 800e24a:	6a3a      	ldr	r2, [r7, #32]
 800e24c:	440a      	add	r2, r1
 800e24e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e256:	6053      	str	r3, [r2, #4]
          break;
 800e258:	e01b      	b.n	800e292 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	4413      	add	r3, r2
 800e262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	69fa      	ldr	r2, [r7, #28]
 800e26a:	0151      	lsls	r1, r2, #5
 800e26c:	6a3a      	ldr	r2, [r7, #32]
 800e26e:	440a      	add	r2, r1
 800e270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e278:	6053      	str	r3, [r2, #4]
          break;
 800e27a:	e00a      	b.n	800e292 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	4413      	add	r3, r2
 800e284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e288:	461a      	mov	r2, r3
 800e28a:	2300      	movs	r3, #0
 800e28c:	6053      	str	r3, [r2, #4]
 800e28e:	e000      	b.n	800e292 <USB_HC_StartXfer+0x3ea>
          break;
 800e290:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	015a      	lsls	r2, r3, #5
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	4413      	add	r3, r2
 800e29a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e2a8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	78db      	ldrb	r3, [r3, #3]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	e003      	b.n	800e2c4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e2c2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e2ca:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2d8:	461a      	mov	r2, r3
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	e055      	b.n	800e394 <USB_HC_StartXfer+0x4ec>
 800e2e8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	78db      	ldrb	r3, [r3, #3]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d14e      	bne.n	800e392 <USB_HC_StartXfer+0x4ea>
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	6a1b      	ldr	r3, [r3, #32]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d04a      	beq.n	800e392 <USB_HC_StartXfer+0x4ea>
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	79db      	ldrb	r3, [r3, #7]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d146      	bne.n	800e392 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	7c9b      	ldrb	r3, [r3, #18]
 800e308:	2b03      	cmp	r3, #3
 800e30a:	d831      	bhi.n	800e370 <USB_HC_StartXfer+0x4c8>
 800e30c:	a201      	add	r2, pc, #4	@ (adr r2, 800e314 <USB_HC_StartXfer+0x46c>)
 800e30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e312:	bf00      	nop
 800e314:	0800e325 	.word	0x0800e325
 800e318:	0800e349 	.word	0x0800e349
 800e31c:	0800e325 	.word	0x0800e325
 800e320:	0800e349 	.word	0x0800e349
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	6a1b      	ldr	r3, [r3, #32]
 800e328:	3303      	adds	r3, #3
 800e32a:	089b      	lsrs	r3, r3, #2
 800e32c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e32e:	8afa      	ldrh	r2, [r7, #22]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e334:	b29b      	uxth	r3, r3
 800e336:	429a      	cmp	r2, r3
 800e338:	d91c      	bls.n	800e374 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	f043 0220 	orr.w	r2, r3, #32
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	619a      	str	r2, [r3, #24]
        }
        break;
 800e346:	e015      	b.n	800e374 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	6a1b      	ldr	r3, [r3, #32]
 800e34c:	3303      	adds	r3, #3
 800e34e:	089b      	lsrs	r3, r3, #2
 800e350:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e352:	8afa      	ldrh	r2, [r7, #22]
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	429a      	cmp	r2, r3
 800e360:	d90a      	bls.n	800e378 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	619a      	str	r2, [r3, #24]
        }
        break;
 800e36e:	e003      	b.n	800e378 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e370:	bf00      	nop
 800e372:	e002      	b.n	800e37a <USB_HC_StartXfer+0x4d2>
        break;
 800e374:	bf00      	nop
 800e376:	e000      	b.n	800e37a <USB_HC_StartXfer+0x4d2>
        break;
 800e378:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	6999      	ldr	r1, [r3, #24]
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	785a      	ldrb	r2, [r3, #1]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	b29b      	uxth	r3, r3
 800e388:	2000      	movs	r0, #0
 800e38a:	9000      	str	r0, [sp, #0]
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7ff f9d5 	bl	800d73c <USB_WritePacket>
  }

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3728      	adds	r7, #40	@ 0x28
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	b29b      	uxth	r3, r3
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b089      	sub	sp, #36	@ 0x24
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	0c9b      	lsrs	r3, r3, #18
 800e3e6:	f003 0303 	and.w	r3, r3, #3
 800e3ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	0fdb      	lsrs	r3, r3, #31
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	015a      	lsls	r2, r3, #5
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	4413      	add	r3, r2
 800e40a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	0fdb      	lsrs	r3, r3, #31
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	f003 0320 	and.w	r3, r3, #32
 800e420:	2b20      	cmp	r3, #32
 800e422:	d10d      	bne.n	800e440 <USB_HC_Halt+0x82>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10a      	bne.n	800e440 <USB_HC_Halt+0x82>
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d002      	beq.n	800e43c <USB_HC_Halt+0x7e>
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d101      	bne.n	800e440 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	e0d8      	b.n	800e5f2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <USB_HC_Halt+0x8e>
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d173      	bne.n	800e534 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	015a      	lsls	r2, r3, #5
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	4413      	add	r3, r2
 800e454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	69ba      	ldr	r2, [r7, #24]
 800e45c:	0151      	lsls	r1, r2, #5
 800e45e:	69fa      	ldr	r2, [r7, #28]
 800e460:	440a      	add	r2, r1
 800e462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e466:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e46a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f003 0320 	and.w	r3, r3, #32
 800e474:	2b00      	cmp	r3, #0
 800e476:	d14a      	bne.n	800e50e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d133      	bne.n	800e4ec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	0151      	lsls	r1, r2, #5
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	440a      	add	r2, r1
 800e49a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e49e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	69ba      	ldr	r2, [r7, #24]
 800e4b4:	0151      	lsls	r1, r2, #5
 800e4b6:	69fa      	ldr	r2, [r7, #28]
 800e4b8:	440a      	add	r2, r1
 800e4ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e4d0:	d82e      	bhi.n	800e530 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	015a      	lsls	r2, r3, #5
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	4413      	add	r3, r2
 800e4da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4e8:	d0ec      	beq.n	800e4c4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4ea:	e081      	b.n	800e5f0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	0151      	lsls	r1, r2, #5
 800e4fe:	69fa      	ldr	r2, [r7, #28]
 800e500:	440a      	add	r2, r1
 800e502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e506:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e50a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e50c:	e070      	b.n	800e5f0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	4413      	add	r3, r2
 800e516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	0151      	lsls	r1, r2, #5
 800e520:	69fa      	ldr	r2, [r7, #28]
 800e522:	440a      	add	r2, r1
 800e524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e528:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e52c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e52e:	e05f      	b.n	800e5f0 <USB_HC_Halt+0x232>
            break;
 800e530:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e532:	e05d      	b.n	800e5f0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	69ba      	ldr	r2, [r7, #24]
 800e544:	0151      	lsls	r1, r2, #5
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	440a      	add	r2, r1
 800e54a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e54e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e552:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d133      	bne.n	800e5cc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	015a      	lsls	r2, r3, #5
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	4413      	add	r3, r2
 800e56c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	69ba      	ldr	r2, [r7, #24]
 800e574:	0151      	lsls	r1, r2, #5
 800e576:	69fa      	ldr	r2, [r7, #28]
 800e578:	440a      	add	r2, r1
 800e57a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e57e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e582:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	69ba      	ldr	r2, [r7, #24]
 800e594:	0151      	lsls	r1, r2, #5
 800e596:	69fa      	ldr	r2, [r7, #28]
 800e598:	440a      	add	r2, r1
 800e59a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e59e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e5b0:	d81d      	bhi.n	800e5ee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5c8:	d0ec      	beq.n	800e5a4 <USB_HC_Halt+0x1e6>
 800e5ca:	e011      	b.n	800e5f0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	0151      	lsls	r1, r2, #5
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	440a      	add	r2, r1
 800e5e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	e000      	b.n	800e5f0 <USB_HC_Halt+0x232>
          break;
 800e5ee:	bf00      	nop
    }
  }

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3724      	adds	r7, #36	@ 0x24
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
	...

0800e600 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e600:	b480      	push	{r7}
 800e602:	b087      	sub	sp, #28
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e614:	2301      	movs	r3, #1
 800e616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	04da      	lsls	r2, r3, #19
 800e61c:	4b15      	ldr	r3, [pc, #84]	@ (800e674 <USB_DoPing+0x74>)
 800e61e:	4013      	ands	r3, r2
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	0151      	lsls	r1, r2, #5
 800e624:	697a      	ldr	r2, [r7, #20]
 800e626:	440a      	add	r2, r1
 800e628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e62c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e630:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	015a      	lsls	r2, r3, #5
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	4413      	add	r3, r2
 800e63a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e648:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e650:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	015a      	lsls	r2, r3, #5
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	4413      	add	r3, r2
 800e65a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e65e:	461a      	mov	r2, r3
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	371c      	adds	r7, #28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	1ff80000 	.word	0x1ff80000

0800e678 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e688:	2300      	movs	r3, #0
 800e68a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fe ff98 	bl	800d5c2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e692:	2110      	movs	r1, #16
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fe fff1 	bl	800d67c <USB_FlushTxFifo>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff f81b 	bl	800d6e0 <USB_FlushRxFifo>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	61bb      	str	r3, [r7, #24]
 800e6b8:	e01f      	b.n	800e6fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e6e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	015a      	lsls	r2, r3, #5
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	2b0f      	cmp	r3, #15
 800e6fe:	d9dc      	bls.n	800e6ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e700:	2300      	movs	r3, #0
 800e702:	61bb      	str	r3, [r7, #24]
 800e704:	e034      	b.n	800e770 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e71c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e724:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e72c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	4413      	add	r3, r2
 800e736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e73a:	461a      	mov	r2, r3
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e74c:	d80c      	bhi.n	800e768 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	015a      	lsls	r2, r3, #5
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	4413      	add	r3, r2
 800e756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e764:	d0ec      	beq.n	800e740 <USB_StopHost+0xc8>
 800e766:	e000      	b.n	800e76a <USB_StopHost+0xf2>
        break;
 800e768:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	3301      	adds	r3, #1
 800e76e:	61bb      	str	r3, [r7, #24]
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	2b0f      	cmp	r3, #15
 800e774:	d9c7      	bls.n	800e706 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e77c:	461a      	mov	r2, r3
 800e77e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e782:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e78a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7fe ff07 	bl	800d5a0 <USB_EnableGlobalInt>

  return ret;
 800e792:	7ffb      	ldrb	r3, [r7, #31]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3720      	adds	r7, #32
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e7a0:	4904      	ldr	r1, [pc, #16]	@ (800e7b4 <MX_FATFS_Init+0x18>)
 800e7a2:	4805      	ldr	r0, [pc, #20]	@ (800e7b8 <MX_FATFS_Init+0x1c>)
 800e7a4:	f002 fd74 	bl	8011290 <FATFS_LinkDriver>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4b03      	ldr	r3, [pc, #12]	@ (800e7bc <MX_FATFS_Init+0x20>)
 800e7ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e7b0:	bf00      	nop
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20000d24 	.word	0x20000d24
 800e7b8:	08014290 	.word	0x08014290
 800e7bc:	20000d20 	.word	0x20000d20

0800e7c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e7ca:	f000 f87b 	bl	800e8c4 <BSP_SD_IsDetected>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d001      	beq.n	800e7d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	e012      	b.n	800e7fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e7d8:	480b      	ldr	r0, [pc, #44]	@ (800e808 <BSP_SD_Init+0x48>)
 800e7da:	f7fa fe79 	bl	80094d0 <HAL_SD_Init>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d109      	bne.n	800e7fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e7e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e7ec:	4806      	ldr	r0, [pc, #24]	@ (800e808 <BSP_SD_Init+0x48>)
 800e7ee:	f7fb fac9 	bl	8009d84 <HAL_SD_ConfigWideBusOperation>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20000924 	.word	0x20000924

0800e80c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e818:	2300      	movs	r3, #0
 800e81a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	68f9      	ldr	r1, [r7, #12]
 800e822:	4806      	ldr	r0, [pc, #24]	@ (800e83c <BSP_SD_ReadBlocks_DMA+0x30>)
 800e824:	f7fa ff0c 	bl	8009640 <HAL_SD_ReadBlocks_DMA>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e82e:	2301      	movs	r3, #1
 800e830:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	20000924 	.word	0x20000924

0800e840 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	68f9      	ldr	r1, [r7, #12]
 800e856:	4806      	ldr	r0, [pc, #24]	@ (800e870 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e858:	f7fa ffd4 	bl	8009804 <HAL_SD_WriteBlocks_DMA>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e866:	7dfb      	ldrb	r3, [r7, #23]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20000924 	.word	0x20000924

0800e874 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e878:	4805      	ldr	r0, [pc, #20]	@ (800e890 <BSP_SD_GetCardState+0x1c>)
 800e87a:	f7fb fb1d 	bl	8009eb8 <HAL_SD_GetCardState>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b04      	cmp	r3, #4
 800e882:	bf14      	ite	ne
 800e884:	2301      	movne	r3, #1
 800e886:	2300      	moveq	r3, #0
 800e888:	b2db      	uxtb	r3, r3
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000924 	.word	0x20000924

0800e894 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e89c:	6879      	ldr	r1, [r7, #4]
 800e89e:	4803      	ldr	r0, [pc, #12]	@ (800e8ac <BSP_SD_GetCardInfo+0x18>)
 800e8a0:	f7fb fa44 	bl	8009d2c <HAL_SD_GetCardInfo>
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	20000924 	.word	0x20000924

0800e8b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e8b8:	f000 f9b2 	bl	800ec20 <BSP_SD_ReadCpltCallback>
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e8ce:	f000 f80b 	bl	800e8e8 <BSP_PlatformIsDetected>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d101      	bne.n	800e8dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	b2db      	uxtb	r3, r3
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e8f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e8f6:	4806      	ldr	r0, [pc, #24]	@ (800e910 <BSP_PlatformIsDetected+0x28>)
 800e8f8:	f7f5 ff4e 	bl	8004798 <HAL_GPIO_ReadPin>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e902:	2300      	movs	r3, #0
 800e904:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e906:	79fb      	ldrb	r3, [r7, #7]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	40020800 	.word	0x40020800

0800e914 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e91c:	f002 fd04 	bl	8011328 <osKernelSysTick>
 800e920:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e922:	e006      	b.n	800e932 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e924:	f7ff ffa6 	bl	800e874 <BSP_SD_GetCardState>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	e009      	b.n	800e946 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e932:	f002 fcf9 	bl	8011328 <osKernelSysTick>
 800e936:	4602      	mov	r2, r0
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d8f0      	bhi.n	800e924 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
	...

0800e950 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	4603      	mov	r3, r0
 800e958:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e95a:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <SD_CheckStatus+0x38>)
 800e95c:	2201      	movs	r2, #1
 800e95e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e960:	f7ff ff88 	bl	800e874 <BSP_SD_GetCardState>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d107      	bne.n	800e97a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e96a:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <SD_CheckStatus+0x38>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	f023 0301 	bic.w	r3, r3, #1
 800e974:	b2da      	uxtb	r2, r3
 800e976:	4b04      	ldr	r3, [pc, #16]	@ (800e988 <SD_CheckStatus+0x38>)
 800e978:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e97a:	4b03      	ldr	r3, [pc, #12]	@ (800e988 <SD_CheckStatus+0x38>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	b2db      	uxtb	r3, r3
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	20000009 	.word	0x20000009

0800e98c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b087      	sub	sp, #28
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e996:	4b20      	ldr	r3, [pc, #128]	@ (800ea18 <SD_initialize+0x8c>)
 800e998:	2201      	movs	r2, #1
 800e99a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e99c:	f002 fcb8 	bl	8011310 <osKernelRunning>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d030      	beq.n	800ea08 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e9a6:	f7ff ff0b 	bl	800e7c0 <BSP_SD_Init>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d107      	bne.n	800e9c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e9b0:	79fb      	ldrb	r3, [r7, #7]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff ffcc 	bl	800e950 <SD_CheckStatus>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4b16      	ldr	r3, [pc, #88]	@ (800ea18 <SD_initialize+0x8c>)
 800e9be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e9c0:	4b15      	ldr	r3, [pc, #84]	@ (800ea18 <SD_initialize+0x8c>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d01e      	beq.n	800ea08 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e9ca:	4b14      	ldr	r3, [pc, #80]	@ (800ea1c <SD_initialize+0x90>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10e      	bne.n	800e9f0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ea20 <SD_initialize+0x94>)
 800e9d4:	f107 0408 	add.w	r4, r7, #8
 800e9d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e9de:	f107 0308 	add.w	r3, r7, #8
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f002 fd0f 	bl	8011408 <osMessageCreate>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	4a0b      	ldr	r2, [pc, #44]	@ (800ea1c <SD_initialize+0x90>)
 800e9ee:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ea1c <SD_initialize+0x90>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d107      	bne.n	800ea08 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ea18 <SD_initialize+0x8c>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	f043 0301 	orr.w	r3, r3, #1
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	4b04      	ldr	r3, [pc, #16]	@ (800ea18 <SD_initialize+0x8c>)
 800ea06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ea08:	4b03      	ldr	r3, [pc, #12]	@ (800ea18 <SD_initialize+0x8c>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	b2db      	uxtb	r3, r3
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	371c      	adds	r7, #28
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd90      	pop	{r4, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000009 	.word	0x20000009
 800ea1c:	20000d28 	.word	0x20000d28
 800ea20:	08014224 	.word	0x08014224

0800ea24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff ff8d 	bl	800e950 <SD_CheckStatus>
 800ea36:	4603      	mov	r3, r0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	@ 0x28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60b9      	str	r1, [r7, #8]
 800ea48:	607a      	str	r2, [r7, #4]
 800ea4a:	603b      	str	r3, [r7, #0]
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ea56:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ea5a:	f7ff ff5b 	bl	800e914 <SD_CheckStatusWithTimeout>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da02      	bge.n	800ea6a <SD_read+0x2a>
  {
    return res;
 800ea64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea68:	e032      	b.n	800ead0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	6879      	ldr	r1, [r7, #4]
 800ea6e:	68b8      	ldr	r0, [r7, #8]
 800ea70:	f7ff fecc 	bl	800e80c <BSP_SD_ReadBlocks_DMA>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800ea7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d124      	bne.n	800eacc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ea82:	4b15      	ldr	r3, [pc, #84]	@ (800ead8 <SD_read+0x98>)
 800ea84:	6819      	ldr	r1, [r3, #0]
 800ea86:	f107 0314 	add.w	r3, r7, #20
 800ea8a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f002 fd22 	bl	80114d8 <osMessageGet>

    if (event.status == osEventMessage)
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b10      	cmp	r3, #16
 800ea98:	d118      	bne.n	800eacc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d115      	bne.n	800eacc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800eaa0:	f002 fc42 	bl	8011328 <osKernelSysTick>
 800eaa4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800eaa6:	e008      	b.n	800eaba <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eaa8:	f7ff fee4 	bl	800e874 <BSP_SD_GetCardState>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d103      	bne.n	800eaba <SD_read+0x7a>
              {
                res = RES_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800eab8:	e008      	b.n	800eacc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800eaba:	f002 fc35 	bl	8011328 <osKernelSysTick>
 800eabe:	4602      	mov	r2, r0
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d9ed      	bls.n	800eaa8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800eacc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3728      	adds	r7, #40	@ 0x28
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	20000d28 	.word	0x20000d28

0800eadc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b08a      	sub	sp, #40	@ 0x28
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60b9      	str	r1, [r7, #8]
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	603b      	str	r3, [r7, #0]
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eaf2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800eaf6:	f7ff ff0d 	bl	800e914 <SD_CheckStatusWithTimeout>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da02      	bge.n	800eb06 <SD_write+0x2a>
  {
    return res;
 800eb00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb04:	e02e      	b.n	800eb64 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	68b8      	ldr	r0, [r7, #8]
 800eb0c:	f7ff fe98 	bl	800e840 <BSP_SD_WriteBlocks_DMA>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d124      	bne.n	800eb60 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800eb16:	4b15      	ldr	r3, [pc, #84]	@ (800eb6c <SD_write+0x90>)
 800eb18:	6819      	ldr	r1, [r3, #0]
 800eb1a:	f107 0314 	add.w	r3, r7, #20
 800eb1e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800eb22:	4618      	mov	r0, r3
 800eb24:	f002 fcd8 	bl	80114d8 <osMessageGet>

    if (event.status == osEventMessage)
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	2b10      	cmp	r3, #16
 800eb2c:	d118      	bne.n	800eb60 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	2b02      	cmp	r3, #2
 800eb32:	d115      	bne.n	800eb60 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800eb34:	f002 fbf8 	bl	8011328 <osKernelSysTick>
 800eb38:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eb3a:	e008      	b.n	800eb4e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb3c:	f7ff fe9a 	bl	800e874 <BSP_SD_GetCardState>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d103      	bne.n	800eb4e <SD_write+0x72>
          {
            res = RES_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eb4c:	e008      	b.n	800eb60 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eb4e:	f002 fbeb 	bl	8011328 <osKernelSysTick>
 800eb52:	4602      	mov	r2, r0
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	f247 522f 	movw	r2, #29999	@ 0x752f
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d9ed      	bls.n	800eb3c <SD_write+0x60>
    }

  }
#endif

  return res;
 800eb60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3728      	adds	r7, #40	@ 0x28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20000d28 	.word	0x20000d28

0800eb70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b08c      	sub	sp, #48	@ 0x30
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	603a      	str	r2, [r7, #0]
 800eb7a:	71fb      	strb	r3, [r7, #7]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eb86:	4b25      	ldr	r3, [pc, #148]	@ (800ec1c <SD_ioctl+0xac>)
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <SD_ioctl+0x28>
 800eb94:	2303      	movs	r3, #3
 800eb96:	e03c      	b.n	800ec12 <SD_ioctl+0xa2>

  switch (cmd)
 800eb98:	79bb      	ldrb	r3, [r7, #6]
 800eb9a:	2b03      	cmp	r3, #3
 800eb9c:	d834      	bhi.n	800ec08 <SD_ioctl+0x98>
 800eb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800eba4 <SD_ioctl+0x34>)
 800eba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba4:	0800ebb5 	.word	0x0800ebb5
 800eba8:	0800ebbd 	.word	0x0800ebbd
 800ebac:	0800ebd5 	.word	0x0800ebd5
 800ebb0:	0800ebef 	.word	0x0800ebef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ebba:	e028      	b.n	800ec0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ebbc:	f107 030c 	add.w	r3, r7, #12
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff fe67 	bl	800e894 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ebc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ebd2:	e01c      	b.n	800ec0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ebd4:	f107 030c 	add.w	r3, r7, #12
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff fe5b 	bl	800e894 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ebec:	e00f      	b.n	800ec0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ebee:	f107 030c 	add.w	r3, r7, #12
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff fe4e 	bl	800e894 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ebf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfa:	0a5a      	lsrs	r2, r3, #9
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ec06:	e002      	b.n	800ec0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ec08:	2304      	movs	r3, #4
 800ec0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ec0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3730      	adds	r7, #48	@ 0x30
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20000009 	.word	0x20000009

0800ec20 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ec24:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <BSP_SD_ReadCpltCallback+0x18>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f002 fc13 	bl	8011458 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ec32:	bf00      	nop
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	20000d28 	.word	0x20000d28

0800ec3c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ec3c:	b590      	push	{r4, r7, lr}
 800ec3e:	b089      	sub	sp, #36	@ 0x24
 800ec40:	af04      	add	r7, sp, #16
 800ec42:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ec44:	2301      	movs	r3, #1
 800ec46:	2202      	movs	r2, #2
 800ec48:	2102      	movs	r1, #2
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 fcd7 	bl	800f5fe <USBH_FindInterface>
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	2bff      	cmp	r3, #255	@ 0xff
 800ec58:	d002      	beq.n	800ec60 <USBH_CDC_InterfaceInit+0x24>
 800ec5a:	7bfb      	ldrb	r3, [r7, #15]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d901      	bls.n	800ec64 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ec60:	2302      	movs	r3, #2
 800ec62:	e13d      	b.n	800eee0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	4619      	mov	r1, r3
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fcac 	bl	800f5c6 <USBH_SelectInterface>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ec72:	7bbb      	ldrb	r3, [r7, #14]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	e131      	b.n	800eee0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ec82:	2050      	movs	r0, #80	@ 0x50
 800ec84:	f005 f94e 	bl	8013f24 <malloc>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ec92:	69db      	ldr	r3, [r3, #28]
 800ec94:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	e11f      	b.n	800eee0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800eca0:	2250      	movs	r2, #80	@ 0x50
 800eca2:	2100      	movs	r1, #0
 800eca4:	68b8      	ldr	r0, [r7, #8]
 800eca6:	f005 f9fb 	bl	80140a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	211a      	movs	r1, #26
 800ecb0:	fb01 f303 	mul.w	r3, r1, r3
 800ecb4:	4413      	add	r3, r2
 800ecb6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	b25b      	sxtb	r3, r3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	da15      	bge.n	800ecee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ecc2:	7bfb      	ldrb	r3, [r7, #15]
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	211a      	movs	r1, #26
 800ecc8:	fb01 f303 	mul.w	r3, r1, r3
 800eccc:	4413      	add	r3, r2
 800ecce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ecd2:	781a      	ldrb	r2, [r3, #0]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	211a      	movs	r1, #26
 800ecde:	fb01 f303 	mul.w	r3, r1, r3
 800ece2:	4413      	add	r3, r2
 800ece4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ece8:	881a      	ldrh	r2, [r3, #0]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	785b      	ldrb	r3, [r3, #1]
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f002 fa1c 	bl	8011132 <USBH_AllocPipe>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	7819      	ldrb	r1, [r3, #0]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	7858      	ldrb	r0, [r3, #1]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	8952      	ldrh	r2, [r2, #10]
 800ed1a:	9202      	str	r2, [sp, #8]
 800ed1c:	2203      	movs	r2, #3
 800ed1e:	9201      	str	r2, [sp, #4]
 800ed20:	9300      	str	r3, [sp, #0]
 800ed22:	4623      	mov	r3, r4
 800ed24:	4602      	mov	r2, r0
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f002 f9d4 	bl	80110d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2200      	movs	r2, #0
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f005 f86f 	bl	8013e18 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	210a      	movs	r1, #10
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fc5c 	bl	800f5fe <USBH_FindInterface>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2bff      	cmp	r3, #255	@ 0xff
 800ed4e:	d002      	beq.n	800ed56 <USBH_CDC_InterfaceInit+0x11a>
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d901      	bls.n	800ed5a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ed56:	2302      	movs	r3, #2
 800ed58:	e0c2      	b.n	800eee0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	211a      	movs	r1, #26
 800ed60:	fb01 f303 	mul.w	r3, r1, r3
 800ed64:	4413      	add	r3, r2
 800ed66:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	b25b      	sxtb	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	da16      	bge.n	800eda0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	211a      	movs	r1, #26
 800ed78:	fb01 f303 	mul.w	r3, r1, r3
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ed82:	781a      	ldrb	r2, [r3, #0]
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	211a      	movs	r1, #26
 800ed8e:	fb01 f303 	mul.w	r3, r1, r3
 800ed92:	4413      	add	r3, r2
 800ed94:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ed98:	881a      	ldrh	r2, [r3, #0]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	835a      	strh	r2, [r3, #26]
 800ed9e:	e015      	b.n	800edcc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	211a      	movs	r1, #26
 800eda6:	fb01 f303 	mul.w	r3, r1, r3
 800edaa:	4413      	add	r3, r2
 800edac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800edb0:	781a      	ldrb	r2, [r3, #0]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	211a      	movs	r1, #26
 800edbc:	fb01 f303 	mul.w	r3, r1, r3
 800edc0:	4413      	add	r3, r2
 800edc2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800edc6:	881a      	ldrh	r2, [r3, #0]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	211a      	movs	r1, #26
 800edd2:	fb01 f303 	mul.w	r3, r1, r3
 800edd6:	4413      	add	r3, r2
 800edd8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	b25b      	sxtb	r3, r3
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	da16      	bge.n	800ee12 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	211a      	movs	r1, #26
 800edea:	fb01 f303 	mul.w	r3, r1, r3
 800edee:	4413      	add	r3, r2
 800edf0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800edfa:	7bfb      	ldrb	r3, [r7, #15]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	211a      	movs	r1, #26
 800ee00:	fb01 f303 	mul.w	r3, r1, r3
 800ee04:	4413      	add	r3, r2
 800ee06:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ee0a:	881a      	ldrh	r2, [r3, #0]
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	835a      	strh	r2, [r3, #26]
 800ee10:	e015      	b.n	800ee3e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	211a      	movs	r1, #26
 800ee18:	fb01 f303 	mul.w	r3, r1, r3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ee22:	781a      	ldrb	r2, [r3, #0]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	211a      	movs	r1, #26
 800ee2e:	fb01 f303 	mul.w	r3, r1, r3
 800ee32:	4413      	add	r3, r2
 800ee34:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ee38:	881a      	ldrh	r2, [r3, #0]
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	7b9b      	ldrb	r3, [r3, #14]
 800ee42:	4619      	mov	r1, r3
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f002 f974 	bl	8011132 <USBH_AllocPipe>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	7bdb      	ldrb	r3, [r3, #15]
 800ee56:	4619      	mov	r1, r3
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f002 f96a 	bl	8011132 <USBH_AllocPipe>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	461a      	mov	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	7b59      	ldrb	r1, [r3, #13]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	7b98      	ldrb	r0, [r3, #14]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	8b12      	ldrh	r2, [r2, #24]
 800ee7e:	9202      	str	r2, [sp, #8]
 800ee80:	2202      	movs	r2, #2
 800ee82:	9201      	str	r2, [sp, #4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4623      	mov	r3, r4
 800ee88:	4602      	mov	r2, r0
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f002 f922 	bl	80110d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	7b19      	ldrb	r1, [r3, #12]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	7bd8      	ldrb	r0, [r3, #15]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	8b52      	ldrh	r2, [r2, #26]
 800eea8:	9202      	str	r2, [sp, #8]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	9201      	str	r2, [sp, #4]
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	4623      	mov	r3, r4
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f002 f90d 	bl	80110d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	7b5b      	ldrb	r3, [r3, #13]
 800eec6:	2200      	movs	r2, #0
 800eec8:	4619      	mov	r1, r3
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f004 ffa4 	bl	8013e18 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	7b1b      	ldrb	r3, [r3, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	4619      	mov	r1, r3
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f004 ff9d 	bl	8013e18 <USBH_LL_SetToggle>

  return USBH_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3714      	adds	r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd90      	pop	{r4, r7, pc}

0800eee8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eef6:	69db      	ldr	r3, [r3, #28]
 800eef8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00e      	beq.n	800ef20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f002 f902 	bl	8011112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	4619      	mov	r1, r3
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f002 f92d 	bl	8011174 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	7b1b      	ldrb	r3, [r3, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00e      	beq.n	800ef46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	7b1b      	ldrb	r3, [r3, #12]
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f002 f8ef 	bl	8011112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	7b1b      	ldrb	r3, [r3, #12]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f002 f91a 	bl	8011174 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	7b5b      	ldrb	r3, [r3, #13]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00e      	beq.n	800ef6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	7b5b      	ldrb	r3, [r3, #13]
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f002 f8dc 	bl	8011112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	7b5b      	ldrb	r3, [r3, #13]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f002 f907 	bl	8011174 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef72:	69db      	ldr	r3, [r3, #28]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00b      	beq.n	800ef90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f004 ffd7 	bl	8013f34 <free>
    phost->pActiveClass->pData = 0U;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b084      	sub	sp, #16
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	3340      	adds	r3, #64	@ 0x40
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 f8b1 	bl	800f11a <GetLineCoding>
 800efb8:	4603      	mov	r3, r0
 800efba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800efbc:	7afb      	ldrb	r3, [r7, #11]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d105      	bne.n	800efce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800efc8:	2102      	movs	r1, #2
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800efce:	7afb      	ldrb	r3, [r7, #11]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800efe0:	2301      	movs	r3, #1
 800efe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800eff8:	2b04      	cmp	r3, #4
 800effa:	d877      	bhi.n	800f0ec <USBH_CDC_Process+0x114>
 800effc:	a201      	add	r2, pc, #4	@ (adr r2, 800f004 <USBH_CDC_Process+0x2c>)
 800effe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f002:	bf00      	nop
 800f004:	0800f019 	.word	0x0800f019
 800f008:	0800f01f 	.word	0x0800f01f
 800f00c:	0800f04f 	.word	0x0800f04f
 800f010:	0800f0c3 	.word	0x0800f0c3
 800f014:	0800f0d1 	.word	0x0800f0d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f018:	2300      	movs	r3, #0
 800f01a:	73fb      	strb	r3, [r7, #15]
      break;
 800f01c:	e06d      	b.n	800f0fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f897 	bl	800f158 <SetLineCoding>
 800f02a:	4603      	mov	r3, r0
 800f02c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f02e:	7bbb      	ldrb	r3, [r7, #14]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d104      	bne.n	800f03e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2202      	movs	r2, #2
 800f038:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f03c:	e058      	b.n	800f0f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d055      	beq.n	800f0f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2204      	movs	r2, #4
 800f048:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f04c:	e050      	b.n	800f0f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	3340      	adds	r3, #64	@ 0x40
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f860 	bl	800f11a <GetLineCoding>
 800f05a:	4603      	mov	r3, r0
 800f05c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f05e:	7bbb      	ldrb	r3, [r7, #14]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d126      	bne.n	800f0b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f076:	791b      	ldrb	r3, [r3, #4]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d13b      	bne.n	800f0f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f086:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f088:	429a      	cmp	r2, r3
 800f08a:	d133      	bne.n	800f0f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f096:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f098:	429a      	cmp	r2, r3
 800f09a:	d12b      	bne.n	800f0f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d124      	bne.n	800f0f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f982 	bl	800f3b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f0b0:	e020      	b.n	800f0f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d01d      	beq.n	800f0f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2204      	movs	r2, #4
 800f0bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f0c0:	e018      	b.n	800f0f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 f867 	bl	800f196 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f8f6 	bl	800f2ba <CDC_ProcessReception>
      break;
 800f0ce:	e014      	b.n	800f0fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f001 f988 	bl	80103e8 <USBH_ClrFeature>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f0ea:	e005      	b.n	800f0f8 <USBH_CDC_Process+0x120>

    default:
      break;
 800f0ec:	bf00      	nop
 800f0ee:	e004      	b.n	800f0fa <USBH_CDC_Process+0x122>
      break;
 800f0f0:	bf00      	nop
 800f0f2:	e002      	b.n	800f0fa <USBH_CDC_Process+0x122>
      break;
 800f0f4:	bf00      	nop
 800f0f6:	e000      	b.n	800f0fa <USBH_CDC_Process+0x122>
      break;
 800f0f8:	bf00      	nop

  }

  return status;
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	370c      	adds	r7, #12
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b082      	sub	sp, #8
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
 800f122:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	22a1      	movs	r2, #161	@ 0xa1
 800f128:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2221      	movs	r2, #33	@ 0x21
 800f12e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2207      	movs	r2, #7
 800f140:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	2207      	movs	r2, #7
 800f146:	4619      	mov	r1, r3
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f001 fc82 	bl	8010a52 <USBH_CtlReq>
 800f14e:	4603      	mov	r3, r0
}
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2221      	movs	r2, #33	@ 0x21
 800f166:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2220      	movs	r2, #32
 800f16c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2207      	movs	r2, #7
 800f17e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2207      	movs	r2, #7
 800f184:	4619      	mov	r1, r3
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f001 fc63 	bl	8010a52 <USBH_CtlReq>
 800f18c:	4603      	mov	r3, r0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af02      	add	r7, sp, #8
 800f19c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d002      	beq.n	800f1bc <CDC_ProcessTransmission+0x26>
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d023      	beq.n	800f202 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f1ba:	e07a      	b.n	800f2b2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	8b12      	ldrh	r2, [r2, #24]
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d90b      	bls.n	800f1e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	69d9      	ldr	r1, [r3, #28]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	8b1a      	ldrh	r2, [r3, #24]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	7b5b      	ldrb	r3, [r3, #13]
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	9000      	str	r0, [sp, #0]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f001 ff38 	bl	801104e <USBH_BulkSendData>
 800f1de:	e00b      	b.n	800f1f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	7b5b      	ldrb	r3, [r3, #13]
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	9000      	str	r0, [sp, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 ff2b 	bl	801104e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f200:	e057      	b.n	800f2b2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	7b5b      	ldrb	r3, [r3, #13]
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f004 fddb 	bl	8013dc4 <USBH_LL_GetURBState>
 800f20e:	4603      	mov	r3, r0
 800f210:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f212:	7afb      	ldrb	r3, [r7, #11]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d136      	bne.n	800f286 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	8b12      	ldrh	r2, [r2, #24]
 800f220:	4293      	cmp	r3, r2
 800f222:	d90e      	bls.n	800f242 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	8b12      	ldrh	r2, [r2, #24]
 800f22c:	1a9a      	subs	r2, r3, r2
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	69db      	ldr	r3, [r3, #28]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	8b12      	ldrh	r2, [r2, #24]
 800f23a:	441a      	add	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	61da      	str	r2, [r3, #28]
 800f240:	e002      	b.n	800f248 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2200      	movs	r2, #0
 800f246:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2201      	movs	r2, #1
 800f254:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800f258:	e006      	b.n	800f268 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f892 	bl	800f38c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2204      	movs	r2, #4
 800f26c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f27c:	2200      	movs	r2, #0
 800f27e:	4619      	mov	r1, r3
 800f280:	f002 f8ea 	bl	8011458 <osMessagePut>
      break;
 800f284:	e014      	b.n	800f2b0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f286:	7afb      	ldrb	r3, [r7, #11]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d111      	bne.n	800f2b0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2204      	movs	r2, #4
 800f298:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	f002 f8d4 	bl	8011458 <osMessagePut>
      break;
 800f2b0:	bf00      	nop
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b086      	sub	sp, #24
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d002      	beq.n	800f2e0 <CDC_ProcessReception+0x26>
 800f2da:	2b04      	cmp	r3, #4
 800f2dc:	d00e      	beq.n	800f2fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f2de:	e051      	b.n	800f384 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	6a19      	ldr	r1, [r3, #32]
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	8b5a      	ldrh	r2, [r3, #26]
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	7b1b      	ldrb	r3, [r3, #12]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f001 fed3 	bl	8011098 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f2fa:	e043      	b.n	800f384 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	7b1b      	ldrb	r3, [r3, #12]
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f004 fd5e 	bl	8013dc4 <USBH_LL_GetURBState>
 800f308:	4603      	mov	r3, r0
 800f30a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f30c:	7cfb      	ldrb	r3, [r7, #19]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d137      	bne.n	800f382 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	7b1b      	ldrb	r3, [r3, #12]
 800f316:	4619      	mov	r1, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f004 fcc1 	bl	8013ca0 <USBH_LL_GetLastXferSize>
 800f31e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	429a      	cmp	r2, r3
 800f328:	d016      	beq.n	800f358 <CDC_ProcessReception+0x9e>
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	8b5b      	ldrh	r3, [r3, #26]
 800f32e:	461a      	mov	r2, r3
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4293      	cmp	r3, r2
 800f334:	d110      	bne.n	800f358 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	1ad2      	subs	r2, r2, r3
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	6a1a      	ldr	r2, [r3, #32]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	441a      	add	r2, r3
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2203      	movs	r2, #3
 800f352:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800f356:	e006      	b.n	800f366 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f81d 	bl	800f3a0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2204      	movs	r2, #4
 800f36a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f37a:	2200      	movs	r2, #0
 800f37c:	4619      	mov	r1, r3
 800f37e:	f002 f86b 	bl	8011458 <osMessagePut>
      break;
 800f382:	bf00      	nop
  }
}
 800f384:	bf00      	nop
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f394:	bf00      	nop
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f3a8:	bf00      	nop
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f3c8:	b5b0      	push	{r4, r5, r7, lr}
 800f3ca:	b090      	sub	sp, #64	@ 0x40
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f3dc:	2302      	movs	r3, #2
 800f3de:	e04d      	b.n	800f47c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	79fa      	ldrb	r2, [r7, #7]
 800f3e4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f000 f847 	bl	800f48c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d003      	beq.n	800f42c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f42c:	4b15      	ldr	r3, [pc, #84]	@ (800f484 <USBH_Init+0xbc>)
 800f42e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f438:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f43c:	2100      	movs	r1, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f001 ffe2 	bl	8011408 <osMessageCreate>
 800f444:	4602      	mov	r2, r0
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f44c:	4b0e      	ldr	r3, [pc, #56]	@ (800f488 <USBH_Init+0xc0>)
 800f44e:	f107 0414 	add.w	r4, r7, #20
 800f452:	461d      	mov	r5, r3
 800f454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f458:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f45c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f460:	f107 0314 	add.w	r3, r7, #20
 800f464:	68f9      	ldr	r1, [r7, #12]
 800f466:	4618      	mov	r0, r3
 800f468:	f001 ff6e 	bl	8011348 <osThreadCreate>
 800f46c:	4602      	mov	r2, r0
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f004 fb5f 	bl	8013b38 <USBH_LL_Init>

  return USBH_OK;
 800f47a:	2300      	movs	r3, #0
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3740      	adds	r7, #64	@ 0x40
 800f480:	46bd      	mov	sp, r7
 800f482:	bdb0      	pop	{r4, r5, r7, pc}
 800f484:	08014238 	.word	0x08014238
 800f488:	08014254 	.word	0x08014254

0800f48c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f494:	2300      	movs	r3, #0
 800f496:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	e009      	b.n	800f4b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	33e0      	adds	r3, #224	@ 0xe0
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2b0f      	cmp	r3, #15
 800f4b6:	d9f2      	bls.n	800f49e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e009      	b.n	800f4d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4d8:	d3f1      	bcc.n	800f4be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2240      	movs	r2, #64	@ 0x40
 800f4fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2201      	movs	r2, #1
 800f512:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	331c      	adds	r3, #28
 800f52a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f52e:	2100      	movs	r1, #0
 800f530:	4618      	mov	r0, r3
 800f532:	f004 fdb5 	bl	80140a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f53c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f540:	2100      	movs	r1, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f004 fdac 	bl	80140a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f54e:	2212      	movs	r2, #18
 800f550:	2100      	movs	r1, #0
 800f552:	4618      	mov	r0, r3
 800f554:	f004 fda4 	bl	80140a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f55e:	223e      	movs	r2, #62	@ 0x3e
 800f560:	2100      	movs	r1, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f004 fd9c 	bl	80140a0 <memset>

  return USBH_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f572:	b480      	push	{r7}
 800f574:	b085      	sub	sp, #20
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d016      	beq.n	800f5b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10e      	bne.n	800f5ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f596:	1c59      	adds	r1, r3, #1
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	33de      	adds	r3, #222	@ 0xde
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	73fb      	strb	r3, [r7, #15]
 800f5ac:	e004      	b.n	800f5b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	73fb      	strb	r3, [r7, #15]
 800f5b2:	e001      	b.n	800f5b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3714      	adds	r7, #20
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f5c6:	b480      	push	{r7}
 800f5c8:	b085      	sub	sp, #20
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f5dc:	78fa      	ldrb	r2, [r7, #3]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d204      	bcs.n	800f5ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	78fa      	ldrb	r2, [r7, #3]
 800f5e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f5ea:	e001      	b.n	800f5f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b087      	sub	sp, #28
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	4608      	mov	r0, r1
 800f608:	4611      	mov	r1, r2
 800f60a:	461a      	mov	r2, r3
 800f60c:	4603      	mov	r3, r0
 800f60e:	70fb      	strb	r3, [r7, #3]
 800f610:	460b      	mov	r3, r1
 800f612:	70bb      	strb	r3, [r7, #2]
 800f614:	4613      	mov	r3, r2
 800f616:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f618:	2300      	movs	r3, #0
 800f61a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f61c:	2300      	movs	r3, #0
 800f61e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f626:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f628:	e025      	b.n	800f676 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	221a      	movs	r2, #26
 800f62e:	fb02 f303 	mul.w	r3, r2, r3
 800f632:	3308      	adds	r3, #8
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	4413      	add	r3, r2
 800f638:	3302      	adds	r3, #2
 800f63a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	795b      	ldrb	r3, [r3, #5]
 800f640:	78fa      	ldrb	r2, [r7, #3]
 800f642:	429a      	cmp	r2, r3
 800f644:	d002      	beq.n	800f64c <USBH_FindInterface+0x4e>
 800f646:	78fb      	ldrb	r3, [r7, #3]
 800f648:	2bff      	cmp	r3, #255	@ 0xff
 800f64a:	d111      	bne.n	800f670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f650:	78ba      	ldrb	r2, [r7, #2]
 800f652:	429a      	cmp	r2, r3
 800f654:	d002      	beq.n	800f65c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f656:	78bb      	ldrb	r3, [r7, #2]
 800f658:	2bff      	cmp	r3, #255	@ 0xff
 800f65a:	d109      	bne.n	800f670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f660:	787a      	ldrb	r2, [r7, #1]
 800f662:	429a      	cmp	r2, r3
 800f664:	d002      	beq.n	800f66c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f666:	787b      	ldrb	r3, [r7, #1]
 800f668:	2bff      	cmp	r3, #255	@ 0xff
 800f66a:	d101      	bne.n	800f670 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	e006      	b.n	800f67e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f670:	7dfb      	ldrb	r3, [r7, #23]
 800f672:	3301      	adds	r3, #1
 800f674:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f676:	7dfb      	ldrb	r3, [r7, #23]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d9d6      	bls.n	800f62a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f67c:	23ff      	movs	r3, #255	@ 0xff
}
 800f67e:	4618      	mov	r0, r3
 800f680:	371c      	adds	r7, #28
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr

0800f68a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b082      	sub	sp, #8
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f004 fa8c 	bl	8013bb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f698:	2101      	movs	r1, #1
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f004 fba5 	bl	8013dea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
	...

0800f6ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b088      	sub	sp, #32
 800f6b0:	af04      	add	r7, sp, #16
 800f6b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d102      	bne.n	800f6ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2203      	movs	r2, #3
 800f6cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b0b      	cmp	r3, #11
 800f6d6:	f200 8244 	bhi.w	800fb62 <USBH_Process+0x4b6>
 800f6da:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e0 <USBH_Process+0x34>)
 800f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e0:	0800f711 	.word	0x0800f711
 800f6e4:	0800f75f 	.word	0x0800f75f
 800f6e8:	0800f7e3 	.word	0x0800f7e3
 800f6ec:	0800fae1 	.word	0x0800fae1
 800f6f0:	0800fb63 	.word	0x0800fb63
 800f6f4:	0800f89f 	.word	0x0800f89f
 800f6f8:	0800fa6b 	.word	0x0800fa6b
 800f6fc:	0800f8f1 	.word	0x0800f8f1
 800f700:	0800f92d 	.word	0x0800f92d
 800f704:	0800f965 	.word	0x0800f965
 800f708:	0800f9c3 	.word	0x0800f9c3
 800f70c:	0800fac9 	.word	0x0800fac9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 8224 	beq.w	800fb66 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2201      	movs	r2, #1
 800f722:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f724:	20c8      	movs	r0, #200	@ 0xc8
 800f726:	f004 fbaa 	bl	8013e7e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f004 fa9d 	bl	8013c6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2201      	movs	r2, #1
 800f744:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f754:	2200      	movs	r2, #0
 800f756:	4619      	mov	r1, r3
 800f758:	f001 fe7e 	bl	8011458 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f75c:	e203      	b.n	800fb66 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f764:	2b01      	cmp	r3, #1
 800f766:	d107      	bne.n	800f778 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2202      	movs	r2, #2
 800f774:	701a      	strb	r2, [r3, #0]
 800f776:	e025      	b.n	800f7c4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f77e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f782:	d914      	bls.n	800f7ae <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f78a:	3301      	adds	r3, #1
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d903      	bls.n	800f7a6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	220d      	movs	r2, #13
 800f7a2:	701a      	strb	r2, [r3, #0]
 800f7a4:	e00e      	b.n	800f7c4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	701a      	strb	r2, [r3, #0]
 800f7ac:	e00a      	b.n	800f7c4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f7b4:	f103 020a 	add.w	r2, r3, #10
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f7be:	200a      	movs	r0, #10
 800f7c0:	f004 fb5d 	bl	8013e7e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f7d8:	2200      	movs	r2, #0
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f001 fe3c 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f7e0:	e1c8      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d005      	beq.n	800f7f8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f7f2:	2104      	movs	r1, #4
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f7f8:	2064      	movs	r0, #100	@ 0x64
 800f7fa:	f004 fb40 	bl	8013e7e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f004 fa0c 	bl	8013c1c <USBH_LL_GetSpeed>
 800f804:	4603      	mov	r3, r0
 800f806:	461a      	mov	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2205      	movs	r2, #5
 800f812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f814:	2100      	movs	r1, #0
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f001 fc8b 	bl	8011132 <USBH_AllocPipe>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f824:	2180      	movs	r1, #128	@ 0x80
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f001 fc83 	bl	8011132 <USBH_AllocPipe>
 800f82c:	4603      	mov	r3, r0
 800f82e:	461a      	mov	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7919      	ldrb	r1, [r3, #4]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f848:	9202      	str	r2, [sp, #8]
 800f84a:	2200      	movs	r2, #0
 800f84c:	9201      	str	r2, [sp, #4]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	4603      	mov	r3, r0
 800f852:	2280      	movs	r2, #128	@ 0x80
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f001 fc3d 	bl	80110d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	7959      	ldrb	r1, [r3, #5]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f86e:	9202      	str	r2, [sp, #8]
 800f870:	2200      	movs	r2, #0
 800f872:	9201      	str	r2, [sp, #4]
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	4603      	mov	r3, r0
 800f878:	2200      	movs	r2, #0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f001 fc2a 	bl	80110d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f894:	2200      	movs	r2, #0
 800f896:	4619      	mov	r1, r3
 800f898:	f001 fdde 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f89c:	e16a      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 f96e 	bl	800fb80 <USBH_HandleEnum>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f8a8:	7bbb      	ldrb	r3, [r7, #14]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f040 815c 	bne.w	800fb6a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d103      	bne.n	800f8cc <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2208      	movs	r2, #8
 800f8c8:	701a      	strb	r2, [r3, #0]
 800f8ca:	e002      	b.n	800f8d2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2207      	movs	r2, #7
 800f8d0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2205      	movs	r2, #5
 800f8d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	f001 fdb5 	bl	8011458 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f8ee:	e13c      	b.n	800fb6a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f000 8139 	beq.w	800fb6e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f902:	2101      	movs	r1, #1
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2208      	movs	r2, #8
 800f90c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2205      	movs	r2, #5
 800f912:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f922:	2200      	movs	r2, #0
 800f924:	4619      	mov	r1, r3
 800f926:	f001 fd97 	bl	8011458 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f92a:	e120      	b.n	800fb6e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fd10 	bl	801035a <USBH_SetCfg>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2209      	movs	r2, #9
 800f944:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2201      	movs	r2, #1
 800f94a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f95a:	2200      	movs	r2, #0
 800f95c:	4619      	mov	r1, r3
 800f95e:	f001 fd7b 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f962:	e107      	b.n	800fb74 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f96a:	f003 0320 	and.w	r3, r3, #32
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d015      	beq.n	800f99e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f972:	2101      	movs	r1, #1
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fd13 	bl	80103a0 <USBH_SetFeature>
 800f97a:	4603      	mov	r3, r0
 800f97c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f97e:	7bbb      	ldrb	r3, [r7, #14]
 800f980:	b2db      	uxtb	r3, r3
 800f982:	2b00      	cmp	r3, #0
 800f984:	d103      	bne.n	800f98e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	220a      	movs	r2, #10
 800f98a:	701a      	strb	r2, [r3, #0]
 800f98c:	e00a      	b.n	800f9a4 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b03      	cmp	r3, #3
 800f994:	d106      	bne.n	800f9a4 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	220a      	movs	r2, #10
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	e002      	b.n	800f9a4 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	220a      	movs	r2, #10
 800f9a2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f001 fd4c 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9c0:	e0d8      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d03f      	beq.n	800fa4c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	73fb      	strb	r3, [r7, #15]
 800f9d8:	e016      	b.n	800fa08 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f9da:	7bfa      	ldrb	r2, [r7, #15]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	32de      	adds	r2, #222	@ 0xde
 800f9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e4:	791a      	ldrb	r2, [r3, #4]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d108      	bne.n	800fa02 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f9f0:	7bfa      	ldrb	r2, [r7, #15]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	32de      	adds	r2, #222	@ 0xde
 800f9f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800fa00:	e005      	b.n	800fa0e <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fa02:	7bfb      	ldrb	r3, [r7, #15]
 800fa04:	3301      	adds	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d0e5      	beq.n	800f9da <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d016      	beq.n	800fa46 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	4798      	blx	r3
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d109      	bne.n	800fa3e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2206      	movs	r2, #6
 800fa2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fa36:	2103      	movs	r1, #3
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	4798      	blx	r3
 800fa3c:	e006      	b.n	800fa4c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	220d      	movs	r2, #13
 800fa42:	701a      	strb	r2, [r3, #0]
 800fa44:	e002      	b.n	800fa4c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	220d      	movs	r2, #13
 800fa4a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2205      	movs	r2, #5
 800fa50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fa60:	2200      	movs	r2, #0
 800fa62:	4619      	mov	r1, r3
 800fa64:	f001 fcf8 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa68:	e084      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d017      	beq.n	800faa4 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	4798      	blx	r3
 800fa80:	4603      	mov	r3, r0
 800fa82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d103      	bne.n	800fa94 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	220b      	movs	r2, #11
 800fa90:	701a      	strb	r2, [r3, #0]
 800fa92:	e00a      	b.n	800faaa <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800fa94:	7bbb      	ldrb	r3, [r7, #14]
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d106      	bne.n	800faaa <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	220d      	movs	r2, #13
 800faa0:	701a      	strb	r2, [r3, #0]
 800faa2:	e002      	b.n	800faaa <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	220d      	movs	r2, #13
 800faa8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2205      	movs	r2, #5
 800faae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fabe:	2200      	movs	r2, #0
 800fac0:	4619      	mov	r1, r3
 800fac2:	f001 fcc9 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fac6:	e055      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800face:	2b00      	cmp	r3, #0
 800fad0:	d04f      	beq.n	800fb72 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fad8:	695b      	ldr	r3, [r3, #20]
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	4798      	blx	r3
      }
      break;
 800fade:	e048      	b.n	800fb72 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff fccf 	bl	800f48c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d009      	beq.n	800fb0c <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d005      	beq.n	800fb22 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb1c:	2105      	movs	r1, #5
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d107      	bne.n	800fb3e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7ff fda7 	bl	800f68a <USBH_Start>
 800fb3c:	e002      	b.n	800fb44 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f004 f836 	bl	8013bb0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	f001 fc7c 	bl	8011458 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb60:	e008      	b.n	800fb74 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800fb62:	bf00      	nop
 800fb64:	e006      	b.n	800fb74 <USBH_Process+0x4c8>
      break;
 800fb66:	bf00      	nop
 800fb68:	e004      	b.n	800fb74 <USBH_Process+0x4c8>
      break;
 800fb6a:	bf00      	nop
 800fb6c:	e002      	b.n	800fb74 <USBH_Process+0x4c8>
    break;
 800fb6e:	bf00      	nop
 800fb70:	e000      	b.n	800fb74 <USBH_Process+0x4c8>
      break;
 800fb72:	bf00      	nop
  }
  return USBH_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop

0800fb80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b088      	sub	sp, #32
 800fb84:	af04      	add	r7, sp, #16
 800fb86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	785b      	ldrb	r3, [r3, #1]
 800fb94:	2b07      	cmp	r3, #7
 800fb96:	f200 8204 	bhi.w	800ffa2 <USBH_HandleEnum+0x422>
 800fb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fba0 <USBH_HandleEnum+0x20>)
 800fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba0:	0800fbc1 	.word	0x0800fbc1
 800fba4:	0800fc7b 	.word	0x0800fc7b
 800fba8:	0800fce5 	.word	0x0800fce5
 800fbac:	0800fd6f 	.word	0x0800fd6f
 800fbb0:	0800fdd9 	.word	0x0800fdd9
 800fbb4:	0800fe49 	.word	0x0800fe49
 800fbb8:	0800fee5 	.word	0x0800fee5
 800fbbc:	0800ff63 	.word	0x0800ff63
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fbc0:	2108      	movs	r1, #8
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fae6 	bl	8010194 <USBH_Get_DevDesc>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d12e      	bne.n	800fc30 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	7919      	ldrb	r1, [r3, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fbf6:	9202      	str	r2, [sp, #8]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	9201      	str	r2, [sp, #4]
 800fbfc:	9300      	str	r3, [sp, #0]
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2280      	movs	r2, #128	@ 0x80
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f001 fa66 	bl	80110d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	7959      	ldrb	r1, [r3, #5]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc1c:	9202      	str	r2, [sp, #8]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	9201      	str	r2, [sp, #4]
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	4603      	mov	r3, r0
 800fc26:	2200      	movs	r2, #0
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f001 fa53 	bl	80110d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fc2e:	e1ba      	b.n	800ffa6 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	f040 81b7 	bne.w	800ffa6 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	d903      	bls.n	800fc5a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	220d      	movs	r2, #13
 800fc56:	701a      	strb	r2, [r3, #0]
      break;
 800fc58:	e1a5      	b.n	800ffa6 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	795b      	ldrb	r3, [r3, #5]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f001 fa87 	bl	8011174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	791b      	ldrb	r3, [r3, #4]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f001 fa81 	bl	8011174 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	701a      	strb	r2, [r3, #0]
      break;
 800fc78:	e195      	b.n	800ffa6 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fc7a:	2112      	movs	r1, #18
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 fa89 	bl	8010194 <USBH_Get_DevDesc>
 800fc82:	4603      	mov	r3, r0
 800fc84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d103      	bne.n	800fc94 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2202      	movs	r2, #2
 800fc90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fc92:	e18a      	b.n	800ffaa <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	2b03      	cmp	r3, #3
 800fc98:	f040 8187 	bne.w	800ffaa <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fca2:	3301      	adds	r3, #1
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	d903      	bls.n	800fcbe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	220d      	movs	r2, #13
 800fcba:	701a      	strb	r2, [r3, #0]
      break;
 800fcbc:	e175      	b.n	800ffaa <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	795b      	ldrb	r3, [r3, #5]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f001 fa55 	bl	8011174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	791b      	ldrb	r3, [r3, #4]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f001 fa4f 	bl	8011174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	701a      	strb	r2, [r3, #0]
      break;
 800fce2:	e162      	b.n	800ffaa <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fce4:	2101      	movs	r1, #1
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fb13 	bl	8010312 <USBH_SetAddress>
 800fcec:	4603      	mov	r3, r0
 800fcee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fcf0:	7bbb      	ldrb	r3, [r7, #14]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d130      	bne.n	800fd58 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800fcf6:	2002      	movs	r0, #2
 800fcf8:	f004 f8c1 	bl	8013e7e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2203      	movs	r2, #3
 800fd08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	7919      	ldrb	r1, [r3, #4]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fd1e:	9202      	str	r2, [sp, #8]
 800fd20:	2200      	movs	r2, #0
 800fd22:	9201      	str	r2, [sp, #4]
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4603      	mov	r3, r0
 800fd28:	2280      	movs	r2, #128	@ 0x80
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f001 f9d2 	bl	80110d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	7959      	ldrb	r1, [r3, #5]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd44:	9202      	str	r2, [sp, #8]
 800fd46:	2200      	movs	r2, #0
 800fd48:	9201      	str	r2, [sp, #4]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2200      	movs	r2, #0
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f001 f9bf 	bl	80110d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fd56:	e12a      	b.n	800ffae <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd58:	7bbb      	ldrb	r3, [r7, #14]
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	f040 8127 	bne.w	800ffae <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	220d      	movs	r2, #13
 800fd64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	705a      	strb	r2, [r3, #1]
      break;
 800fd6c:	e11f      	b.n	800ffae <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fd6e:	2109      	movs	r1, #9
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fa3b 	bl	80101ec <USBH_Get_CfgDesc>
 800fd76:	4603      	mov	r3, r0
 800fd78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd7a:	7bbb      	ldrb	r3, [r7, #14]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d103      	bne.n	800fd88 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2204      	movs	r2, #4
 800fd84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd86:	e114      	b.n	800ffb2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd88:	7bbb      	ldrb	r3, [r7, #14]
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	f040 8111 	bne.w	800ffb2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fd96:	3301      	adds	r3, #1
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	d903      	bls.n	800fdb2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	220d      	movs	r2, #13
 800fdae:	701a      	strb	r2, [r3, #0]
      break;
 800fdb0:	e0ff      	b.n	800ffb2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	795b      	ldrb	r3, [r3, #5]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f001 f9db 	bl	8011174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	791b      	ldrb	r3, [r3, #4]
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f001 f9d5 	bl	8011174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	701a      	strb	r2, [r3, #0]
      break;
 800fdd6:	e0ec      	b.n	800ffb2 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800fdde:	4619      	mov	r1, r3
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fa03 	bl	80101ec <USBH_Get_CfgDesc>
 800fde6:	4603      	mov	r3, r0
 800fde8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fdea:	7bbb      	ldrb	r3, [r7, #14]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d103      	bne.n	800fdf8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2205      	movs	r2, #5
 800fdf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fdf6:	e0de      	b.n	800ffb6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fdf8:	7bbb      	ldrb	r3, [r7, #14]
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	f040 80db 	bne.w	800ffb6 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fe06:	3301      	adds	r3, #1
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fe16:	2b03      	cmp	r3, #3
 800fe18:	d903      	bls.n	800fe22 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	220d      	movs	r2, #13
 800fe1e:	701a      	strb	r2, [r3, #0]
      break;
 800fe20:	e0c9      	b.n	800ffb6 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	795b      	ldrb	r3, [r3, #5]
 800fe26:	4619      	mov	r1, r3
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f001 f9a3 	bl	8011174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	791b      	ldrb	r3, [r3, #4]
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f001 f99d 	bl	8011174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	701a      	strb	r2, [r3, #0]
      break;
 800fe46:	e0b6      	b.n	800ffb6 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d036      	beq.n	800fec0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fe5e:	23ff      	movs	r3, #255	@ 0xff
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f9ed 	bl	8010240 <USBH_Get_StringDesc>
 800fe66:	4603      	mov	r3, r0
 800fe68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fe6a:	7bbb      	ldrb	r3, [r7, #14]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d111      	bne.n	800fe94 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2206      	movs	r2, #6
 800fe74:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2205      	movs	r2, #5
 800fe7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	f001 fae3 	bl	8011458 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fe92:	e092      	b.n	800ffba <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe94:	7bbb      	ldrb	r3, [r7, #14]
 800fe96:	2b03      	cmp	r3, #3
 800fe98:	f040 808f 	bne.w	800ffba <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2206      	movs	r2, #6
 800fea0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2205      	movs	r2, #5
 800fea6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800feb6:	2200      	movs	r2, #0
 800feb8:	4619      	mov	r1, r3
 800feba:	f001 facd 	bl	8011458 <osMessagePut>
      break;
 800febe:	e07c      	b.n	800ffba <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2206      	movs	r2, #6
 800fec4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2205      	movs	r2, #5
 800feca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800feda:	2200      	movs	r2, #0
 800fedc:	4619      	mov	r1, r3
 800fede:	f001 fabb 	bl	8011458 <osMessagePut>
      break;
 800fee2:	e06a      	b.n	800ffba <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800feea:	2b00      	cmp	r3, #0
 800feec:	d027      	beq.n	800ff3e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fefa:	23ff      	movs	r3, #255	@ 0xff
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f99f 	bl	8010240 <USBH_Get_StringDesc>
 800ff02:	4603      	mov	r3, r0
 800ff04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ff06:	7bbb      	ldrb	r3, [r7, #14]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d103      	bne.n	800ff14 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2207      	movs	r2, #7
 800ff10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ff12:	e054      	b.n	800ffbe <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	2b03      	cmp	r3, #3
 800ff18:	d151      	bne.n	800ffbe <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2207      	movs	r2, #7
 800ff1e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2205      	movs	r2, #5
 800ff24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ff34:	2200      	movs	r2, #0
 800ff36:	4619      	mov	r1, r3
 800ff38:	f001 fa8e 	bl	8011458 <osMessagePut>
      break;
 800ff3c:	e03f      	b.n	800ffbe <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2207      	movs	r2, #7
 800ff42:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2205      	movs	r2, #5
 800ff48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	f001 fa7c 	bl	8011458 <osMessagePut>
      break;
 800ff60:	e02d      	b.n	800ffbe <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d017      	beq.n	800ff9c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ff78:	23ff      	movs	r3, #255	@ 0xff
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f960 	bl	8010240 <USBH_Get_StringDesc>
 800ff80:	4603      	mov	r3, r0
 800ff82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ff84:	7bbb      	ldrb	r3, [r7, #14]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d102      	bne.n	800ff90 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ff8e:	e018      	b.n	800ffc2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
 800ff92:	2b03      	cmp	r3, #3
 800ff94:	d115      	bne.n	800ffc2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	73fb      	strb	r3, [r7, #15]
      break;
 800ff9a:	e012      	b.n	800ffc2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73fb      	strb	r3, [r7, #15]
      break;
 800ffa0:	e00f      	b.n	800ffc2 <USBH_HandleEnum+0x442>

    default:
      break;
 800ffa2:	bf00      	nop
 800ffa4:	e00e      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffa6:	bf00      	nop
 800ffa8:	e00c      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffaa:	bf00      	nop
 800ffac:	e00a      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffae:	bf00      	nop
 800ffb0:	e008      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffb2:	bf00      	nop
 800ffb4:	e006      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffb6:	bf00      	nop
 800ffb8:	e004      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffba:	bf00      	nop
 800ffbc:	e002      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffbe:	bf00      	nop
 800ffc0:	e000      	b.n	800ffc4 <USBH_HandleEnum+0x444>
      break;
 800ffc2:	bf00      	nop
  }
  return Status;
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop

0800ffd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ffe2:	bf00      	nop
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 f804 	bl	8010012 <USBH_HandleSof>
}
 801000a:	bf00      	nop
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b082      	sub	sp, #8
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2b0b      	cmp	r3, #11
 8010022:	d10a      	bne.n	801003a <USBH_HandleSof+0x28>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801002a:	2b00      	cmp	r3, #0
 801002c:	d005      	beq.n	801003a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	4798      	blx	r3
  }
}
 801003a:	bf00      	nop
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2201      	movs	r2, #1
 801004e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2201      	movs	r2, #1
 8010056:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010066:	2200      	movs	r2, #0
 8010068:	4619      	mov	r1, r3
 801006a:	f001 f9f5 	bl	8011458 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801006e:	bf00      	nop
}
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010076:	b480      	push	{r7}
 8010078:	b083      	sub	sp, #12
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8010086:	bf00      	nop
}
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b082      	sub	sp, #8
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2201      	movs	r2, #1
 801009e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2201      	movs	r2, #1
 80100b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80100c6:	2200      	movs	r2, #0
 80100c8:	4619      	mov	r1, r3
 80100ca:	f001 f9c5 	bl	8011458 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f003 fd74 	bl	8013be6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	791b      	ldrb	r3, [r3, #4]
 8010102:	4619      	mov	r1, r3
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f001 f835 	bl	8011174 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	795b      	ldrb	r3, [r3, #5]
 801010e:	4619      	mov	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f001 f82f 	bl	8011174 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2201      	movs	r2, #1
 801011a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801012a:	2200      	movs	r2, #0
 801012c:	4619      	mov	r1, r3
 801012e:	f001 f993 	bl	8011458 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 801014a:	f107 030c 	add.w	r3, r7, #12
 801014e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010152:	4618      	mov	r0, r3
 8010154:	f001 f9c0 	bl	80114d8 <osMessageGet>
    if (event.status == osEventMessage)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b10      	cmp	r3, #16
 801015c:	d1f2      	bne.n	8010144 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7ff faa4 	bl	800f6ac <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010164:	e7ee      	b.n	8010144 <USBH_Process_OS+0x8>

08010166 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010182:	2200      	movs	r2, #0
 8010184:	4619      	mov	r1, r3
 8010186:	f001 f967 	bl	8011458 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af02      	add	r7, sp, #8
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	460b      	mov	r3, r1
 801019e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80101a0:	887b      	ldrh	r3, [r7, #2]
 80101a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101a6:	d901      	bls.n	80101ac <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80101a8:	2303      	movs	r3, #3
 80101aa:	e01b      	b.n	80101e4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80101b2:	887b      	ldrh	r3, [r7, #2]
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	4613      	mov	r3, r2
 80101b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80101bc:	2100      	movs	r1, #0
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 f872 	bl	80102a8 <USBH_GetDescriptor>
 80101c4:	4603      	mov	r3, r0
 80101c6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d109      	bne.n	80101e2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80101d4:	887a      	ldrh	r2, [r7, #2]
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f929 	bl	8010430 <USBH_ParseDevDesc>
 80101de:	4603      	mov	r3, r0
 80101e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	460b      	mov	r3, r1
 80101f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	331c      	adds	r3, #28
 80101fc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80101fe:	887b      	ldrh	r3, [r7, #2]
 8010200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010204:	d901      	bls.n	801020a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010206:	2303      	movs	r3, #3
 8010208:	e016      	b.n	8010238 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801020a:	887b      	ldrh	r3, [r7, #2]
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010214:	2100      	movs	r1, #0
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f846 	bl	80102a8 <USBH_GetDescriptor>
 801021c:	4603      	mov	r3, r0
 801021e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010220:	7bfb      	ldrb	r3, [r7, #15]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d107      	bne.n	8010236 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010226:	887b      	ldrh	r3, [r7, #2]
 8010228:	461a      	mov	r2, r3
 801022a:	68b9      	ldr	r1, [r7, #8]
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f9af 	bl	8010590 <USBH_ParseCfgDesc>
 8010232:	4603      	mov	r3, r0
 8010234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010236:	7bfb      	ldrb	r3, [r7, #15]
}
 8010238:	4618      	mov	r0, r3
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b088      	sub	sp, #32
 8010244:	af02      	add	r7, sp, #8
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	607a      	str	r2, [r7, #4]
 801024a:	461a      	mov	r2, r3
 801024c:	460b      	mov	r3, r1
 801024e:	72fb      	strb	r3, [r7, #11]
 8010250:	4613      	mov	r3, r2
 8010252:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010254:	893b      	ldrh	r3, [r7, #8]
 8010256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801025a:	d802      	bhi.n	8010262 <USBH_Get_StringDesc+0x22>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010262:	2303      	movs	r3, #3
 8010264:	e01c      	b.n	80102a0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8010266:	7afb      	ldrb	r3, [r7, #11]
 8010268:	b29b      	uxth	r3, r3
 801026a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801026e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010276:	893b      	ldrh	r3, [r7, #8]
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	460b      	mov	r3, r1
 801027c:	2100      	movs	r1, #0
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f000 f812 	bl	80102a8 <USBH_GetDescriptor>
 8010284:	4603      	mov	r3, r0
 8010286:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010288:	7dfb      	ldrb	r3, [r7, #23]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d107      	bne.n	801029e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010294:	893a      	ldrh	r2, [r7, #8]
 8010296:	6879      	ldr	r1, [r7, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fb8d 	bl	80109b8 <USBH_ParseStringDesc>
  }

  return status;
 801029e:	7dfb      	ldrb	r3, [r7, #23]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3718      	adds	r7, #24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	607b      	str	r3, [r7, #4]
 80102b2:	460b      	mov	r3, r1
 80102b4:	72fb      	strb	r3, [r7, #11]
 80102b6:	4613      	mov	r3, r2
 80102b8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	789b      	ldrb	r3, [r3, #2]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d11c      	bne.n	80102fc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80102c2:	7afb      	ldrb	r3, [r7, #11]
 80102c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2206      	movs	r2, #6
 80102d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	893a      	ldrh	r2, [r7, #8]
 80102d8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80102da:	893b      	ldrh	r3, [r7, #8]
 80102dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80102e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80102e4:	d104      	bne.n	80102f0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f240 4209 	movw	r2, #1033	@ 0x409
 80102ec:	829a      	strh	r2, [r3, #20]
 80102ee:	e002      	b.n	80102f6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2200      	movs	r2, #0
 80102f4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	8b3a      	ldrh	r2, [r7, #24]
 80102fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80102fc:	8b3b      	ldrh	r3, [r7, #24]
 80102fe:	461a      	mov	r2, r3
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	f000 fba5 	bl	8010a52 <USBH_CtlReq>
 8010308:	4603      	mov	r3, r0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b082      	sub	sp, #8
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	460b      	mov	r3, r1
 801031c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	789b      	ldrb	r3, [r3, #2]
 8010322:	2b01      	cmp	r3, #1
 8010324:	d10f      	bne.n	8010346 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2205      	movs	r2, #5
 8010330:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010332:	78fb      	ldrb	r3, [r7, #3]
 8010334:	b29a      	uxth	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010346:	2200      	movs	r2, #0
 8010348:	2100      	movs	r1, #0
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 fb81 	bl	8010a52 <USBH_CtlReq>
 8010350:	4603      	mov	r3, r0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	460b      	mov	r3, r1
 8010364:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	789b      	ldrb	r3, [r3, #2]
 801036a:	2b01      	cmp	r3, #1
 801036c:	d10e      	bne.n	801038c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2209      	movs	r2, #9
 8010378:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	887a      	ldrh	r2, [r7, #2]
 801037e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801038c:	2200      	movs	r2, #0
 801038e:	2100      	movs	r1, #0
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fb5e 	bl	8010a52 <USBH_CtlReq>
 8010396:	4603      	mov	r3, r0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	460b      	mov	r3, r1
 80103aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	789b      	ldrb	r3, [r3, #2]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d10f      	bne.n	80103d4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2203      	movs	r2, #3
 80103be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80103c0:	78fb      	ldrb	r3, [r7, #3]
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80103d4:	2200      	movs	r2, #0
 80103d6:	2100      	movs	r1, #0
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 fb3a 	bl	8010a52 <USBH_CtlReq>
 80103de:	4603      	mov	r3, r0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	789b      	ldrb	r3, [r3, #2]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d10f      	bne.n	801041c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2201      	movs	r2, #1
 8010406:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801040e:	78fb      	ldrb	r3, [r7, #3]
 8010410:	b29a      	uxth	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801041c:	2200      	movs	r2, #0
 801041e:	2100      	movs	r1, #0
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fb16 	bl	8010a52 <USBH_CtlReq>
 8010426:	4603      	mov	r3, r0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010430:	b480      	push	{r7}
 8010432:	b087      	sub	sp, #28
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	4613      	mov	r3, r2
 801043c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010444:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010446:	2300      	movs	r3, #0
 8010448:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d101      	bne.n	8010454 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010450:	2302      	movs	r3, #2
 8010452:	e094      	b.n	801057e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	781a      	ldrb	r2, [r3, #0]
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	785a      	ldrb	r2, [r3, #1]
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	3302      	adds	r3, #2
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	461a      	mov	r2, r3
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	3303      	adds	r3, #3
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	021b      	lsls	r3, r3, #8
 8010474:	b29b      	uxth	r3, r3
 8010476:	4313      	orrs	r3, r2
 8010478:	b29a      	uxth	r2, r3
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	791a      	ldrb	r2, [r3, #4]
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	795a      	ldrb	r2, [r3, #5]
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	799a      	ldrb	r2, [r3, #6]
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	79da      	ldrb	r2, [r3, #7]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d004      	beq.n	80104b2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d11b      	bne.n	80104ea <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	79db      	ldrb	r3, [r3, #7]
 80104b6:	2b20      	cmp	r3, #32
 80104b8:	dc0f      	bgt.n	80104da <USBH_ParseDevDesc+0xaa>
 80104ba:	2b08      	cmp	r3, #8
 80104bc:	db0f      	blt.n	80104de <USBH_ParseDevDesc+0xae>
 80104be:	3b08      	subs	r3, #8
 80104c0:	4a32      	ldr	r2, [pc, #200]	@ (801058c <USBH_ParseDevDesc+0x15c>)
 80104c2:	fa22 f303 	lsr.w	r3, r2, r3
 80104c6:	f003 0301 	and.w	r3, r3, #1
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	bf14      	ite	ne
 80104ce:	2301      	movne	r3, #1
 80104d0:	2300      	moveq	r3, #0
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d106      	bne.n	80104e6 <USBH_ParseDevDesc+0xb6>
 80104d8:	e001      	b.n	80104de <USBH_ParseDevDesc+0xae>
 80104da:	2b40      	cmp	r3, #64	@ 0x40
 80104dc:	d003      	beq.n	80104e6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	2208      	movs	r2, #8
 80104e2:	71da      	strb	r2, [r3, #7]
        break;
 80104e4:	e000      	b.n	80104e8 <USBH_ParseDevDesc+0xb8>
        break;
 80104e6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80104e8:	e00e      	b.n	8010508 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d107      	bne.n	8010504 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	79db      	ldrb	r3, [r3, #7]
 80104f8:	2b08      	cmp	r3, #8
 80104fa:	d005      	beq.n	8010508 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	2208      	movs	r2, #8
 8010500:	71da      	strb	r2, [r3, #7]
 8010502:	e001      	b.n	8010508 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010504:	2303      	movs	r3, #3
 8010506:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010508:	88fb      	ldrh	r3, [r7, #6]
 801050a:	2b08      	cmp	r3, #8
 801050c:	d936      	bls.n	801057c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	3308      	adds	r3, #8
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	3309      	adds	r3, #9
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	021b      	lsls	r3, r3, #8
 801051e:	b29b      	uxth	r3, r3
 8010520:	4313      	orrs	r3, r2
 8010522:	b29a      	uxth	r2, r3
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	330a      	adds	r3, #10
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	330b      	adds	r3, #11
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	021b      	lsls	r3, r3, #8
 8010538:	b29b      	uxth	r3, r3
 801053a:	4313      	orrs	r3, r2
 801053c:	b29a      	uxth	r2, r3
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	330c      	adds	r3, #12
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	330d      	adds	r3, #13
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	021b      	lsls	r3, r3, #8
 8010552:	b29b      	uxth	r3, r3
 8010554:	4313      	orrs	r3, r2
 8010556:	b29a      	uxth	r2, r3
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	7b9a      	ldrb	r2, [r3, #14]
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	7bda      	ldrb	r2, [r3, #15]
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	7c1a      	ldrb	r2, [r3, #16]
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	7c5a      	ldrb	r2, [r3, #17]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 801057c:	7dfb      	ldrb	r3, [r7, #23]
}
 801057e:	4618      	mov	r0, r3
 8010580:	371c      	adds	r7, #28
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	01000101 	.word	0x01000101

08010590 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b08c      	sub	sp, #48	@ 0x30
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80105a4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80105b2:	2300      	movs	r3, #0
 80105b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80105be:	2302      	movs	r3, #2
 80105c0:	e0da      	b.n	8010778 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80105c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	2b09      	cmp	r3, #9
 80105cc:	d002      	beq.n	80105d4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80105ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d0:	2209      	movs	r2, #9
 80105d2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	781a      	ldrb	r2, [r3, #0]
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	785a      	ldrb	r2, [r3, #1]
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	3302      	adds	r3, #2
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	461a      	mov	r2, r3
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	3303      	adds	r3, #3
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	4313      	orrs	r3, r2
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105fe:	bf28      	it	cs
 8010600:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010604:	b29a      	uxth	r2, r3
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	791a      	ldrb	r2, [r3, #4]
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	795a      	ldrb	r2, [r3, #5]
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	799a      	ldrb	r2, [r3, #6]
 801061e:	6a3b      	ldr	r3, [r7, #32]
 8010620:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	79da      	ldrb	r2, [r3, #7]
 8010626:	6a3b      	ldr	r3, [r7, #32]
 8010628:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	7a1a      	ldrb	r2, [r3, #8]
 801062e:	6a3b      	ldr	r3, [r7, #32]
 8010630:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010632:	88fb      	ldrh	r3, [r7, #6]
 8010634:	2b09      	cmp	r3, #9
 8010636:	f240 809d 	bls.w	8010774 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 801063a:	2309      	movs	r3, #9
 801063c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801063e:	2300      	movs	r3, #0
 8010640:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010642:	e081      	b.n	8010748 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010644:	f107 0316 	add.w	r3, r7, #22
 8010648:	4619      	mov	r1, r3
 801064a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801064c:	f000 f9e7 	bl	8010a1e <USBH_GetNextDesc>
 8010650:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010654:	785b      	ldrb	r3, [r3, #1]
 8010656:	2b04      	cmp	r3, #4
 8010658:	d176      	bne.n	8010748 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801065a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	2b09      	cmp	r3, #9
 8010660:	d002      	beq.n	8010668 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010664:	2209      	movs	r2, #9
 8010666:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801066c:	221a      	movs	r2, #26
 801066e:	fb02 f303 	mul.w	r3, r2, r3
 8010672:	3308      	adds	r3, #8
 8010674:	6a3a      	ldr	r2, [r7, #32]
 8010676:	4413      	add	r3, r2
 8010678:	3302      	adds	r3, #2
 801067a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801067c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801067e:	69f8      	ldr	r0, [r7, #28]
 8010680:	f000 f87e 	bl	8010780 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010684:	2300      	movs	r3, #0
 8010686:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801068e:	e043      	b.n	8010718 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010690:	f107 0316 	add.w	r3, r7, #22
 8010694:	4619      	mov	r1, r3
 8010696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010698:	f000 f9c1 	bl	8010a1e <USBH_GetNextDesc>
 801069c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a0:	785b      	ldrb	r3, [r3, #1]
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	d138      	bne.n	8010718 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	795b      	ldrb	r3, [r3, #5]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d113      	bne.n	80106d6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d003      	beq.n	80106be <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	799b      	ldrb	r3, [r3, #6]
 80106ba:	2b03      	cmp	r3, #3
 80106bc:	d10b      	bne.n	80106d6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	79db      	ldrb	r3, [r3, #7]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10b      	bne.n	80106de <USBH_ParseCfgDesc+0x14e>
 80106c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b09      	cmp	r3, #9
 80106cc:	d007      	beq.n	80106de <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80106ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d0:	2209      	movs	r2, #9
 80106d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80106d4:	e003      	b.n	80106de <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80106d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d8:	2207      	movs	r2, #7
 80106da:	701a      	strb	r2, [r3, #0]
 80106dc:	e000      	b.n	80106e0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80106de:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80106e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80106e8:	3201      	adds	r2, #1
 80106ea:	00d2      	lsls	r2, r2, #3
 80106ec:	211a      	movs	r1, #26
 80106ee:	fb01 f303 	mul.w	r3, r1, r3
 80106f2:	4413      	add	r3, r2
 80106f4:	3308      	adds	r3, #8
 80106f6:	6a3a      	ldr	r2, [r7, #32]
 80106f8:	4413      	add	r3, r2
 80106fa:	3304      	adds	r3, #4
 80106fc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80106fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010700:	69b9      	ldr	r1, [r7, #24]
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	f000 f870 	bl	80107e8 <USBH_ParseEPDesc>
 8010708:	4603      	mov	r3, r0
 801070a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801070e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010712:	3301      	adds	r3, #1
 8010714:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	791b      	ldrb	r3, [r3, #4]
 801071c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010720:	429a      	cmp	r2, r3
 8010722:	d204      	bcs.n	801072e <USBH_ParseCfgDesc+0x19e>
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	885a      	ldrh	r2, [r3, #2]
 8010728:	8afb      	ldrh	r3, [r7, #22]
 801072a:	429a      	cmp	r2, r3
 801072c:	d8b0      	bhi.n	8010690 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	791b      	ldrb	r3, [r3, #4]
 8010732:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010736:	429a      	cmp	r2, r3
 8010738:	d201      	bcs.n	801073e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 801073a:	2303      	movs	r3, #3
 801073c:	e01c      	b.n	8010778 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 801073e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010742:	3301      	adds	r3, #1
 8010744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801074c:	2b01      	cmp	r3, #1
 801074e:	d805      	bhi.n	801075c <USBH_ParseCfgDesc+0x1cc>
 8010750:	6a3b      	ldr	r3, [r7, #32]
 8010752:	885a      	ldrh	r2, [r3, #2]
 8010754:	8afb      	ldrh	r3, [r7, #22]
 8010756:	429a      	cmp	r2, r3
 8010758:	f63f af74 	bhi.w	8010644 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	791b      	ldrb	r3, [r3, #4]
 8010760:	2b02      	cmp	r3, #2
 8010762:	bf28      	it	cs
 8010764:	2302      	movcs	r3, #2
 8010766:	b2db      	uxtb	r3, r3
 8010768:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801076c:	429a      	cmp	r2, r3
 801076e:	d201      	bcs.n	8010774 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010770:	2303      	movs	r3, #3
 8010772:	e001      	b.n	8010778 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010774:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010778:	4618      	mov	r0, r3
 801077a:	3730      	adds	r7, #48	@ 0x30
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	781a      	ldrb	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	785a      	ldrb	r2, [r3, #1]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	789a      	ldrb	r2, [r3, #2]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	78da      	ldrb	r2, [r3, #3]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	3304      	adds	r3, #4
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	bf28      	it	cs
 80107b4:	2302      	movcs	r3, #2
 80107b6:	b2da      	uxtb	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	795a      	ldrb	r2, [r3, #5]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	799a      	ldrb	r2, [r3, #6]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	79da      	ldrb	r2, [r3, #7]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	7a1a      	ldrb	r2, [r3, #8]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	721a      	strb	r2, [r3, #8]
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	781a      	ldrb	r2, [r3, #0]
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	785a      	ldrb	r2, [r3, #1]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	789a      	ldrb	r2, [r3, #2]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	78da      	ldrb	r2, [r3, #3]
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3304      	adds	r3, #4
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	3305      	adds	r3, #5
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	021b      	lsls	r3, r3, #8
 8010828:	b29b      	uxth	r3, r3
 801082a:	4313      	orrs	r3, r2
 801082c:	b29a      	uxth	r2, r3
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	799a      	ldrb	r2, [r3, #6]
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	889b      	ldrh	r3, [r3, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d009      	beq.n	8010856 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801084a:	d804      	bhi.n	8010856 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010854:	d901      	bls.n	801085a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010856:	2303      	movs	r3, #3
 8010858:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010860:	2b00      	cmp	r3, #0
 8010862:	d136      	bne.n	80108d2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	78db      	ldrb	r3, [r3, #3]
 8010868:	f003 0303 	and.w	r3, r3, #3
 801086c:	2b02      	cmp	r3, #2
 801086e:	d108      	bne.n	8010882 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	889b      	ldrh	r3, [r3, #4]
 8010874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010878:	f240 8097 	bls.w	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801087c:	2303      	movs	r3, #3
 801087e:	75fb      	strb	r3, [r7, #23]
 8010880:	e093      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	78db      	ldrb	r3, [r3, #3]
 8010886:	f003 0303 	and.w	r3, r3, #3
 801088a:	2b00      	cmp	r3, #0
 801088c:	d107      	bne.n	801089e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	889b      	ldrh	r3, [r3, #4]
 8010892:	2b40      	cmp	r3, #64	@ 0x40
 8010894:	f240 8089 	bls.w	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010898:	2303      	movs	r3, #3
 801089a:	75fb      	strb	r3, [r7, #23]
 801089c:	e085      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	78db      	ldrb	r3, [r3, #3]
 80108a2:	f003 0303 	and.w	r3, r3, #3
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d005      	beq.n	80108b6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	78db      	ldrb	r3, [r3, #3]
 80108ae:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d10a      	bne.n	80108cc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	799b      	ldrb	r3, [r3, #6]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d003      	beq.n	80108c6 <USBH_ParseEPDesc+0xde>
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	799b      	ldrb	r3, [r3, #6]
 80108c2:	2b10      	cmp	r3, #16
 80108c4:	d970      	bls.n	80109a8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80108c6:	2303      	movs	r3, #3
 80108c8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80108ca:	e06d      	b.n	80109a8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80108cc:	2303      	movs	r3, #3
 80108ce:	75fb      	strb	r3, [r7, #23]
 80108d0:	e06b      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d13c      	bne.n	8010956 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	78db      	ldrb	r3, [r3, #3]
 80108e0:	f003 0303 	and.w	r3, r3, #3
 80108e4:	2b02      	cmp	r3, #2
 80108e6:	d005      	beq.n	80108f4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	78db      	ldrb	r3, [r3, #3]
 80108ec:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d106      	bne.n	8010902 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	889b      	ldrh	r3, [r3, #4]
 80108f8:	2b40      	cmp	r3, #64	@ 0x40
 80108fa:	d956      	bls.n	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80108fc:	2303      	movs	r3, #3
 80108fe:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010900:	e053      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	78db      	ldrb	r3, [r3, #3]
 8010906:	f003 0303 	and.w	r3, r3, #3
 801090a:	2b01      	cmp	r3, #1
 801090c:	d10e      	bne.n	801092c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	799b      	ldrb	r3, [r3, #6]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d007      	beq.n	8010926 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801091a:	2b10      	cmp	r3, #16
 801091c:	d803      	bhi.n	8010926 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010922:	2b40      	cmp	r3, #64	@ 0x40
 8010924:	d941      	bls.n	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010926:	2303      	movs	r3, #3
 8010928:	75fb      	strb	r3, [r7, #23]
 801092a:	e03e      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	78db      	ldrb	r3, [r3, #3]
 8010930:	f003 0303 	and.w	r3, r3, #3
 8010934:	2b03      	cmp	r3, #3
 8010936:	d10b      	bne.n	8010950 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	799b      	ldrb	r3, [r3, #6]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d004      	beq.n	801094a <USBH_ParseEPDesc+0x162>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	889b      	ldrh	r3, [r3, #4]
 8010944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010948:	d32f      	bcc.n	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801094a:	2303      	movs	r3, #3
 801094c:	75fb      	strb	r3, [r7, #23]
 801094e:	e02c      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010950:	2303      	movs	r3, #3
 8010952:	75fb      	strb	r3, [r7, #23]
 8010954:	e029      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801095c:	2b02      	cmp	r3, #2
 801095e:	d120      	bne.n	80109a2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	78db      	ldrb	r3, [r3, #3]
 8010964:	f003 0303 	and.w	r3, r3, #3
 8010968:	2b00      	cmp	r3, #0
 801096a:	d106      	bne.n	801097a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	889b      	ldrh	r3, [r3, #4]
 8010970:	2b08      	cmp	r3, #8
 8010972:	d01a      	beq.n	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010974:	2303      	movs	r3, #3
 8010976:	75fb      	strb	r3, [r7, #23]
 8010978:	e017      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	78db      	ldrb	r3, [r3, #3]
 801097e:	f003 0303 	and.w	r3, r3, #3
 8010982:	2b03      	cmp	r3, #3
 8010984:	d10a      	bne.n	801099c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	799b      	ldrb	r3, [r3, #6]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <USBH_ParseEPDesc+0x1ae>
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	889b      	ldrh	r3, [r3, #4]
 8010992:	2b08      	cmp	r3, #8
 8010994:	d909      	bls.n	80109aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010996:	2303      	movs	r3, #3
 8010998:	75fb      	strb	r3, [r7, #23]
 801099a:	e006      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801099c:	2303      	movs	r3, #3
 801099e:	75fb      	strb	r3, [r7, #23]
 80109a0:	e003      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80109a2:	2303      	movs	r3, #3
 80109a4:	75fb      	strb	r3, [r7, #23]
 80109a6:	e000      	b.n	80109aa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80109a8:	bf00      	nop
  }

  return status;
 80109aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	371c      	adds	r7, #28
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3301      	adds	r3, #1
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	2b03      	cmp	r3, #3
 80109ce:	d120      	bne.n	8010a12 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	1e9a      	subs	r2, r3, #2
 80109d6:	88fb      	ldrh	r3, [r7, #6]
 80109d8:	4293      	cmp	r3, r2
 80109da:	bf28      	it	cs
 80109dc:	4613      	movcs	r3, r2
 80109de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	3302      	adds	r3, #2
 80109e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80109e6:	2300      	movs	r3, #0
 80109e8:	82fb      	strh	r3, [r7, #22]
 80109ea:	e00b      	b.n	8010a04 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80109ec:	8afb      	ldrh	r3, [r7, #22]
 80109ee:	68fa      	ldr	r2, [r7, #12]
 80109f0:	4413      	add	r3, r2
 80109f2:	781a      	ldrb	r2, [r3, #0]
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	3301      	adds	r3, #1
 80109fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80109fe:	8afb      	ldrh	r3, [r7, #22]
 8010a00:	3302      	adds	r3, #2
 8010a02:	82fb      	strh	r3, [r7, #22]
 8010a04:	8afa      	ldrh	r2, [r7, #22]
 8010a06:	8abb      	ldrh	r3, [r7, #20]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d3ef      	bcc.n	80109ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	701a      	strb	r2, [r3, #0]
  }
}
 8010a12:	bf00      	nop
 8010a14:	371c      	adds	r7, #28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010a1e:	b480      	push	{r7}
 8010a20:	b085      	sub	sp, #20
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	7812      	ldrb	r2, [r2, #0]
 8010a30:	4413      	add	r3, r2
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4413      	add	r3, r2
 8010a42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010a44:	68fb      	ldr	r3, [r7, #12]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3714      	adds	r7, #20
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b086      	sub	sp, #24
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	60f8      	str	r0, [r7, #12]
 8010a5a:	60b9      	str	r1, [r7, #8]
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010a60:	2301      	movs	r3, #1
 8010a62:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	789b      	ldrb	r3, [r3, #2]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d002      	beq.n	8010a72 <USBH_CtlReq+0x20>
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	d01d      	beq.n	8010aac <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010a70:	e043      	b.n	8010afa <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	88fa      	ldrh	r2, [r7, #6]
 8010a7c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2201      	movs	r2, #1
 8010a82:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2202      	movs	r2, #2
 8010a88:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2203      	movs	r2, #3
 8010a92:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f000 fcd7 	bl	8011458 <osMessagePut>
      break;
 8010aaa:	e026      	b.n	8010afa <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f000 f829 	bl	8010b04 <USBH_HandleControl>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d002      	beq.n	8010ac2 <USBH_CtlReq+0x70>
 8010abc:	7dfb      	ldrb	r3, [r7, #23]
 8010abe:	2b03      	cmp	r3, #3
 8010ac0:	d106      	bne.n	8010ad0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	761a      	strb	r2, [r3, #24]
 8010ace:	e005      	b.n	8010adc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010ad0:	7dfb      	ldrb	r3, [r7, #23]
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	d102      	bne.n	8010adc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2201      	movs	r2, #1
 8010ada:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2203      	movs	r2, #3
 8010ae0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010af0:	2200      	movs	r2, #0
 8010af2:	4619      	mov	r1, r3
 8010af4:	f000 fcb0 	bl	8011458 <osMessagePut>
      break;
 8010af8:	bf00      	nop
  }
  return status;
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3718      	adds	r7, #24
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af02      	add	r7, sp, #8
 8010b0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	7e1b      	ldrb	r3, [r3, #24]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	2b0a      	cmp	r3, #10
 8010b1c:	f200 8229 	bhi.w	8010f72 <USBH_HandleControl+0x46e>
 8010b20:	a201      	add	r2, pc, #4	@ (adr r2, 8010b28 <USBH_HandleControl+0x24>)
 8010b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b26:	bf00      	nop
 8010b28:	08010b55 	.word	0x08010b55
 8010b2c:	08010b6f 	.word	0x08010b6f
 8010b30:	08010c11 	.word	0x08010c11
 8010b34:	08010c37 	.word	0x08010c37
 8010b38:	08010cc3 	.word	0x08010cc3
 8010b3c:	08010ced 	.word	0x08010ced
 8010b40:	08010daf 	.word	0x08010daf
 8010b44:	08010dd1 	.word	0x08010dd1
 8010b48:	08010e63 	.word	0x08010e63
 8010b4c:	08010e89 	.word	0x08010e89
 8010b50:	08010f1b 	.word	0x08010f1b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f103 0110 	add.w	r1, r3, #16
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	795b      	ldrb	r3, [r3, #5]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 fa17 	bl	8010f94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2202      	movs	r2, #2
 8010b6a:	761a      	strb	r2, [r3, #24]
      break;
 8010b6c:	e20c      	b.n	8010f88 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	795b      	ldrb	r3, [r3, #5]
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f003 f925 	bl	8013dc4 <USBH_LL_GetURBState>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010b7e:	7bbb      	ldrb	r3, [r7, #14]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d12c      	bne.n	8010bde <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	7c1b      	ldrb	r3, [r3, #16]
 8010b88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010b8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8adb      	ldrh	r3, [r3, #22]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00a      	beq.n	8010bac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010b96:	7b7b      	ldrb	r3, [r7, #13]
 8010b98:	2b80      	cmp	r3, #128	@ 0x80
 8010b9a:	d103      	bne.n	8010ba4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2203      	movs	r2, #3
 8010ba0:	761a      	strb	r2, [r3, #24]
 8010ba2:	e00d      	b.n	8010bc0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2205      	movs	r2, #5
 8010ba8:	761a      	strb	r2, [r3, #24]
 8010baa:	e009      	b.n	8010bc0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010bac:	7b7b      	ldrb	r3, [r7, #13]
 8010bae:	2b80      	cmp	r3, #128	@ 0x80
 8010bb0:	d103      	bne.n	8010bba <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2209      	movs	r2, #9
 8010bb6:	761a      	strb	r2, [r3, #24]
 8010bb8:	e002      	b.n	8010bc0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2207      	movs	r2, #7
 8010bbe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2203      	movs	r2, #3
 8010bc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	f000 fc3e 	bl	8011458 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010bdc:	e1cb      	b.n	8010f76 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010bde:	7bbb      	ldrb	r3, [r7, #14]
 8010be0:	2b04      	cmp	r3, #4
 8010be2:	d003      	beq.n	8010bec <USBH_HandleControl+0xe8>
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	f040 81c5 	bne.w	8010f76 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	220b      	movs	r2, #11
 8010bf0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2203      	movs	r2, #3
 8010bf6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c06:	2200      	movs	r2, #0
 8010c08:	4619      	mov	r1, r3
 8010c0a:	f000 fc25 	bl	8011458 <osMessagePut>
      break;
 8010c0e:	e1b2      	b.n	8010f76 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6899      	ldr	r1, [r3, #8]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	899a      	ldrh	r2, [r3, #12]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	791b      	ldrb	r3, [r3, #4]
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 f9f2 	bl	8011012 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2204      	movs	r2, #4
 8010c32:	761a      	strb	r2, [r3, #24]
      break;
 8010c34:	e1a8      	b.n	8010f88 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	791b      	ldrb	r3, [r3, #4]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f003 f8c1 	bl	8013dc4 <USBH_LL_GetURBState>
 8010c42:	4603      	mov	r3, r0
 8010c44:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010c46:	7bbb      	ldrb	r3, [r7, #14]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d110      	bne.n	8010c6e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2209      	movs	r2, #9
 8010c50:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2203      	movs	r2, #3
 8010c56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c66:	2200      	movs	r2, #0
 8010c68:	4619      	mov	r1, r3
 8010c6a:	f000 fbf5 	bl	8011458 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010c6e:	7bbb      	ldrb	r3, [r7, #14]
 8010c70:	2b05      	cmp	r3, #5
 8010c72:	d110      	bne.n	8010c96 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010c74:	2303      	movs	r3, #3
 8010c76:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2203      	movs	r2, #3
 8010c7c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4619      	mov	r1, r3
 8010c90:	f000 fbe2 	bl	8011458 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010c94:	e171      	b.n	8010f7a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010c96:	7bbb      	ldrb	r3, [r7, #14]
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	f040 816e 	bne.w	8010f7a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	220b      	movs	r2, #11
 8010ca2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2203      	movs	r2, #3
 8010ca8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010cb8:	2200      	movs	r2, #0
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f000 fbcc 	bl	8011458 <osMessagePut>
      break;
 8010cc0:	e15b      	b.n	8010f7a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6899      	ldr	r1, [r3, #8]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	899a      	ldrh	r2, [r3, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	795b      	ldrb	r3, [r3, #5]
 8010cce:	2001      	movs	r0, #1
 8010cd0:	9000      	str	r0, [sp, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f978 	bl	8010fc8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2206      	movs	r2, #6
 8010ce8:	761a      	strb	r2, [r3, #24]
      break;
 8010cea:	e14d      	b.n	8010f88 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	795b      	ldrb	r3, [r3, #5]
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f003 f866 	bl	8013dc4 <USBH_LL_GetURBState>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010cfc:	7bbb      	ldrb	r3, [r7, #14]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d111      	bne.n	8010d26 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2207      	movs	r2, #7
 8010d06:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2203      	movs	r2, #3
 8010d0c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	4619      	mov	r1, r3
 8010d20:	f000 fb9a 	bl	8011458 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010d24:	e12b      	b.n	8010f7e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8010d26:	7bbb      	ldrb	r3, [r7, #14]
 8010d28:	2b05      	cmp	r3, #5
 8010d2a:	d113      	bne.n	8010d54 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	220c      	movs	r2, #12
 8010d30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010d32:	2303      	movs	r3, #3
 8010d34:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2203      	movs	r2, #3
 8010d3a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	f000 fb83 	bl	8011458 <osMessagePut>
      break;
 8010d52:	e114      	b.n	8010f7e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010d54:	7bbb      	ldrb	r3, [r7, #14]
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d111      	bne.n	8010d7e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2205      	movs	r2, #5
 8010d5e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2203      	movs	r2, #3
 8010d64:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d74:	2200      	movs	r2, #0
 8010d76:	4619      	mov	r1, r3
 8010d78:	f000 fb6e 	bl	8011458 <osMessagePut>
      break;
 8010d7c:	e0ff      	b.n	8010f7e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8010d7e:	7bbb      	ldrb	r3, [r7, #14]
 8010d80:	2b04      	cmp	r3, #4
 8010d82:	f040 80fc 	bne.w	8010f7e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	220b      	movs	r2, #11
 8010d8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010d8c:	2302      	movs	r3, #2
 8010d8e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2203      	movs	r2, #3
 8010d94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010da4:	2200      	movs	r2, #0
 8010da6:	4619      	mov	r1, r3
 8010da8:	f000 fb56 	bl	8011458 <osMessagePut>
      break;
 8010dac:	e0e7      	b.n	8010f7e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	791b      	ldrb	r3, [r3, #4]
 8010db2:	2200      	movs	r2, #0
 8010db4:	2100      	movs	r1, #0
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 f92b 	bl	8011012 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2208      	movs	r2, #8
 8010dcc:	761a      	strb	r2, [r3, #24]

      break;
 8010dce:	e0db      	b.n	8010f88 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	791b      	ldrb	r3, [r3, #4]
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f002 fff4 	bl	8013dc4 <USBH_LL_GetURBState>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010de0:	7bbb      	ldrb	r3, [r7, #14]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d113      	bne.n	8010e0e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	220d      	movs	r2, #13
 8010dea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010dec:	2300      	movs	r3, #0
 8010dee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2203      	movs	r2, #3
 8010df4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e04:	2200      	movs	r2, #0
 8010e06:	4619      	mov	r1, r3
 8010e08:	f000 fb26 	bl	8011458 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e0c:	e0b9      	b.n	8010f82 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8010e0e:	7bbb      	ldrb	r3, [r7, #14]
 8010e10:	2b04      	cmp	r3, #4
 8010e12:	d111      	bne.n	8010e38 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	220b      	movs	r2, #11
 8010e18:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2203      	movs	r2, #3
 8010e1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e2e:	2200      	movs	r2, #0
 8010e30:	4619      	mov	r1, r3
 8010e32:	f000 fb11 	bl	8011458 <osMessagePut>
      break;
 8010e36:	e0a4      	b.n	8010f82 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8010e38:	7bbb      	ldrb	r3, [r7, #14]
 8010e3a:	2b05      	cmp	r3, #5
 8010e3c:	f040 80a1 	bne.w	8010f82 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010e40:	2303      	movs	r3, #3
 8010e42:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2203      	movs	r2, #3
 8010e48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e58:	2200      	movs	r2, #0
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	f000 fafc 	bl	8011458 <osMessagePut>
      break;
 8010e60:	e08f      	b.n	8010f82 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	795b      	ldrb	r3, [r3, #5]
 8010e66:	2201      	movs	r2, #1
 8010e68:	9200      	str	r2, [sp, #0]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f8aa 	bl	8010fc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	220a      	movs	r2, #10
 8010e84:	761a      	strb	r2, [r3, #24]
      break;
 8010e86:	e07f      	b.n	8010f88 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	795b      	ldrb	r3, [r3, #5]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f002 ff98 	bl	8013dc4 <USBH_LL_GetURBState>
 8010e94:	4603      	mov	r3, r0
 8010e96:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010e98:	7bbb      	ldrb	r3, [r7, #14]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d113      	bne.n	8010ec6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	220d      	movs	r2, #13
 8010ea6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2203      	movs	r2, #3
 8010eac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	f000 faca 	bl	8011458 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ec4:	e05f      	b.n	8010f86 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010ec6:	7bbb      	ldrb	r3, [r7, #14]
 8010ec8:	2b02      	cmp	r3, #2
 8010eca:	d111      	bne.n	8010ef0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2209      	movs	r2, #9
 8010ed0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2203      	movs	r2, #3
 8010ed6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	4619      	mov	r1, r3
 8010eea:	f000 fab5 	bl	8011458 <osMessagePut>
      break;
 8010eee:	e04a      	b.n	8010f86 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8010ef0:	7bbb      	ldrb	r3, [r7, #14]
 8010ef2:	2b04      	cmp	r3, #4
 8010ef4:	d147      	bne.n	8010f86 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	220b      	movs	r2, #11
 8010efa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2203      	movs	r2, #3
 8010f00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010f10:	2200      	movs	r2, #0
 8010f12:	4619      	mov	r1, r3
 8010f14:	f000 faa0 	bl	8011458 <osMessagePut>
      break;
 8010f18:	e035      	b.n	8010f86 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	7e5b      	ldrb	r3, [r3, #25]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	765a      	strb	r2, [r3, #25]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	7e5b      	ldrb	r3, [r3, #25]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d806      	bhi.n	8010f3c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2201      	movs	r2, #1
 8010f38:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010f3a:	e025      	b.n	8010f88 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010f42:	2106      	movs	r1, #6
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	795b      	ldrb	r3, [r3, #5]
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f90d 	bl	8011174 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	791b      	ldrb	r3, [r3, #4]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 f907 	bl	8011174 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8010f70:	e00a      	b.n	8010f88 <USBH_HandleControl+0x484>

    default:
      break;
 8010f72:	bf00      	nop
 8010f74:	e008      	b.n	8010f88 <USBH_HandleControl+0x484>
      break;
 8010f76:	bf00      	nop
 8010f78:	e006      	b.n	8010f88 <USBH_HandleControl+0x484>
      break;
 8010f7a:	bf00      	nop
 8010f7c:	e004      	b.n	8010f88 <USBH_HandleControl+0x484>
      break;
 8010f7e:	bf00      	nop
 8010f80:	e002      	b.n	8010f88 <USBH_HandleControl+0x484>
      break;
 8010f82:	bf00      	nop
 8010f84:	e000      	b.n	8010f88 <USBH_HandleControl+0x484>
      break;
 8010f86:	bf00      	nop
  }

  return status;
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop

08010f94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b088      	sub	sp, #32
 8010f98:	af04      	add	r7, sp, #16
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010fa2:	79f9      	ldrb	r1, [r7, #7]
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9303      	str	r3, [sp, #12]
 8010fa8:	2308      	movs	r3, #8
 8010faa:	9302      	str	r3, [sp, #8]
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	9301      	str	r3, [sp, #4]
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f002 fed2 	bl	8013d62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b088      	sub	sp, #32
 8010fcc:	af04      	add	r7, sp, #16
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	80fb      	strh	r3, [r7, #6]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010fec:	7979      	ldrb	r1, [r7, #5]
 8010fee:	7e3b      	ldrb	r3, [r7, #24]
 8010ff0:	9303      	str	r3, [sp, #12]
 8010ff2:	88fb      	ldrh	r3, [r7, #6]
 8010ff4:	9302      	str	r3, [sp, #8]
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	2300      	movs	r3, #0
 8011000:	2200      	movs	r2, #0
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f002 fead 	bl	8013d62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011008:	2300      	movs	r3, #0
}
 801100a:	4618      	mov	r0, r3
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}

08011012 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b088      	sub	sp, #32
 8011016:	af04      	add	r7, sp, #16
 8011018:	60f8      	str	r0, [r7, #12]
 801101a:	60b9      	str	r1, [r7, #8]
 801101c:	4611      	mov	r1, r2
 801101e:	461a      	mov	r2, r3
 8011020:	460b      	mov	r3, r1
 8011022:	80fb      	strh	r3, [r7, #6]
 8011024:	4613      	mov	r3, r2
 8011026:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011028:	7979      	ldrb	r1, [r7, #5]
 801102a:	2300      	movs	r3, #0
 801102c:	9303      	str	r3, [sp, #12]
 801102e:	88fb      	ldrh	r3, [r7, #6]
 8011030:	9302      	str	r3, [sp, #8]
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	2301      	movs	r3, #1
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	2300      	movs	r3, #0
 801103c:	2201      	movs	r2, #1
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f002 fe8f 	bl	8013d62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011044:	2300      	movs	r3, #0

}
 8011046:	4618      	mov	r0, r3
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b088      	sub	sp, #32
 8011052:	af04      	add	r7, sp, #16
 8011054:	60f8      	str	r0, [r7, #12]
 8011056:	60b9      	str	r1, [r7, #8]
 8011058:	4611      	mov	r1, r2
 801105a:	461a      	mov	r2, r3
 801105c:	460b      	mov	r3, r1
 801105e:	80fb      	strh	r3, [r7, #6]
 8011060:	4613      	mov	r3, r2
 8011062:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801106a:	2b00      	cmp	r3, #0
 801106c:	d001      	beq.n	8011072 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011072:	7979      	ldrb	r1, [r7, #5]
 8011074:	7e3b      	ldrb	r3, [r7, #24]
 8011076:	9303      	str	r3, [sp, #12]
 8011078:	88fb      	ldrh	r3, [r7, #6]
 801107a:	9302      	str	r3, [sp, #8]
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	2301      	movs	r3, #1
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	2302      	movs	r3, #2
 8011086:	2200      	movs	r2, #0
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f002 fe6a 	bl	8013d62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b088      	sub	sp, #32
 801109c:	af04      	add	r7, sp, #16
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	4611      	mov	r1, r2
 80110a4:	461a      	mov	r2, r3
 80110a6:	460b      	mov	r3, r1
 80110a8:	80fb      	strh	r3, [r7, #6]
 80110aa:	4613      	mov	r3, r2
 80110ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80110ae:	7979      	ldrb	r1, [r7, #5]
 80110b0:	2300      	movs	r3, #0
 80110b2:	9303      	str	r3, [sp, #12]
 80110b4:	88fb      	ldrh	r3, [r7, #6]
 80110b6:	9302      	str	r3, [sp, #8]
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	9301      	str	r3, [sp, #4]
 80110bc:	2301      	movs	r3, #1
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	2302      	movs	r3, #2
 80110c2:	2201      	movs	r2, #1
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f002 fe4c 	bl	8013d62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80110ca:	2300      	movs	r3, #0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af04      	add	r7, sp, #16
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	4608      	mov	r0, r1
 80110de:	4611      	mov	r1, r2
 80110e0:	461a      	mov	r2, r3
 80110e2:	4603      	mov	r3, r0
 80110e4:	70fb      	strb	r3, [r7, #3]
 80110e6:	460b      	mov	r3, r1
 80110e8:	70bb      	strb	r3, [r7, #2]
 80110ea:	4613      	mov	r3, r2
 80110ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80110ee:	7878      	ldrb	r0, [r7, #1]
 80110f0:	78ba      	ldrb	r2, [r7, #2]
 80110f2:	78f9      	ldrb	r1, [r7, #3]
 80110f4:	8b3b      	ldrh	r3, [r7, #24]
 80110f6:	9302      	str	r3, [sp, #8]
 80110f8:	7d3b      	ldrb	r3, [r7, #20]
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	7c3b      	ldrb	r3, [r7, #16]
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	4603      	mov	r3, r0
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f002 fddf 	bl	8013cc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}

08011112 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	460b      	mov	r3, r1
 801111c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801111e:	78fb      	ldrb	r3, [r7, #3]
 8011120:	4619      	mov	r1, r3
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f002 fdfe 	bl	8013d24 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011128:	2300      	movs	r3, #0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b084      	sub	sp, #16
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	460b      	mov	r3, r1
 801113c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f836 	bl	80111b0 <USBH_GetFreePipe>
 8011144:	4603      	mov	r3, r0
 8011146:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011148:	89fb      	ldrh	r3, [r7, #14]
 801114a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801114e:	4293      	cmp	r3, r2
 8011150:	d00a      	beq.n	8011168 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011152:	78fa      	ldrb	r2, [r7, #3]
 8011154:	89fb      	ldrh	r3, [r7, #14]
 8011156:	f003 030f 	and.w	r3, r3, #15
 801115a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	33e0      	adds	r3, #224	@ 0xe0
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	440b      	add	r3, r1
 8011166:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011168:	89fb      	ldrh	r3, [r7, #14]
 801116a:	b2db      	uxtb	r3, r3
}
 801116c:	4618      	mov	r0, r3
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	2b0f      	cmp	r3, #15
 8011184:	d80d      	bhi.n	80111a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011186:	78fb      	ldrb	r3, [r7, #3]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	33e0      	adds	r3, #224	@ 0xe0
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	4413      	add	r3, r2
 8011190:	685a      	ldr	r2, [r3, #4]
 8011192:	78fb      	ldrb	r3, [r7, #3]
 8011194:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	33e0      	adds	r3, #224	@ 0xe0
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	440b      	add	r3, r1
 80111a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	370c      	adds	r7, #12
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80111b8:	2300      	movs	r3, #0
 80111ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80111bc:	2300      	movs	r3, #0
 80111be:	73fb      	strb	r3, [r7, #15]
 80111c0:	e00f      	b.n	80111e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	33e0      	adds	r3, #224	@ 0xe0
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d102      	bne.n	80111dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80111d6:	7bfb      	ldrb	r3, [r7, #15]
 80111d8:	b29b      	uxth	r3, r3
 80111da:	e007      	b.n	80111ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
 80111de:	3301      	adds	r3, #1
 80111e0:	73fb      	strb	r3, [r7, #15]
 80111e2:	7bfb      	ldrb	r3, [r7, #15]
 80111e4:	2b0f      	cmp	r3, #15
 80111e6:	d9ec      	bls.n	80111c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80111e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b087      	sub	sp, #28
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	4613      	mov	r3, r2
 8011204:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011206:	2301      	movs	r3, #1
 8011208:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801120a:	2300      	movs	r3, #0
 801120c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801120e:	4b1f      	ldr	r3, [pc, #124]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011210:	7a5b      	ldrb	r3, [r3, #9]
 8011212:	b2db      	uxtb	r3, r3
 8011214:	2b00      	cmp	r3, #0
 8011216:	d131      	bne.n	801127c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011218:	4b1c      	ldr	r3, [pc, #112]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 801121a:	7a5b      	ldrb	r3, [r3, #9]
 801121c:	b2db      	uxtb	r3, r3
 801121e:	461a      	mov	r2, r3
 8011220:	4b1a      	ldr	r3, [pc, #104]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011222:	2100      	movs	r1, #0
 8011224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011226:	4b19      	ldr	r3, [pc, #100]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011228:	7a5b      	ldrb	r3, [r3, #9]
 801122a:	b2db      	uxtb	r3, r3
 801122c:	4a17      	ldr	r2, [pc, #92]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	4413      	add	r3, r2
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011236:	4b15      	ldr	r3, [pc, #84]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011238:	7a5b      	ldrb	r3, [r3, #9]
 801123a:	b2db      	uxtb	r3, r3
 801123c:	461a      	mov	r2, r3
 801123e:	4b13      	ldr	r3, [pc, #76]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011240:	4413      	add	r3, r2
 8011242:	79fa      	ldrb	r2, [r7, #7]
 8011244:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011246:	4b11      	ldr	r3, [pc, #68]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011248:	7a5b      	ldrb	r3, [r3, #9]
 801124a:	b2db      	uxtb	r3, r3
 801124c:	1c5a      	adds	r2, r3, #1
 801124e:	b2d1      	uxtb	r1, r2
 8011250:	4a0e      	ldr	r2, [pc, #56]	@ (801128c <FATFS_LinkDriverEx+0x94>)
 8011252:	7251      	strb	r1, [r2, #9]
 8011254:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011256:	7dbb      	ldrb	r3, [r7, #22]
 8011258:	3330      	adds	r3, #48	@ 0x30
 801125a:	b2da      	uxtb	r2, r3
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	3301      	adds	r3, #1
 8011264:	223a      	movs	r2, #58	@ 0x3a
 8011266:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	3302      	adds	r3, #2
 801126c:	222f      	movs	r2, #47	@ 0x2f
 801126e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	3303      	adds	r3, #3
 8011274:	2200      	movs	r2, #0
 8011276:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011278:	2300      	movs	r3, #0
 801127a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801127c:	7dfb      	ldrb	r3, [r7, #23]
}
 801127e:	4618      	mov	r0, r3
 8011280:	371c      	adds	r7, #28
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	20000d2c 	.word	0x20000d2c

08011290 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801129a:	2200      	movs	r2, #0
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f7ff ffaa 	bl	80111f8 <FATFS_LinkDriverEx>
 80112a4:	4603      	mov	r3, r0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80112ae:	b480      	push	{r7}
 80112b0:	b085      	sub	sp, #20
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	4603      	mov	r3, r0
 80112b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80112b8:	2300      	movs	r3, #0
 80112ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80112bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112c0:	2b84      	cmp	r3, #132	@ 0x84
 80112c2:	d005      	beq.n	80112d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80112c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	4413      	add	r3, r2
 80112cc:	3303      	adds	r3, #3
 80112ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80112d0:	68fb      	ldr	r3, [r7, #12]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3714      	adds	r7, #20
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr

080112de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80112de:	b480      	push	{r7}
 80112e0:	b083      	sub	sp, #12
 80112e2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112e4:	f3ef 8305 	mrs	r3, IPSR
 80112e8:	607b      	str	r3, [r7, #4]
  return(result);
 80112ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	bf14      	ite	ne
 80112f0:	2301      	movne	r3, #1
 80112f2:	2300      	moveq	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011302:	b580      	push	{r7, lr}
 8011304:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011306:	f001 f975 	bl	80125f4 <vTaskStartScheduler>
  
  return osOK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	bd80      	pop	{r7, pc}

08011310 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011314:	f001 fdd6 	bl	8012ec4 <xTaskGetSchedulerState>
 8011318:	4603      	mov	r3, r0
 801131a:	2b01      	cmp	r3, #1
 801131c:	d101      	bne.n	8011322 <osKernelRunning+0x12>
    return 0;
 801131e:	2300      	movs	r3, #0
 8011320:	e000      	b.n	8011324 <osKernelRunning+0x14>
  else
    return 1;
 8011322:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011324:	4618      	mov	r0, r3
 8011326:	bd80      	pop	{r7, pc}

08011328 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801132c:	f7ff ffd7 	bl	80112de <inHandlerMode>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d003      	beq.n	801133e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011336:	f001 fa81 	bl	801283c <xTaskGetTickCountFromISR>
 801133a:	4603      	mov	r3, r0
 801133c:	e002      	b.n	8011344 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801133e:	f001 fa6d 	bl	801281c <xTaskGetTickCount>
 8011342:	4603      	mov	r3, r0
  }
}
 8011344:	4618      	mov	r0, r3
 8011346:	bd80      	pop	{r7, pc}

08011348 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801134a:	b089      	sub	sp, #36	@ 0x24
 801134c:	af04      	add	r7, sp, #16
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	695b      	ldr	r3, [r3, #20]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d020      	beq.n	801139c <osThreadCreate+0x54>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d01c      	beq.n	801139c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685c      	ldr	r4, [r3, #4]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	691e      	ldr	r6, [r3, #16]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff ff9a 	bl	80112ae <makeFreeRtosPriority>
 801137a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011384:	9202      	str	r2, [sp, #8]
 8011386:	9301      	str	r3, [sp, #4]
 8011388:	9100      	str	r1, [sp, #0]
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	4632      	mov	r2, r6
 801138e:	4629      	mov	r1, r5
 8011390:	4620      	mov	r0, r4
 8011392:	f000 ff4d 	bl	8012230 <xTaskCreateStatic>
 8011396:	4603      	mov	r3, r0
 8011398:	60fb      	str	r3, [r7, #12]
 801139a:	e01c      	b.n	80113d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	685c      	ldr	r4, [r3, #4]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff ff7c 	bl	80112ae <makeFreeRtosPriority>
 80113b6:	4602      	mov	r2, r0
 80113b8:	f107 030c 	add.w	r3, r7, #12
 80113bc:	9301      	str	r3, [sp, #4]
 80113be:	9200      	str	r2, [sp, #0]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	4632      	mov	r2, r6
 80113c4:	4629      	mov	r1, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	f000 ff98 	bl	80122fc <xTaskCreate>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d001      	beq.n	80113d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e000      	b.n	80113d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80113d6:	68fb      	ldr	r3, [r7, #12]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <osDelay+0x16>
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	e000      	b.n	80113f8 <osDelay+0x18>
 80113f6:	2301      	movs	r3, #1
 80113f8:	4618      	mov	r0, r3
 80113fa:	f001 f8c3 	bl	8012584 <vTaskDelay>
  
  return osOK;
 80113fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011400:	4618      	mov	r0, r3
 8011402:	3710      	adds	r7, #16
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011408:	b590      	push	{r4, r7, lr}
 801140a:	b085      	sub	sp, #20
 801140c:	af02      	add	r7, sp, #8
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d011      	beq.n	801143e <osMessageCreate+0x36>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00d      	beq.n	801143e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6818      	ldr	r0, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6859      	ldr	r1, [r3, #4]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689a      	ldr	r2, [r3, #8]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	2400      	movs	r4, #0
 8011434:	9400      	str	r4, [sp, #0]
 8011436:	f000 f9e3 	bl	8011800 <xQueueGenericCreateStatic>
 801143a:	4603      	mov	r3, r0
 801143c:	e008      	b.n	8011450 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6818      	ldr	r0, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	2200      	movs	r2, #0
 8011448:	4619      	mov	r1, r3
 801144a:	f000 fa60 	bl	801190e <xQueueGenericCreate>
 801144e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011450:	4618      	mov	r0, r3
 8011452:	370c      	adds	r7, #12
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}

08011458 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011464:	2300      	movs	r3, #0
 8011466:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d101      	bne.n	8011476 <osMessagePut+0x1e>
    ticks = 1;
 8011472:	2301      	movs	r3, #1
 8011474:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011476:	f7ff ff32 	bl	80112de <inHandlerMode>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d018      	beq.n	80114b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011480:	f107 0210 	add.w	r2, r7, #16
 8011484:	f107 0108 	add.w	r1, r7, #8
 8011488:	2300      	movs	r3, #0
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f000 fbac 	bl	8011be8 <xQueueGenericSendFromISR>
 8011490:	4603      	mov	r3, r0
 8011492:	2b01      	cmp	r3, #1
 8011494:	d001      	beq.n	801149a <osMessagePut+0x42>
      return osErrorOS;
 8011496:	23ff      	movs	r3, #255	@ 0xff
 8011498:	e018      	b.n	80114cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d014      	beq.n	80114ca <osMessagePut+0x72>
 80114a0:	4b0c      	ldr	r3, [pc, #48]	@ (80114d4 <osMessagePut+0x7c>)
 80114a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114a6:	601a      	str	r2, [r3, #0]
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	e00b      	b.n	80114ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80114b2:	f107 0108 	add.w	r1, r7, #8
 80114b6:	2300      	movs	r3, #0
 80114b8:	697a      	ldr	r2, [r7, #20]
 80114ba:	68f8      	ldr	r0, [r7, #12]
 80114bc:	f000 fa8a 	bl	80119d4 <xQueueGenericSend>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d001      	beq.n	80114ca <osMessagePut+0x72>
      return osErrorOS;
 80114c6:	23ff      	movs	r3, #255	@ 0xff
 80114c8:	e000      	b.n	80114cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	e000ed04 	.word	0xe000ed04

080114d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80114d8:	b590      	push	{r4, r7, lr}
 80114da:	b08b      	sub	sp, #44	@ 0x2c
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10a      	bne.n	8011508 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80114f2:	2380      	movs	r3, #128	@ 0x80
 80114f4:	617b      	str	r3, [r7, #20]
    return event;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	461c      	mov	r4, r3
 80114fa:	f107 0314 	add.w	r3, r7, #20
 80114fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011506:	e054      	b.n	80115b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011508:	2300      	movs	r3, #0
 801150a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801150c:	2300      	movs	r3, #0
 801150e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011516:	d103      	bne.n	8011520 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801151c:	627b      	str	r3, [r7, #36]	@ 0x24
 801151e:	e009      	b.n	8011534 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d006      	beq.n	8011534 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <osMessageGet+0x5c>
      ticks = 1;
 8011530:	2301      	movs	r3, #1
 8011532:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011534:	f7ff fed3 	bl	80112de <inHandlerMode>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d01c      	beq.n	8011578 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801153e:	f107 0220 	add.w	r2, r7, #32
 8011542:	f107 0314 	add.w	r3, r7, #20
 8011546:	3304      	adds	r3, #4
 8011548:	4619      	mov	r1, r3
 801154a:	68b8      	ldr	r0, [r7, #8]
 801154c:	f000 fcd8 	bl	8011f00 <xQueueReceiveFromISR>
 8011550:	4603      	mov	r3, r0
 8011552:	2b01      	cmp	r3, #1
 8011554:	d102      	bne.n	801155c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011556:	2310      	movs	r3, #16
 8011558:	617b      	str	r3, [r7, #20]
 801155a:	e001      	b.n	8011560 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801155c:	2300      	movs	r3, #0
 801155e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011560:	6a3b      	ldr	r3, [r7, #32]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d01d      	beq.n	80115a2 <osMessageGet+0xca>
 8011566:	4b15      	ldr	r3, [pc, #84]	@ (80115bc <osMessageGet+0xe4>)
 8011568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	f3bf 8f6f 	isb	sy
 8011576:	e014      	b.n	80115a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011578:	f107 0314 	add.w	r3, r7, #20
 801157c:	3304      	adds	r3, #4
 801157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011580:	4619      	mov	r1, r3
 8011582:	68b8      	ldr	r0, [r7, #8]
 8011584:	f000 fbd4 	bl	8011d30 <xQueueReceive>
 8011588:	4603      	mov	r3, r0
 801158a:	2b01      	cmp	r3, #1
 801158c:	d102      	bne.n	8011594 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801158e:	2310      	movs	r3, #16
 8011590:	617b      	str	r3, [r7, #20]
 8011592:	e006      	b.n	80115a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <osMessageGet+0xc6>
 801159a:	2300      	movs	r3, #0
 801159c:	e000      	b.n	80115a0 <osMessageGet+0xc8>
 801159e:	2340      	movs	r3, #64	@ 0x40
 80115a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	461c      	mov	r4, r3
 80115a6:	f107 0314 	add.w	r3, r7, #20
 80115aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	372c      	adds	r7, #44	@ 0x2c
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd90      	pop	{r4, r7, pc}
 80115ba:	bf00      	nop
 80115bc:	e000ed04 	.word	0xe000ed04

080115c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f103 0208 	add.w	r2, r3, #8
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f103 0208 	add.w	r2, r3, #8
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f103 0208 	add.w	r2, r3, #8
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2200      	movs	r2, #0
 80115f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80115f4:	bf00      	nop
 80115f6:	370c      	adds	r7, #12
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801160e:	bf00      	nop
 8011610:	370c      	adds	r7, #12
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr

0801161a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801161a:	b480      	push	{r7}
 801161c:	b085      	sub	sp, #20
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	689a      	ldr	r2, [r3, #8]
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	683a      	ldr	r2, [r7, #0]
 801163e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	683a      	ldr	r2, [r7, #0]
 8011644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	601a      	str	r2, [r3, #0]
}
 8011656:	bf00      	nop
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011662:	b480      	push	{r7}
 8011664:	b085      	sub	sp, #20
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011678:	d103      	bne.n	8011682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	e00c      	b.n	801169c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	3308      	adds	r3, #8
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	e002      	b.n	8011690 <vListInsert+0x2e>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	429a      	cmp	r2, r3
 801169a:	d2f6      	bcs.n	801168a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	683a      	ldr	r2, [r7, #0]
 80116aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	683a      	ldr	r2, [r7, #0]
 80116b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	1c5a      	adds	r2, r3, #1
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	601a      	str	r2, [r3, #0]
}
 80116c8:	bf00      	nop
 80116ca:	3714      	adds	r7, #20
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	6892      	ldr	r2, [r2, #8]
 80116ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	6852      	ldr	r2, [r2, #4]
 80116f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d103      	bne.n	8011708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	689a      	ldr	r2, [r3, #8]
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	1e5a      	subs	r2, r3, #1
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3714      	adds	r7, #20
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr

08011728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d10d      	bne.n	8011758 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801173c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011740:	b672      	cpsid	i
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	b662      	cpsie	i
 8011750:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011752:	bf00      	nop
 8011754:	bf00      	nop
 8011756:	e7fd      	b.n	8011754 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011758:	f001 fdd0 	bl	80132fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011764:	68f9      	ldr	r1, [r7, #12]
 8011766:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011768:	fb01 f303 	mul.w	r3, r1, r3
 801176c:	441a      	add	r2, r3
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2200      	movs	r2, #0
 8011776:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011788:	3b01      	subs	r3, #1
 801178a:	68f9      	ldr	r1, [r7, #12]
 801178c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801178e:	fb01 f303 	mul.w	r3, r1, r3
 8011792:	441a      	add	r2, r3
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	22ff      	movs	r2, #255	@ 0xff
 801179c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	22ff      	movs	r2, #255	@ 0xff
 80117a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d114      	bne.n	80117d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d01a      	beq.n	80117ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3310      	adds	r3, #16
 80117ba:	4618      	mov	r0, r3
 80117bc:	f001 f9b8 	bl	8012b30 <xTaskRemoveFromEventList>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d012      	beq.n	80117ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80117c6:	4b0d      	ldr	r3, [pc, #52]	@ (80117fc <xQueueGenericReset+0xd4>)
 80117c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	e009      	b.n	80117ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	3310      	adds	r3, #16
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff feef 	bl	80115c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	3324      	adds	r3, #36	@ 0x24
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7ff feea 	bl	80115c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80117ec:	f001 fdbc 	bl	8013368 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80117f0:	2301      	movs	r3, #1
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	e000ed04 	.word	0xe000ed04

08011800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011800:	b580      	push	{r7, lr}
 8011802:	b08e      	sub	sp, #56	@ 0x38
 8011804:	af02      	add	r7, sp, #8
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]
 801180c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d10d      	bne.n	8011830 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011818:	b672      	cpsid	i
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	b662      	cpsie	i
 8011828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801182a:	bf00      	nop
 801182c:	bf00      	nop
 801182e:	e7fd      	b.n	801182c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d10d      	bne.n	8011852 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801183a:	b672      	cpsid	i
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	b662      	cpsie	i
 801184a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801184c:	bf00      	nop
 801184e:	bf00      	nop
 8011850:	e7fd      	b.n	801184e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <xQueueGenericCreateStatic+0x5e>
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d001      	beq.n	8011862 <xQueueGenericCreateStatic+0x62>
 801185e:	2301      	movs	r3, #1
 8011860:	e000      	b.n	8011864 <xQueueGenericCreateStatic+0x64>
 8011862:	2300      	movs	r3, #0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10d      	bne.n	8011884 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8011868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801186c:	b672      	cpsid	i
 801186e:	f383 8811 	msr	BASEPRI, r3
 8011872:	f3bf 8f6f 	isb	sy
 8011876:	f3bf 8f4f 	dsb	sy
 801187a:	b662      	cpsie	i
 801187c:	623b      	str	r3, [r7, #32]
}
 801187e:	bf00      	nop
 8011880:	bf00      	nop
 8011882:	e7fd      	b.n	8011880 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d102      	bne.n	8011890 <xQueueGenericCreateStatic+0x90>
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <xQueueGenericCreateStatic+0x94>
 8011890:	2301      	movs	r3, #1
 8011892:	e000      	b.n	8011896 <xQueueGenericCreateStatic+0x96>
 8011894:	2300      	movs	r3, #0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d10d      	bne.n	80118b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801189a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801189e:	b672      	cpsid	i
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	b662      	cpsie	i
 80118ae:	61fb      	str	r3, [r7, #28]
}
 80118b0:	bf00      	nop
 80118b2:	bf00      	nop
 80118b4:	e7fd      	b.n	80118b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80118b6:	2348      	movs	r3, #72	@ 0x48
 80118b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b48      	cmp	r3, #72	@ 0x48
 80118be:	d00d      	beq.n	80118dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80118c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c4:	b672      	cpsid	i
 80118c6:	f383 8811 	msr	BASEPRI, r3
 80118ca:	f3bf 8f6f 	isb	sy
 80118ce:	f3bf 8f4f 	dsb	sy
 80118d2:	b662      	cpsie	i
 80118d4:	61bb      	str	r3, [r7, #24]
}
 80118d6:	bf00      	nop
 80118d8:	bf00      	nop
 80118da:	e7fd      	b.n	80118d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80118dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80118e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00d      	beq.n	8011904 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80118e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ea:	2201      	movs	r2, #1
 80118ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80118f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	4613      	mov	r3, r2
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	68b9      	ldr	r1, [r7, #8]
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f000 f848 	bl	8011994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011906:	4618      	mov	r0, r3
 8011908:	3730      	adds	r7, #48	@ 0x30
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801190e:	b580      	push	{r7, lr}
 8011910:	b08a      	sub	sp, #40	@ 0x28
 8011912:	af02      	add	r7, sp, #8
 8011914:	60f8      	str	r0, [r7, #12]
 8011916:	60b9      	str	r1, [r7, #8]
 8011918:	4613      	mov	r3, r2
 801191a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10d      	bne.n	801193e <xQueueGenericCreate+0x30>
	__asm volatile
 8011922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011926:	b672      	cpsid	i
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	b662      	cpsie	i
 8011936:	613b      	str	r3, [r7, #16]
}
 8011938:	bf00      	nop
 801193a:	bf00      	nop
 801193c:	e7fd      	b.n	801193a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d102      	bne.n	801194a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011944:	2300      	movs	r3, #0
 8011946:	61fb      	str	r3, [r7, #28]
 8011948:	e004      	b.n	8011954 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	fb02 f303 	mul.w	r3, r2, r3
 8011952:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011954:	69fb      	ldr	r3, [r7, #28]
 8011956:	3348      	adds	r3, #72	@ 0x48
 8011958:	4618      	mov	r0, r3
 801195a:	f001 fdfd 	bl	8013558 <pvPortMalloc>
 801195e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d011      	beq.n	801198a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	3348      	adds	r3, #72	@ 0x48
 801196e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	2200      	movs	r2, #0
 8011974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011978:	79fa      	ldrb	r2, [r7, #7]
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	4613      	mov	r3, r2
 8011980:	697a      	ldr	r2, [r7, #20]
 8011982:	68b9      	ldr	r1, [r7, #8]
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f000 f805 	bl	8011994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801198a:	69bb      	ldr	r3, [r7, #24]
	}
 801198c:	4618      	mov	r0, r3
 801198e:	3720      	adds	r7, #32
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d103      	bne.n	80119b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	69ba      	ldr	r2, [r7, #24]
 80119ac:	601a      	str	r2, [r3, #0]
 80119ae:	e002      	b.n	80119b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	68fa      	ldr	r2, [r7, #12]
 80119ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	68ba      	ldr	r2, [r7, #8]
 80119c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80119c2:	2101      	movs	r1, #1
 80119c4:	69b8      	ldr	r0, [r7, #24]
 80119c6:	f7ff feaf 	bl	8011728 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80119ca:	bf00      	nop
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
	...

080119d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08e      	sub	sp, #56	@ 0x38
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
 80119e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80119e2:	2300      	movs	r3, #0
 80119e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80119ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10d      	bne.n	8011a0c <xQueueGenericSend+0x38>
	__asm volatile
 80119f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119f4:	b672      	cpsid	i
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	b662      	cpsie	i
 8011a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011a06:	bf00      	nop
 8011a08:	bf00      	nop
 8011a0a:	e7fd      	b.n	8011a08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d103      	bne.n	8011a1a <xQueueGenericSend+0x46>
 8011a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <xQueueGenericSend+0x4a>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	e000      	b.n	8011a20 <xQueueGenericSend+0x4c>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d10d      	bne.n	8011a40 <xQueueGenericSend+0x6c>
	__asm volatile
 8011a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a28:	b672      	cpsid	i
 8011a2a:	f383 8811 	msr	BASEPRI, r3
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	b662      	cpsie	i
 8011a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011a3a:	bf00      	nop
 8011a3c:	bf00      	nop
 8011a3e:	e7fd      	b.n	8011a3c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	2b02      	cmp	r3, #2
 8011a44:	d103      	bne.n	8011a4e <xQueueGenericSend+0x7a>
 8011a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	d101      	bne.n	8011a52 <xQueueGenericSend+0x7e>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e000      	b.n	8011a54 <xQueueGenericSend+0x80>
 8011a52:	2300      	movs	r3, #0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10d      	bne.n	8011a74 <xQueueGenericSend+0xa0>
	__asm volatile
 8011a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a5c:	b672      	cpsid	i
 8011a5e:	f383 8811 	msr	BASEPRI, r3
 8011a62:	f3bf 8f6f 	isb	sy
 8011a66:	f3bf 8f4f 	dsb	sy
 8011a6a:	b662      	cpsie	i
 8011a6c:	623b      	str	r3, [r7, #32]
}
 8011a6e:	bf00      	nop
 8011a70:	bf00      	nop
 8011a72:	e7fd      	b.n	8011a70 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a74:	f001 fa26 	bl	8012ec4 <xTaskGetSchedulerState>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <xQueueGenericSend+0xb0>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <xQueueGenericSend+0xb4>
 8011a84:	2301      	movs	r3, #1
 8011a86:	e000      	b.n	8011a8a <xQueueGenericSend+0xb6>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10d      	bne.n	8011aaa <xQueueGenericSend+0xd6>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a92:	b672      	cpsid	i
 8011a94:	f383 8811 	msr	BASEPRI, r3
 8011a98:	f3bf 8f6f 	isb	sy
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	b662      	cpsie	i
 8011aa2:	61fb      	str	r3, [r7, #28]
}
 8011aa4:	bf00      	nop
 8011aa6:	bf00      	nop
 8011aa8:	e7fd      	b.n	8011aa6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011aaa:	f001 fc27 	bl	80132fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d302      	bcc.n	8011ac0 <xQueueGenericSend+0xec>
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	d129      	bne.n	8011b14 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ac0:	683a      	ldr	r2, [r7, #0]
 8011ac2:	68b9      	ldr	r1, [r7, #8]
 8011ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ac6:	f000 faa3 	bl	8012010 <prvCopyDataToQueue>
 8011aca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d010      	beq.n	8011af6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ad6:	3324      	adds	r3, #36	@ 0x24
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f001 f829 	bl	8012b30 <xTaskRemoveFromEventList>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d013      	beq.n	8011b0c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8011be4 <xQueueGenericSend+0x210>)
 8011ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011aea:	601a      	str	r2, [r3, #0]
 8011aec:	f3bf 8f4f 	dsb	sy
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	e00a      	b.n	8011b0c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d007      	beq.n	8011b0c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011afc:	4b39      	ldr	r3, [pc, #228]	@ (8011be4 <xQueueGenericSend+0x210>)
 8011afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	f3bf 8f4f 	dsb	sy
 8011b08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b0c:	f001 fc2c 	bl	8013368 <vPortExitCritical>
				return pdPASS;
 8011b10:	2301      	movs	r3, #1
 8011b12:	e063      	b.n	8011bdc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d103      	bne.n	8011b22 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b1a:	f001 fc25 	bl	8013368 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e05c      	b.n	8011bdc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d106      	bne.n	8011b36 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b28:	f107 0314 	add.w	r3, r7, #20
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f001 f865 	bl	8012bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b32:	2301      	movs	r3, #1
 8011b34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b36:	f001 fc17 	bl	8013368 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b3a:	f000 fdc1 	bl	80126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b3e:	f001 fbdd 	bl	80132fc <vPortEnterCritical>
 8011b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011b48:	b25b      	sxtb	r3, r3
 8011b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b4e:	d103      	bne.n	8011b58 <xQueueGenericSend+0x184>
 8011b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b52:	2200      	movs	r2, #0
 8011b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b5e:	b25b      	sxtb	r3, r3
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b64:	d103      	bne.n	8011b6e <xQueueGenericSend+0x19a>
 8011b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011b6e:	f001 fbfb 	bl	8013368 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b72:	1d3a      	adds	r2, r7, #4
 8011b74:	f107 0314 	add.w	r3, r7, #20
 8011b78:	4611      	mov	r1, r2
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f001 f854 	bl	8012c28 <xTaskCheckForTimeOut>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d124      	bne.n	8011bd0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b88:	f000 fb3a 	bl	8012200 <prvIsQueueFull>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d018      	beq.n	8011bc4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b94:	3310      	adds	r3, #16
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	4611      	mov	r1, r2
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 ffa0 	bl	8012ae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ba2:	f000 fac5 	bl	8012130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ba6:	f000 fd99 	bl	80126dc <xTaskResumeAll>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f47f af7c 	bne.w	8011aaa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8011be4 <xQueueGenericSend+0x210>)
 8011bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	f3bf 8f6f 	isb	sy
 8011bc2:	e772      	b.n	8011aaa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bc6:	f000 fab3 	bl	8012130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bca:	f000 fd87 	bl	80126dc <xTaskResumeAll>
 8011bce:	e76c      	b.n	8011aaa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bd2:	f000 faad 	bl	8012130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011bd6:	f000 fd81 	bl	80126dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011bda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3738      	adds	r7, #56	@ 0x38
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	e000ed04 	.word	0xe000ed04

08011be8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b08e      	sub	sp, #56	@ 0x38
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
 8011bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d10d      	bne.n	8011c1c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c04:	b672      	cpsid	i
 8011c06:	f383 8811 	msr	BASEPRI, r3
 8011c0a:	f3bf 8f6f 	isb	sy
 8011c0e:	f3bf 8f4f 	dsb	sy
 8011c12:	b662      	cpsie	i
 8011c14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011c16:	bf00      	nop
 8011c18:	bf00      	nop
 8011c1a:	e7fd      	b.n	8011c18 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d103      	bne.n	8011c2a <xQueueGenericSendFromISR+0x42>
 8011c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d101      	bne.n	8011c2e <xQueueGenericSendFromISR+0x46>
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e000      	b.n	8011c30 <xQueueGenericSendFromISR+0x48>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10d      	bne.n	8011c50 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c38:	b672      	cpsid	i
 8011c3a:	f383 8811 	msr	BASEPRI, r3
 8011c3e:	f3bf 8f6f 	isb	sy
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	b662      	cpsie	i
 8011c48:	623b      	str	r3, [r7, #32]
}
 8011c4a:	bf00      	nop
 8011c4c:	bf00      	nop
 8011c4e:	e7fd      	b.n	8011c4c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	d103      	bne.n	8011c5e <xQueueGenericSendFromISR+0x76>
 8011c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d101      	bne.n	8011c62 <xQueueGenericSendFromISR+0x7a>
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e000      	b.n	8011c64 <xQueueGenericSendFromISR+0x7c>
 8011c62:	2300      	movs	r3, #0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d10d      	bne.n	8011c84 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c6c:	b672      	cpsid	i
 8011c6e:	f383 8811 	msr	BASEPRI, r3
 8011c72:	f3bf 8f6f 	isb	sy
 8011c76:	f3bf 8f4f 	dsb	sy
 8011c7a:	b662      	cpsie	i
 8011c7c:	61fb      	str	r3, [r7, #28]
}
 8011c7e:	bf00      	nop
 8011c80:	bf00      	nop
 8011c82:	e7fd      	b.n	8011c80 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c84:	f001 fc22 	bl	80134cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011c88:	f3ef 8211 	mrs	r2, BASEPRI
 8011c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c90:	b672      	cpsid	i
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	b662      	cpsie	i
 8011ca0:	61ba      	str	r2, [r7, #24]
 8011ca2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ca4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d302      	bcc.n	8011cba <xQueueGenericSendFromISR+0xd2>
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	d12c      	bne.n	8011d14 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	68b9      	ldr	r1, [r7, #8]
 8011cc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cca:	f000 f9a1 	bl	8012010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011cce:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011cd6:	d112      	bne.n	8011cfe <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d016      	beq.n	8011d0e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ce2:	3324      	adds	r3, #36	@ 0x24
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f000 ff23 	bl	8012b30 <xTaskRemoveFromEventList>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00e      	beq.n	8011d0e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d00b      	beq.n	8011d0e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	e007      	b.n	8011d0e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011d02:	3301      	adds	r3, #1
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	b25a      	sxtb	r2, r3
 8011d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8011d12:	e001      	b.n	8011d18 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d14:	2300      	movs	r3, #0
 8011d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3738      	adds	r7, #56	@ 0x38
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08c      	sub	sp, #48	@ 0x30
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d10d      	bne.n	8011d66 <xQueueReceive+0x36>
	__asm volatile
 8011d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d4e:	b672      	cpsid	i
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	b662      	cpsie	i
 8011d5e:	623b      	str	r3, [r7, #32]
}
 8011d60:	bf00      	nop
 8011d62:	bf00      	nop
 8011d64:	e7fd      	b.n	8011d62 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d103      	bne.n	8011d74 <xQueueReceive+0x44>
 8011d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d101      	bne.n	8011d78 <xQueueReceive+0x48>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e000      	b.n	8011d7a <xQueueReceive+0x4a>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10d      	bne.n	8011d9a <xQueueReceive+0x6a>
	__asm volatile
 8011d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d82:	b672      	cpsid	i
 8011d84:	f383 8811 	msr	BASEPRI, r3
 8011d88:	f3bf 8f6f 	isb	sy
 8011d8c:	f3bf 8f4f 	dsb	sy
 8011d90:	b662      	cpsie	i
 8011d92:	61fb      	str	r3, [r7, #28]
}
 8011d94:	bf00      	nop
 8011d96:	bf00      	nop
 8011d98:	e7fd      	b.n	8011d96 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d9a:	f001 f893 	bl	8012ec4 <xTaskGetSchedulerState>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d102      	bne.n	8011daa <xQueueReceive+0x7a>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <xQueueReceive+0x7e>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <xQueueReceive+0x80>
 8011dae:	2300      	movs	r3, #0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10d      	bne.n	8011dd0 <xQueueReceive+0xa0>
	__asm volatile
 8011db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011db8:	b672      	cpsid	i
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	b662      	cpsie	i
 8011dc8:	61bb      	str	r3, [r7, #24]
}
 8011dca:	bf00      	nop
 8011dcc:	bf00      	nop
 8011dce:	e7fd      	b.n	8011dcc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011dd0:	f001 fa94 	bl	80132fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d01f      	beq.n	8011e20 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011de0:	68b9      	ldr	r1, [r7, #8]
 8011de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011de4:	f000 f97e 	bl	80120e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dea:	1e5a      	subs	r2, r3, #1
 8011dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00f      	beq.n	8011e18 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dfa:	3310      	adds	r3, #16
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f000 fe97 	bl	8012b30 <xTaskRemoveFromEventList>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d007      	beq.n	8011e18 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011e08:	4b3c      	ldr	r3, [pc, #240]	@ (8011efc <xQueueReceive+0x1cc>)
 8011e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011e18:	f001 faa6 	bl	8013368 <vPortExitCritical>
				return pdPASS;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e069      	b.n	8011ef4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d103      	bne.n	8011e2e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e26:	f001 fa9f 	bl	8013368 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	e062      	b.n	8011ef4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d106      	bne.n	8011e42 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e34:	f107 0310 	add.w	r3, r7, #16
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f000 fedf 	bl	8012bfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e42:	f001 fa91 	bl	8013368 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e46:	f000 fc3b 	bl	80126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e4a:	f001 fa57 	bl	80132fc <vPortEnterCritical>
 8011e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011e54:	b25b      	sxtb	r3, r3
 8011e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011e5a:	d103      	bne.n	8011e64 <xQueueReceive+0x134>
 8011e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011e6a:	b25b      	sxtb	r3, r3
 8011e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011e70:	d103      	bne.n	8011e7a <xQueueReceive+0x14a>
 8011e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011e7a:	f001 fa75 	bl	8013368 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e7e:	1d3a      	adds	r2, r7, #4
 8011e80:	f107 0310 	add.w	r3, r7, #16
 8011e84:	4611      	mov	r1, r2
 8011e86:	4618      	mov	r0, r3
 8011e88:	f000 fece 	bl	8012c28 <xTaskCheckForTimeOut>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d123      	bne.n	8011eda <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e94:	f000 f99e 	bl	80121d4 <prvIsQueueEmpty>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d017      	beq.n	8011ece <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea0:	3324      	adds	r3, #36	@ 0x24
 8011ea2:	687a      	ldr	r2, [r7, #4]
 8011ea4:	4611      	mov	r1, r2
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f000 fe1a 	bl	8012ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011eae:	f000 f93f 	bl	8012130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011eb2:	f000 fc13 	bl	80126dc <xTaskResumeAll>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d189      	bne.n	8011dd0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8011efc <xQueueReceive+0x1cc>)
 8011ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ec2:	601a      	str	r2, [r3, #0]
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	e780      	b.n	8011dd0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ed0:	f000 f92e 	bl	8012130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ed4:	f000 fc02 	bl	80126dc <xTaskResumeAll>
 8011ed8:	e77a      	b.n	8011dd0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011edc:	f000 f928 	bl	8012130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ee0:	f000 fbfc 	bl	80126dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ee6:	f000 f975 	bl	80121d4 <prvIsQueueEmpty>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	f43f af6f 	beq.w	8011dd0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3730      	adds	r7, #48	@ 0x30
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	e000ed04 	.word	0xe000ed04

08011f00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08e      	sub	sp, #56	@ 0x38
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10d      	bne.n	8011f32 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8011f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f1a:	b672      	cpsid	i
 8011f1c:	f383 8811 	msr	BASEPRI, r3
 8011f20:	f3bf 8f6f 	isb	sy
 8011f24:	f3bf 8f4f 	dsb	sy
 8011f28:	b662      	cpsie	i
 8011f2a:	623b      	str	r3, [r7, #32]
}
 8011f2c:	bf00      	nop
 8011f2e:	bf00      	nop
 8011f30:	e7fd      	b.n	8011f2e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d103      	bne.n	8011f40 <xQueueReceiveFromISR+0x40>
 8011f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d101      	bne.n	8011f44 <xQueueReceiveFromISR+0x44>
 8011f40:	2301      	movs	r3, #1
 8011f42:	e000      	b.n	8011f46 <xQueueReceiveFromISR+0x46>
 8011f44:	2300      	movs	r3, #0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10d      	bne.n	8011f66 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8011f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f4e:	b672      	cpsid	i
 8011f50:	f383 8811 	msr	BASEPRI, r3
 8011f54:	f3bf 8f6f 	isb	sy
 8011f58:	f3bf 8f4f 	dsb	sy
 8011f5c:	b662      	cpsie	i
 8011f5e:	61fb      	str	r3, [r7, #28]
}
 8011f60:	bf00      	nop
 8011f62:	bf00      	nop
 8011f64:	e7fd      	b.n	8011f62 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f66:	f001 fab1 	bl	80134cc <vPortValidateInterruptPriority>
	__asm volatile
 8011f6a:	f3ef 8211 	mrs	r2, BASEPRI
 8011f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f72:	b672      	cpsid	i
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	b662      	cpsie	i
 8011f82:	61ba      	str	r2, [r7, #24]
 8011f84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011f86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d02f      	beq.n	8011ff6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fa0:	68b9      	ldr	r1, [r7, #8]
 8011fa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011fa4:	f000 f89e 	bl	80120e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011faa:	1e5a      	subs	r2, r3, #1
 8011fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fb8:	d112      	bne.n	8011fe0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d016      	beq.n	8011ff0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc4:	3310      	adds	r3, #16
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f000 fdb2 	bl	8012b30 <xTaskRemoveFromEventList>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00e      	beq.n	8011ff0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d00b      	beq.n	8011ff0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	e007      	b.n	8011ff0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	b25a      	sxtb	r2, r3
 8011fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ff4:	e001      	b.n	8011ffa <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ffc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	f383 8811 	msr	BASEPRI, r3
}
 8012004:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012008:	4618      	mov	r0, r3
 801200a:	3738      	adds	r7, #56	@ 0x38
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801201c:	2300      	movs	r3, #0
 801201e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801202a:	2b00      	cmp	r3, #0
 801202c:	d10d      	bne.n	801204a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d14d      	bne.n	80120d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	4618      	mov	r0, r3
 801203c:	f000 ff60 	bl	8012f00 <xTaskPriorityDisinherit>
 8012040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2200      	movs	r2, #0
 8012046:	609a      	str	r2, [r3, #8]
 8012048:	e043      	b.n	80120d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d119      	bne.n	8012084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6858      	ldr	r0, [r3, #4]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012058:	461a      	mov	r2, r3
 801205a:	68b9      	ldr	r1, [r7, #8]
 801205c:	f002 f864 	bl	8014128 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012068:	441a      	add	r2, r3
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	429a      	cmp	r2, r3
 8012078:	d32b      	bcc.n	80120d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	605a      	str	r2, [r3, #4]
 8012082:	e026      	b.n	80120d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	68d8      	ldr	r0, [r3, #12]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801208c:	461a      	mov	r2, r3
 801208e:	68b9      	ldr	r1, [r7, #8]
 8012090:	f002 f84a 	bl	8014128 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	68da      	ldr	r2, [r3, #12]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801209c:	425b      	negs	r3, r3
 801209e:	441a      	add	r2, r3
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	68da      	ldr	r2, [r3, #12]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d207      	bcs.n	80120c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	689a      	ldr	r2, [r3, #8]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120b8:	425b      	negs	r3, r3
 80120ba:	441a      	add	r2, r3
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d105      	bne.n	80120d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	3b01      	subs	r3, #1
 80120d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80120da:	697b      	ldr	r3, [r7, #20]
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3718      	adds	r7, #24
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d018      	beq.n	8012128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	68da      	ldr	r2, [r3, #12]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120fe:	441a      	add	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	68da      	ldr	r2, [r3, #12]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	429a      	cmp	r2, r3
 801210e:	d303      	bcc.n	8012118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	68d9      	ldr	r1, [r3, #12]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012120:	461a      	mov	r2, r3
 8012122:	6838      	ldr	r0, [r7, #0]
 8012124:	f002 f800 	bl	8014128 <memcpy>
	}
}
 8012128:	bf00      	nop
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012138:	f001 f8e0 	bl	80132fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012144:	e011      	b.n	801216a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801214a:	2b00      	cmp	r3, #0
 801214c:	d012      	beq.n	8012174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3324      	adds	r3, #36	@ 0x24
 8012152:	4618      	mov	r0, r3
 8012154:	f000 fcec 	bl	8012b30 <xTaskRemoveFromEventList>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801215e:	f000 fdcb 	bl	8012cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012162:	7bfb      	ldrb	r3, [r7, #15]
 8012164:	3b01      	subs	r3, #1
 8012166:	b2db      	uxtb	r3, r3
 8012168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801216e:	2b00      	cmp	r3, #0
 8012170:	dce9      	bgt.n	8012146 <prvUnlockQueue+0x16>
 8012172:	e000      	b.n	8012176 <prvUnlockQueue+0x46>
					break;
 8012174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	22ff      	movs	r2, #255	@ 0xff
 801217a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801217e:	f001 f8f3 	bl	8013368 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012182:	f001 f8bb 	bl	80132fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801218c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801218e:	e011      	b.n	80121b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d012      	beq.n	80121be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	3310      	adds	r3, #16
 801219c:	4618      	mov	r0, r3
 801219e:	f000 fcc7 	bl	8012b30 <xTaskRemoveFromEventList>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80121a8:	f000 fda6 	bl	8012cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80121ac:	7bbb      	ldrb	r3, [r7, #14]
 80121ae:	3b01      	subs	r3, #1
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80121b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dce9      	bgt.n	8012190 <prvUnlockQueue+0x60>
 80121bc:	e000      	b.n	80121c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80121be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	22ff      	movs	r2, #255	@ 0xff
 80121c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80121c8:	f001 f8ce 	bl	8013368 <vPortExitCritical>
}
 80121cc:	bf00      	nop
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121dc:	f001 f88e 	bl	80132fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d102      	bne.n	80121ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80121e8:	2301      	movs	r3, #1
 80121ea:	60fb      	str	r3, [r7, #12]
 80121ec:	e001      	b.n	80121f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80121ee:	2300      	movs	r3, #0
 80121f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121f2:	f001 f8b9 	bl	8013368 <vPortExitCritical>

	return xReturn;
 80121f6:	68fb      	ldr	r3, [r7, #12]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012208:	f001 f878 	bl	80132fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012214:	429a      	cmp	r2, r3
 8012216:	d102      	bne.n	801221e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012218:	2301      	movs	r3, #1
 801221a:	60fb      	str	r3, [r7, #12]
 801221c:	e001      	b.n	8012222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801221e:	2300      	movs	r3, #0
 8012220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012222:	f001 f8a1 	bl	8013368 <vPortExitCritical>

	return xReturn;
 8012226:	68fb      	ldr	r3, [r7, #12]
}
 8012228:	4618      	mov	r0, r3
 801222a:	3710      	adds	r7, #16
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012230:	b580      	push	{r7, lr}
 8012232:	b08e      	sub	sp, #56	@ 0x38
 8012234:	af04      	add	r7, sp, #16
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10d      	bne.n	8012260 <xTaskCreateStatic+0x30>
	__asm volatile
 8012244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012248:	b672      	cpsid	i
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	b662      	cpsie	i
 8012258:	623b      	str	r3, [r7, #32]
}
 801225a:	bf00      	nop
 801225c:	bf00      	nop
 801225e:	e7fd      	b.n	801225c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10d      	bne.n	8012282 <xTaskCreateStatic+0x52>
	__asm volatile
 8012266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801226a:	b672      	cpsid	i
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	b662      	cpsie	i
 801227a:	61fb      	str	r3, [r7, #28]
}
 801227c:	bf00      	nop
 801227e:	bf00      	nop
 8012280:	e7fd      	b.n	801227e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012282:	2358      	movs	r3, #88	@ 0x58
 8012284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	2b58      	cmp	r3, #88	@ 0x58
 801228a:	d00d      	beq.n	80122a8 <xTaskCreateStatic+0x78>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012290:	b672      	cpsid	i
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	b662      	cpsie	i
 80122a0:	61bb      	str	r3, [r7, #24]
}
 80122a2:	bf00      	nop
 80122a4:	bf00      	nop
 80122a6:	e7fd      	b.n	80122a4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80122a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80122aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d01e      	beq.n	80122ee <xTaskCreateStatic+0xbe>
 80122b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d01b      	beq.n	80122ee <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80122b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80122ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	2202      	movs	r2, #2
 80122c4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80122c8:	2300      	movs	r3, #0
 80122ca:	9303      	str	r3, [sp, #12]
 80122cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ce:	9302      	str	r3, [sp, #8]
 80122d0:	f107 0314 	add.w	r3, r7, #20
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	68b9      	ldr	r1, [r7, #8]
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f000 f850 	bl	8012386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122e8:	f000 f8e2 	bl	80124b0 <prvAddNewTaskToReadyList>
 80122ec:	e001      	b.n	80122f2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80122ee:	2300      	movs	r3, #0
 80122f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80122f2:	697b      	ldr	r3, [r7, #20]
	}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3728      	adds	r7, #40	@ 0x28
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b08c      	sub	sp, #48	@ 0x30
 8012300:	af04      	add	r7, sp, #16
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	603b      	str	r3, [r7, #0]
 8012308:	4613      	mov	r3, r2
 801230a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801230c:	88fb      	ldrh	r3, [r7, #6]
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4618      	mov	r0, r3
 8012312:	f001 f921 	bl	8013558 <pvPortMalloc>
 8012316:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d00e      	beq.n	801233c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801231e:	2058      	movs	r0, #88	@ 0x58
 8012320:	f001 f91a 	bl	8013558 <pvPortMalloc>
 8012324:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d003      	beq.n	8012334 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	697a      	ldr	r2, [r7, #20]
 8012330:	631a      	str	r2, [r3, #48]	@ 0x30
 8012332:	e005      	b.n	8012340 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012334:	6978      	ldr	r0, [r7, #20]
 8012336:	f001 f9e1 	bl	80136fc <vPortFree>
 801233a:	e001      	b.n	8012340 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801233c:	2300      	movs	r3, #0
 801233e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d017      	beq.n	8012376 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	2200      	movs	r2, #0
 801234a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801234e:	88fa      	ldrh	r2, [r7, #6]
 8012350:	2300      	movs	r3, #0
 8012352:	9303      	str	r3, [sp, #12]
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	9302      	str	r3, [sp, #8]
 8012358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235a:	9301      	str	r3, [sp, #4]
 801235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801235e:	9300      	str	r3, [sp, #0]
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f000 f80e 	bl	8012386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801236a:	69f8      	ldr	r0, [r7, #28]
 801236c:	f000 f8a0 	bl	80124b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012370:	2301      	movs	r3, #1
 8012372:	61bb      	str	r3, [r7, #24]
 8012374:	e002      	b.n	801237c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801237a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801237c:	69bb      	ldr	r3, [r7, #24]
	}
 801237e:	4618      	mov	r0, r3
 8012380:	3720      	adds	r7, #32
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b088      	sub	sp, #32
 801238a:	af00      	add	r7, sp, #0
 801238c:	60f8      	str	r0, [r7, #12]
 801238e:	60b9      	str	r1, [r7, #8]
 8012390:	607a      	str	r2, [r7, #4]
 8012392:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012396:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	461a      	mov	r2, r3
 801239e:	21a5      	movs	r1, #165	@ 0xa5
 80123a0:	f001 fe7e 	bl	80140a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123a8:	6879      	ldr	r1, [r7, #4]
 80123aa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80123ae:	440b      	add	r3, r1
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	4413      	add	r3, r2
 80123b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	f023 0307 	bic.w	r3, r3, #7
 80123bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	f003 0307 	and.w	r3, r3, #7
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d00d      	beq.n	80123e4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80123c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123cc:	b672      	cpsid	i
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	b662      	cpsie	i
 80123dc:	617b      	str	r3, [r7, #20]
}
 80123de:	bf00      	nop
 80123e0:	bf00      	nop
 80123e2:	e7fd      	b.n	80123e0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d01f      	beq.n	801242a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123ea:	2300      	movs	r3, #0
 80123ec:	61fb      	str	r3, [r7, #28]
 80123ee:	e012      	b.n	8012416 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	69fb      	ldr	r3, [r7, #28]
 80123f4:	4413      	add	r3, r2
 80123f6:	7819      	ldrb	r1, [r3, #0]
 80123f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	4413      	add	r3, r2
 80123fe:	3334      	adds	r3, #52	@ 0x34
 8012400:	460a      	mov	r2, r1
 8012402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012404:	68ba      	ldr	r2, [r7, #8]
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	4413      	add	r3, r2
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d006      	beq.n	801241e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	3301      	adds	r3, #1
 8012414:	61fb      	str	r3, [r7, #28]
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	2b0f      	cmp	r3, #15
 801241a:	d9e9      	bls.n	80123f0 <prvInitialiseNewTask+0x6a>
 801241c:	e000      	b.n	8012420 <prvInitialiseNewTask+0x9a>
			{
				break;
 801241e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012422:	2200      	movs	r2, #0
 8012424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012428:	e003      	b.n	8012432 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801242c:	2200      	movs	r2, #0
 801242e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012434:	2b06      	cmp	r3, #6
 8012436:	d901      	bls.n	801243c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012438:	2306      	movs	r3, #6
 801243a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801243e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012440:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012446:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801244a:	2200      	movs	r2, #0
 801244c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012450:	3304      	adds	r3, #4
 8012452:	4618      	mov	r0, r3
 8012454:	f7ff f8d4 	bl	8011600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801245a:	3318      	adds	r3, #24
 801245c:	4618      	mov	r0, r3
 801245e:	f7ff f8cf 	bl	8011600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801246a:	f1c3 0207 	rsb	r2, r3, #7
 801246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012476:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247a:	2200      	movs	r2, #0
 801247c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012480:	2200      	movs	r2, #0
 8012482:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012486:	2200      	movs	r2, #0
 8012488:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801248c:	683a      	ldr	r2, [r7, #0]
 801248e:	68f9      	ldr	r1, [r7, #12]
 8012490:	69b8      	ldr	r0, [r7, #24]
 8012492:	f000 fe27 	bl	80130e4 <pxPortInitialiseStack>
 8012496:	4602      	mov	r2, r0
 8012498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801249a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d002      	beq.n	80124a8 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80124a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124a8:	bf00      	nop
 80124aa:	3720      	adds	r7, #32
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80124b8:	f000 ff20 	bl	80132fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80124bc:	4b2a      	ldr	r3, [pc, #168]	@ (8012568 <prvAddNewTaskToReadyList+0xb8>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3301      	adds	r3, #1
 80124c2:	4a29      	ldr	r2, [pc, #164]	@ (8012568 <prvAddNewTaskToReadyList+0xb8>)
 80124c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80124c6:	4b29      	ldr	r3, [pc, #164]	@ (801256c <prvAddNewTaskToReadyList+0xbc>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d109      	bne.n	80124e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80124ce:	4a27      	ldr	r2, [pc, #156]	@ (801256c <prvAddNewTaskToReadyList+0xbc>)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80124d4:	4b24      	ldr	r3, [pc, #144]	@ (8012568 <prvAddNewTaskToReadyList+0xb8>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d110      	bne.n	80124fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80124dc:	f000 fc32 	bl	8012d44 <prvInitialiseTaskLists>
 80124e0:	e00d      	b.n	80124fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80124e2:	4b23      	ldr	r3, [pc, #140]	@ (8012570 <prvAddNewTaskToReadyList+0xc0>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d109      	bne.n	80124fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80124ea:	4b20      	ldr	r3, [pc, #128]	@ (801256c <prvAddNewTaskToReadyList+0xbc>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d802      	bhi.n	80124fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80124f8:	4a1c      	ldr	r2, [pc, #112]	@ (801256c <prvAddNewTaskToReadyList+0xbc>)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80124fe:	4b1d      	ldr	r3, [pc, #116]	@ (8012574 <prvAddNewTaskToReadyList+0xc4>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	3301      	adds	r3, #1
 8012504:	4a1b      	ldr	r2, [pc, #108]	@ (8012574 <prvAddNewTaskToReadyList+0xc4>)
 8012506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801250c:	2201      	movs	r2, #1
 801250e:	409a      	lsls	r2, r3
 8012510:	4b19      	ldr	r3, [pc, #100]	@ (8012578 <prvAddNewTaskToReadyList+0xc8>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4313      	orrs	r3, r2
 8012516:	4a18      	ldr	r2, [pc, #96]	@ (8012578 <prvAddNewTaskToReadyList+0xc8>)
 8012518:	6013      	str	r3, [r2, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801251e:	4613      	mov	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	4413      	add	r3, r2
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	4a15      	ldr	r2, [pc, #84]	@ (801257c <prvAddNewTaskToReadyList+0xcc>)
 8012528:	441a      	add	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	3304      	adds	r3, #4
 801252e:	4619      	mov	r1, r3
 8012530:	4610      	mov	r0, r2
 8012532:	f7ff f872 	bl	801161a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012536:	f000 ff17 	bl	8013368 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801253a:	4b0d      	ldr	r3, [pc, #52]	@ (8012570 <prvAddNewTaskToReadyList+0xc0>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00e      	beq.n	8012560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012542:	4b0a      	ldr	r3, [pc, #40]	@ (801256c <prvAddNewTaskToReadyList+0xbc>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801254c:	429a      	cmp	r2, r3
 801254e:	d207      	bcs.n	8012560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012550:	4b0b      	ldr	r3, [pc, #44]	@ (8012580 <prvAddNewTaskToReadyList+0xd0>)
 8012552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012556:	601a      	str	r2, [r3, #0]
 8012558:	f3bf 8f4f 	dsb	sy
 801255c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012560:	bf00      	nop
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	20000e38 	.word	0x20000e38
 801256c:	20000d38 	.word	0x20000d38
 8012570:	20000e44 	.word	0x20000e44
 8012574:	20000e54 	.word	0x20000e54
 8012578:	20000e40 	.word	0x20000e40
 801257c:	20000d3c 	.word	0x20000d3c
 8012580:	e000ed04 	.word	0xe000ed04

08012584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801258c:	2300      	movs	r3, #0
 801258e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d01a      	beq.n	80125cc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012596:	4b15      	ldr	r3, [pc, #84]	@ (80125ec <vTaskDelay+0x68>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00d      	beq.n	80125ba <vTaskDelay+0x36>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a2:	b672      	cpsid	i
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	b662      	cpsie	i
 80125b2:	60bb      	str	r3, [r7, #8]
}
 80125b4:	bf00      	nop
 80125b6:	bf00      	nop
 80125b8:	e7fd      	b.n	80125b6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80125ba:	f000 f881 	bl	80126c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80125be:	2100      	movs	r1, #0
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 fd29 	bl	8013018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80125c6:	f000 f889 	bl	80126dc <xTaskResumeAll>
 80125ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d107      	bne.n	80125e2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80125d2:	4b07      	ldr	r3, [pc, #28]	@ (80125f0 <vTaskDelay+0x6c>)
 80125d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125e2:	bf00      	nop
 80125e4:	3710      	adds	r7, #16
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	20000e60 	.word	0x20000e60
 80125f0:	e000ed04 	.word	0xe000ed04

080125f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08a      	sub	sp, #40	@ 0x28
 80125f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80125fa:	2300      	movs	r3, #0
 80125fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80125fe:	2300      	movs	r3, #0
 8012600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012602:	463a      	mov	r2, r7
 8012604:	1d39      	adds	r1, r7, #4
 8012606:	f107 0308 	add.w	r3, r7, #8
 801260a:	4618      	mov	r0, r3
 801260c:	f7ee fb80 	bl	8000d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012610:	6839      	ldr	r1, [r7, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	9202      	str	r2, [sp, #8]
 8012618:	9301      	str	r3, [sp, #4]
 801261a:	2300      	movs	r3, #0
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	2300      	movs	r3, #0
 8012620:	460a      	mov	r2, r1
 8012622:	4921      	ldr	r1, [pc, #132]	@ (80126a8 <vTaskStartScheduler+0xb4>)
 8012624:	4821      	ldr	r0, [pc, #132]	@ (80126ac <vTaskStartScheduler+0xb8>)
 8012626:	f7ff fe03 	bl	8012230 <xTaskCreateStatic>
 801262a:	4603      	mov	r3, r0
 801262c:	4a20      	ldr	r2, [pc, #128]	@ (80126b0 <vTaskStartScheduler+0xbc>)
 801262e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012630:	4b1f      	ldr	r3, [pc, #124]	@ (80126b0 <vTaskStartScheduler+0xbc>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d002      	beq.n	801263e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012638:	2301      	movs	r3, #1
 801263a:	617b      	str	r3, [r7, #20]
 801263c:	e001      	b.n	8012642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801263e:	2300      	movs	r3, #0
 8012640:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d118      	bne.n	801267a <vTaskStartScheduler+0x86>
	__asm volatile
 8012648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801264c:	b672      	cpsid	i
 801264e:	f383 8811 	msr	BASEPRI, r3
 8012652:	f3bf 8f6f 	isb	sy
 8012656:	f3bf 8f4f 	dsb	sy
 801265a:	b662      	cpsie	i
 801265c:	613b      	str	r3, [r7, #16]
}
 801265e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012660:	4b14      	ldr	r3, [pc, #80]	@ (80126b4 <vTaskStartScheduler+0xc0>)
 8012662:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012668:	4b13      	ldr	r3, [pc, #76]	@ (80126b8 <vTaskStartScheduler+0xc4>)
 801266a:	2201      	movs	r2, #1
 801266c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801266e:	4b13      	ldr	r3, [pc, #76]	@ (80126bc <vTaskStartScheduler+0xc8>)
 8012670:	2200      	movs	r2, #0
 8012672:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012674:	f000 fdc4 	bl	8013200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012678:	e011      	b.n	801269e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012680:	d10d      	bne.n	801269e <vTaskStartScheduler+0xaa>
	__asm volatile
 8012682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012686:	b672      	cpsid	i
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	b662      	cpsie	i
 8012696:	60fb      	str	r3, [r7, #12]
}
 8012698:	bf00      	nop
 801269a:	bf00      	nop
 801269c:	e7fd      	b.n	801269a <vTaskStartScheduler+0xa6>
}
 801269e:	bf00      	nop
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08014270 	.word	0x08014270
 80126ac:	08012d11 	.word	0x08012d11
 80126b0:	20000e5c 	.word	0x20000e5c
 80126b4:	20000e58 	.word	0x20000e58
 80126b8:	20000e44 	.word	0x20000e44
 80126bc:	20000e3c 	.word	0x20000e3c

080126c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80126c0:	b480      	push	{r7}
 80126c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80126c4:	4b04      	ldr	r3, [pc, #16]	@ (80126d8 <vTaskSuspendAll+0x18>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	3301      	adds	r3, #1
 80126ca:	4a03      	ldr	r2, [pc, #12]	@ (80126d8 <vTaskSuspendAll+0x18>)
 80126cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80126ce:	bf00      	nop
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr
 80126d8:	20000e60 	.word	0x20000e60

080126dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126e6:	2300      	movs	r3, #0
 80126e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126ea:	4b43      	ldr	r3, [pc, #268]	@ (80127f8 <xTaskResumeAll+0x11c>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10d      	bne.n	801270e <xTaskResumeAll+0x32>
	__asm volatile
 80126f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f6:	b672      	cpsid	i
 80126f8:	f383 8811 	msr	BASEPRI, r3
 80126fc:	f3bf 8f6f 	isb	sy
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	b662      	cpsie	i
 8012706:	603b      	str	r3, [r7, #0]
}
 8012708:	bf00      	nop
 801270a:	bf00      	nop
 801270c:	e7fd      	b.n	801270a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801270e:	f000 fdf5 	bl	80132fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012712:	4b39      	ldr	r3, [pc, #228]	@ (80127f8 <xTaskResumeAll+0x11c>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3b01      	subs	r3, #1
 8012718:	4a37      	ldr	r2, [pc, #220]	@ (80127f8 <xTaskResumeAll+0x11c>)
 801271a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801271c:	4b36      	ldr	r3, [pc, #216]	@ (80127f8 <xTaskResumeAll+0x11c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d161      	bne.n	80127e8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012724:	4b35      	ldr	r3, [pc, #212]	@ (80127fc <xTaskResumeAll+0x120>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d05d      	beq.n	80127e8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801272c:	e02e      	b.n	801278c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801272e:	4b34      	ldr	r3, [pc, #208]	@ (8012800 <xTaskResumeAll+0x124>)
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	3318      	adds	r3, #24
 801273a:	4618      	mov	r0, r3
 801273c:	f7fe ffca 	bl	80116d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	3304      	adds	r3, #4
 8012744:	4618      	mov	r0, r3
 8012746:	f7fe ffc5 	bl	80116d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801274e:	2201      	movs	r2, #1
 8012750:	409a      	lsls	r2, r3
 8012752:	4b2c      	ldr	r3, [pc, #176]	@ (8012804 <xTaskResumeAll+0x128>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4313      	orrs	r3, r2
 8012758:	4a2a      	ldr	r2, [pc, #168]	@ (8012804 <xTaskResumeAll+0x128>)
 801275a:	6013      	str	r3, [r2, #0]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012760:	4613      	mov	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4413      	add	r3, r2
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4a27      	ldr	r2, [pc, #156]	@ (8012808 <xTaskResumeAll+0x12c>)
 801276a:	441a      	add	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	3304      	adds	r3, #4
 8012770:	4619      	mov	r1, r3
 8012772:	4610      	mov	r0, r2
 8012774:	f7fe ff51 	bl	801161a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801277c:	4b23      	ldr	r3, [pc, #140]	@ (801280c <xTaskResumeAll+0x130>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012782:	429a      	cmp	r2, r3
 8012784:	d302      	bcc.n	801278c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012786:	4b22      	ldr	r3, [pc, #136]	@ (8012810 <xTaskResumeAll+0x134>)
 8012788:	2201      	movs	r2, #1
 801278a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801278c:	4b1c      	ldr	r3, [pc, #112]	@ (8012800 <xTaskResumeAll+0x124>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1cc      	bne.n	801272e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801279a:	f000 fb73 	bl	8012e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801279e:	4b1d      	ldr	r3, [pc, #116]	@ (8012814 <xTaskResumeAll+0x138>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d010      	beq.n	80127cc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80127aa:	f000 f859 	bl	8012860 <xTaskIncrementTick>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80127b4:	4b16      	ldr	r3, [pc, #88]	@ (8012810 <xTaskResumeAll+0x134>)
 80127b6:	2201      	movs	r2, #1
 80127b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3b01      	subs	r3, #1
 80127be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1f1      	bne.n	80127aa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80127c6:	4b13      	ldr	r3, [pc, #76]	@ (8012814 <xTaskResumeAll+0x138>)
 80127c8:	2200      	movs	r2, #0
 80127ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80127cc:	4b10      	ldr	r3, [pc, #64]	@ (8012810 <xTaskResumeAll+0x134>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d009      	beq.n	80127e8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127d4:	2301      	movs	r3, #1
 80127d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012818 <xTaskResumeAll+0x13c>)
 80127da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	f3bf 8f4f 	dsb	sy
 80127e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127e8:	f000 fdbe 	bl	8013368 <vPortExitCritical>

	return xAlreadyYielded;
 80127ec:	68bb      	ldr	r3, [r7, #8]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3710      	adds	r7, #16
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	20000e60 	.word	0x20000e60
 80127fc:	20000e38 	.word	0x20000e38
 8012800:	20000df8 	.word	0x20000df8
 8012804:	20000e40 	.word	0x20000e40
 8012808:	20000d3c 	.word	0x20000d3c
 801280c:	20000d38 	.word	0x20000d38
 8012810:	20000e4c 	.word	0x20000e4c
 8012814:	20000e48 	.word	0x20000e48
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012822:	4b05      	ldr	r3, [pc, #20]	@ (8012838 <xTaskGetTickCount+0x1c>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012828:	687b      	ldr	r3, [r7, #4]
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	20000e3c 	.word	0x20000e3c

0801283c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012842:	f000 fe43 	bl	80134cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012846:	2300      	movs	r3, #0
 8012848:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801284a:	4b04      	ldr	r3, [pc, #16]	@ (801285c <xTaskGetTickCountFromISR+0x20>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012850:	683b      	ldr	r3, [r7, #0]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3708      	adds	r7, #8
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	20000e3c 	.word	0x20000e3c

08012860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b086      	sub	sp, #24
 8012864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012866:	2300      	movs	r3, #0
 8012868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801286a:	4b50      	ldr	r3, [pc, #320]	@ (80129ac <xTaskIncrementTick+0x14c>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	f040 808b 	bne.w	801298a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012874:	4b4e      	ldr	r3, [pc, #312]	@ (80129b0 <xTaskIncrementTick+0x150>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	3301      	adds	r3, #1
 801287a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801287c:	4a4c      	ldr	r2, [pc, #304]	@ (80129b0 <xTaskIncrementTick+0x150>)
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d123      	bne.n	80128d0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012888:	4b4a      	ldr	r3, [pc, #296]	@ (80129b4 <xTaskIncrementTick+0x154>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d00d      	beq.n	80128ae <xTaskIncrementTick+0x4e>
	__asm volatile
 8012892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012896:	b672      	cpsid	i
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	b662      	cpsie	i
 80128a6:	603b      	str	r3, [r7, #0]
}
 80128a8:	bf00      	nop
 80128aa:	bf00      	nop
 80128ac:	e7fd      	b.n	80128aa <xTaskIncrementTick+0x4a>
 80128ae:	4b41      	ldr	r3, [pc, #260]	@ (80129b4 <xTaskIncrementTick+0x154>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	60fb      	str	r3, [r7, #12]
 80128b4:	4b40      	ldr	r3, [pc, #256]	@ (80129b8 <xTaskIncrementTick+0x158>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	4a3e      	ldr	r2, [pc, #248]	@ (80129b4 <xTaskIncrementTick+0x154>)
 80128ba:	6013      	str	r3, [r2, #0]
 80128bc:	4a3e      	ldr	r2, [pc, #248]	@ (80129b8 <xTaskIncrementTick+0x158>)
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6013      	str	r3, [r2, #0]
 80128c2:	4b3e      	ldr	r3, [pc, #248]	@ (80129bc <xTaskIncrementTick+0x15c>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	3301      	adds	r3, #1
 80128c8:	4a3c      	ldr	r2, [pc, #240]	@ (80129bc <xTaskIncrementTick+0x15c>)
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	f000 fada 	bl	8012e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80128d0:	4b3b      	ldr	r3, [pc, #236]	@ (80129c0 <xTaskIncrementTick+0x160>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	693a      	ldr	r2, [r7, #16]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d348      	bcc.n	801296c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128da:	4b36      	ldr	r3, [pc, #216]	@ (80129b4 <xTaskIncrementTick+0x154>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d104      	bne.n	80128ee <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128e4:	4b36      	ldr	r3, [pc, #216]	@ (80129c0 <xTaskIncrementTick+0x160>)
 80128e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128ea:	601a      	str	r2, [r3, #0]
					break;
 80128ec:	e03e      	b.n	801296c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128ee:	4b31      	ldr	r3, [pc, #196]	@ (80129b4 <xTaskIncrementTick+0x154>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80128fe:	693a      	ldr	r2, [r7, #16]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	429a      	cmp	r2, r3
 8012904:	d203      	bcs.n	801290e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012906:	4a2e      	ldr	r2, [pc, #184]	@ (80129c0 <xTaskIncrementTick+0x160>)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801290c:	e02e      	b.n	801296c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	3304      	adds	r3, #4
 8012912:	4618      	mov	r0, r3
 8012914:	f7fe fede 	bl	80116d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	3318      	adds	r3, #24
 8012924:	4618      	mov	r0, r3
 8012926:	f7fe fed5 	bl	80116d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801292e:	2201      	movs	r2, #1
 8012930:	409a      	lsls	r2, r3
 8012932:	4b24      	ldr	r3, [pc, #144]	@ (80129c4 <xTaskIncrementTick+0x164>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4313      	orrs	r3, r2
 8012938:	4a22      	ldr	r2, [pc, #136]	@ (80129c4 <xTaskIncrementTick+0x164>)
 801293a:	6013      	str	r3, [r2, #0]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012940:	4613      	mov	r3, r2
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	4413      	add	r3, r2
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4a1f      	ldr	r2, [pc, #124]	@ (80129c8 <xTaskIncrementTick+0x168>)
 801294a:	441a      	add	r2, r3
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	3304      	adds	r3, #4
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f7fe fe61 	bl	801161a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801295c:	4b1b      	ldr	r3, [pc, #108]	@ (80129cc <xTaskIncrementTick+0x16c>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012962:	429a      	cmp	r2, r3
 8012964:	d3b9      	bcc.n	80128da <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012966:	2301      	movs	r3, #1
 8012968:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801296a:	e7b6      	b.n	80128da <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801296c:	4b17      	ldr	r3, [pc, #92]	@ (80129cc <xTaskIncrementTick+0x16c>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012972:	4915      	ldr	r1, [pc, #84]	@ (80129c8 <xTaskIncrementTick+0x168>)
 8012974:	4613      	mov	r3, r2
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	4413      	add	r3, r2
 801297a:	009b      	lsls	r3, r3, #2
 801297c:	440b      	add	r3, r1
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d907      	bls.n	8012994 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012984:	2301      	movs	r3, #1
 8012986:	617b      	str	r3, [r7, #20]
 8012988:	e004      	b.n	8012994 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801298a:	4b11      	ldr	r3, [pc, #68]	@ (80129d0 <xTaskIncrementTick+0x170>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	3301      	adds	r3, #1
 8012990:	4a0f      	ldr	r2, [pc, #60]	@ (80129d0 <xTaskIncrementTick+0x170>)
 8012992:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012994:	4b0f      	ldr	r3, [pc, #60]	@ (80129d4 <xTaskIncrementTick+0x174>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d001      	beq.n	80129a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801299c:	2301      	movs	r3, #1
 801299e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80129a0:	697b      	ldr	r3, [r7, #20]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3718      	adds	r7, #24
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	20000e60 	.word	0x20000e60
 80129b0:	20000e3c 	.word	0x20000e3c
 80129b4:	20000df0 	.word	0x20000df0
 80129b8:	20000df4 	.word	0x20000df4
 80129bc:	20000e50 	.word	0x20000e50
 80129c0:	20000e58 	.word	0x20000e58
 80129c4:	20000e40 	.word	0x20000e40
 80129c8:	20000d3c 	.word	0x20000d3c
 80129cc:	20000d38 	.word	0x20000d38
 80129d0:	20000e48 	.word	0x20000e48
 80129d4:	20000e4c 	.word	0x20000e4c

080129d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80129de:	4b3b      	ldr	r3, [pc, #236]	@ (8012acc <vTaskSwitchContext+0xf4>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80129e6:	4b3a      	ldr	r3, [pc, #232]	@ (8012ad0 <vTaskSwitchContext+0xf8>)
 80129e8:	2201      	movs	r2, #1
 80129ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80129ec:	e069      	b.n	8012ac2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80129ee:	4b38      	ldr	r3, [pc, #224]	@ (8012ad0 <vTaskSwitchContext+0xf8>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80129f4:	4b37      	ldr	r3, [pc, #220]	@ (8012ad4 <vTaskSwitchContext+0xfc>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129fa:	61fb      	str	r3, [r7, #28]
 80129fc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8012a00:	61bb      	str	r3, [r7, #24]
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	69ba      	ldr	r2, [r7, #24]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d111      	bne.n	8012a30 <vTaskSwitchContext+0x58>
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	3304      	adds	r3, #4
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	69ba      	ldr	r2, [r7, #24]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d10b      	bne.n	8012a30 <vTaskSwitchContext+0x58>
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	3308      	adds	r3, #8
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	69ba      	ldr	r2, [r7, #24]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d105      	bne.n	8012a30 <vTaskSwitchContext+0x58>
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	330c      	adds	r3, #12
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	69ba      	ldr	r2, [r7, #24]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d008      	beq.n	8012a42 <vTaskSwitchContext+0x6a>
 8012a30:	4b28      	ldr	r3, [pc, #160]	@ (8012ad4 <vTaskSwitchContext+0xfc>)
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	4b27      	ldr	r3, [pc, #156]	@ (8012ad4 <vTaskSwitchContext+0xfc>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	3334      	adds	r3, #52	@ 0x34
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f7ee f954 	bl	8000cea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a42:	4b25      	ldr	r3, [pc, #148]	@ (8012ad8 <vTaskSwitchContext+0x100>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	fab3 f383 	clz	r3, r3
 8012a4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012a50:	7afb      	ldrb	r3, [r7, #11]
 8012a52:	f1c3 031f 	rsb	r3, r3, #31
 8012a56:	617b      	str	r3, [r7, #20]
 8012a58:	4920      	ldr	r1, [pc, #128]	@ (8012adc <vTaskSwitchContext+0x104>)
 8012a5a:	697a      	ldr	r2, [r7, #20]
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	440b      	add	r3, r1
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d10d      	bne.n	8012a88 <vTaskSwitchContext+0xb0>
	__asm volatile
 8012a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a70:	b672      	cpsid	i
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	b662      	cpsie	i
 8012a80:	607b      	str	r3, [r7, #4]
}
 8012a82:	bf00      	nop
 8012a84:	bf00      	nop
 8012a86:	e7fd      	b.n	8012a84 <vTaskSwitchContext+0xac>
 8012a88:	697a      	ldr	r2, [r7, #20]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	4413      	add	r3, r2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	4a12      	ldr	r2, [pc, #72]	@ (8012adc <vTaskSwitchContext+0x104>)
 8012a94:	4413      	add	r3, r2
 8012a96:	613b      	str	r3, [r7, #16]
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	685a      	ldr	r2, [r3, #4]
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	605a      	str	r2, [r3, #4]
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	685a      	ldr	r2, [r3, #4]
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	3308      	adds	r3, #8
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d104      	bne.n	8012ab8 <vTaskSwitchContext+0xe0>
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	685a      	ldr	r2, [r3, #4]
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	605a      	str	r2, [r3, #4]
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	68db      	ldr	r3, [r3, #12]
 8012abe:	4a05      	ldr	r2, [pc, #20]	@ (8012ad4 <vTaskSwitchContext+0xfc>)
 8012ac0:	6013      	str	r3, [r2, #0]
}
 8012ac2:	bf00      	nop
 8012ac4:	3720      	adds	r7, #32
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	20000e60 	.word	0x20000e60
 8012ad0:	20000e4c 	.word	0x20000e4c
 8012ad4:	20000d38 	.word	0x20000d38
 8012ad8:	20000e40 	.word	0x20000e40
 8012adc:	20000d3c 	.word	0x20000d3c

08012ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10d      	bne.n	8012b0c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af4:	b672      	cpsid	i
 8012af6:	f383 8811 	msr	BASEPRI, r3
 8012afa:	f3bf 8f6f 	isb	sy
 8012afe:	f3bf 8f4f 	dsb	sy
 8012b02:	b662      	cpsie	i
 8012b04:	60fb      	str	r3, [r7, #12]
}
 8012b06:	bf00      	nop
 8012b08:	bf00      	nop
 8012b0a:	e7fd      	b.n	8012b08 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b0c:	4b07      	ldr	r3, [pc, #28]	@ (8012b2c <vTaskPlaceOnEventList+0x4c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	3318      	adds	r3, #24
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7fe fda4 	bl	8011662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	6838      	ldr	r0, [r7, #0]
 8012b1e:	f000 fa7b 	bl	8013018 <prvAddCurrentTaskToDelayedList>
}
 8012b22:	bf00      	nop
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	20000d38 	.word	0x20000d38

08012b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b086      	sub	sp, #24
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10d      	bne.n	8012b62 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4a:	b672      	cpsid	i
 8012b4c:	f383 8811 	msr	BASEPRI, r3
 8012b50:	f3bf 8f6f 	isb	sy
 8012b54:	f3bf 8f4f 	dsb	sy
 8012b58:	b662      	cpsie	i
 8012b5a:	60fb      	str	r3, [r7, #12]
}
 8012b5c:	bf00      	nop
 8012b5e:	bf00      	nop
 8012b60:	e7fd      	b.n	8012b5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	3318      	adds	r3, #24
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fe fdb4 	bl	80116d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8012be4 <xTaskRemoveFromEventList+0xb4>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d11c      	bne.n	8012bae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	3304      	adds	r3, #4
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fe fdab 	bl	80116d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b82:	2201      	movs	r2, #1
 8012b84:	409a      	lsls	r2, r3
 8012b86:	4b18      	ldr	r3, [pc, #96]	@ (8012be8 <xTaskRemoveFromEventList+0xb8>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	4a16      	ldr	r2, [pc, #88]	@ (8012be8 <xTaskRemoveFromEventList+0xb8>)
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b94:	4613      	mov	r3, r2
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4413      	add	r3, r2
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	4a13      	ldr	r2, [pc, #76]	@ (8012bec <xTaskRemoveFromEventList+0xbc>)
 8012b9e:	441a      	add	r2, r3
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	3304      	adds	r3, #4
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	f7fe fd37 	bl	801161a <vListInsertEnd>
 8012bac:	e005      	b.n	8012bba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	3318      	adds	r3, #24
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	480e      	ldr	r0, [pc, #56]	@ (8012bf0 <xTaskRemoveFromEventList+0xc0>)
 8012bb6:	f7fe fd30 	bl	801161a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012bf4 <xTaskRemoveFromEventList+0xc4>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d905      	bls.n	8012bd4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8012bf8 <xTaskRemoveFromEventList+0xc8>)
 8012bce:	2201      	movs	r2, #1
 8012bd0:	601a      	str	r2, [r3, #0]
 8012bd2:	e001      	b.n	8012bd8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012bd8:	697b      	ldr	r3, [r7, #20]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3718      	adds	r7, #24
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	20000e60 	.word	0x20000e60
 8012be8:	20000e40 	.word	0x20000e40
 8012bec:	20000d3c 	.word	0x20000d3c
 8012bf0:	20000df8 	.word	0x20000df8
 8012bf4:	20000d38 	.word	0x20000d38
 8012bf8:	20000e4c 	.word	0x20000e4c

08012bfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012c04:	4b06      	ldr	r3, [pc, #24]	@ (8012c20 <vTaskInternalSetTimeOutState+0x24>)
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012c0c:	4b05      	ldr	r3, [pc, #20]	@ (8012c24 <vTaskInternalSetTimeOutState+0x28>)
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	605a      	str	r2, [r3, #4]
}
 8012c14:	bf00      	nop
 8012c16:	370c      	adds	r7, #12
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr
 8012c20:	20000e50 	.word	0x20000e50
 8012c24:	20000e3c 	.word	0x20000e3c

08012c28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d10d      	bne.n	8012c54 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c3c:	b672      	cpsid	i
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	b662      	cpsie	i
 8012c4c:	613b      	str	r3, [r7, #16]
}
 8012c4e:	bf00      	nop
 8012c50:	bf00      	nop
 8012c52:	e7fd      	b.n	8012c50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d10d      	bne.n	8012c76 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c5e:	b672      	cpsid	i
 8012c60:	f383 8811 	msr	BASEPRI, r3
 8012c64:	f3bf 8f6f 	isb	sy
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	b662      	cpsie	i
 8012c6e:	60fb      	str	r3, [r7, #12]
}
 8012c70:	bf00      	nop
 8012c72:	bf00      	nop
 8012c74:	e7fd      	b.n	8012c72 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8012c76:	f000 fb41 	bl	80132fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8012cf0 <xTaskCheckForTimeOut+0xc8>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	69ba      	ldr	r2, [r7, #24]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c92:	d102      	bne.n	8012c9a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012c94:	2300      	movs	r3, #0
 8012c96:	61fb      	str	r3, [r7, #28]
 8012c98:	e023      	b.n	8012ce2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	4b15      	ldr	r3, [pc, #84]	@ (8012cf4 <xTaskCheckForTimeOut+0xcc>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d007      	beq.n	8012cb6 <xTaskCheckForTimeOut+0x8e>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	69ba      	ldr	r2, [r7, #24]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d302      	bcc.n	8012cb6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	61fb      	str	r3, [r7, #28]
 8012cb4:	e015      	b.n	8012ce2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	697a      	ldr	r2, [r7, #20]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d20b      	bcs.n	8012cd8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	1ad2      	subs	r2, r2, r3
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff ff95 	bl	8012bfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	61fb      	str	r3, [r7, #28]
 8012cd6:	e004      	b.n	8012ce2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012ce2:	f000 fb41 	bl	8013368 <vPortExitCritical>

	return xReturn;
 8012ce6:	69fb      	ldr	r3, [r7, #28]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3720      	adds	r7, #32
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	20000e3c 	.word	0x20000e3c
 8012cf4:	20000e50 	.word	0x20000e50

08012cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012cfc:	4b03      	ldr	r3, [pc, #12]	@ (8012d0c <vTaskMissedYield+0x14>)
 8012cfe:	2201      	movs	r2, #1
 8012d00:	601a      	str	r2, [r3, #0]
}
 8012d02:	bf00      	nop
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	20000e4c 	.word	0x20000e4c

08012d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012d18:	f000 f854 	bl	8012dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012d1c:	4b07      	ldr	r3, [pc, #28]	@ (8012d3c <prvIdleTask+0x2c>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d907      	bls.n	8012d34 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012d24:	4b06      	ldr	r3, [pc, #24]	@ (8012d40 <prvIdleTask+0x30>)
 8012d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d2a:	601a      	str	r2, [r3, #0]
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012d34:	f7ed ffd2 	bl	8000cdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012d38:	e7ee      	b.n	8012d18 <prvIdleTask+0x8>
 8012d3a:	bf00      	nop
 8012d3c:	20000d3c 	.word	0x20000d3c
 8012d40:	e000ed04 	.word	0xe000ed04

08012d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	607b      	str	r3, [r7, #4]
 8012d4e:	e00c      	b.n	8012d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	4613      	mov	r3, r2
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	4413      	add	r3, r2
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4a12      	ldr	r2, [pc, #72]	@ (8012da4 <prvInitialiseTaskLists+0x60>)
 8012d5c:	4413      	add	r3, r2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fc2e 	bl	80115c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3301      	adds	r3, #1
 8012d68:	607b      	str	r3, [r7, #4]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b06      	cmp	r3, #6
 8012d6e:	d9ef      	bls.n	8012d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012d70:	480d      	ldr	r0, [pc, #52]	@ (8012da8 <prvInitialiseTaskLists+0x64>)
 8012d72:	f7fe fc25 	bl	80115c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012d76:	480d      	ldr	r0, [pc, #52]	@ (8012dac <prvInitialiseTaskLists+0x68>)
 8012d78:	f7fe fc22 	bl	80115c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012d7c:	480c      	ldr	r0, [pc, #48]	@ (8012db0 <prvInitialiseTaskLists+0x6c>)
 8012d7e:	f7fe fc1f 	bl	80115c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012d82:	480c      	ldr	r0, [pc, #48]	@ (8012db4 <prvInitialiseTaskLists+0x70>)
 8012d84:	f7fe fc1c 	bl	80115c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012d88:	480b      	ldr	r0, [pc, #44]	@ (8012db8 <prvInitialiseTaskLists+0x74>)
 8012d8a:	f7fe fc19 	bl	80115c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8012dbc <prvInitialiseTaskLists+0x78>)
 8012d90:	4a05      	ldr	r2, [pc, #20]	@ (8012da8 <prvInitialiseTaskLists+0x64>)
 8012d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012d94:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc0 <prvInitialiseTaskLists+0x7c>)
 8012d96:	4a05      	ldr	r2, [pc, #20]	@ (8012dac <prvInitialiseTaskLists+0x68>)
 8012d98:	601a      	str	r2, [r3, #0]
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	20000d3c 	.word	0x20000d3c
 8012da8:	20000dc8 	.word	0x20000dc8
 8012dac:	20000ddc 	.word	0x20000ddc
 8012db0:	20000df8 	.word	0x20000df8
 8012db4:	20000e0c 	.word	0x20000e0c
 8012db8:	20000e24 	.word	0x20000e24
 8012dbc:	20000df0 	.word	0x20000df0
 8012dc0:	20000df4 	.word	0x20000df4

08012dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012dca:	e019      	b.n	8012e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012dcc:	f000 fa96 	bl	80132fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dd0:	4b10      	ldr	r3, [pc, #64]	@ (8012e14 <prvCheckTasksWaitingTermination+0x50>)
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	68db      	ldr	r3, [r3, #12]
 8012dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	3304      	adds	r3, #4
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7fe fc79 	bl	80116d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012de2:	4b0d      	ldr	r3, [pc, #52]	@ (8012e18 <prvCheckTasksWaitingTermination+0x54>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	3b01      	subs	r3, #1
 8012de8:	4a0b      	ldr	r2, [pc, #44]	@ (8012e18 <prvCheckTasksWaitingTermination+0x54>)
 8012dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012dec:	4b0b      	ldr	r3, [pc, #44]	@ (8012e1c <prvCheckTasksWaitingTermination+0x58>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	3b01      	subs	r3, #1
 8012df2:	4a0a      	ldr	r2, [pc, #40]	@ (8012e1c <prvCheckTasksWaitingTermination+0x58>)
 8012df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012df6:	f000 fab7 	bl	8013368 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 f810 	bl	8012e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e00:	4b06      	ldr	r3, [pc, #24]	@ (8012e1c <prvCheckTasksWaitingTermination+0x58>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1e1      	bne.n	8012dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	3708      	adds	r7, #8
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	20000e0c 	.word	0x20000e0c
 8012e18:	20000e38 	.word	0x20000e38
 8012e1c:	20000e20 	.word	0x20000e20

08012e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d108      	bne.n	8012e44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e36:	4618      	mov	r0, r3
 8012e38:	f000 fc60 	bl	80136fc <vPortFree>
				vPortFree( pxTCB );
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 fc5d 	bl	80136fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012e42:	e01b      	b.n	8012e7c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d103      	bne.n	8012e56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 fc54 	bl	80136fc <vPortFree>
	}
 8012e54:	e012      	b.n	8012e7c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d00d      	beq.n	8012e7c <prvDeleteTCB+0x5c>
	__asm volatile
 8012e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e64:	b672      	cpsid	i
 8012e66:	f383 8811 	msr	BASEPRI, r3
 8012e6a:	f3bf 8f6f 	isb	sy
 8012e6e:	f3bf 8f4f 	dsb	sy
 8012e72:	b662      	cpsie	i
 8012e74:	60fb      	str	r3, [r7, #12]
}
 8012e76:	bf00      	nop
 8012e78:	bf00      	nop
 8012e7a:	e7fd      	b.n	8012e78 <prvDeleteTCB+0x58>
	}
 8012e7c:	bf00      	nop
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012ebc <prvResetNextTaskUnblockTime+0x38>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d104      	bne.n	8012e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012e94:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8012e96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e9c:	e008      	b.n	8012eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e9e:	4b07      	ldr	r3, [pc, #28]	@ (8012ebc <prvResetNextTaskUnblockTime+0x38>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	4a04      	ldr	r2, [pc, #16]	@ (8012ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8012eae:	6013      	str	r3, [r2, #0]
}
 8012eb0:	bf00      	nop
 8012eb2:	370c      	adds	r7, #12
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr
 8012ebc:	20000df0 	.word	0x20000df0
 8012ec0:	20000e58 	.word	0x20000e58

08012ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012eca:	4b0b      	ldr	r3, [pc, #44]	@ (8012ef8 <xTaskGetSchedulerState+0x34>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d102      	bne.n	8012ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	607b      	str	r3, [r7, #4]
 8012ed6:	e008      	b.n	8012eea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ed8:	4b08      	ldr	r3, [pc, #32]	@ (8012efc <xTaskGetSchedulerState+0x38>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d102      	bne.n	8012ee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	607b      	str	r3, [r7, #4]
 8012ee4:	e001      	b.n	8012eea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012eea:	687b      	ldr	r3, [r7, #4]
	}
 8012eec:	4618      	mov	r0, r3
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	20000e44 	.word	0x20000e44
 8012efc:	20000e60 	.word	0x20000e60

08012f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b086      	sub	sp, #24
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d074      	beq.n	8013000 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012f16:	4b3d      	ldr	r3, [pc, #244]	@ (801300c <xTaskPriorityDisinherit+0x10c>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	693a      	ldr	r2, [r7, #16]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d00d      	beq.n	8012f3c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f24:	b672      	cpsid	i
 8012f26:	f383 8811 	msr	BASEPRI, r3
 8012f2a:	f3bf 8f6f 	isb	sy
 8012f2e:	f3bf 8f4f 	dsb	sy
 8012f32:	b662      	cpsie	i
 8012f34:	60fb      	str	r3, [r7, #12]
}
 8012f36:	bf00      	nop
 8012f38:	bf00      	nop
 8012f3a:	e7fd      	b.n	8012f38 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d10d      	bne.n	8012f60 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f48:	b672      	cpsid	i
 8012f4a:	f383 8811 	msr	BASEPRI, r3
 8012f4e:	f3bf 8f6f 	isb	sy
 8012f52:	f3bf 8f4f 	dsb	sy
 8012f56:	b662      	cpsie	i
 8012f58:	60bb      	str	r3, [r7, #8]
}
 8012f5a:	bf00      	nop
 8012f5c:	bf00      	nop
 8012f5e:	e7fd      	b.n	8012f5c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f64:	1e5a      	subs	r2, r3, #1
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d044      	beq.n	8013000 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d140      	bne.n	8013000 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	3304      	adds	r3, #4
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fe fba6 	bl	80116d4 <uxListRemove>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d115      	bne.n	8012fba <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f92:	491f      	ldr	r1, [pc, #124]	@ (8013010 <xTaskPriorityDisinherit+0x110>)
 8012f94:	4613      	mov	r3, r2
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	4413      	add	r3, r2
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	440b      	add	r3, r1
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d10a      	bne.n	8012fba <xTaskPriorityDisinherit+0xba>
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa8:	2201      	movs	r2, #1
 8012faa:	fa02 f303 	lsl.w	r3, r2, r3
 8012fae:	43da      	mvns	r2, r3
 8012fb0:	4b18      	ldr	r3, [pc, #96]	@ (8013014 <xTaskPriorityDisinherit+0x114>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4013      	ands	r3, r2
 8012fb6:	4a17      	ldr	r2, [pc, #92]	@ (8013014 <xTaskPriorityDisinherit+0x114>)
 8012fb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fc6:	f1c3 0207 	rsb	r2, r3, #7
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	409a      	lsls	r2, r3
 8012fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8013014 <xTaskPriorityDisinherit+0x114>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4313      	orrs	r3, r2
 8012fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8013014 <xTaskPriorityDisinherit+0x114>)
 8012fde:	6013      	str	r3, [r2, #0]
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	4413      	add	r3, r2
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	4a08      	ldr	r2, [pc, #32]	@ (8013010 <xTaskPriorityDisinherit+0x110>)
 8012fee:	441a      	add	r2, r3
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	3304      	adds	r3, #4
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	4610      	mov	r0, r2
 8012ff8:	f7fe fb0f 	bl	801161a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013000:	697b      	ldr	r3, [r7, #20]
	}
 8013002:	4618      	mov	r0, r3
 8013004:	3718      	adds	r7, #24
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	20000d38 	.word	0x20000d38
 8013010:	20000d3c 	.word	0x20000d3c
 8013014:	20000e40 	.word	0x20000e40

08013018 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013022:	4b29      	ldr	r3, [pc, #164]	@ (80130c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013028:	4b28      	ldr	r3, [pc, #160]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	3304      	adds	r3, #4
 801302e:	4618      	mov	r0, r3
 8013030:	f7fe fb50 	bl	80116d4 <uxListRemove>
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	d10b      	bne.n	8013052 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801303a:	4b24      	ldr	r3, [pc, #144]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013040:	2201      	movs	r2, #1
 8013042:	fa02 f303 	lsl.w	r3, r2, r3
 8013046:	43da      	mvns	r2, r3
 8013048:	4b21      	ldr	r3, [pc, #132]	@ (80130d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4013      	ands	r3, r2
 801304e:	4a20      	ldr	r2, [pc, #128]	@ (80130d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013050:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013058:	d10a      	bne.n	8013070 <prvAddCurrentTaskToDelayedList+0x58>
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d007      	beq.n	8013070 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013060:	4b1a      	ldr	r3, [pc, #104]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	3304      	adds	r3, #4
 8013066:	4619      	mov	r1, r3
 8013068:	481a      	ldr	r0, [pc, #104]	@ (80130d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801306a:	f7fe fad6 	bl	801161a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801306e:	e026      	b.n	80130be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013070:	68fa      	ldr	r2, [r7, #12]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4413      	add	r3, r2
 8013076:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013078:	4b14      	ldr	r3, [pc, #80]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	68ba      	ldr	r2, [r7, #8]
 801307e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013080:	68ba      	ldr	r2, [r7, #8]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	429a      	cmp	r2, r3
 8013086:	d209      	bcs.n	801309c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013088:	4b13      	ldr	r3, [pc, #76]	@ (80130d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	4b0f      	ldr	r3, [pc, #60]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	3304      	adds	r3, #4
 8013092:	4619      	mov	r1, r3
 8013094:	4610      	mov	r0, r2
 8013096:	f7fe fae4 	bl	8011662 <vListInsert>
}
 801309a:	e010      	b.n	80130be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801309c:	4b0f      	ldr	r3, [pc, #60]	@ (80130dc <prvAddCurrentTaskToDelayedList+0xc4>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	4b0a      	ldr	r3, [pc, #40]	@ (80130cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	3304      	adds	r3, #4
 80130a6:	4619      	mov	r1, r3
 80130a8:	4610      	mov	r0, r2
 80130aa:	f7fe fada 	bl	8011662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80130ae:	4b0c      	ldr	r3, [pc, #48]	@ (80130e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	68ba      	ldr	r2, [r7, #8]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d202      	bcs.n	80130be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80130b8:	4a09      	ldr	r2, [pc, #36]	@ (80130e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	6013      	str	r3, [r2, #0]
}
 80130be:	bf00      	nop
 80130c0:	3710      	adds	r7, #16
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	20000e3c 	.word	0x20000e3c
 80130cc:	20000d38 	.word	0x20000d38
 80130d0:	20000e40 	.word	0x20000e40
 80130d4:	20000e24 	.word	0x20000e24
 80130d8:	20000df4 	.word	0x20000df4
 80130dc:	20000df0 	.word	0x20000df0
 80130e0:	20000e58 	.word	0x20000e58

080130e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	3b04      	subs	r3, #4
 80130f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80130fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	3b04      	subs	r3, #4
 8013102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	f023 0201 	bic.w	r2, r3, #1
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	3b04      	subs	r3, #4
 8013112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013114:	4a0c      	ldr	r2, [pc, #48]	@ (8013148 <pxPortInitialiseStack+0x64>)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	3b14      	subs	r3, #20
 801311e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	3b04      	subs	r3, #4
 801312a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f06f 0202 	mvn.w	r2, #2
 8013132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	3b20      	subs	r3, #32
 8013138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801313a:	68fb      	ldr	r3, [r7, #12]
}
 801313c:	4618      	mov	r0, r3
 801313e:	3714      	adds	r7, #20
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr
 8013148:	0801314d 	.word	0x0801314d

0801314c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801314c:	b480      	push	{r7}
 801314e:	b085      	sub	sp, #20
 8013150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013156:	4b15      	ldr	r3, [pc, #84]	@ (80131ac <prvTaskExitError+0x60>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801315e:	d00d      	beq.n	801317c <prvTaskExitError+0x30>
	__asm volatile
 8013160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013164:	b672      	cpsid	i
 8013166:	f383 8811 	msr	BASEPRI, r3
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	b662      	cpsie	i
 8013174:	60fb      	str	r3, [r7, #12]
}
 8013176:	bf00      	nop
 8013178:	bf00      	nop
 801317a:	e7fd      	b.n	8013178 <prvTaskExitError+0x2c>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013180:	b672      	cpsid	i
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	b662      	cpsie	i
 8013190:	60bb      	str	r3, [r7, #8]
}
 8013192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013194:	bf00      	nop
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d0fc      	beq.n	8013196 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801319c:	bf00      	nop
 801319e:	bf00      	nop
 80131a0:	3714      	adds	r7, #20
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	2000002c 	.word	0x2000002c

080131b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80131b0:	4b07      	ldr	r3, [pc, #28]	@ (80131d0 <pxCurrentTCBConst2>)
 80131b2:	6819      	ldr	r1, [r3, #0]
 80131b4:	6808      	ldr	r0, [r1, #0]
 80131b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ba:	f380 8809 	msr	PSP, r0
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f04f 0000 	mov.w	r0, #0
 80131c6:	f380 8811 	msr	BASEPRI, r0
 80131ca:	4770      	bx	lr
 80131cc:	f3af 8000 	nop.w

080131d0 <pxCurrentTCBConst2>:
 80131d0:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80131d4:	bf00      	nop
 80131d6:	bf00      	nop

080131d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80131d8:	4808      	ldr	r0, [pc, #32]	@ (80131fc <prvPortStartFirstTask+0x24>)
 80131da:	6800      	ldr	r0, [r0, #0]
 80131dc:	6800      	ldr	r0, [r0, #0]
 80131de:	f380 8808 	msr	MSP, r0
 80131e2:	f04f 0000 	mov.w	r0, #0
 80131e6:	f380 8814 	msr	CONTROL, r0
 80131ea:	b662      	cpsie	i
 80131ec:	b661      	cpsie	f
 80131ee:	f3bf 8f4f 	dsb	sy
 80131f2:	f3bf 8f6f 	isb	sy
 80131f6:	df00      	svc	0
 80131f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80131fa:	bf00      	nop
 80131fc:	e000ed08 	.word	0xe000ed08

08013200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013206:	4b37      	ldr	r3, [pc, #220]	@ (80132e4 <xPortStartScheduler+0xe4>)
 8013208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	b2db      	uxtb	r3, r3
 8013210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	22ff      	movs	r2, #255	@ 0xff
 8013216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013220:	78fb      	ldrb	r3, [r7, #3]
 8013222:	b2db      	uxtb	r3, r3
 8013224:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013228:	b2da      	uxtb	r2, r3
 801322a:	4b2f      	ldr	r3, [pc, #188]	@ (80132e8 <xPortStartScheduler+0xe8>)
 801322c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801322e:	4b2f      	ldr	r3, [pc, #188]	@ (80132ec <xPortStartScheduler+0xec>)
 8013230:	2207      	movs	r2, #7
 8013232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013234:	e009      	b.n	801324a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013236:	4b2d      	ldr	r3, [pc, #180]	@ (80132ec <xPortStartScheduler+0xec>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	3b01      	subs	r3, #1
 801323c:	4a2b      	ldr	r2, [pc, #172]	@ (80132ec <xPortStartScheduler+0xec>)
 801323e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013240:	78fb      	ldrb	r3, [r7, #3]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	b2db      	uxtb	r3, r3
 8013248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801324a:	78fb      	ldrb	r3, [r7, #3]
 801324c:	b2db      	uxtb	r3, r3
 801324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013252:	2b80      	cmp	r3, #128	@ 0x80
 8013254:	d0ef      	beq.n	8013236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013256:	4b25      	ldr	r3, [pc, #148]	@ (80132ec <xPortStartScheduler+0xec>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f1c3 0307 	rsb	r3, r3, #7
 801325e:	2b04      	cmp	r3, #4
 8013260:	d00d      	beq.n	801327e <xPortStartScheduler+0x7e>
	__asm volatile
 8013262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013266:	b672      	cpsid	i
 8013268:	f383 8811 	msr	BASEPRI, r3
 801326c:	f3bf 8f6f 	isb	sy
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	b662      	cpsie	i
 8013276:	60bb      	str	r3, [r7, #8]
}
 8013278:	bf00      	nop
 801327a:	bf00      	nop
 801327c:	e7fd      	b.n	801327a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801327e:	4b1b      	ldr	r3, [pc, #108]	@ (80132ec <xPortStartScheduler+0xec>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	021b      	lsls	r3, r3, #8
 8013284:	4a19      	ldr	r2, [pc, #100]	@ (80132ec <xPortStartScheduler+0xec>)
 8013286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013288:	4b18      	ldr	r3, [pc, #96]	@ (80132ec <xPortStartScheduler+0xec>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013290:	4a16      	ldr	r2, [pc, #88]	@ (80132ec <xPortStartScheduler+0xec>)
 8013292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	b2da      	uxtb	r2, r3
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801329c:	4b14      	ldr	r3, [pc, #80]	@ (80132f0 <xPortStartScheduler+0xf0>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4a13      	ldr	r2, [pc, #76]	@ (80132f0 <xPortStartScheduler+0xf0>)
 80132a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80132a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80132a8:	4b11      	ldr	r3, [pc, #68]	@ (80132f0 <xPortStartScheduler+0xf0>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	4a10      	ldr	r2, [pc, #64]	@ (80132f0 <xPortStartScheduler+0xf0>)
 80132ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80132b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80132b4:	f000 f8dc 	bl	8013470 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80132b8:	4b0e      	ldr	r3, [pc, #56]	@ (80132f4 <xPortStartScheduler+0xf4>)
 80132ba:	2200      	movs	r2, #0
 80132bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80132be:	f000 f8fb 	bl	80134b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80132c2:	4b0d      	ldr	r3, [pc, #52]	@ (80132f8 <xPortStartScheduler+0xf8>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	4a0c      	ldr	r2, [pc, #48]	@ (80132f8 <xPortStartScheduler+0xf8>)
 80132c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80132cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80132ce:	f7ff ff83 	bl	80131d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80132d2:	f7ff fb81 	bl	80129d8 <vTaskSwitchContext>
	prvTaskExitError();
 80132d6:	f7ff ff39 	bl	801314c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80132da:	2300      	movs	r3, #0
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	e000e400 	.word	0xe000e400
 80132e8:	20000e64 	.word	0x20000e64
 80132ec:	20000e68 	.word	0x20000e68
 80132f0:	e000ed20 	.word	0xe000ed20
 80132f4:	2000002c 	.word	0x2000002c
 80132f8:	e000ef34 	.word	0xe000ef34

080132fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
	__asm volatile
 8013302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013306:	b672      	cpsid	i
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	b662      	cpsie	i
 8013316:	607b      	str	r3, [r7, #4]
}
 8013318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801331a:	4b11      	ldr	r3, [pc, #68]	@ (8013360 <vPortEnterCritical+0x64>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	3301      	adds	r3, #1
 8013320:	4a0f      	ldr	r2, [pc, #60]	@ (8013360 <vPortEnterCritical+0x64>)
 8013322:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013324:	4b0e      	ldr	r3, [pc, #56]	@ (8013360 <vPortEnterCritical+0x64>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d112      	bne.n	8013352 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801332c:	4b0d      	ldr	r3, [pc, #52]	@ (8013364 <vPortEnterCritical+0x68>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	b2db      	uxtb	r3, r3
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00d      	beq.n	8013352 <vPortEnterCritical+0x56>
	__asm volatile
 8013336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801333a:	b672      	cpsid	i
 801333c:	f383 8811 	msr	BASEPRI, r3
 8013340:	f3bf 8f6f 	isb	sy
 8013344:	f3bf 8f4f 	dsb	sy
 8013348:	b662      	cpsie	i
 801334a:	603b      	str	r3, [r7, #0]
}
 801334c:	bf00      	nop
 801334e:	bf00      	nop
 8013350:	e7fd      	b.n	801334e <vPortEnterCritical+0x52>
	}
}
 8013352:	bf00      	nop
 8013354:	370c      	adds	r7, #12
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	2000002c 	.word	0x2000002c
 8013364:	e000ed04 	.word	0xe000ed04

08013368 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801336e:	4b13      	ldr	r3, [pc, #76]	@ (80133bc <vPortExitCritical+0x54>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10d      	bne.n	8013392 <vPortExitCritical+0x2a>
	__asm volatile
 8013376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801337a:	b672      	cpsid	i
 801337c:	f383 8811 	msr	BASEPRI, r3
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	f3bf 8f4f 	dsb	sy
 8013388:	b662      	cpsie	i
 801338a:	607b      	str	r3, [r7, #4]
}
 801338c:	bf00      	nop
 801338e:	bf00      	nop
 8013390:	e7fd      	b.n	801338e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013392:	4b0a      	ldr	r3, [pc, #40]	@ (80133bc <vPortExitCritical+0x54>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	3b01      	subs	r3, #1
 8013398:	4a08      	ldr	r2, [pc, #32]	@ (80133bc <vPortExitCritical+0x54>)
 801339a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801339c:	4b07      	ldr	r3, [pc, #28]	@ (80133bc <vPortExitCritical+0x54>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d105      	bne.n	80133b0 <vPortExitCritical+0x48>
 80133a4:	2300      	movs	r3, #0
 80133a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	f383 8811 	msr	BASEPRI, r3
}
 80133ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80133b0:	bf00      	nop
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr
 80133bc:	2000002c 	.word	0x2000002c

080133c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80133c0:	f3ef 8009 	mrs	r0, PSP
 80133c4:	f3bf 8f6f 	isb	sy
 80133c8:	4b15      	ldr	r3, [pc, #84]	@ (8013420 <pxCurrentTCBConst>)
 80133ca:	681a      	ldr	r2, [r3, #0]
 80133cc:	f01e 0f10 	tst.w	lr, #16
 80133d0:	bf08      	it	eq
 80133d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80133d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133da:	6010      	str	r0, [r2, #0]
 80133dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80133e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80133e4:	b672      	cpsid	i
 80133e6:	f380 8811 	msr	BASEPRI, r0
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	f3bf 8f6f 	isb	sy
 80133f2:	b662      	cpsie	i
 80133f4:	f7ff faf0 	bl	80129d8 <vTaskSwitchContext>
 80133f8:	f04f 0000 	mov.w	r0, #0
 80133fc:	f380 8811 	msr	BASEPRI, r0
 8013400:	bc09      	pop	{r0, r3}
 8013402:	6819      	ldr	r1, [r3, #0]
 8013404:	6808      	ldr	r0, [r1, #0]
 8013406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340a:	f01e 0f10 	tst.w	lr, #16
 801340e:	bf08      	it	eq
 8013410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013414:	f380 8809 	msr	PSP, r0
 8013418:	f3bf 8f6f 	isb	sy
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop

08013420 <pxCurrentTCBConst>:
 8013420:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013424:	bf00      	nop
 8013426:	bf00      	nop

08013428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
	__asm volatile
 801342e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013432:	b672      	cpsid	i
 8013434:	f383 8811 	msr	BASEPRI, r3
 8013438:	f3bf 8f6f 	isb	sy
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	b662      	cpsie	i
 8013442:	607b      	str	r3, [r7, #4]
}
 8013444:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013446:	f7ff fa0b 	bl	8012860 <xTaskIncrementTick>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d003      	beq.n	8013458 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013450:	4b06      	ldr	r3, [pc, #24]	@ (801346c <SysTick_Handler+0x44>)
 8013452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013456:	601a      	str	r2, [r3, #0]
 8013458:	2300      	movs	r3, #0
 801345a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	f383 8811 	msr	BASEPRI, r3
}
 8013462:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	e000ed04 	.word	0xe000ed04

08013470 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013470:	b480      	push	{r7}
 8013472:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013474:	4b0b      	ldr	r3, [pc, #44]	@ (80134a4 <vPortSetupTimerInterrupt+0x34>)
 8013476:	2200      	movs	r2, #0
 8013478:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801347a:	4b0b      	ldr	r3, [pc, #44]	@ (80134a8 <vPortSetupTimerInterrupt+0x38>)
 801347c:	2200      	movs	r2, #0
 801347e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013480:	4b0a      	ldr	r3, [pc, #40]	@ (80134ac <vPortSetupTimerInterrupt+0x3c>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4a0a      	ldr	r2, [pc, #40]	@ (80134b0 <vPortSetupTimerInterrupt+0x40>)
 8013486:	fba2 2303 	umull	r2, r3, r2, r3
 801348a:	099b      	lsrs	r3, r3, #6
 801348c:	4a09      	ldr	r2, [pc, #36]	@ (80134b4 <vPortSetupTimerInterrupt+0x44>)
 801348e:	3b01      	subs	r3, #1
 8013490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013492:	4b04      	ldr	r3, [pc, #16]	@ (80134a4 <vPortSetupTimerInterrupt+0x34>)
 8013494:	2207      	movs	r2, #7
 8013496:	601a      	str	r2, [r3, #0]
}
 8013498:	bf00      	nop
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	e000e010 	.word	0xe000e010
 80134a8:	e000e018 	.word	0xe000e018
 80134ac:	20000000 	.word	0x20000000
 80134b0:	10624dd3 	.word	0x10624dd3
 80134b4:	e000e014 	.word	0xe000e014

080134b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80134b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80134c8 <vPortEnableVFP+0x10>
 80134bc:	6801      	ldr	r1, [r0, #0]
 80134be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80134c2:	6001      	str	r1, [r0, #0]
 80134c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80134c6:	bf00      	nop
 80134c8:	e000ed88 	.word	0xe000ed88

080134cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80134cc:	b480      	push	{r7}
 80134ce:	b085      	sub	sp, #20
 80134d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80134d2:	f3ef 8305 	mrs	r3, IPSR
 80134d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2b0f      	cmp	r3, #15
 80134dc:	d917      	bls.n	801350e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80134de:	4a1a      	ldr	r2, [pc, #104]	@ (8013548 <vPortValidateInterruptPriority+0x7c>)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	4413      	add	r3, r2
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80134e8:	4b18      	ldr	r3, [pc, #96]	@ (801354c <vPortValidateInterruptPriority+0x80>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	7afa      	ldrb	r2, [r7, #11]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d20d      	bcs.n	801350e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80134f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f6:	b672      	cpsid	i
 80134f8:	f383 8811 	msr	BASEPRI, r3
 80134fc:	f3bf 8f6f 	isb	sy
 8013500:	f3bf 8f4f 	dsb	sy
 8013504:	b662      	cpsie	i
 8013506:	607b      	str	r3, [r7, #4]
}
 8013508:	bf00      	nop
 801350a:	bf00      	nop
 801350c:	e7fd      	b.n	801350a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801350e:	4b10      	ldr	r3, [pc, #64]	@ (8013550 <vPortValidateInterruptPriority+0x84>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013516:	4b0f      	ldr	r3, [pc, #60]	@ (8013554 <vPortValidateInterruptPriority+0x88>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	429a      	cmp	r2, r3
 801351c:	d90d      	bls.n	801353a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013522:	b672      	cpsid	i
 8013524:	f383 8811 	msr	BASEPRI, r3
 8013528:	f3bf 8f6f 	isb	sy
 801352c:	f3bf 8f4f 	dsb	sy
 8013530:	b662      	cpsie	i
 8013532:	603b      	str	r3, [r7, #0]
}
 8013534:	bf00      	nop
 8013536:	bf00      	nop
 8013538:	e7fd      	b.n	8013536 <vPortValidateInterruptPriority+0x6a>
	}
 801353a:	bf00      	nop
 801353c:	3714      	adds	r7, #20
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr
 8013546:	bf00      	nop
 8013548:	e000e3f0 	.word	0xe000e3f0
 801354c:	20000e64 	.word	0x20000e64
 8013550:	e000ed0c 	.word	0xe000ed0c
 8013554:	20000e68 	.word	0x20000e68

08013558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b08a      	sub	sp, #40	@ 0x28
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013560:	2300      	movs	r3, #0
 8013562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013564:	f7ff f8ac 	bl	80126c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013568:	4b5f      	ldr	r3, [pc, #380]	@ (80136e8 <pvPortMalloc+0x190>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013570:	f000 f924 	bl	80137bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013574:	4b5d      	ldr	r3, [pc, #372]	@ (80136ec <pvPortMalloc+0x194>)
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4013      	ands	r3, r2
 801357c:	2b00      	cmp	r3, #0
 801357e:	f040 8094 	bne.w	80136aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d020      	beq.n	80135ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013588:	2208      	movs	r2, #8
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4413      	add	r3, r2
 801358e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f003 0307 	and.w	r3, r3, #7
 8013596:	2b00      	cmp	r3, #0
 8013598:	d017      	beq.n	80135ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f023 0307 	bic.w	r3, r3, #7
 80135a0:	3308      	adds	r3, #8
 80135a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f003 0307 	and.w	r3, r3, #7
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d00d      	beq.n	80135ca <pvPortMalloc+0x72>
	__asm volatile
 80135ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135b2:	b672      	cpsid	i
 80135b4:	f383 8811 	msr	BASEPRI, r3
 80135b8:	f3bf 8f6f 	isb	sy
 80135bc:	f3bf 8f4f 	dsb	sy
 80135c0:	b662      	cpsie	i
 80135c2:	617b      	str	r3, [r7, #20]
}
 80135c4:	bf00      	nop
 80135c6:	bf00      	nop
 80135c8:	e7fd      	b.n	80135c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d06c      	beq.n	80136aa <pvPortMalloc+0x152>
 80135d0:	4b47      	ldr	r3, [pc, #284]	@ (80136f0 <pvPortMalloc+0x198>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d867      	bhi.n	80136aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80135da:	4b46      	ldr	r3, [pc, #280]	@ (80136f4 <pvPortMalloc+0x19c>)
 80135dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80135de:	4b45      	ldr	r3, [pc, #276]	@ (80136f4 <pvPortMalloc+0x19c>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135e4:	e004      	b.n	80135f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80135e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80135ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d903      	bls.n	8013602 <pvPortMalloc+0xaa>
 80135fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1f1      	bne.n	80135e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013602:	4b39      	ldr	r3, [pc, #228]	@ (80136e8 <pvPortMalloc+0x190>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013608:	429a      	cmp	r2, r3
 801360a:	d04e      	beq.n	80136aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2208      	movs	r2, #8
 8013612:	4413      	add	r3, r2
 8013614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013618:	681a      	ldr	r2, [r3, #0]
 801361a:	6a3b      	ldr	r3, [r7, #32]
 801361c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	685a      	ldr	r2, [r3, #4]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	1ad2      	subs	r2, r2, r3
 8013626:	2308      	movs	r3, #8
 8013628:	005b      	lsls	r3, r3, #1
 801362a:	429a      	cmp	r2, r3
 801362c:	d922      	bls.n	8013674 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4413      	add	r3, r2
 8013634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	f003 0307 	and.w	r3, r3, #7
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00d      	beq.n	801365c <pvPortMalloc+0x104>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013644:	b672      	cpsid	i
 8013646:	f383 8811 	msr	BASEPRI, r3
 801364a:	f3bf 8f6f 	isb	sy
 801364e:	f3bf 8f4f 	dsb	sy
 8013652:	b662      	cpsie	i
 8013654:	613b      	str	r3, [r7, #16]
}
 8013656:	bf00      	nop
 8013658:	bf00      	nop
 801365a:	e7fd      	b.n	8013658 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365e:	685a      	ldr	r2, [r3, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	1ad2      	subs	r2, r2, r3
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801366e:	69b8      	ldr	r0, [r7, #24]
 8013670:	f000 f906 	bl	8013880 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013674:	4b1e      	ldr	r3, [pc, #120]	@ (80136f0 <pvPortMalloc+0x198>)
 8013676:	681a      	ldr	r2, [r3, #0]
 8013678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	1ad3      	subs	r3, r2, r3
 801367e:	4a1c      	ldr	r2, [pc, #112]	@ (80136f0 <pvPortMalloc+0x198>)
 8013680:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013682:	4b1b      	ldr	r3, [pc, #108]	@ (80136f0 <pvPortMalloc+0x198>)
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	4b1c      	ldr	r3, [pc, #112]	@ (80136f8 <pvPortMalloc+0x1a0>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	429a      	cmp	r2, r3
 801368c:	d203      	bcs.n	8013696 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801368e:	4b18      	ldr	r3, [pc, #96]	@ (80136f0 <pvPortMalloc+0x198>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4a19      	ldr	r2, [pc, #100]	@ (80136f8 <pvPortMalloc+0x1a0>)
 8013694:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013698:	685a      	ldr	r2, [r3, #4]
 801369a:	4b14      	ldr	r3, [pc, #80]	@ (80136ec <pvPortMalloc+0x194>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	431a      	orrs	r2, r3
 80136a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80136a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a6:	2200      	movs	r2, #0
 80136a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80136aa:	f7ff f817 	bl	80126dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d101      	bne.n	80136b8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80136b4:	f7ed fb24 	bl	8000d00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	f003 0307 	and.w	r3, r3, #7
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00d      	beq.n	80136de <pvPortMalloc+0x186>
	__asm volatile
 80136c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c6:	b672      	cpsid	i
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	b662      	cpsie	i
 80136d6:	60fb      	str	r3, [r7, #12]
}
 80136d8:	bf00      	nop
 80136da:	bf00      	nop
 80136dc:	e7fd      	b.n	80136da <pvPortMalloc+0x182>
	return pvReturn;
 80136de:	69fb      	ldr	r3, [r7, #28]
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3728      	adds	r7, #40	@ 0x28
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	20008e74 	.word	0x20008e74
 80136ec:	20008e80 	.word	0x20008e80
 80136f0:	20008e78 	.word	0x20008e78
 80136f4:	20008e6c 	.word	0x20008e6c
 80136f8:	20008e7c 	.word	0x20008e7c

080136fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d04e      	beq.n	80137ac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801370e:	2308      	movs	r3, #8
 8013710:	425b      	negs	r3, r3
 8013712:	697a      	ldr	r2, [r7, #20]
 8013714:	4413      	add	r3, r2
 8013716:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	685a      	ldr	r2, [r3, #4]
 8013720:	4b24      	ldr	r3, [pc, #144]	@ (80137b4 <vPortFree+0xb8>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4013      	ands	r3, r2
 8013726:	2b00      	cmp	r3, #0
 8013728:	d10d      	bne.n	8013746 <vPortFree+0x4a>
	__asm volatile
 801372a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372e:	b672      	cpsid	i
 8013730:	f383 8811 	msr	BASEPRI, r3
 8013734:	f3bf 8f6f 	isb	sy
 8013738:	f3bf 8f4f 	dsb	sy
 801373c:	b662      	cpsie	i
 801373e:	60fb      	str	r3, [r7, #12]
}
 8013740:	bf00      	nop
 8013742:	bf00      	nop
 8013744:	e7fd      	b.n	8013742 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00d      	beq.n	801376a <vPortFree+0x6e>
	__asm volatile
 801374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013752:	b672      	cpsid	i
 8013754:	f383 8811 	msr	BASEPRI, r3
 8013758:	f3bf 8f6f 	isb	sy
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	b662      	cpsie	i
 8013762:	60bb      	str	r3, [r7, #8]
}
 8013764:	bf00      	nop
 8013766:	bf00      	nop
 8013768:	e7fd      	b.n	8013766 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	685a      	ldr	r2, [r3, #4]
 801376e:	4b11      	ldr	r3, [pc, #68]	@ (80137b4 <vPortFree+0xb8>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	4013      	ands	r3, r2
 8013774:	2b00      	cmp	r3, #0
 8013776:	d019      	beq.n	80137ac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d115      	bne.n	80137ac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	685a      	ldr	r2, [r3, #4]
 8013784:	4b0b      	ldr	r3, [pc, #44]	@ (80137b4 <vPortFree+0xb8>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	43db      	mvns	r3, r3
 801378a:	401a      	ands	r2, r3
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013790:	f7fe ff96 	bl	80126c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	685a      	ldr	r2, [r3, #4]
 8013798:	4b07      	ldr	r3, [pc, #28]	@ (80137b8 <vPortFree+0xbc>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	4413      	add	r3, r2
 801379e:	4a06      	ldr	r2, [pc, #24]	@ (80137b8 <vPortFree+0xbc>)
 80137a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80137a2:	6938      	ldr	r0, [r7, #16]
 80137a4:	f000 f86c 	bl	8013880 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80137a8:	f7fe ff98 	bl	80126dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80137ac:	bf00      	nop
 80137ae:	3718      	adds	r7, #24
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	20008e80 	.word	0x20008e80
 80137b8:	20008e78 	.word	0x20008e78

080137bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80137c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80137c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80137c8:	4b27      	ldr	r3, [pc, #156]	@ (8013868 <prvHeapInit+0xac>)
 80137ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f003 0307 	and.w	r3, r3, #7
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d00c      	beq.n	80137f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	3307      	adds	r3, #7
 80137da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	f023 0307 	bic.w	r3, r3, #7
 80137e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	4a1f      	ldr	r2, [pc, #124]	@ (8013868 <prvHeapInit+0xac>)
 80137ec:	4413      	add	r3, r2
 80137ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80137f4:	4a1d      	ldr	r2, [pc, #116]	@ (801386c <prvHeapInit+0xb0>)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80137fa:	4b1c      	ldr	r3, [pc, #112]	@ (801386c <prvHeapInit+0xb0>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	68ba      	ldr	r2, [r7, #8]
 8013804:	4413      	add	r3, r2
 8013806:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013808:	2208      	movs	r2, #8
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	1a9b      	subs	r3, r3, r2
 801380e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f023 0307 	bic.w	r3, r3, #7
 8013816:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	4a15      	ldr	r2, [pc, #84]	@ (8013870 <prvHeapInit+0xb4>)
 801381c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801381e:	4b14      	ldr	r3, [pc, #80]	@ (8013870 <prvHeapInit+0xb4>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2200      	movs	r2, #0
 8013824:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013826:	4b12      	ldr	r3, [pc, #72]	@ (8013870 <prvHeapInit+0xb4>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2200      	movs	r2, #0
 801382c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	1ad2      	subs	r2, r2, r3
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801383c:	4b0c      	ldr	r3, [pc, #48]	@ (8013870 <prvHeapInit+0xb4>)
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	4a0a      	ldr	r2, [pc, #40]	@ (8013874 <prvHeapInit+0xb8>)
 801384a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	4a09      	ldr	r2, [pc, #36]	@ (8013878 <prvHeapInit+0xbc>)
 8013852:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013854:	4b09      	ldr	r3, [pc, #36]	@ (801387c <prvHeapInit+0xc0>)
 8013856:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801385a:	601a      	str	r2, [r3, #0]
}
 801385c:	bf00      	nop
 801385e:	3714      	adds	r7, #20
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr
 8013868:	20000e6c 	.word	0x20000e6c
 801386c:	20008e6c 	.word	0x20008e6c
 8013870:	20008e74 	.word	0x20008e74
 8013874:	20008e7c 	.word	0x20008e7c
 8013878:	20008e78 	.word	0x20008e78
 801387c:	20008e80 	.word	0x20008e80

08013880 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013880:	b480      	push	{r7}
 8013882:	b085      	sub	sp, #20
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013888:	4b28      	ldr	r3, [pc, #160]	@ (801392c <prvInsertBlockIntoFreeList+0xac>)
 801388a:	60fb      	str	r3, [r7, #12]
 801388c:	e002      	b.n	8013894 <prvInsertBlockIntoFreeList+0x14>
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	60fb      	str	r3, [r7, #12]
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	429a      	cmp	r2, r3
 801389c:	d8f7      	bhi.n	801388e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	68ba      	ldr	r2, [r7, #8]
 80138a8:	4413      	add	r3, r2
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d108      	bne.n	80138c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	441a      	add	r2, r3
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	68ba      	ldr	r2, [r7, #8]
 80138cc:	441a      	add	r2, r3
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d118      	bne.n	8013908 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	4b15      	ldr	r3, [pc, #84]	@ (8013930 <prvInsertBlockIntoFreeList+0xb0>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d00d      	beq.n	80138fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	441a      	add	r2, r3
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	601a      	str	r2, [r3, #0]
 80138fc:	e008      	b.n	8013910 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80138fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013930 <prvInsertBlockIntoFreeList+0xb0>)
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	601a      	str	r2, [r3, #0]
 8013906:	e003      	b.n	8013910 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	429a      	cmp	r2, r3
 8013916:	d002      	beq.n	801391e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801391e:	bf00      	nop
 8013920:	3714      	adds	r7, #20
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	20008e6c 	.word	0x20008e6c
 8013930:	20008e74 	.word	0x20008e74

08013934 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013938:	2201      	movs	r2, #1
 801393a:	490e      	ldr	r1, [pc, #56]	@ (8013974 <MX_USB_HOST_Init+0x40>)
 801393c:	480e      	ldr	r0, [pc, #56]	@ (8013978 <MX_USB_HOST_Init+0x44>)
 801393e:	f7fb fd43 	bl	800f3c8 <USBH_Init>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d001      	beq.n	801394c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013948:	f7ed ff8a 	bl	8001860 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801394c:	490b      	ldr	r1, [pc, #44]	@ (801397c <MX_USB_HOST_Init+0x48>)
 801394e:	480a      	ldr	r0, [pc, #40]	@ (8013978 <MX_USB_HOST_Init+0x44>)
 8013950:	f7fb fe0f 	bl	800f572 <USBH_RegisterClass>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d001      	beq.n	801395e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801395a:	f7ed ff81 	bl	8001860 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801395e:	4806      	ldr	r0, [pc, #24]	@ (8013978 <MX_USB_HOST_Init+0x44>)
 8013960:	f7fb fe93 	bl	800f68a <USBH_Start>
 8013964:	4603      	mov	r3, r0
 8013966:	2b00      	cmp	r3, #0
 8013968:	d001      	beq.n	801396e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801396a:	f7ed ff79 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801396e:	bf00      	nop
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	08013981 	.word	0x08013981
 8013978:	20008e84 	.word	0x20008e84
 801397c:	2000000c 	.word	0x2000000c

08013980 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801398c:	78fb      	ldrb	r3, [r7, #3]
 801398e:	3b01      	subs	r3, #1
 8013990:	2b04      	cmp	r3, #4
 8013992:	d819      	bhi.n	80139c8 <USBH_UserProcess+0x48>
 8013994:	a201      	add	r2, pc, #4	@ (adr r2, 801399c <USBH_UserProcess+0x1c>)
 8013996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801399a:	bf00      	nop
 801399c:	080139c9 	.word	0x080139c9
 80139a0:	080139b9 	.word	0x080139b9
 80139a4:	080139c9 	.word	0x080139c9
 80139a8:	080139c1 	.word	0x080139c1
 80139ac:	080139b1 	.word	0x080139b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80139b0:	4b09      	ldr	r3, [pc, #36]	@ (80139d8 <USBH_UserProcess+0x58>)
 80139b2:	2203      	movs	r2, #3
 80139b4:	701a      	strb	r2, [r3, #0]
  break;
 80139b6:	e008      	b.n	80139ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80139b8:	4b07      	ldr	r3, [pc, #28]	@ (80139d8 <USBH_UserProcess+0x58>)
 80139ba:	2202      	movs	r2, #2
 80139bc:	701a      	strb	r2, [r3, #0]
  break;
 80139be:	e004      	b.n	80139ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80139c0:	4b05      	ldr	r3, [pc, #20]	@ (80139d8 <USBH_UserProcess+0x58>)
 80139c2:	2201      	movs	r2, #1
 80139c4:	701a      	strb	r2, [r3, #0]
  break;
 80139c6:	e000      	b.n	80139ca <USBH_UserProcess+0x4a>

  default:
  break;
 80139c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80139ca:	bf00      	nop
 80139cc:	370c      	adds	r7, #12
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr
 80139d6:	bf00      	nop
 80139d8:	20009268 	.word	0x20009268

080139dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08a      	sub	sp, #40	@ 0x28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139e4:	f107 0314 	add.w	r3, r7, #20
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]
 80139ec:	605a      	str	r2, [r3, #4]
 80139ee:	609a      	str	r2, [r3, #8]
 80139f0:	60da      	str	r2, [r3, #12]
 80139f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80139fc:	d13c      	bne.n	8013a78 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139fe:	4b20      	ldr	r3, [pc, #128]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a02:	4a1f      	ldr	r2, [pc, #124]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a04:	f043 0301 	orr.w	r3, r3, #1
 8013a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8013a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a0e:	f003 0301 	and.w	r3, r3, #1
 8013a12:	613b      	str	r3, [r7, #16]
 8013a14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8013a16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8013a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a20:	2300      	movs	r3, #0
 8013a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a24:	2303      	movs	r3, #3
 8013a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013a28:	230a      	movs	r3, #10
 8013a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a2c:	f107 0314 	add.w	r3, r7, #20
 8013a30:	4619      	mov	r1, r3
 8013a32:	4814      	ldr	r0, [pc, #80]	@ (8013a84 <HAL_HCD_MspInit+0xa8>)
 8013a34:	f7f0 fd04 	bl	8004440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a38:	4b11      	ldr	r3, [pc, #68]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a3c:	4a10      	ldr	r2, [pc, #64]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a42:	6353      	str	r3, [r2, #52]	@ 0x34
 8013a44:	4b0e      	ldr	r3, [pc, #56]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a4c:	60fb      	str	r3, [r7, #12]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	4b0b      	ldr	r3, [pc, #44]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a54:	4a0a      	ldr	r2, [pc, #40]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8013a5c:	4b08      	ldr	r3, [pc, #32]	@ (8013a80 <HAL_HCD_MspInit+0xa4>)
 8013a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013a64:	60bb      	str	r3, [r7, #8]
 8013a66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013a68:	2200      	movs	r2, #0
 8013a6a:	2105      	movs	r1, #5
 8013a6c:	2043      	movs	r0, #67	@ 0x43
 8013a6e:	f7ef fceb 	bl	8003448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a72:	2043      	movs	r0, #67	@ 0x43
 8013a74:	f7ef fd04 	bl	8003480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a78:	bf00      	nop
 8013a7a:	3728      	adds	r7, #40	@ 0x28
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	40023800 	.word	0x40023800
 8013a84:	40020000 	.word	0x40020000

08013a88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7fc faa9 	bl	800ffee <USBH_LL_IncTimer>
}
 8013a9c:	bf00      	nop
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fc faed 	bl	8010092 <USBH_LL_Connect>
}
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7fc fb02 	bl	80100d8 <USBH_LL_Disconnect>
}
 8013ad4:	bf00      	nop
 8013ad6:	3708      	adds	r7, #8
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}

08013adc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	70fb      	strb	r3, [r7, #3]
 8013ae8:	4613      	mov	r3, r2
 8013aea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fc fb37 	bl	8010166 <USBH_LL_NotifyURBChange>
#endif
}
 8013af8:	bf00      	nop
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fc fa97 	bl	8010042 <USBH_LL_PortEnabled>
}
 8013b14:	bf00      	nop
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fc faa3 	bl	8010076 <USBH_LL_PortDisabled>
}
 8013b30:	bf00      	nop
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d12a      	bne.n	8013ba0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013b4a:	4a18      	ldr	r2, [pc, #96]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4a15      	ldr	r2, [pc, #84]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b56:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013b5a:	4b14      	ldr	r3, [pc, #80]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8013b60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013b62:	4b12      	ldr	r3, [pc, #72]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b64:	2208      	movs	r2, #8
 8013b66:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013b68:	4b10      	ldr	r3, [pc, #64]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b70:	2200      	movs	r2, #0
 8013b72:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013b74:	4b0d      	ldr	r3, [pc, #52]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b76:	2202      	movs	r2, #2
 8013b78:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013b80:	480a      	ldr	r0, [pc, #40]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b82:	f7f0 fe54 	bl	800482e <HAL_HCD_Init>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013b8c:	f7ed fe68 	bl	8001860 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013b90:	4806      	ldr	r0, [pc, #24]	@ (8013bac <USBH_LL_Init+0x74>)
 8013b92:	f7f1 fab5 	bl	8005100 <HAL_HCD_GetCurrentFrame>
 8013b96:	4603      	mov	r3, r0
 8013b98:	4619      	mov	r1, r3
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f7fc fa18 	bl	800ffd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013ba0:	2300      	movs	r3, #0
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3708      	adds	r7, #8
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	2000926c 	.word	0x2000926c

08013bb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7f1 fa22 	bl	8005010 <HAL_HCD_Start>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f000 f95e 	bl	8013e94 <USBH_Get_USB_Status>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3710      	adds	r7, #16
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f1 fa2a 	bl	8005056 <HAL_HCD_Stop>
 8013c02:	4603      	mov	r3, r0
 8013c04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013c06:	7bfb      	ldrb	r3, [r7, #15]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f000 f943 	bl	8013e94 <USBH_Get_USB_Status>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3710      	adds	r7, #16
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b084      	sub	sp, #16
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013c24:	2301      	movs	r3, #1
 8013c26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f1 fa74 	bl	800511c <HAL_HCD_GetCurrentSpeed>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b02      	cmp	r3, #2
 8013c38:	d00c      	beq.n	8013c54 <USBH_LL_GetSpeed+0x38>
 8013c3a:	2b02      	cmp	r3, #2
 8013c3c:	d80d      	bhi.n	8013c5a <USBH_LL_GetSpeed+0x3e>
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d002      	beq.n	8013c48 <USBH_LL_GetSpeed+0x2c>
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d003      	beq.n	8013c4e <USBH_LL_GetSpeed+0x32>
 8013c46:	e008      	b.n	8013c5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8013c4c:	e008      	b.n	8013c60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	73fb      	strb	r3, [r7, #15]
    break;
 8013c52:	e005      	b.n	8013c60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013c54:	2302      	movs	r3, #2
 8013c56:	73fb      	strb	r3, [r7, #15]
    break;
 8013c58:	e002      	b.n	8013c60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8013c5e:	bf00      	nop
  }
  return  speed;
 8013c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3710      	adds	r7, #16
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}

08013c6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013c6a:	b580      	push	{r7, lr}
 8013c6c:	b084      	sub	sp, #16
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c72:	2300      	movs	r3, #0
 8013c74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013c76:	2300      	movs	r3, #0
 8013c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7f1 fa05 	bl	8005090 <HAL_HCD_ResetPort>
 8013c86:	4603      	mov	r3, r0
 8013c88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013c8a:	7bfb      	ldrb	r3, [r7, #15]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f000 f901 	bl	8013e94 <USBH_Get_USB_Status>
 8013c92:	4603      	mov	r3, r0
 8013c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013cb2:	78fa      	ldrb	r2, [r7, #3]
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7f1 fa0d 	bl	80050d6 <HAL_HCD_HC_GetXferCount>
 8013cbc:	4603      	mov	r3, r0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3708      	adds	r7, #8
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013cc6:	b590      	push	{r4, r7, lr}
 8013cc8:	b089      	sub	sp, #36	@ 0x24
 8013cca:	af04      	add	r7, sp, #16
 8013ccc:	6078      	str	r0, [r7, #4]
 8013cce:	4608      	mov	r0, r1
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	70fb      	strb	r3, [r7, #3]
 8013cd8:	460b      	mov	r3, r1
 8013cda:	70bb      	strb	r3, [r7, #2]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013cee:	787c      	ldrb	r4, [r7, #1]
 8013cf0:	78ba      	ldrb	r2, [r7, #2]
 8013cf2:	78f9      	ldrb	r1, [r7, #3]
 8013cf4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013cf6:	9302      	str	r3, [sp, #8]
 8013cf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d02:	9300      	str	r3, [sp, #0]
 8013d04:	4623      	mov	r3, r4
 8013d06:	f7f0 fdf9 	bl	80048fc <HAL_HCD_HC_Init>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013d0e:	7bfb      	ldrb	r3, [r7, #15]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f000 f8bf 	bl	8013e94 <USBH_Get_USB_Status>
 8013d16:	4603      	mov	r3, r0
 8013d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3714      	adds	r7, #20
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd90      	pop	{r4, r7, pc}

08013d24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d34:	2300      	movs	r3, #0
 8013d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013d3e:	78fa      	ldrb	r2, [r7, #3]
 8013d40:	4611      	mov	r1, r2
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7f0 fe92 	bl	8004a6c <HAL_HCD_HC_Halt>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013d4c:	7bfb      	ldrb	r3, [r7, #15]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 f8a0 	bl	8013e94 <USBH_Get_USB_Status>
 8013d54:	4603      	mov	r3, r0
 8013d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3710      	adds	r7, #16
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}

08013d62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013d62:	b590      	push	{r4, r7, lr}
 8013d64:	b089      	sub	sp, #36	@ 0x24
 8013d66:	af04      	add	r7, sp, #16
 8013d68:	6078      	str	r0, [r7, #4]
 8013d6a:	4608      	mov	r0, r1
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	461a      	mov	r2, r3
 8013d70:	4603      	mov	r3, r0
 8013d72:	70fb      	strb	r3, [r7, #3]
 8013d74:	460b      	mov	r3, r1
 8013d76:	70bb      	strb	r3, [r7, #2]
 8013d78:	4613      	mov	r3, r2
 8013d7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d80:	2300      	movs	r3, #0
 8013d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013d8a:	787c      	ldrb	r4, [r7, #1]
 8013d8c:	78ba      	ldrb	r2, [r7, #2]
 8013d8e:	78f9      	ldrb	r1, [r7, #3]
 8013d90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013d94:	9303      	str	r3, [sp, #12]
 8013d96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013d98:	9302      	str	r3, [sp, #8]
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d9c:	9301      	str	r3, [sp, #4]
 8013d9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	4623      	mov	r3, r4
 8013da6:	f7f0 fe85 	bl	8004ab4 <HAL_HCD_HC_SubmitRequest>
 8013daa:	4603      	mov	r3, r0
 8013dac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013dae:	7bfb      	ldrb	r3, [r7, #15]
 8013db0:	4618      	mov	r0, r3
 8013db2:	f000 f86f 	bl	8013e94 <USBH_Get_USB_Status>
 8013db6:	4603      	mov	r3, r0
 8013db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd90      	pop	{r4, r7, pc}

08013dc4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	460b      	mov	r3, r1
 8013dce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013dd6:	78fa      	ldrb	r2, [r7, #3]
 8013dd8:	4611      	mov	r1, r2
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f1 f966 	bl	80050ac <HAL_HCD_HC_GetURBState>
 8013de0:	4603      	mov	r3, r0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b082      	sub	sp, #8
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
 8013df2:	460b      	mov	r3, r1
 8013df4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d103      	bne.n	8013e08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013e00:	78fb      	ldrb	r3, [r7, #3]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f000 f872 	bl	8013eec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013e08:	20c8      	movs	r0, #200	@ 0xc8
 8013e0a:	f7ee ffad 	bl	8002d68 <HAL_Delay>
  return USBH_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b085      	sub	sp, #20
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	460b      	mov	r3, r1
 8013e22:	70fb      	strb	r3, [r7, #3]
 8013e24:	4613      	mov	r3, r2
 8013e26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013e2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013e30:	78fa      	ldrb	r2, [r7, #3]
 8013e32:	68f9      	ldr	r1, [r7, #12]
 8013e34:	4613      	mov	r3, r2
 8013e36:	011b      	lsls	r3, r3, #4
 8013e38:	1a9b      	subs	r3, r3, r2
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	440b      	add	r3, r1
 8013e3e:	3317      	adds	r3, #23
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d00a      	beq.n	8013e5c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013e46:	78fa      	ldrb	r2, [r7, #3]
 8013e48:	68f9      	ldr	r1, [r7, #12]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	011b      	lsls	r3, r3, #4
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	440b      	add	r3, r1
 8013e54:	333c      	adds	r3, #60	@ 0x3c
 8013e56:	78ba      	ldrb	r2, [r7, #2]
 8013e58:	701a      	strb	r2, [r3, #0]
 8013e5a:	e009      	b.n	8013e70 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013e5c:	78fa      	ldrb	r2, [r7, #3]
 8013e5e:	68f9      	ldr	r1, [r7, #12]
 8013e60:	4613      	mov	r3, r2
 8013e62:	011b      	lsls	r3, r3, #4
 8013e64:	1a9b      	subs	r3, r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	440b      	add	r3, r1
 8013e6a:	333d      	adds	r3, #61	@ 0x3d
 8013e6c:	78ba      	ldrb	r2, [r7, #2]
 8013e6e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013e70:	2300      	movs	r3, #0
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3714      	adds	r7, #20
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b082      	sub	sp, #8
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7ee ff6e 	bl	8002d68 <HAL_Delay>
}
 8013e8c:	bf00      	nop
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013ea2:	79fb      	ldrb	r3, [r7, #7]
 8013ea4:	2b03      	cmp	r3, #3
 8013ea6:	d817      	bhi.n	8013ed8 <USBH_Get_USB_Status+0x44>
 8013ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8013eb0 <USBH_Get_USB_Status+0x1c>)
 8013eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eae:	bf00      	nop
 8013eb0:	08013ec1 	.word	0x08013ec1
 8013eb4:	08013ec7 	.word	0x08013ec7
 8013eb8:	08013ecd 	.word	0x08013ecd
 8013ebc:	08013ed3 	.word	0x08013ed3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ec4:	e00b      	b.n	8013ede <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013ec6:	2302      	movs	r3, #2
 8013ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8013eca:	e008      	b.n	8013ede <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	73fb      	strb	r3, [r7, #15]
    break;
 8013ed0:	e005      	b.n	8013ede <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013ed2:	2302      	movs	r3, #2
 8013ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8013ed6:	e002      	b.n	8013ede <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013ed8:	2302      	movs	r3, #2
 8013eda:	73fb      	strb	r3, [r7, #15]
    break;
 8013edc:	bf00      	nop
  }
  return usb_status;
 8013ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3714      	adds	r7, #20
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013ef6:	79fb      	ldrb	r3, [r7, #7]
 8013ef8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d102      	bne.n	8013f06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013f00:	2300      	movs	r3, #0
 8013f02:	73fb      	strb	r3, [r7, #15]
 8013f04:	e001      	b.n	8013f0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013f06:	2301      	movs	r3, #1
 8013f08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8013f0a:	7bfb      	ldrb	r3, [r7, #15]
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	2120      	movs	r1, #32
 8013f10:	4803      	ldr	r0, [pc, #12]	@ (8013f20 <MX_DriverVbusFS+0x34>)
 8013f12:	f7f0 fc59 	bl	80047c8 <HAL_GPIO_WritePin>
}
 8013f16:	bf00      	nop
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	40020c00 	.word	0x40020c00

08013f24 <malloc>:
 8013f24:	4b02      	ldr	r3, [pc, #8]	@ (8013f30 <malloc+0xc>)
 8013f26:	4601      	mov	r1, r0
 8013f28:	6818      	ldr	r0, [r3, #0]
 8013f2a:	f000 b82d 	b.w	8013f88 <_malloc_r>
 8013f2e:	bf00      	nop
 8013f30:	20000030 	.word	0x20000030

08013f34 <free>:
 8013f34:	4b02      	ldr	r3, [pc, #8]	@ (8013f40 <free+0xc>)
 8013f36:	4601      	mov	r1, r0
 8013f38:	6818      	ldr	r0, [r3, #0]
 8013f3a:	f000 b903 	b.w	8014144 <_free_r>
 8013f3e:	bf00      	nop
 8013f40:	20000030 	.word	0x20000030

08013f44 <sbrk_aligned>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	4e0f      	ldr	r6, [pc, #60]	@ (8013f84 <sbrk_aligned+0x40>)
 8013f48:	460c      	mov	r4, r1
 8013f4a:	6831      	ldr	r1, [r6, #0]
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	b911      	cbnz	r1, 8013f56 <sbrk_aligned+0x12>
 8013f50:	f000 f8ae 	bl	80140b0 <_sbrk_r>
 8013f54:	6030      	str	r0, [r6, #0]
 8013f56:	4621      	mov	r1, r4
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f000 f8a9 	bl	80140b0 <_sbrk_r>
 8013f5e:	1c43      	adds	r3, r0, #1
 8013f60:	d103      	bne.n	8013f6a <sbrk_aligned+0x26>
 8013f62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013f66:	4620      	mov	r0, r4
 8013f68:	bd70      	pop	{r4, r5, r6, pc}
 8013f6a:	1cc4      	adds	r4, r0, #3
 8013f6c:	f024 0403 	bic.w	r4, r4, #3
 8013f70:	42a0      	cmp	r0, r4
 8013f72:	d0f8      	beq.n	8013f66 <sbrk_aligned+0x22>
 8013f74:	1a21      	subs	r1, r4, r0
 8013f76:	4628      	mov	r0, r5
 8013f78:	f000 f89a 	bl	80140b0 <_sbrk_r>
 8013f7c:	3001      	adds	r0, #1
 8013f7e:	d1f2      	bne.n	8013f66 <sbrk_aligned+0x22>
 8013f80:	e7ef      	b.n	8013f62 <sbrk_aligned+0x1e>
 8013f82:	bf00      	nop
 8013f84:	2000964c 	.word	0x2000964c

08013f88 <_malloc_r>:
 8013f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	1ccd      	adds	r5, r1, #3
 8013f8e:	f025 0503 	bic.w	r5, r5, #3
 8013f92:	3508      	adds	r5, #8
 8013f94:	2d0c      	cmp	r5, #12
 8013f96:	bf38      	it	cc
 8013f98:	250c      	movcc	r5, #12
 8013f9a:	2d00      	cmp	r5, #0
 8013f9c:	4606      	mov	r6, r0
 8013f9e:	db01      	blt.n	8013fa4 <_malloc_r+0x1c>
 8013fa0:	42a9      	cmp	r1, r5
 8013fa2:	d904      	bls.n	8013fae <_malloc_r+0x26>
 8013fa4:	230c      	movs	r3, #12
 8013fa6:	6033      	str	r3, [r6, #0]
 8013fa8:	2000      	movs	r0, #0
 8013faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014084 <_malloc_r+0xfc>
 8013fb2:	f000 f869 	bl	8014088 <__malloc_lock>
 8013fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8013fba:	461c      	mov	r4, r3
 8013fbc:	bb44      	cbnz	r4, 8014010 <_malloc_r+0x88>
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	f7ff ffbf 	bl	8013f44 <sbrk_aligned>
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	4604      	mov	r4, r0
 8013fca:	d158      	bne.n	801407e <_malloc_r+0xf6>
 8013fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8013fd0:	4627      	mov	r7, r4
 8013fd2:	2f00      	cmp	r7, #0
 8013fd4:	d143      	bne.n	801405e <_malloc_r+0xd6>
 8013fd6:	2c00      	cmp	r4, #0
 8013fd8:	d04b      	beq.n	8014072 <_malloc_r+0xea>
 8013fda:	6823      	ldr	r3, [r4, #0]
 8013fdc:	4639      	mov	r1, r7
 8013fde:	4630      	mov	r0, r6
 8013fe0:	eb04 0903 	add.w	r9, r4, r3
 8013fe4:	f000 f864 	bl	80140b0 <_sbrk_r>
 8013fe8:	4581      	cmp	r9, r0
 8013fea:	d142      	bne.n	8014072 <_malloc_r+0xea>
 8013fec:	6821      	ldr	r1, [r4, #0]
 8013fee:	1a6d      	subs	r5, r5, r1
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f7ff ffa6 	bl	8013f44 <sbrk_aligned>
 8013ff8:	3001      	adds	r0, #1
 8013ffa:	d03a      	beq.n	8014072 <_malloc_r+0xea>
 8013ffc:	6823      	ldr	r3, [r4, #0]
 8013ffe:	442b      	add	r3, r5
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	f8d8 3000 	ldr.w	r3, [r8]
 8014006:	685a      	ldr	r2, [r3, #4]
 8014008:	bb62      	cbnz	r2, 8014064 <_malloc_r+0xdc>
 801400a:	f8c8 7000 	str.w	r7, [r8]
 801400e:	e00f      	b.n	8014030 <_malloc_r+0xa8>
 8014010:	6822      	ldr	r2, [r4, #0]
 8014012:	1b52      	subs	r2, r2, r5
 8014014:	d420      	bmi.n	8014058 <_malloc_r+0xd0>
 8014016:	2a0b      	cmp	r2, #11
 8014018:	d917      	bls.n	801404a <_malloc_r+0xc2>
 801401a:	1961      	adds	r1, r4, r5
 801401c:	42a3      	cmp	r3, r4
 801401e:	6025      	str	r5, [r4, #0]
 8014020:	bf18      	it	ne
 8014022:	6059      	strne	r1, [r3, #4]
 8014024:	6863      	ldr	r3, [r4, #4]
 8014026:	bf08      	it	eq
 8014028:	f8c8 1000 	streq.w	r1, [r8]
 801402c:	5162      	str	r2, [r4, r5]
 801402e:	604b      	str	r3, [r1, #4]
 8014030:	4630      	mov	r0, r6
 8014032:	f000 f82f 	bl	8014094 <__malloc_unlock>
 8014036:	f104 000b 	add.w	r0, r4, #11
 801403a:	1d23      	adds	r3, r4, #4
 801403c:	f020 0007 	bic.w	r0, r0, #7
 8014040:	1ac2      	subs	r2, r0, r3
 8014042:	bf1c      	itt	ne
 8014044:	1a1b      	subne	r3, r3, r0
 8014046:	50a3      	strne	r3, [r4, r2]
 8014048:	e7af      	b.n	8013faa <_malloc_r+0x22>
 801404a:	6862      	ldr	r2, [r4, #4]
 801404c:	42a3      	cmp	r3, r4
 801404e:	bf0c      	ite	eq
 8014050:	f8c8 2000 	streq.w	r2, [r8]
 8014054:	605a      	strne	r2, [r3, #4]
 8014056:	e7eb      	b.n	8014030 <_malloc_r+0xa8>
 8014058:	4623      	mov	r3, r4
 801405a:	6864      	ldr	r4, [r4, #4]
 801405c:	e7ae      	b.n	8013fbc <_malloc_r+0x34>
 801405e:	463c      	mov	r4, r7
 8014060:	687f      	ldr	r7, [r7, #4]
 8014062:	e7b6      	b.n	8013fd2 <_malloc_r+0x4a>
 8014064:	461a      	mov	r2, r3
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	42a3      	cmp	r3, r4
 801406a:	d1fb      	bne.n	8014064 <_malloc_r+0xdc>
 801406c:	2300      	movs	r3, #0
 801406e:	6053      	str	r3, [r2, #4]
 8014070:	e7de      	b.n	8014030 <_malloc_r+0xa8>
 8014072:	230c      	movs	r3, #12
 8014074:	6033      	str	r3, [r6, #0]
 8014076:	4630      	mov	r0, r6
 8014078:	f000 f80c 	bl	8014094 <__malloc_unlock>
 801407c:	e794      	b.n	8013fa8 <_malloc_r+0x20>
 801407e:	6005      	str	r5, [r0, #0]
 8014080:	e7d6      	b.n	8014030 <_malloc_r+0xa8>
 8014082:	bf00      	nop
 8014084:	20009650 	.word	0x20009650

08014088 <__malloc_lock>:
 8014088:	4801      	ldr	r0, [pc, #4]	@ (8014090 <__malloc_lock+0x8>)
 801408a:	f000 b84b 	b.w	8014124 <__retarget_lock_acquire_recursive>
 801408e:	bf00      	nop
 8014090:	20009790 	.word	0x20009790

08014094 <__malloc_unlock>:
 8014094:	4801      	ldr	r0, [pc, #4]	@ (801409c <__malloc_unlock+0x8>)
 8014096:	f000 b846 	b.w	8014126 <__retarget_lock_release_recursive>
 801409a:	bf00      	nop
 801409c:	20009790 	.word	0x20009790

080140a0 <memset>:
 80140a0:	4402      	add	r2, r0
 80140a2:	4603      	mov	r3, r0
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d100      	bne.n	80140aa <memset+0xa>
 80140a8:	4770      	bx	lr
 80140aa:	f803 1b01 	strb.w	r1, [r3], #1
 80140ae:	e7f9      	b.n	80140a4 <memset+0x4>

080140b0 <_sbrk_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	4d06      	ldr	r5, [pc, #24]	@ (80140cc <_sbrk_r+0x1c>)
 80140b4:	2300      	movs	r3, #0
 80140b6:	4604      	mov	r4, r0
 80140b8:	4608      	mov	r0, r1
 80140ba:	602b      	str	r3, [r5, #0]
 80140bc:	f7ee f87e 	bl	80021bc <_sbrk>
 80140c0:	1c43      	adds	r3, r0, #1
 80140c2:	d102      	bne.n	80140ca <_sbrk_r+0x1a>
 80140c4:	682b      	ldr	r3, [r5, #0]
 80140c6:	b103      	cbz	r3, 80140ca <_sbrk_r+0x1a>
 80140c8:	6023      	str	r3, [r4, #0]
 80140ca:	bd38      	pop	{r3, r4, r5, pc}
 80140cc:	2000978c 	.word	0x2000978c

080140d0 <__errno>:
 80140d0:	4b01      	ldr	r3, [pc, #4]	@ (80140d8 <__errno+0x8>)
 80140d2:	6818      	ldr	r0, [r3, #0]
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	20000030 	.word	0x20000030

080140dc <__libc_init_array>:
 80140dc:	b570      	push	{r4, r5, r6, lr}
 80140de:	4d0d      	ldr	r5, [pc, #52]	@ (8014114 <__libc_init_array+0x38>)
 80140e0:	4c0d      	ldr	r4, [pc, #52]	@ (8014118 <__libc_init_array+0x3c>)
 80140e2:	1b64      	subs	r4, r4, r5
 80140e4:	10a4      	asrs	r4, r4, #2
 80140e6:	2600      	movs	r6, #0
 80140e8:	42a6      	cmp	r6, r4
 80140ea:	d109      	bne.n	8014100 <__libc_init_array+0x24>
 80140ec:	4d0b      	ldr	r5, [pc, #44]	@ (801411c <__libc_init_array+0x40>)
 80140ee:	4c0c      	ldr	r4, [pc, #48]	@ (8014120 <__libc_init_array+0x44>)
 80140f0:	f000 f872 	bl	80141d8 <_init>
 80140f4:	1b64      	subs	r4, r4, r5
 80140f6:	10a4      	asrs	r4, r4, #2
 80140f8:	2600      	movs	r6, #0
 80140fa:	42a6      	cmp	r6, r4
 80140fc:	d105      	bne.n	801410a <__libc_init_array+0x2e>
 80140fe:	bd70      	pop	{r4, r5, r6, pc}
 8014100:	f855 3b04 	ldr.w	r3, [r5], #4
 8014104:	4798      	blx	r3
 8014106:	3601      	adds	r6, #1
 8014108:	e7ee      	b.n	80140e8 <__libc_init_array+0xc>
 801410a:	f855 3b04 	ldr.w	r3, [r5], #4
 801410e:	4798      	blx	r3
 8014110:	3601      	adds	r6, #1
 8014112:	e7f2      	b.n	80140fa <__libc_init_array+0x1e>
 8014114:	080142ac 	.word	0x080142ac
 8014118:	080142ac 	.word	0x080142ac
 801411c:	080142ac 	.word	0x080142ac
 8014120:	080142b0 	.word	0x080142b0

08014124 <__retarget_lock_acquire_recursive>:
 8014124:	4770      	bx	lr

08014126 <__retarget_lock_release_recursive>:
 8014126:	4770      	bx	lr

08014128 <memcpy>:
 8014128:	440a      	add	r2, r1
 801412a:	4291      	cmp	r1, r2
 801412c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014130:	d100      	bne.n	8014134 <memcpy+0xc>
 8014132:	4770      	bx	lr
 8014134:	b510      	push	{r4, lr}
 8014136:	f811 4b01 	ldrb.w	r4, [r1], #1
 801413a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801413e:	4291      	cmp	r1, r2
 8014140:	d1f9      	bne.n	8014136 <memcpy+0xe>
 8014142:	bd10      	pop	{r4, pc}

08014144 <_free_r>:
 8014144:	b538      	push	{r3, r4, r5, lr}
 8014146:	4605      	mov	r5, r0
 8014148:	2900      	cmp	r1, #0
 801414a:	d041      	beq.n	80141d0 <_free_r+0x8c>
 801414c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014150:	1f0c      	subs	r4, r1, #4
 8014152:	2b00      	cmp	r3, #0
 8014154:	bfb8      	it	lt
 8014156:	18e4      	addlt	r4, r4, r3
 8014158:	f7ff ff96 	bl	8014088 <__malloc_lock>
 801415c:	4a1d      	ldr	r2, [pc, #116]	@ (80141d4 <_free_r+0x90>)
 801415e:	6813      	ldr	r3, [r2, #0]
 8014160:	b933      	cbnz	r3, 8014170 <_free_r+0x2c>
 8014162:	6063      	str	r3, [r4, #4]
 8014164:	6014      	str	r4, [r2, #0]
 8014166:	4628      	mov	r0, r5
 8014168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801416c:	f7ff bf92 	b.w	8014094 <__malloc_unlock>
 8014170:	42a3      	cmp	r3, r4
 8014172:	d908      	bls.n	8014186 <_free_r+0x42>
 8014174:	6820      	ldr	r0, [r4, #0]
 8014176:	1821      	adds	r1, r4, r0
 8014178:	428b      	cmp	r3, r1
 801417a:	bf01      	itttt	eq
 801417c:	6819      	ldreq	r1, [r3, #0]
 801417e:	685b      	ldreq	r3, [r3, #4]
 8014180:	1809      	addeq	r1, r1, r0
 8014182:	6021      	streq	r1, [r4, #0]
 8014184:	e7ed      	b.n	8014162 <_free_r+0x1e>
 8014186:	461a      	mov	r2, r3
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	b10b      	cbz	r3, 8014190 <_free_r+0x4c>
 801418c:	42a3      	cmp	r3, r4
 801418e:	d9fa      	bls.n	8014186 <_free_r+0x42>
 8014190:	6811      	ldr	r1, [r2, #0]
 8014192:	1850      	adds	r0, r2, r1
 8014194:	42a0      	cmp	r0, r4
 8014196:	d10b      	bne.n	80141b0 <_free_r+0x6c>
 8014198:	6820      	ldr	r0, [r4, #0]
 801419a:	4401      	add	r1, r0
 801419c:	1850      	adds	r0, r2, r1
 801419e:	4283      	cmp	r3, r0
 80141a0:	6011      	str	r1, [r2, #0]
 80141a2:	d1e0      	bne.n	8014166 <_free_r+0x22>
 80141a4:	6818      	ldr	r0, [r3, #0]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	6053      	str	r3, [r2, #4]
 80141aa:	4408      	add	r0, r1
 80141ac:	6010      	str	r0, [r2, #0]
 80141ae:	e7da      	b.n	8014166 <_free_r+0x22>
 80141b0:	d902      	bls.n	80141b8 <_free_r+0x74>
 80141b2:	230c      	movs	r3, #12
 80141b4:	602b      	str	r3, [r5, #0]
 80141b6:	e7d6      	b.n	8014166 <_free_r+0x22>
 80141b8:	6820      	ldr	r0, [r4, #0]
 80141ba:	1821      	adds	r1, r4, r0
 80141bc:	428b      	cmp	r3, r1
 80141be:	bf04      	itt	eq
 80141c0:	6819      	ldreq	r1, [r3, #0]
 80141c2:	685b      	ldreq	r3, [r3, #4]
 80141c4:	6063      	str	r3, [r4, #4]
 80141c6:	bf04      	itt	eq
 80141c8:	1809      	addeq	r1, r1, r0
 80141ca:	6021      	streq	r1, [r4, #0]
 80141cc:	6054      	str	r4, [r2, #4]
 80141ce:	e7ca      	b.n	8014166 <_free_r+0x22>
 80141d0:	bd38      	pop	{r3, r4, r5, pc}
 80141d2:	bf00      	nop
 80141d4:	20009650 	.word	0x20009650

080141d8 <_init>:
 80141d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141da:	bf00      	nop
 80141dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141de:	bc08      	pop	{r3}
 80141e0:	469e      	mov	lr, r3
 80141e2:	4770      	bx	lr

080141e4 <_fini>:
 80141e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141e6:	bf00      	nop
 80141e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ea:	bc08      	pop	{r3}
 80141ec:	469e      	mov	lr, r3
 80141ee:	4770      	bx	lr
