
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08015120  08015120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801524c  0801524c  000171cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801524c  0801524c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015254  08015254  000171cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015254  08015254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015258  08015258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801525c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080152e8  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08015388  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000095dc  200001cc  08015428  000171cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200097a8  08015428  000177a8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000171cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040ea5  00000000  00000000  000171fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a312  00000000  00000000  000580a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003448  00000000  00000000  000623b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002809  00000000  00000000  00065800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ad59  00000000  00000000  00068009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f33c  00000000  00000000  000a2d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012a905  00000000  00000000  000f209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021c9a3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000df28  00000000  00000000  0021c9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  0022a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015108 	.word	0x08015108

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08015108 	.word	0x08015108

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC3_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC3_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC3_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC3_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC3_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC3_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC3_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000562:	f002 fd59 	bl	8003018 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800056c:	f001 fa3e 	bl	80019ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000570:	2304      	movs	r3, #4
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC3_Init+0x98>)
 8000582:	f002 fd8d 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800058c:	f001 fa2e 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001e8 	.word	0x200001e8
 800059c:	40012200 	.word	0x40012200
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x74>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d124      	bne.n	8000610 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_ADC_MspInit+0x78>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80005f6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80005fa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <HAL_ADC_MspInit+0x7c>)
 800060c:	f004 f84c 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40012200 	.word	0x40012200
 800061c:	40023800 	.word	0x40023800
 8000620:	40021400 	.word	0x40021400

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f003 f859 	bl	8003704 <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f001 f9c8 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000230 	.word	0x20000230
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_DCMI_Init+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_DCMI_Init+0x60>)
 80006f6:	f003 f8f7 	bl	80038e8 <HAL_DCMI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000700:	f001 f974 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000254 	.word	0x20000254
 800070c:	50050000 	.word	0x50050000

08000710 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	@ 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a50      	ldr	r2, [pc, #320]	@ (8000870 <HAL_DCMI_MspInit+0x160>)
 800072e:	4293      	cmp	r3, r2
 8000730:	f040 809a 	bne.w	8000868 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000734:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000738:	4a4e      	ldr	r2, [pc, #312]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000740:	4b4c      	ldr	r3, [pc, #304]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a48      	ldr	r2, [pc, #288]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
 8000758:	4b46      	ldr	r3, [pc, #280]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000770:	4b40      	ldr	r3, [pc, #256]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
 8000788:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 800079a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a0:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <HAL_DCMI_MspInit+0x164>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d4:	230d      	movs	r3, #13
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	@ (8000878 <HAL_DCMI_MspInit+0x168>)
 80007e0:	f003 ff62 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80007e4:	2308      	movs	r3, #8
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f4:	230d      	movs	r3, #13
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	@ (800087c <HAL_DCMI_MspInit+0x16c>)
 8000800:	f003 ff52 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000816:	230d      	movs	r3, #13
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <HAL_DCMI_MspInit+0x170>)
 8000822:	f003 ff41 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000826:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <HAL_DCMI_MspInit+0x174>)
 8000844:	f003 ff30 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000848:	2350      	movs	r3, #80	@ 0x50
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000858:	230d      	movs	r3, #13
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_DCMI_MspInit+0x178>)
 8000864:	f003 ff20 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3738      	adds	r7, #56	@ 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	50050000 	.word	0x50050000
 8000874:	40023800 	.word	0x40023800
 8000878:	40021000 	.word	0x40021000
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021800 	.word	0x40021800
 8000884:	40021c00 	.word	0x40021c00
 8000888:	40020000 	.word	0x40020000

0800088c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <MX_DMA2D_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008c2:	f003 f9b7 	bl	8003c34 <HAL_DMA2D_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008cc:	f001 f88e 	bl	80019ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d0:	2101      	movs	r1, #1
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_DMA2D_Init+0x5c>)
 80008d4:	f003 fb08 	bl	8003ee8 <HAL_DMA2D_ConfigLayer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008de:	f001 f885 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200002a4 	.word	0x200002a4
 80008ec:	4002b000 	.word	0x4002b000

080008f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_DMA2D_MspInit+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_DMA2D_MspInit+0x48>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	205a      	movs	r0, #90	@ 0x5a
 8000920:	f002 fec6 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000924:	205a      	movs	r0, #90	@ 0x5a
 8000926:	f002 fedf 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	4002b000 	.word	0x4002b000
 8000938:	40023800 	.word	0x40023800

0800093c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <MX_ETH_Init+0x88>)
 8000944:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000954:	22e1      	movs	r2, #225	@ 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_ETH_Init+0x84>)
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_ETH_Init+0x8c>)
 800096e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000976:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_ETH_Init+0x84>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_ETH_Init+0x90>)
 800097c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <MX_ETH_Init+0x94>)
 8000982:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_ETH_Init+0x84>)
 8000986:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800098a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x84>)
 800098e:	f003 fb3d 	bl	800400c <HAL_ETH_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000998:	f001 f828 	bl	80019ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a2:	f014 f99d 	bl	8014ce0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009a8:	2221      	movs	r2, #33	@ 0x21
 80009aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_ETH_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000031c 	.word	0x2000031c
 80009c4:	40028000 	.word	0x40028000
 80009c8:	200003cc 	.word	0x200003cc
 80009cc:	2000012c 	.word	0x2000012c
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	200002e4 	.word	0x200002e4

080009d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <HAL_ETH_MspInit+0x11c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d178      	bne.n	8000aec <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009fa:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3e      	ldr	r2, [pc, #248]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <HAL_ETH_MspInit+0x120>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a8a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <HAL_ETH_MspInit+0x124>)
 8000aa8:	f003 fdfe 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aac:	2332      	movs	r3, #50	@ 0x32
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <HAL_ETH_MspInit+0x128>)
 8000ac8:	f003 fdee 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000acc:	2386      	movs	r3, #134	@ 0x86
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_ETH_MspInit+0x12c>)
 8000ae8:	f003 fdde 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40028000 	.word	0x40028000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <MX_FMC_Init+0x9c>)
 8000b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_FMC_Init+0x98>)
 8000b8a:	f009 fe76 	bl	800a87a <HAL_SDRAM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b94:	f000 ff2a 	bl	80019ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003d4 	.word	0x200003d4
 8000ba4:	a0000140 	.word	0xa0000140

08000ba8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d16d      	bne.n	8000ca0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <HAL_FMC_MspInit+0x100>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bce:	4a37      	ldr	r2, [pc, #220]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <HAL_FMC_MspInit+0x104>)
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000be2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000be6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482c      	ldr	r0, [pc, #176]	@ (8000cb0 <HAL_FMC_MspInit+0x108>)
 8000bfe:	f003 fd53 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <HAL_FMC_MspInit+0x10c>)
 8000c1e:	f003 fd43 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <HAL_FMC_MspInit+0x110>)
 8000c3e:	f003 fd33 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_FMC_MspInit+0x114>)
 8000c5e:	f003 fd23 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	@ 0x28
 8000c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_FMC_MspInit+0x118>)
 8000c7c:	f003 fd14 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c80:	2308      	movs	r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c90:	230c      	movs	r3, #12
 8000c92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <HAL_FMC_MspInit+0x11c>)
 8000c9a:	f003 fd05 	bl	80046a8 <HAL_GPIO_Init>
 8000c9e:	e000      	b.n	8000ca2 <HAL_FMC_MspInit+0xfa>
    return;
 8000ca0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000408 	.word	0x20000408
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021400 	.word	0x40021400
 8000cc0:	40021c00 	.word	0x40021c00
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cd0:	f7ff ff6a 	bl	8000ba8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <vApplicationGetIdleTaskMemory+0x30>)
 8000d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000410 	.word	0x20000410
 8000d40:	20000468 	.word	0x20000468

08000d44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_FREERTOS_Init+0x30>)
 8000d4c:	1d3c      	adds	r4, r7, #4
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f010 fcaf 	bl	80116c4 <osThreadCreate>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <MX_FREERTOS_Init+0x34>)
 8000d6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	0801512c 	.word	0x0801512c
 8000d78:	2000040c 	.word	0x2000040c

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d84:	f013 f9fe 	bl	8014184 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f010 fce7 	bl	801175c <osDelay>
 8000d8e:	e7fb      	b.n	8000d88 <StartDefaultTask+0xc>

08000d90 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	@ 0x40
 8000d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4aaf      	ldr	r2, [pc, #700]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4bad      	ldr	r3, [pc, #692]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	4baa      	ldr	r3, [pc, #680]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4aa9      	ldr	r2, [pc, #676]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4ba7      	ldr	r3, [pc, #668]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4aa3      	ldr	r2, [pc, #652]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4ba1      	ldr	r3, [pc, #644]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b9e      	ldr	r3, [pc, #632]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a9d      	ldr	r2, [pc, #628]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b98      	ldr	r3, [pc, #608]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a97      	ldr	r2, [pc, #604]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b95      	ldr	r3, [pc, #596]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b92      	ldr	r3, [pc, #584]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e36:	4b8c      	ldr	r3, [pc, #560]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4e:	4b86      	ldr	r3, [pc, #536]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a85      	ldr	r2, [pc, #532]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b83      	ldr	r3, [pc, #524]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e66:	4b80      	ldr	r3, [pc, #512]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b7d      	ldr	r3, [pc, #500]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a79      	ldr	r2, [pc, #484]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b77      	ldr	r3, [pc, #476]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a73      	ldr	r2, [pc, #460]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b71      	ldr	r3, [pc, #452]	@ (8001068 <MX_GPIO_Init+0x2d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	486e      	ldr	r0, [pc, #440]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000eb4:	f003 fdbc 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	210e      	movs	r1, #14
 8000ebc:	486c      	ldr	r0, [pc, #432]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ebe:	f003 fdb7 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	486b      	ldr	r0, [pc, #428]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000ec8:	f003 fdb2 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed2:	4867      	ldr	r0, [pc, #412]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000ed4:	f003 fdac 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ede:	4866      	ldr	r0, [pc, #408]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ee0:	f003 fda6 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21c8      	movs	r1, #200	@ 0xc8
 8000ee8:	4864      	ldr	r0, [pc, #400]	@ (800107c <MX_GPIO_Init+0x2ec>)
 8000eea:	f003 fda1 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	485f      	ldr	r0, [pc, #380]	@ (8001080 <MX_GPIO_Init+0x2f0>)
 8000f02:	f003 fbd1 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f06:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4858      	ldr	r0, [pc, #352]	@ (8001084 <MX_GPIO_Init+0x2f4>)
 8000f24:	f003 fbc0 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4852      	ldr	r0, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x2f8>)
 8000f3e:	f003 fbb3 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f58:	f003 fba6 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	483e      	ldr	r0, [pc, #248]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000f74:	f003 fb98 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000f78:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8000f92:	f003 fb89 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4838      	ldr	r0, [pc, #224]	@ (800108c <MX_GPIO_Init+0x2fc>)
 8000fac:	f003 fb7c 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482b      	ldr	r0, [pc, #172]	@ (8001074 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f003 fb6e 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4823      	ldr	r0, [pc, #140]	@ (800106c <MX_GPIO_Init+0x2dc>)
 8000fe0:	f003 fb62 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fe4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8000ffa:	f003 fb55 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	@ (8001078 <MX_GPIO_Init+0x2e8>)
 8001018:	f003 fb46 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 8001032:	f003 fb39 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800103c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <MX_GPIO_Init+0x2e0>)
 800104e:	f003 fb2b 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x300>
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40022000 	.word	0x40022000
 8001074:	40022800 	.word	0x40022800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40021800 	.word	0x40021800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020400 	.word	0x40020400
 8001088:	40022400 	.word	0x40022400
 800108c:	40020800 	.word	0x40020800
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <MX_GPIO_Init+0x3ac>)
 800109a:	f003 fb05 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800109e:	23c8      	movs	r3, #200	@ 0xc8
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4822      	ldr	r0, [pc, #136]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010b6:	f003 faf7 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010ba:	2305      	movs	r3, #5
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ca:	230a      	movs	r3, #10
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <MX_GPIO_Init+0x3b4>)
 80010d6:	f003 fae7 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x3b0>)
 80010ee:	f003 fadb 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010f2:	2328      	movs	r3, #40	@ 0x28
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001102:	230a      	movs	r3, #10
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_GPIO_Init+0x3b8>)
 800110e:	f003 facb 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001112:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001124:	2305      	movs	r3, #5
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_GPIO_Init+0x3bc>)
 8001130:	f003 faba 	bl	80046a8 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	@ 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40021800 	.word	0x40021800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C1_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f005 fd9e 	bl	8006ccc <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fc29 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f005 fe31 	bl	8006e04 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fc20 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f005 fe73 	bl	8006e9a <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fc17 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000668 	.word	0x20000668
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_I2C3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <MX_I2C3_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_I2C3_Init+0x74>)
 800120c:	f005 fd5e 	bl	8006ccc <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fbe9 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <MX_I2C3_Init+0x74>)
 800121e:	f005 fdf1 	bl	8006e04 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 fbe0 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_I2C3_Init+0x74>)
 8001230:	f005 fe33 	bl	8006e9a <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fbd7 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200006bc 	.word	0x200006bc
 8001248:	40005c00 	.word	0x40005c00
 800124c:	00c0eaff 	.word	0x00c0eaff

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	@ 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f013 fd35 	bl	8014ce0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a44      	ldr	r2, [pc, #272]	@ (800138c <HAL_I2C_MspInit+0x13c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13d      	bne.n	80012fc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f006 ff98 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129a:	f000 fba7 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80012b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012da:	4619      	mov	r1, r3
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <HAL_I2C_MspInit+0x144>)
 80012de:	f003 f9e3 	bl	80046a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012fa:	e042      	b.n	8001382 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_I2C_MspInit+0x148>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d13d      	bne.n	8001382 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f006 ff54 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001322:	f000 fb63 	bl	80019ec <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a19      	ldr	r2, [pc, #100]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800133e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <HAL_I2C_MspInit+0x14c>)
 8001366:	f003 f99f 	bl	80046a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_I2C_MspInit+0x140>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	@ 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40005c00 	.word	0x40005c00
 800139c:	40021c00 	.word	0x40021c00

080013a0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2234      	movs	r2, #52	@ 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f013 fc97 	bl	8014ce0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013b4:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <MX_LTDC_Init+0x100>)
 80013b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013b8:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d2:	2228      	movs	r2, #40	@ 0x28
 80013d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013d8:	2209      	movs	r2, #9
 80013da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013de:	2235      	movs	r2, #53	@ 0x35
 80013e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013ea:	f240 2215 	movw	r2, #533	@ 0x215
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013f2:	f240 121b 	movw	r2, #283	@ 0x11b
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_LTDC_Init+0xfc>)
 80013fa:	f240 2235 	movw	r2, #565	@ 0x235
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001402:	f240 121d 	movw	r2, #285	@ 0x11d
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_LTDC_Init+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_LTDC_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001420:	481e      	ldr	r0, [pc, #120]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001422:	f005 fd87 	bl	8006f34 <HAL_LTDC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fade 	bl	80019ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001434:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001438:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800143e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001442:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001448:	23ff      	movs	r3, #255	@ 0xff
 800144a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001450:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001454:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800145a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001460:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001466:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_LTDC_Init+0xfc>)
 8001486:	f005 fee7 	bl	8007258 <HAL_LTDC_ConfigLayer>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001490:	f000 faac 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000710 	.word	0x20000710
 80014a0:	40016800 	.word	0x40016800

080014a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <HAL_LTDC_MspInit+0x174>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 80a3 	bne.w	800160e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c8:	4b54      	ldr	r3, [pc, #336]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	4a53      	ldr	r2, [pc, #332]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001510:	4b42      	ldr	r3, [pc, #264]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a41      	ldr	r2, [pc, #260]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	6313      	str	r3, [r2, #48]	@ 0x30
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a35      	ldr	r2, [pc, #212]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b33      	ldr	r3, [pc, #204]	@ (800161c <HAL_LTDC_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001558:	2310      	movs	r3, #16
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001568:	230e      	movs	r3, #14
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <HAL_LTDC_MspInit+0x17c>)
 8001574:	f003 f898 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001578:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800158a:	230e      	movs	r3, #14
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <HAL_LTDC_MspInit+0x180>)
 8001596:	f003 f887 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800159a:	23f7      	movs	r3, #247	@ 0xf7
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015aa:	230e      	movs	r3, #14
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	@ (8001628 <HAL_LTDC_MspInit+0x184>)
 80015b6:	f003 f877 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015cc:	2309      	movs	r3, #9
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <HAL_LTDC_MspInit+0x188>)
 80015d8:	f003 f866 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015dc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ee:	230e      	movs	r3, #14
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <HAL_LTDC_MspInit+0x18c>)
 80015fa:	f003 f855 	bl	80046a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2058      	movs	r0, #88	@ 0x58
 8001604:	f002 f854 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001608:	2058      	movs	r0, #88	@ 0x58
 800160a:	f002 f86d 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	@ 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40016800 	.word	0x40016800
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40022400 	.word	0x40022400
 8001628:	40022800 	.word	0x40022800
 800162c:	40021800 	.word	0x40021800
 8001630:	40022000 	.word	0x40022000

08001634 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001638:	f3bf 8f4f 	dsb	sy
}
 800163c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <__NVIC_SystemReset+0x24>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001646:	4904      	ldr	r1, [pc, #16]	@ (8001658 <__NVIC_SystemReset+0x24>)
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_SystemReset+0x28>)
 800164a:	4313      	orrs	r3, r2
 800164c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800164e:	f3bf 8f4f 	dsb	sy
}
 8001652:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <__NVIC_SystemReset+0x20>
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0004 	.word	0x05fa0004

08001660 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001668:	1d39      	adds	r1, r7, #4
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	2201      	movs	r2, #1
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <__io_putchar+0x20>)
 8001672:	f00a fae3 	bl	800bc3c <HAL_UART_Transmit>
	return ch;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000c1c 	.word	0x20000c1c

08001684 <task_led_bouton>:


void task_led_bouton(void *unused)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 800168c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <task_led_bouton+0x3c>)
 8001692:	f003 f9b5 	bl	8004a00 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]

		if (buttonState == GPIO_PIN_SET) // Bouton appuyé (niveau haut)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <task_led_bouton+0x28>
		{
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET); // LED ON
 80016a0:	2201      	movs	r2, #1
 80016a2:	2102      	movs	r1, #2
 80016a4:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <task_led_bouton+0x3c>)
 80016a6:	f003 f9c3 	bl	8004a30 <HAL_GPIO_WritePin>
 80016aa:	e004      	b.n	80016b6 <task_led_bouton+0x32>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET); // LED OFF
 80016ac:	2200      	movs	r2, #0
 80016ae:	2102      	movs	r1, #2
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <task_led_bouton+0x3c>)
 80016b2:	f003 f9bd 	bl	8004a30 <HAL_GPIO_WritePin>
		}
		vTaskDelay(50);
 80016b6:	2032      	movs	r0, #50	@ 0x32
 80016b8:	f011 fa52 	bl	8012b60 <vTaskDelay>
	{
 80016bc:	e7e6      	b.n	800168c <task_led_bouton+0x8>
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <task_led>:
	}
}


void task_led(void *unused)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80016cc:	2102      	movs	r1, #2
 80016ce:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <task_led+0x1c>)
 80016d0:	f003 f9c7 	bl	8004a62 <HAL_GPIO_TogglePin>
		//printf("La LED change d'etat\r\n");
		vTaskDelay(100);
 80016d4:	2064      	movs	r0, #100	@ 0x64
 80016d6:	f011 fa43 	bl	8012b60 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80016da:	bf00      	nop
 80016dc:	e7f6      	b.n	80016cc <task_led+0x8>
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000

080016e4 <task_give>:
	}
}


void task_give(void *unused)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	uart1_rx_semaphore = xSemaphoreCreateBinary();
 80016ec:	2203      	movs	r2, #3
 80016ee:	2100      	movs	r1, #0
 80016f0:	2001      	movs	r0, #1
 80016f2:	f010 faca 	bl	8011c8a <xQueueGenericCreate>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <task_give+0x3c>)
 80016fa:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		printf("AVANT GIVE\r\n");
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <task_give+0x40>)
 80016fe:	f013 fa0f 	bl	8014b20 <puts>
		xSemaphoreGive(uart1_rx_semaphore);
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <task_give+0x3c>)
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	f010 fb20 	bl	8011d50 <xQueueGenericSend>
		vTaskDelay(200);
 8001710:	20c8      	movs	r0, #200	@ 0xc8
 8001712:	f011 fa25 	bl	8012b60 <vTaskDelay>
		printf("APRES GIVE\r\n");
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <task_give+0x44>)
 8001718:	f013 fa02 	bl	8014b20 <puts>
		printf("AVANT GIVE\r\n");
 800171c:	bf00      	nop
 800171e:	e7ed      	b.n	80016fc <task_give+0x18>
 8001720:	200007b8 	.word	0x200007b8
 8001724:	08015148 	.word	0x08015148
 8001728:	08015154 	.word	0x08015154

0800172c <task_take>:
	}
}


void task_take(void *unused)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uart1_rx_semaphore = xSemaphoreCreateBinary();
 8001734:	2203      	movs	r2, #3
 8001736:	2100      	movs	r1, #0
 8001738:	2001      	movs	r0, #1
 800173a:	f010 faa6 	bl	8011c8a <xQueueGenericCreate>
 800173e:	4603      	mov	r3, r0
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <task_take+0x40>)
 8001742:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		printf("AVANT TAKE\r\n");
 8001744:	480a      	ldr	r0, [pc, #40]	@ (8001770 <task_take+0x44>)
 8001746:	f013 f9eb 	bl	8014b20 <puts>
		if (xSemaphoreTake(uart1_rx_semaphore, 1000) == pdFALSE) // Si le sémaphore n'est pas acquis au bout d'une seconde
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <task_take+0x40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001752:	4618      	mov	r0, r3
 8001754:	f010 fd92 	bl	801227c <xQueueSemaphoreTake>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <task_take+0x36>
		{
			NVIC_SystemReset(); // RESET
 800175e:	f7ff ff69 	bl	8001634 <__NVIC_SystemReset>
		}
		printf("APRES TAKE\r\n");
 8001762:	4804      	ldr	r0, [pc, #16]	@ (8001774 <task_take+0x48>)
 8001764:	f013 f9dc 	bl	8014b20 <puts>
		printf("AVANT TAKE\r\n");
 8001768:	e7ec      	b.n	8001744 <task_take+0x18>
 800176a:	bf00      	nop
 800176c:	200007b8 	.word	0x200007b8
 8001770:	08015160 	.word	0x08015160
 8001774:	0801516c 	.word	0x0801516c

08001778 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800177e:	f001 fbfa 	bl	8002f76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001782:	f000 f87d 	bl	8001880 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001786:	f000 f8ed 	bl	8001964 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800178a:	f7ff fb01 	bl	8000d90 <MX_GPIO_Init>
	MX_ADC3_Init();
 800178e:	f7fe feb7 	bl	8000500 <MX_ADC3_Init>
	MX_CRC_Init();
 8001792:	f7fe ff47 	bl	8000624 <MX_CRC_Init>
	MX_DCMI_Init();
 8001796:	f7fe ff87 	bl	80006a8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 800179a:	f7ff f877 	bl	800088c <MX_DMA2D_Init>
	MX_ETH_Init();
 800179e:	f7ff f8cd 	bl	800093c <MX_ETH_Init>
	MX_FMC_Init();
 80017a2:	f7ff f9b1 	bl	8000b08 <MX_FMC_Init>
	MX_I2C1_Init();
 80017a6:	f7ff fcd3 	bl	8001150 <MX_I2C1_Init>
	MX_I2C3_Init();
 80017aa:	f7ff fd11 	bl	80011d0 <MX_I2C3_Init>
	MX_LTDC_Init();
 80017ae:	f7ff fdf7 	bl	80013a0 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 80017b2:	f000 f921 	bl	80019f8 <MX_QUADSPI_Init>
	MX_RTC_Init();
 80017b6:	f000 f9db 	bl	8001b70 <MX_RTC_Init>
	MX_SAI2_Init();
 80017ba:	f000 faab 	bl	8001d14 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 80017be:	f000 fbbb 	bl	8001f38 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 80017c2:	f000 fc3d 	bl	8002040 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80017c6:	f000 fe75 	bl	80024b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80017ca:	f000 ff1f 	bl	800260c <MX_TIM2_Init>
	MX_TIM3_Init();
 80017ce:	f000 ff93 	bl	80026f8 <MX_TIM3_Init>
	MX_TIM5_Init();
 80017d2:	f001 f809 	bl	80027e8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80017d6:	f001 f87f 	bl	80028d8 <MX_TIM8_Init>
	MX_TIM12_Init();
 80017da:	f001 f8d1 	bl	8002980 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80017de:	f001 fa71 	bl	8002cc4 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80017e2:	f001 fa9f 	bl	8002d24 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80017e6:	f00d f997 	bl	800eb18 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	xTaskCreate(task_give, "Task GIVE", TASK_GIVE_STACK_DEPTH, NULL, TASK_GIVE_PRIORITY, NULL);
 80017ea:	2300      	movs	r3, #0
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	22fa      	movs	r2, #250	@ 0xfa
 80017f6:	4919      	ldr	r1, [pc, #100]	@ (800185c <main+0xe4>)
 80017f8:	4819      	ldr	r0, [pc, #100]	@ (8001860 <main+0xe8>)
 80017fa:	f011 f86d 	bl	80128d8 <xTaskCreate>
	xTaskCreate(task_take, "Task TAKE", TASK_TAKE_STACK_DEPTH, NULL, TASK_TAKE_PRIORITY, NULL);
 80017fe:	2300      	movs	r3, #0
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2301      	movs	r3, #1
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	22fa      	movs	r2, #250	@ 0xfa
 800180a:	4916      	ldr	r1, [pc, #88]	@ (8001864 <main+0xec>)
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <main+0xf0>)
 800180e:	f011 f863 	bl	80128d8 <xTaskCreate>

	BaseType_t returned_value;

	returned_value = xTaskCreate(task_led,
 8001812:	2300      	movs	r3, #0
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	2304      	movs	r3, #4
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	22fa      	movs	r2, #250	@ 0xfa
 800181e:	4913      	ldr	r1, [pc, #76]	@ (800186c <main+0xf4>)
 8001820:	4813      	ldr	r0, [pc, #76]	@ (8001870 <main+0xf8>)
 8001822:	f011 f859 	bl	80128d8 <xTaskCreate>
 8001826:	6078      	str	r0, [r7, #4]
			"Task LED",
			TASK_LED_STACK_DEPTH, /*taille de la pile*/
			NULL, /*Paramètre qu'on donne à la fonction task_led -> on a dit qu'on ne s'en servait pas*/
			TASK_LED_PRIORITY,
			NULL);
	if (returned_value != pdPASS) // pas assez de mémoire pour allouer la tâche
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d004      	beq.n	8001838 <main+0xc0>
	{
		printf("Could not allocate Task LED\r\n");
 800182e:	4811      	ldr	r0, [pc, #68]	@ (8001874 <main+0xfc>)
 8001830:	f013 f976 	bl	8014b20 <puts>
		Error_Handler();
 8001834:	f000 f8da 	bl	80019ec <Error_Handler>
	}

	xTaskCreate(task_led_bouton, "Task LED Bouton", TASK_LED_BOUTON_STACK_DEPTH, NULL, TASK_LED_BOUTON_PRIORITY, NULL);
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2303      	movs	r3, #3
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	22fa      	movs	r2, #250	@ 0xfa
 8001844:	490c      	ldr	r1, [pc, #48]	@ (8001878 <main+0x100>)
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <main+0x104>)
 8001848:	f011 f846 	bl	80128d8 <xTaskCreate>

	vTaskStartScheduler(); // Appelle l'OS (avec une fonction freertos)
 800184c:	f011 f9c0 	bl	8012bd0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001850:	f7ff fa78 	bl	8000d44 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001854:	f00f ff13 	bl	801167e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <main+0xe0>
 800185c:	08015178 	.word	0x08015178
 8001860:	080016e5 	.word	0x080016e5
 8001864:	08015184 	.word	0x08015184
 8001868:	0800172d 	.word	0x0800172d
 800186c:	08015190 	.word	0x08015190
 8001870:	080016c5 	.word	0x080016c5
 8001874:	0801519c 	.word	0x0801519c
 8001878:	080151bc 	.word	0x080151bc
 800187c:	08001685 	.word	0x08001685

08001880 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	@ 0x50
 8001884:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	@ 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f013 fa26 	bl	8014ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80018a4:	f005 feb0 	bl	8007608 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <SystemClock_Config+0xdc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a2b      	ldr	r2, [pc, #172]	@ (800195c <SystemClock_Config+0xdc>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <SystemClock_Config+0xdc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <SystemClock_Config+0xe0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a26      	ldr	r2, [pc, #152]	@ (8001960 <SystemClock_Config+0xe0>)
 80018c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <SystemClock_Config+0xe0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018d8:	2309      	movs	r3, #9
 80018da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018e2:	2301      	movs	r3, #1
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80018f0:	2319      	movs	r3, #25
 80018f2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 80018f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80018f8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80018fe:	2309      	movs	r3, #9
 8001900:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	4618      	mov	r0, r3
 8001908:	f005 ffa0 	bl	800784c <HAL_RCC_OscConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001912:	f000 f86b 	bl	80019ec <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001916:	f005 fe87 	bl	8007628 <HAL_PWREx_EnableOverDrive>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001920:	f000 f864 	bl	80019ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001930:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001934:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2106      	movs	r1, #6
 8001942:	4618      	mov	r0, r3
 8001944:	f006 fa26 	bl	8007d94 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800194e:	f000 f84d 	bl	80019ec <Error_Handler>
	}
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	@ 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0a2      	sub	sp, #136	@ 0x88
 8001968:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2284      	movs	r2, #132	@ 0x84
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f013 f9b5 	bl	8014ce0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <PeriphCommonClock_Config+0x60>)
 8001978:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800197a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800197e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001980:	2305      	movs	r3, #5
 8001982:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001988:	2303      	movs	r3, #3
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001996:	2300      	movs	r3, #0
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800199a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800199e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fc0a 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 80019b6:	f000 f819 	bl	80019ec <Error_Handler>
	}
}
 80019ba:	bf00      	nop
 80019bc:	3788      	adds	r7, #136	@ 0x88
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	00b00008 	.word	0x00b00008

080019c8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80019da:	f001 fad9 	bl	8002f90 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40001000 	.word	0x40001000

080019ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 80019fe:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <MX_QUADSPI_Init+0x54>)
 8001a00:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a10:	2210      	movs	r2, #16
 8001a12:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a16:	2218      	movs	r2, #24
 8001a18:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a1c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001a20:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_QUADSPI_Init+0x50>)
 8001a36:	f005 fe47 	bl	80076c8 <HAL_QSPI_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001a40:	f7ff ffd4 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200007bc 	.word	0x200007bc
 8001a4c:	a0001000 	.word	0xa0001000

08001a50 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b5c <HAL_QSPI_MspInit+0x10c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d170      	bne.n	8001b54 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a76:	4a3a      	ldr	r2, [pc, #232]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a7e:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8a:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_QSPI_MspInit+0x110>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481d      	ldr	r0, [pc, #116]	@ (8001b64 <HAL_QSPI_MspInit+0x114>)
 8001aee:	f002 fddb 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001af2:	2340      	movs	r3, #64	@ 0x40
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b02:	230a      	movs	r3, #10
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4816      	ldr	r0, [pc, #88]	@ (8001b68 <HAL_QSPI_MspInit+0x118>)
 8001b0e:	f002 fdcb 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b12:	2304      	movs	r3, #4
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b22:	2309      	movs	r3, #9
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	@ (8001b68 <HAL_QSPI_MspInit+0x118>)
 8001b2e:	f002 fdbb 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001b32:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b44:	2309      	movs	r3, #9
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	@ (8001b6c <HAL_QSPI_MspInit+0x11c>)
 8001b50:	f002 fdaa 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3730      	adds	r7, #48	@ 0x30
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	a0001000 	.word	0xa0001000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b090      	sub	sp, #64	@ 0x40
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2228      	movs	r2, #40	@ 0x28
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f013 f8a5 	bl	8014ce0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b96:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001b98:	4a46      	ldr	r2, [pc, #280]	@ (8001cb4 <MX_RTC_Init+0x144>)
 8001b9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b9c:	4b44      	ldr	r3, [pc, #272]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001ba4:	227f      	movs	r2, #127	@ 0x7f
 8001ba6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ba8:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001baa:	22ff      	movs	r2, #255	@ 0xff
 8001bac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bae:	4b40      	ldr	r3, [pc, #256]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc0:	483b      	ldr	r0, [pc, #236]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001bc2:	f007 f82f 	bl	8008c24 <HAL_RTC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001bcc:	f7ff ff0e 	bl	80019ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	482f      	ldr	r0, [pc, #188]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001bf4:	f007 f89a 	bl	8008d2c <HAL_RTC_SetTime>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001bfe:	f7ff fef5 	bl	80019ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4619      	mov	r1, r3
 8001c22:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001c24:	f007 f91c 	bl	8008e60 <HAL_RTC_SetDate>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c2e:	f7ff fedd 	bl	80019ec <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	2201      	movs	r2, #1
 8001c66:	4619      	mov	r1, r3
 8001c68:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001c6a:	f007 f97d 	bl	8008f68 <HAL_RTC_SetAlarm>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001c74:	f7ff feba 	bl	80019ec <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2201      	movs	r2, #1
 8001c82:	4619      	mov	r1, r3
 8001c84:	480a      	ldr	r0, [pc, #40]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001c86:	f007 f96f 	bl	8008f68 <HAL_RTC_SetAlarm>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001c90:	f7ff feac 	bl	80019ec <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c94:	2202      	movs	r2, #2
 8001c96:	2100      	movs	r1, #0
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_RTC_Init+0x140>)
 8001c9a:	f007 fb2f 	bl	80092fc <HAL_RTCEx_SetTimeStamp>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001ca4:	f7ff fea2 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3740      	adds	r7, #64	@ 0x40
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000808 	.word	0x20000808
 8001cb4:	40002800 	.word	0x40002800

08001cb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0a4      	sub	sp, #144	@ 0x90
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2284      	movs	r2, #132	@ 0x84
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f013 f809 	bl	8014ce0 <memset>
  if(rtcHandle->Instance==RTC)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d0c <HAL_RTC_MspInit+0x54>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d114      	bne.n	8001d02 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 fa6c 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001cf2:	f7ff fe7b 	bl	80019ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RTC_MspInit+0x58>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <HAL_RTC_MspInit+0x58>)
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d00:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3790      	adds	r7, #144	@ 0x90
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40002800 	.word	0x40002800
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d18:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e54 <MX_SAI2_Init+0x140>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d24:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d2c:	2240      	movs	r2, #64	@ 0x40
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d30:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d3c:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d48:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d4e:	4b40      	ldr	r3, [pc, #256]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d54:	4b3e      	ldr	r3, [pc, #248]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d56:	4a40      	ldr	r2, [pc, #256]	@ (8001e58 <MX_SAI2_Init+0x144>)
 8001d58:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d72:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d74:	2208      	movs	r2, #8
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d7e:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d84:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d90:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d96:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001da8:	4829      	ldr	r0, [pc, #164]	@ (8001e50 <MX_SAI2_Init+0x13c>)
 8001daa:	f007 fb0f 	bl	80093cc <HAL_SAI_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001db4:	f7ff fe1a 	bl	80019ec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001db8:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dba:	4a29      	ldr	r2, [pc, #164]	@ (8001e60 <MX_SAI2_Init+0x14c>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dbe:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dcc:	2240      	movs	r2, #64	@ 0x40
 8001dce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e08:	2208      	movs	r2, #8
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e3c:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_SAI2_Init+0x148>)
 8001e3e:	f007 fac5 	bl	80093cc <HAL_SAI_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001e48:	f7ff fdd0 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000828 	.word	0x20000828
 8001e54:	40015c04 	.word	0x40015c04
 8001e58:	0002ee00 	.word	0x0002ee00
 8001e5c:	200008ac 	.word	0x200008ac
 8001e60:	40015c24 	.word	0x40015c24

08001e64 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2b      	ldr	r2, [pc, #172]	@ (8001f20 <HAL_SAI_MspInit+0xbc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d124      	bne.n	8001ec0 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e76:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a29      	ldr	r2, [pc, #164]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001e9e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ea0:	23f0      	movs	r3, #240	@ 0xf0
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481c      	ldr	r0, [pc, #112]	@ (8001f2c <HAL_SAI_MspInit+0xc8>)
 8001ebc:	f002 fbf4 	bl	80046a8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f30 <HAL_SAI_MspInit+0xcc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d125      	bne.n	8001f16 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001ed8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_SAI_MspInit+0xc4>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <HAL_SAI_MspInit+0xc0>)
 8001ef2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f06:	230a      	movs	r3, #10
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4808      	ldr	r0, [pc, #32]	@ (8001f34 <HAL_SAI_MspInit+0xd0>)
 8001f12:	f002 fbc9 	bl	80046a8 <HAL_GPIO_Init>

    }
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	@ 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40015c04 	.word	0x40015c04
 8001f24:	20000930 	.word	0x20000930
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40015c24 	.word	0x40015c24
 8001f34:	40021800 	.word	0x40021800

08001f38 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <MX_SDMMC1_SD_Init+0x40>)
 8001f40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f5a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <MX_SDMMC1_SD_Init+0x3c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000934 	.word	0x20000934
 8001f78:	40012c00 	.word	0x40012c00

08001f7c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_SD_MspInit+0xb4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d144      	bne.n	8002028 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a24      	ldr	r2, [pc, #144]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_SD_MspInit+0xb8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001fe6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	@ (8002038 <HAL_SD_MspInit+0xbc>)
 8002004:	f002 fb50 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002008:	2304      	movs	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002018:	230c      	movs	r3, #12
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4806      	ldr	r0, [pc, #24]	@ (800203c <HAL_SD_MspInit+0xc0>)
 8002024:	f002 fb40 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	@ 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40023800 	.word	0x40023800
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00

08002040 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002046:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800204a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_SPDIFRX_Init+0x5c>)
 800208a:	f008 fc2b 	bl	800a8e4 <HAL_SPDIFRX_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002094:	f7ff fcaa 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200009b8 	.word	0x200009b8

080020a0 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0aa      	sub	sp, #168	@ 0xa8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2284      	movs	r2, #132	@ 0x84
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f012 fe0d 	bl	8014ce0 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80020ce:	d143      	bne.n	8002158 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80020d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80020d6:	2364      	movs	r3, #100	@ 0x64
 80020d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	4618      	mov	r0, r3
 80020f0:	f006 f868 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80020fa:	f7ff fc77 	bl	80019ec <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6413      	str	r3, [r2, #64]	@ 0x40
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_SPDIFRX_MspInit+0xc0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002146:	2308      	movs	r3, #8
 8002148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002150:	4619      	mov	r1, r3
 8002152:	4804      	ldr	r0, [pc, #16]	@ (8002164 <HAL_SPDIFRX_MspInit+0xc4>)
 8002154:	f002 faa8 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8002158:	bf00      	nop
 800215a:	37a8      	adds	r7, #168	@ 0xa8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40020c00 	.word	0x40020c00

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_MspInit+0x4c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_MspInit+0x4c>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002190:	6453      	str	r3, [r2, #68]	@ 0x44
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_MspInit+0x4c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	210f      	movs	r1, #15
 80021a2:	f06f 0001 	mvn.w	r0, #1
 80021a6:	f001 fa83 	bl	80036b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08e      	sub	sp, #56	@ 0x38
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c8:	4b33      	ldr	r3, [pc, #204]	@ (8002298 <HAL_InitTick+0xe0>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	4a32      	ldr	r2, [pc, #200]	@ (8002298 <HAL_InitTick+0xe0>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_InitTick+0xe0>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e0:	f107 0210 	add.w	r2, r7, #16
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f005 ffb8 	bl	8008160 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021fa:	f005 ff89 	bl	8008110 <HAL_RCC_GetPCLK1Freq>
 80021fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8002200:	e004      	b.n	800220c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002202:	f005 ff85 	bl	8008110 <HAL_RCC_GetPCLK1Freq>
 8002206:	4603      	mov	r3, r0
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220e:	4a23      	ldr	r2, [pc, #140]	@ (800229c <HAL_InitTick+0xe4>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	3b01      	subs	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <HAL_InitTick+0xe8>)
 800221c:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <HAL_InitTick+0xec>)
 800221e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002220:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_InitTick+0xe8>)
 8002222:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002226:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_InitTick+0xe8>)
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800222e:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <HAL_InitTick+0xe8>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_InitTick+0xe8>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_InitTick+0xe8>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002240:	4817      	ldr	r0, [pc, #92]	@ (80022a0 <HAL_InitTick+0xe8>)
 8002242:	f008 fbab 	bl	800a99c <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800224c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11b      	bne.n	800228c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002254:	4812      	ldr	r0, [pc, #72]	@ (80022a0 <HAL_InitTick+0xe8>)
 8002256:	f008 fbf9 	bl	800aa4c <HAL_TIM_Base_Start_IT>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002260:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002264:	2b00      	cmp	r3, #0
 8002266:	d111      	bne.n	800228c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002268:	2036      	movs	r0, #54	@ 0x36
 800226a:	f001 fa3d 	bl	80036e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d808      	bhi.n	8002286 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	2036      	movs	r0, #54	@ 0x36
 800227a:	f001 fa19 	bl	80036b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <HAL_InitTick+0xf0>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e002      	b.n	800228c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800228c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002290:	4618      	mov	r0, r3
 8002292:	3738      	adds	r7, #56	@ 0x38
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	431bde83 	.word	0x431bde83
 80022a0:	20000a04 	.word	0x20000a04
 80022a4:	40001000 	.word	0x40001000
 80022a8:	20000004 	.word	0x20000004

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <USART1_IRQHandler+0x10>)
 80022ea:	f009 fd31 	bl	800bd50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000c1c 	.word	0x20000c1c

080022f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022fc:	4802      	ldr	r0, [pc, #8]	@ (8002308 <TIM6_DAC_IRQHandler+0x10>)
 80022fe:	f008 fc74 	bl	800abea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000a04 	.word	0x20000a04

0800230c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <OTG_FS_IRQHandler+0x10>)
 8002312:	f002 fea1 	bl	8005058 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000927c 	.word	0x2000927c

08002320 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <LTDC_IRQHandler+0x10>)
 8002326:	f004 fed5 	bl	80070d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000710 	.word	0x20000710

08002334 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <DMA2D_IRQHandler+0x10>)
 800233a:	f001 fcc5 	bl	8003cc8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200002a4 	.word	0x200002a4

08002348 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e00a      	b.n	8002370 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235a:	f3af 8000 	nop.w
 800235e:	4601      	mov	r1, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	b2ca      	uxtb	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	dbf0      	blt.n	800235a <_read+0x12>
  }

  return len;
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e009      	b.n	80023a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f95f 	bl	8001660 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dbf1      	blt.n	8002394 <_write+0x12>
  }
  return len;
 80023b0:	687b      	ldr	r3, [r7, #4]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_close>:

int _close(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e2:	605a      	str	r2, [r3, #4]
  return 0;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_isatty>:

int _isatty(int file)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800242c:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <_sbrk+0x5c>)
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <_sbrk+0x60>)
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <_sbrk+0x64>)
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <_sbrk+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	429a      	cmp	r2, r3
 8002452:	d207      	bcs.n	8002464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002454:	f012 fca2 	bl	8014d9c <__errno>
 8002458:	4603      	mov	r3, r0
 800245a:	220c      	movs	r2, #12
 800245c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	e009      	b.n	8002478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246a:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <_sbrk+0x64>)
 8002474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20050000 	.word	0x20050000
 8002484:	00000400 	.word	0x00000400
 8002488:	20000a50 	.word	0x20000a50
 800248c:	200097a8 	.word	0x200097a8

08002490 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <SystemInit+0x20>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <SystemInit+0x20>)
 800249c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09a      	sub	sp, #104	@ 0x68
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	222c      	movs	r2, #44	@ 0x2c
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f012 fbf6 	bl	8014ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024f4:	4b43      	ldr	r3, [pc, #268]	@ (8002604 <MX_TIM1_Init+0x150>)
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <MX_TIM1_Init+0x154>)
 80024f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024fa:	4b42      	ldr	r3, [pc, #264]	@ (8002604 <MX_TIM1_Init+0x150>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b40      	ldr	r3, [pc, #256]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002506:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800250c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002514:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b3a      	ldr	r3, [pc, #232]	@ (8002604 <MX_TIM1_Init+0x150>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002520:	4838      	ldr	r0, [pc, #224]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002522:	f008 fa3b 	bl	800a99c <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800252c:	f7ff fa5e 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002534:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002536:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800253a:	4619      	mov	r1, r3
 800253c:	4831      	ldr	r0, [pc, #196]	@ (8002604 <MX_TIM1_Init+0x150>)
 800253e:	f008 fd6f 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002548:	f7ff fa50 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800254c:	482d      	ldr	r0, [pc, #180]	@ (8002604 <MX_TIM1_Init+0x150>)
 800254e:	f008 faf5 	bl	800ab3c <HAL_TIM_PWM_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002558:	f7ff fa48 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002568:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800256c:	4619      	mov	r1, r3
 800256e:	4825      	ldr	r0, [pc, #148]	@ (8002604 <MX_TIM1_Init+0x150>)
 8002570:	f009 f9ec 	bl	800b94c <HAL_TIMEx_MasterConfigSynchronization>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800257a:	f7ff fa37 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257e:	2360      	movs	r3, #96	@ 0x60
 8002580:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002586:	2300      	movs	r3, #0
 8002588:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800258a:	2300      	movs	r3, #0
 800258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800259e:	2200      	movs	r2, #0
 80025a0:	4619      	mov	r1, r3
 80025a2:	4818      	ldr	r0, [pc, #96]	@ (8002604 <MX_TIM1_Init+0x150>)
 80025a4:	f008 fc28 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80025ae:	f7ff fa1d 	bl	80019ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4807      	ldr	r0, [pc, #28]	@ (8002604 <MX_TIM1_Init+0x150>)
 80025e8:	f009 fa3e 	bl	800ba68 <HAL_TIMEx_ConfigBreakDeadTime>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80025f2:	f7ff f9fb 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025f6:	4803      	ldr	r0, [pc, #12]	@ (8002604 <MX_TIM1_Init+0x150>)
 80025f8:	f000 fa96 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80025fc:	bf00      	nop
 80025fe:	3768      	adds	r7, #104	@ 0x68
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000a54 	.word	0x20000a54
 8002608:	40010000 	.word	0x40010000

0800260c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	@ 0x38
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262c:	463b      	mov	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	615a      	str	r2, [r3, #20]
 800263c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800263e:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002646:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002652:	4b28      	ldr	r3, [pc, #160]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002666:	4823      	ldr	r0, [pc, #140]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002668:	f008 f998 	bl	800a99c <HAL_TIM_Base_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002672:	f7ff f9bb 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800267c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002680:	4619      	mov	r1, r3
 8002682:	481c      	ldr	r0, [pc, #112]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002684:	f008 fccc 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800268e:	f7ff f9ad 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 8002694:	f008 fa52 	bl	800ab3c <HAL_TIM_PWM_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800269e:	f7ff f9a5 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 80026b2:	f009 f94b 	bl	800b94c <HAL_TIMEx_MasterConfigSynchronization>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026bc:	f7ff f996 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c0:	2360      	movs	r3, #96	@ 0x60
 80026c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	2200      	movs	r2, #0
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 80026d8:	f008 fb8e 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026e2:	f7ff f983 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026e6:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <MX_TIM2_Init+0xe8>)
 80026e8:	f000 fa1e 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80026ec:	bf00      	nop
 80026ee:	3738      	adds	r7, #56	@ 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000aa0 	.word	0x20000aa0

080026f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	@ 0x38
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800272a:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800272c:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <MX_TIM3_Init+0xec>)
 800272e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800273c:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800273e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002750:	4823      	ldr	r0, [pc, #140]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 8002752:	f008 f923 	bl	800a99c <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800275c:	f7ff f946 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800276a:	4619      	mov	r1, r3
 800276c:	481c      	ldr	r0, [pc, #112]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800276e:	f008 fc57 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002778:	f7ff f938 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800277c:	4818      	ldr	r0, [pc, #96]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800277e:	f008 f9dd 	bl	800ab3c <HAL_TIM_PWM_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002788:	f7ff f930 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	4811      	ldr	r0, [pc, #68]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 800279c:	f009 f8d6 	bl	800b94c <HAL_TIMEx_MasterConfigSynchronization>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80027a6:	f7ff f921 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027aa:	2360      	movs	r3, #96	@ 0x60
 80027ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	4619      	mov	r1, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 80027c2:	f008 fb19 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027cc:	f7ff f90e 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027d0:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <MX_TIM3_Init+0xe8>)
 80027d2:	f000 f9a9 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80027d6:	bf00      	nop
 80027d8:	3738      	adds	r7, #56	@ 0x38
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000aec 	.word	0x20000aec
 80027e4:	40000400 	.word	0x40000400

080027e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	@ 0x38
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800281a:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800281c:	4a2d      	ldr	r2, [pc, #180]	@ (80028d4 <MX_TIM5_Init+0xec>)
 800281e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002820:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800282c:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800282e:	f04f 32ff 	mov.w	r2, #4294967295
 8002832:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002840:	4823      	ldr	r0, [pc, #140]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 8002842:	f008 f8ab 	bl	800a99c <HAL_TIM_Base_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800284c:	f7ff f8ce 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800285a:	4619      	mov	r1, r3
 800285c:	481c      	ldr	r0, [pc, #112]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800285e:	f008 fbdf 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002868:	f7ff f8c0 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800286c:	4818      	ldr	r0, [pc, #96]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800286e:	f008 f965 	bl	800ab3c <HAL_TIM_PWM_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002878:	f7ff f8b8 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4811      	ldr	r0, [pc, #68]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 800288c:	f009 f85e 	bl	800b94c <HAL_TIMEx_MasterConfigSynchronization>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002896:	f7ff f8a9 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289a:	2360      	movs	r3, #96	@ 0x60
 800289c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028aa:	463b      	mov	r3, r7
 80028ac:	220c      	movs	r2, #12
 80028ae:	4619      	mov	r1, r3
 80028b0:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 80028b2:	f008 faa1 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80028bc:	f7ff f896 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <MX_TIM5_Init+0xe8>)
 80028c2:	f000 f931 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80028c6:	bf00      	nop
 80028c8:	3738      	adds	r7, #56	@ 0x38
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000b38 	.word	0x20000b38
 80028d4:	40000c00 	.word	0x40000c00

080028d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <MX_TIM8_Init+0xa0>)
 80028f8:	4a20      	ldr	r2, [pc, #128]	@ (800297c <MX_TIM8_Init+0xa4>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <MX_TIM8_Init+0xa0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <MX_TIM8_Init+0xa0>)
 800290a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <MX_TIM8_Init+0xa0>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002922:	4815      	ldr	r0, [pc, #84]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002924:	f008 f83a 	bl	800a99c <HAL_TIM_Base_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800292e:	f7ff f85d 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	480e      	ldr	r0, [pc, #56]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002940:	f008 fb6e 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800294a:	f7ff f84f 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	@ (8002978 <MX_TIM8_Init+0xa0>)
 8002960:	f008 fff4 	bl	800b94c <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800296a:	f7ff f83f 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000b84 	.word	0x20000b84
 800297c:	40010400 	.word	0x40010400

08002980 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	615a      	str	r2, [r3, #20]
 8002996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <MX_TIM12_Init+0x84>)
 800299a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <MX_TIM12_Init+0x88>)
 800299c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029b0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80029be:	4811      	ldr	r0, [pc, #68]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029c0:	f008 f8bc 	bl	800ab3c <HAL_TIM_PWM_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80029ca:	f7ff f80f 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ce:	2360      	movs	r3, #96	@ 0x60
 80029d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	4619      	mov	r1, r3
 80029e4:	4807      	ldr	r0, [pc, #28]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029e6:	f008 fa07 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80029f0:	f7fe fffc 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80029f4:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <MX_TIM12_Init+0x84>)
 80029f6:	f000 f897 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80029fa:	bf00      	nop
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000bd0 	.word	0x20000bd0
 8002a08:	40001800 	.word	0x40001800

08002a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad4 <HAL_TIM_Base_MspInit+0xc8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10c      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a36:	e046      	b.n	8002ac6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a40:	d10c      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a42:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
}
 8002a5a:	e034      	b.n	8002ac6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1e      	ldr	r2, [pc, #120]	@ (8002adc <HAL_TIM_Base_MspInit+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10c      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
}
 8002a7e:	e022      	b.n	8002ac6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_TIM_Base_MspInit+0xd4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10c      	bne.n	8002aa4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
}
 8002aa2:	e010      	b.n	8002ac6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae4 <HAL_TIM_Base_MspInit+0xd8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d10b      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_TIM_Base_MspInit+0xcc>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x38>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10b      	bne.n	8002b12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x3c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b07      	ldr	r3, [pc, #28]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40001800 	.word	0x40001800
 8002b24:	40023800 	.word	0x40023800

08002b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a56      	ldr	r2, [pc, #344]	@ (8002ca0 <HAL_TIM_MspPostInit+0x178>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11d      	bne.n	8002b86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a55      	ldr	r2, [pc, #340]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	484a      	ldr	r0, [pc, #296]	@ (8002ca8 <HAL_TIM_MspPostInit+0x180>)
 8002b80:	f001 fd92 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b84:	e087      	b.n	8002c96 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8e:	d11d      	bne.n	8002bcc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b44      	ldr	r3, [pc, #272]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	4a43      	ldr	r2, [pc, #268]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4838      	ldr	r0, [pc, #224]	@ (8002ca8 <HAL_TIM_MspPostInit+0x180>)
 8002bc6:	f001 fd6f 	bl	80046a8 <HAL_GPIO_Init>
}
 8002bca:	e064      	b.n	8002c96 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a36      	ldr	r2, [pc, #216]	@ (8002cac <HAL_TIM_MspPostInit+0x184>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11c      	bne.n	8002c10 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a32      	ldr	r2, [pc, #200]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002bee:	2310      	movs	r3, #16
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4829      	ldr	r0, [pc, #164]	@ (8002cb0 <HAL_TIM_MspPostInit+0x188>)
 8002c0a:	f001 fd4d 	bl	80046a8 <HAL_GPIO_Init>
}
 8002c0e:	e042      	b.n	8002c96 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <HAL_TIM_MspPostInit+0x18c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d11c      	bne.n	8002c54 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c42:	2302      	movs	r3, #2
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	481a      	ldr	r0, [pc, #104]	@ (8002cb8 <HAL_TIM_MspPostInit+0x190>)
 8002c4e:	f001 fd2b 	bl	80046a8 <HAL_GPIO_Init>
}
 8002c52:	e020      	b.n	8002c96 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_TIM_MspPostInit+0x194>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d11b      	bne.n	8002c96 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_TIM_MspPostInit+0x17c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002c76:	2340      	movs	r3, #64	@ 0x40
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c86:	2309      	movs	r3, #9
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <HAL_TIM_MspPostInit+0x198>)
 8002c92:	f001 fd09 	bl	80046a8 <HAL_GPIO_Init>
}
 8002c96:	bf00      	nop
 8002c98:	3730      	adds	r7, #48	@ 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40000c00 	.word	0x40000c00
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40001800 	.word	0x40001800
 8002cc0:	40021c00 	.word	0x40021c00

08002cc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cca:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <MX_USART1_UART_Init+0x5c>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d06:	4805      	ldr	r0, [pc, #20]	@ (8002d1c <MX_USART1_UART_Init+0x58>)
 8002d08:	f008 ff4a 	bl	800bba0 <HAL_UART_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d12:	f7fe fe6b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000c1c 	.word	0x20000c1c
 8002d20:	40011000 	.word	0x40011000

08002d24 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d2a:	4a15      	ldr	r2, [pc, #84]	@ (8002d80 <MX_USART6_UART_Init+0x5c>)
 8002d2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	@ (8002d7c <MX_USART6_UART_Init+0x58>)
 8002d68:	f008 ff1a 	bl	800bba0 <HAL_UART_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d72:	f7fe fe3b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000ca4 	.word	0x20000ca4
 8002d80:	40011400 	.word	0x40011400

08002d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0ae      	sub	sp, #184	@ 0xb8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	2284      	movs	r2, #132	@ 0x84
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f011 ff9b 	bl	8014ce0 <memset>
  if(uartHandle->Instance==USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a57      	ldr	r2, [pc, #348]	@ (8002f0c <HAL_UART_MspInit+0x188>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d165      	bne.n	8002e80 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002db4:	2340      	movs	r3, #64	@ 0x40
 8002db6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002db8:	2300      	movs	r3, #0
 8002dba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dbc:	f107 0320 	add.w	r3, r7, #32
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f005 f9ff 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dcc:	f7fe fe0e 	bl	80019ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002dd6:	f043 0310 	orr.w	r3, r3, #16
 8002dda:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	4a48      	ldr	r2, [pc, #288]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df4:	4b46      	ldr	r3, [pc, #280]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	4a42      	ldr	r2, [pc, #264]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0c:	4b40      	ldr	r3, [pc, #256]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e30:	2307      	movs	r3, #7
 8002e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4835      	ldr	r0, [pc, #212]	@ (8002f14 <HAL_UART_MspInit+0x190>)
 8002e3e:	f001 fc33 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e66:	4619      	mov	r1, r3
 8002e68:	482b      	ldr	r0, [pc, #172]	@ (8002f18 <HAL_UART_MspInit+0x194>)
 8002e6a:	f001 fc1d 	bl	80046a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2105      	movs	r1, #5
 8002e72:	2025      	movs	r0, #37	@ 0x25
 8002e74:	f000 fc1c 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e78:	2025      	movs	r0, #37	@ 0x25
 8002e7a:	f000 fc35 	bl	80036e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002e7e:	e040      	b.n	8002f02 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	@ (8002f1c <HAL_UART_MspInit+0x198>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d13b      	bne.n	8002f02 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002e8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e8e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002e90:	2300      	movs	r3, #0
 8002e92:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 f993 	bl	80081c4 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002ea4:	f7fe fda2 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	4a18      	ldr	r2, [pc, #96]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002eae:	f043 0320 	orr.w	r3, r3, #32
 8002eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb4:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ecc:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_UART_MspInit+0x18c>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ed8:	23c0      	movs	r3, #192	@ 0xc0
 8002eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4808      	ldr	r0, [pc, #32]	@ (8002f20 <HAL_UART_MspInit+0x19c>)
 8002efe:	f001 fbd3 	bl	80046a8 <HAL_GPIO_Init>
}
 8002f02:	bf00      	nop
 8002f04:	37b8      	adds	r7, #184	@ 0xb8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	40020800 	.word	0x40020800

08002f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f28:	f7ff fab2 	bl	8002490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	@ (8002f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f52:	f011 ff29 	bl	8014da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f56:	f7fe fc0f 	bl	8001778 <main>
  bx  lr    
 8002f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002f68:	0801525c 	.word	0x0801525c
  ldr r2, =_sbss
 8002f6c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002f70:	200097a8 	.word	0x200097a8

08002f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC_IRQHandler>

08002f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	f000 fb8d 	bl	800369a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f80:	200f      	movs	r0, #15
 8002f82:	f7ff f919 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f86:	f7ff f8ef 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_IncTick+0x20>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	20000d2c 	.word	0x20000d2c

08002fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return uwTick;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_GetTick+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000d2c 	.word	0x20000d2c

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000008 	.word	0x20000008

08003018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e031      	b.n	8003092 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fab4 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <HAL_ADC_Init+0x84>)
 800305c:	4013      	ands	r3, r2
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f970 	bl	800334c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
 8003082:	e001      	b.n	8003088 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	ffffeefd 	.word	0xffffeefd

080030a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e136      	b.n	800332a <HAL_ADC_ConfigChannel+0x28a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d93a      	bls.n	8003142 <HAL_ADC_ConfigChannel+0xa2>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030d4:	d035      	beq.n	8003142 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68d9      	ldr	r1, [r3, #12]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	2207      	movs	r2, #7
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a8d      	ldr	r2, [pc, #564]	@ (8003338 <HAL_ADC_ConfigChannel+0x298>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	061a      	lsls	r2, r3, #24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800311a:	e035      	b.n	8003188 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	4603      	mov	r3, r0
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4403      	add	r3, r0
 8003134:	3b1e      	subs	r3, #30
 8003136:	409a      	lsls	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003140:	e022      	b.n	8003188 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6919      	ldr	r1, [r3, #16]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	2207      	movs	r2, #7
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43da      	mvns	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	400a      	ands	r2, r1
 8003164:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6919      	ldr	r1, [r3, #16]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	4603      	mov	r3, r0
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4403      	add	r3, r0
 800317e:	409a      	lsls	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d824      	bhi.n	80031da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3b05      	subs	r3, #5
 80031a2:	221f      	movs	r2, #31
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43da      	mvns	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	400a      	ands	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	3b05      	subs	r3, #5
 80031cc:	fa00 f203 	lsl.w	r2, r0, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80031d8:	e04c      	b.n	8003274 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d824      	bhi.n	800322c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b23      	subs	r3, #35	@ 0x23
 80031f4:	221f      	movs	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	400a      	ands	r2, r1
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b23      	subs	r3, #35	@ 0x23
 800321e:	fa00 f203 	lsl.w	r2, r0, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	631a      	str	r2, [r3, #48]	@ 0x30
 800322a:	e023      	b.n	8003274 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b41      	subs	r3, #65	@ 0x41
 800323e:	221f      	movs	r2, #31
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	4618      	mov	r0, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	@ 0x41
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a30      	ldr	r2, [pc, #192]	@ (800333c <HAL_ADC_ConfigChannel+0x29c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1f4>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003286:	d105      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003288:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a2c      	ldr	r2, [pc, #176]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 800328e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003292:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a28      	ldr	r2, [pc, #160]	@ (800333c <HAL_ADC_ConfigChannel+0x29c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10f      	bne.n	80032be <HAL_ADC_ConfigChannel+0x21e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b12      	cmp	r3, #18
 80032a4:	d10b      	bne.n	80032be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a25      	ldr	r2, [pc, #148]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80032b2:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1e      	ldr	r2, [pc, #120]	@ (800333c <HAL_ADC_ConfigChannel+0x29c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d12b      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x280>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003338 <HAL_ADC_ConfigChannel+0x298>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <HAL_ADC_ConfigChannel+0x23a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d122      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80032da:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80032e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <HAL_ADC_ConfigChannel+0x2a0>)
 80032ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a10      	ldr	r2, [pc, #64]	@ (8003338 <HAL_ADC_ConfigChannel+0x298>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d111      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_ADC_ConfigChannel+0x2a4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a11      	ldr	r2, [pc, #68]	@ (8003348 <HAL_ADC_ConfigChannel+0x2a8>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9a      	lsrs	r2, r3, #18
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003312:	e002      	b.n	800331a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3b01      	subs	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f9      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	10000012 	.word	0x10000012
 800333c:	40012000 	.word	0x40012000
 8003340:	40012300 	.word	0x40012300
 8003344:	20000000 	.word	0x20000000
 8003348:	431bde83 	.word	0x431bde83

0800334c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003354:	4b78      	ldr	r3, [pc, #480]	@ (8003538 <ADC_Init+0x1ec>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a77      	ldr	r2, [pc, #476]	@ (8003538 <ADC_Init+0x1ec>)
 800335a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800335e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003360:	4b75      	ldr	r3, [pc, #468]	@ (8003538 <ADC_Init+0x1ec>)
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4973      	ldr	r1, [pc, #460]	@ (8003538 <ADC_Init+0x1ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800337c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	4a58      	ldr	r2, [pc, #352]	@ (800353c <ADC_Init+0x1f0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e00f      	b.n	8003446 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0202 	bic.w	r2, r2, #2
 8003454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	005a      	lsls	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	3b01      	subs	r3, #1
 80034a0:	035a      	lsls	r2, r3, #13
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e007      	b.n	80034bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	051a      	lsls	r2, r3, #20
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034fe:	025a      	lsls	r2, r3, #9
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	029a      	lsls	r2, r3, #10
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40012300 	.word	0x40012300
 800353c:	0f000001 	.word	0x0f000001

08003540 <__NVIC_SetPriorityGrouping>:
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <__NVIC_SetPriorityGrouping+0x40>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	4313      	orrs	r3, r2
 800356c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356e:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <__NVIC_SetPriorityGrouping+0x40>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	60d3      	str	r3, [r2, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00
 8003584:	05fa0000 	.word	0x05fa0000

08003588 <__NVIC_GetPriorityGrouping>:
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	@ (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	@ (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff4c 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c2:	f7ff ff61 	bl	8003588 <__NVIC_GetPriorityGrouping>
 80036c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	6978      	ldr	r0, [r7, #20]
 80036ce:	f7ff ffb1 	bl	8003634 <NVIC_EncodePriority>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff80 	bl	80035e0 <__NVIC_SetPriority>
}
 80036e0:	bf00      	nop
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff54 	bl	80035a4 <__NVIC_EnableIRQ>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e054      	b.n	80037c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7f5b      	ldrb	r3, [r3, #29]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fc ff9e 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	791b      	ldrb	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a22      	ldr	r2, [pc, #136]	@ (80037c8 <HAL_CRC_Init+0xc4>)
 8003740:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0218 	bic.w	r2, r2, #24
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	e00c      	b.n	800376e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6899      	ldr	r1, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f834 	bl	80037cc <HAL_CRCEx_Polynomial_Set>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e028      	b.n	80037c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	795b      	ldrb	r3, [r3, #5]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	e004      	b.n	800378c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	04c11db7 	.word	0x04c11db7

080037cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80037dc:	231f      	movs	r3, #31
 80037de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
 80037ee:	e063      	b.n	80038b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80037f0:	bf00      	nop
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	613a      	str	r2, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <HAL_CRCEx_Polynomial_Set+0x44>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b18      	cmp	r3, #24
 8003814:	d846      	bhi.n	80038a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	080038ab 	.word	0x080038ab
 8003820:	080038a5 	.word	0x080038a5
 8003824:	080038a5 	.word	0x080038a5
 8003828:	080038a5 	.word	0x080038a5
 800382c:	080038a5 	.word	0x080038a5
 8003830:	080038a5 	.word	0x080038a5
 8003834:	080038a5 	.word	0x080038a5
 8003838:	080038a5 	.word	0x080038a5
 800383c:	08003899 	.word	0x08003899
 8003840:	080038a5 	.word	0x080038a5
 8003844:	080038a5 	.word	0x080038a5
 8003848:	080038a5 	.word	0x080038a5
 800384c:	080038a5 	.word	0x080038a5
 8003850:	080038a5 	.word	0x080038a5
 8003854:	080038a5 	.word	0x080038a5
 8003858:	080038a5 	.word	0x080038a5
 800385c:	0800388d 	.word	0x0800388d
 8003860:	080038a5 	.word	0x080038a5
 8003864:	080038a5 	.word	0x080038a5
 8003868:	080038a5 	.word	0x080038a5
 800386c:	080038a5 	.word	0x080038a5
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038a5 	.word	0x080038a5
 8003878:	080038a5 	.word	0x080038a5
 800387c:	08003881 	.word	0x08003881
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d913      	bls.n	80038ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800388a:	e010      	b.n	80038ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b07      	cmp	r3, #7
 8003890:	d90f      	bls.n	80038b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003896:	e00c      	b.n	80038b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d90b      	bls.n	80038b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80038a2:	e008      	b.n	80038b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
        break;
 80038a8:	e006      	b.n	80038b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80038b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 0118 	bic.w	r1, r3, #24
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e069      	b.n	80039ce <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fc ff02 	bl	8000710 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_DCMI_Init+0xf0>)
 800392e:	400b      	ands	r3, r1
 8003930:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003946:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003952:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800395e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800396a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003976:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d112      	bne.n	80039ae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7f1b      	ldrb	r3, [r3, #28]
 800398c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7f5b      	ldrb	r3, [r3, #29]
 8003992:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003994:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7f9b      	ldrb	r3, [r3, #30]
 800399a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800399c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7fdb      	ldrb	r3, [r3, #31]
 80039a4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80039aa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80039ac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 021e 	orr.w	r2, r2, #30
 80039bc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	ffe0f007 	.word	0xffe0f007

080039dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_DMA_Start_IT+0x26>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e048      	b.n	8003a94 <HAL_DMA_Start_IT+0xb8>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d137      	bne.n	8003a86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8d4 	bl	8003bd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	223f      	movs	r2, #63	@ 0x3f
 8003a36:	409a      	lsls	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0216 	orr.w	r2, r2, #22
 8003a4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e005      	b.n	8003a92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aaa:	f7ff fa85 	bl	8002fb8 <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d008      	beq.n	8003ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2280      	movs	r2, #128	@ 0x80
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e052      	b.n	8003b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0216 	bic.w	r2, r2, #22
 8003adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_DMA_Abort+0x62>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1e:	e013      	b.n	8003b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b20:	f7ff fa4a 	bl	8002fb8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d90c      	bls.n	8003b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2203      	movs	r2, #3
 8003b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e015      	b.n	8003b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e4      	bne.n	8003b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	223f      	movs	r2, #63	@ 0x3f
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00c      	b.n	8003bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b40      	cmp	r3, #64	@ 0x40
 8003c04:	d108      	bne.n	8003c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c16:	e007      	b.n	8003c28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e039      	b.n	8003cba <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc fe48 	bl	80008f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	f023 0107 	bic.w	r1, r3, #7
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <HAL_DMA2D_Init+0x90>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d1      	ldr	r1, [r2, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	ffffc000 	.word	0xffffc000

08003cc8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d026      	beq.n	8003d38 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d021      	beq.n	8003d38 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d02:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d026      	beq.n	8003d90 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d021      	beq.n	8003d90 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2220      	movs	r2, #32
 8003d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d026      	beq.n	8003de8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2208      	movs	r2, #8
 8003dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2204      	movs	r2, #4
 8003e12:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f853 	bl	8003ec0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d024      	beq.n	8003e6e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2202      	movs	r2, #2
 8003e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01f      	beq.n	8003eb8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01a      	beq.n	8003eb8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e90:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2210      	movs	r2, #16
 8003e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f80e 	bl	8003ed4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA2D_ConfigLayer+0x20>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e079      	b.n	8003ffc <HAL_DMA2D_ConfigLayer+0x114>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003f32:	4b35      	ldr	r3, [pc, #212]	@ (8004008 <HAL_DMA2D_ConfigLayer+0x120>)
 8003f34:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b0a      	cmp	r3, #10
 8003f3c:	d003      	beq.n	8003f46 <HAL_DMA2D_ConfigLayer+0x5e>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b09      	cmp	r3, #9
 8003f44:	d107      	bne.n	8003f56 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e005      	b.n	8003f62 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d120      	bne.n	8003faa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	ea02 0103 	and.w	r1, r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b0a      	cmp	r3, #10
 8003f90:	d003      	beq.n	8003f9a <HAL_DMA2D_ConfigLayer+0xb2>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b09      	cmp	r3, #9
 8003f98:	d127      	bne.n	8003fea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa8:	e01f      	b.n	8003fea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	ea02 0103 	and.w	r1, r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b0a      	cmp	r3, #10
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA2D_ConfigLayer+0xf4>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	d106      	bne.n	8003fea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003fe8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	ff03000f 	.word	0xff03000f

0800400c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e086      	b.n	800412c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2223      	movs	r2, #35	@ 0x23
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fc fcd1 	bl	80009d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004036:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_ETH_Init+0x128>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	4a3e      	ldr	r2, [pc, #248]	@ (8004134 <HAL_ETH_Init+0x128>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004040:	6453      	str	r3, [r2, #68]	@ 0x44
 8004042:	4b3c      	ldr	r3, [pc, #240]	@ (8004134 <HAL_ETH_Init+0x128>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800404e:	4b3a      	ldr	r3, [pc, #232]	@ (8004138 <HAL_ETH_Init+0x12c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a39      	ldr	r2, [pc, #228]	@ (8004138 <HAL_ETH_Init+0x12c>)
 8004054:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004058:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800405a:	4b37      	ldr	r3, [pc, #220]	@ (8004138 <HAL_ETH_Init+0x12c>)
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4935      	ldr	r1, [pc, #212]	@ (8004138 <HAL_ETH_Init+0x12c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004068:	4b33      	ldr	r3, [pc, #204]	@ (8004138 <HAL_ETH_Init+0x12c>)
 800406a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004082:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004084:	f7fe ff98 	bl	8002fb8 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800408a:	e011      	b.n	80040b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800408c:	f7fe ff94 	bl	8002fb8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800409a:	d909      	bls.n	80040b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	22e0      	movs	r2, #224	@ 0xe0
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e03d      	b.n	800412c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e4      	bne.n	800408c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f97a 	bl	80043bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fa25 	bl	8004518 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fa7b 	bl	80045ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	461a      	mov	r2, r3
 80040da:	2100      	movs	r1, #0
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9e3 	bl	80044a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_ETH_Init+0x130>)
 8004100:	430b      	orrs	r3, r1
 8004102:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004116:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2210      	movs	r2, #16
 8004126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	40013800 	.word	0x40013800
 800413c:	00020060 	.word	0x00020060

08004140 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <ETH_SetMACConfig+0x164>)
 8004156:	4013      	ands	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7b9b      	ldrb	r3, [r3, #14]
 800415e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	7c12      	ldrb	r2, [r2, #16]
 8004164:	2a00      	cmp	r2, #0
 8004166:	d102      	bne.n	800416e <ETH_SetMACConfig+0x2e>
 8004168:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800416c:	e000      	b.n	8004170 <ETH_SetMACConfig+0x30>
 800416e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004170:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	7c52      	ldrb	r2, [r2, #17]
 8004176:	2a00      	cmp	r2, #0
 8004178:	d102      	bne.n	8004180 <ETH_SetMACConfig+0x40>
 800417a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800417e:	e000      	b.n	8004182 <ETH_SetMACConfig+0x42>
 8004180:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004182:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7fdb      	ldrb	r3, [r3, #31]
 800418e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004190:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	7f92      	ldrb	r2, [r2, #30]
 800419c:	2a00      	cmp	r2, #0
 800419e:	d102      	bne.n	80041a6 <ETH_SetMACConfig+0x66>
 80041a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041a4:	e000      	b.n	80041a8 <ETH_SetMACConfig+0x68>
 80041a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80041a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	7f1b      	ldrb	r3, [r3, #28]
 80041ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80041b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80041b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	791b      	ldrb	r3, [r3, #4]
 80041bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80041be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d102      	bne.n	80041d0 <ETH_SetMACConfig+0x90>
 80041ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ce:	e000      	b.n	80041d2 <ETH_SetMACConfig+0x92>
 80041d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7bdb      	ldrb	r3, [r3, #15]
 80041d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80041ea:	4313      	orrs	r3, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004202:	2001      	movs	r0, #1
 8004204:	f7fe fee4 	bl	8002fd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004226:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800422e:	2a00      	cmp	r2, #0
 8004230:	d101      	bne.n	8004236 <ETH_SetMACConfig+0xf6>
 8004232:	2280      	movs	r2, #128	@ 0x80
 8004234:	e000      	b.n	8004238 <ETH_SetMACConfig+0xf8>
 8004236:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004238:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800423e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004246:	2a01      	cmp	r2, #1
 8004248:	d101      	bne.n	800424e <ETH_SetMACConfig+0x10e>
 800424a:	2208      	movs	r2, #8
 800424c:	e000      	b.n	8004250 <ETH_SetMACConfig+0x110>
 800424e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004250:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004258:	2a01      	cmp	r2, #1
 800425a:	d101      	bne.n	8004260 <ETH_SetMACConfig+0x120>
 800425c:	2204      	movs	r2, #4
 800425e:	e000      	b.n	8004262 <ETH_SetMACConfig+0x122>
 8004260:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800426a:	2a01      	cmp	r2, #1
 800426c:	d101      	bne.n	8004272 <ETH_SetMACConfig+0x132>
 800426e:	2202      	movs	r2, #2
 8004270:	e000      	b.n	8004274 <ETH_SetMACConfig+0x134>
 8004272:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004274:	4313      	orrs	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800428c:	2001      	movs	r0, #1
 800428e:	f7fe fe9f 	bl	8002fd0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	619a      	str	r2, [r3, #24]
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	fd20810f 	.word	0xfd20810f

080042a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <ETH_SetDMAConfig+0x110>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	7b1b      	ldrb	r3, [r3, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <ETH_SetDMAConfig+0x2c>
 80042ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042d2:	e000      	b.n	80042d6 <ETH_SetDMAConfig+0x2e>
 80042d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	7b5b      	ldrb	r3, [r3, #13]
 80042da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	7f52      	ldrb	r2, [r2, #29]
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d102      	bne.n	80042ec <ETH_SetDMAConfig+0x44>
 80042e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80042ea:	e000      	b.n	80042ee <ETH_SetDMAConfig+0x46>
 80042ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	7b9b      	ldrb	r3, [r3, #14]
 80042f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	7f1b      	ldrb	r3, [r3, #28]
 8004302:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	7f9b      	ldrb	r3, [r3, #30]
 800430a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800430c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004312:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800431a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800431c:	4313      	orrs	r3, r2
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432c:	461a      	mov	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800433e:	2001      	movs	r0, #1
 8004340:	f7fe fe46 	bl	8002fd0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434c:	461a      	mov	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	791b      	ldrb	r3, [r3, #4]
 8004356:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800435c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004362:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004368:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004370:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004372:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800437a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004380:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800438a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800438e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800439c:	2001      	movs	r0, #1
 800439e:	f7fe fe17 	bl	8002fd0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	f8de3f23 	.word	0xf8de3f23

080043bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b0a6      	sub	sp, #152	@ 0x98
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80043d0:	2300      	movs	r3, #0
 80043d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043fe:	2300      	movs	r3, #0
 8004400:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004408:	2300      	movs	r3, #0
 800440a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004424:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004428:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800442a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fe7f 	bl	8004140 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004442:	2301      	movs	r3, #1
 8004444:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004446:	2301      	movs	r3, #1
 8004448:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004450:	2301      	movs	r3, #1
 8004452:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004464:	2300      	movs	r3, #0
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800446e:	2301      	movs	r3, #1
 8004470:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004476:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800447c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800447e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004482:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800448a:	2300      	movs	r3, #0
 800448c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff05 	bl	80042a8 <ETH_SetDMAConfig>
}
 800449e:	bf00      	nop
 80044a0:	3798      	adds	r7, #152	@ 0x98
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3305      	adds	r3, #5
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	3204      	adds	r2, #4
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <ETH_MACAddressConfig+0x68>)
 80044ca:	4413      	add	r3, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3303      	adds	r3, #3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	061a      	lsls	r2, r3, #24
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3302      	adds	r3, #2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3301      	adds	r3, #1
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	4313      	orrs	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <ETH_MACAddressConfig+0x6c>)
 80044fa:	4413      	add	r3, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6013      	str	r3, [r2, #0]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40028040 	.word	0x40028040
 8004514:	40028044 	.word	0x40028044

08004518 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e03e      	b.n	80045a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	3206      	adds	r2, #6
 8004558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d80c      	bhi.n	8004588 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68d9      	ldr	r1, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	461a      	mov	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	e004      	b.n	8004592 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d9bd      	bls.n	8004526 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	611a      	str	r2, [r3, #16]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e048      	b.n	800466a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6919      	ldr	r1, [r3, #16]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004614:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	3212      	adds	r2, #18
 8004636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d80c      	bhi.n	800465a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6919      	ldr	r1, [r3, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	440b      	add	r3, r1
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	e004      	b.n	8004664 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d9b3      	bls.n	80045d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e175      	b.n	80049b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 8164 	bne.w	80049ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x56>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80be 	beq.w	80049ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_GPIO_Init+0x324>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	4a65      	ldr	r2, [pc, #404]	@ (80049cc <HAL_GPIO_Init+0x324>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800483c:	6453      	str	r3, [r2, #68]	@ 0x44
 800483e:	4b63      	ldr	r3, [pc, #396]	@ (80049cc <HAL_GPIO_Init+0x324>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800484a:	4a61      	ldr	r2, [pc, #388]	@ (80049d0 <HAL_GPIO_Init+0x328>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a58      	ldr	r2, [pc, #352]	@ (80049d4 <HAL_GPIO_Init+0x32c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d037      	beq.n	80048e6 <HAL_GPIO_Init+0x23e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a57      	ldr	r2, [pc, #348]	@ (80049d8 <HAL_GPIO_Init+0x330>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d031      	beq.n	80048e2 <HAL_GPIO_Init+0x23a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a56      	ldr	r2, [pc, #344]	@ (80049dc <HAL_GPIO_Init+0x334>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02b      	beq.n	80048de <HAL_GPIO_Init+0x236>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a55      	ldr	r2, [pc, #340]	@ (80049e0 <HAL_GPIO_Init+0x338>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d025      	beq.n	80048da <HAL_GPIO_Init+0x232>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a54      	ldr	r2, [pc, #336]	@ (80049e4 <HAL_GPIO_Init+0x33c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <HAL_GPIO_Init+0x22e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a53      	ldr	r2, [pc, #332]	@ (80049e8 <HAL_GPIO_Init+0x340>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d019      	beq.n	80048d2 <HAL_GPIO_Init+0x22a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a52      	ldr	r2, [pc, #328]	@ (80049ec <HAL_GPIO_Init+0x344>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x226>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a51      	ldr	r2, [pc, #324]	@ (80049f0 <HAL_GPIO_Init+0x348>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x222>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a50      	ldr	r2, [pc, #320]	@ (80049f4 <HAL_GPIO_Init+0x34c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x21e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4f      	ldr	r2, [pc, #316]	@ (80049f8 <HAL_GPIO_Init+0x350>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x21a>
 80048be:	2309      	movs	r3, #9
 80048c0:	e012      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c2:	230a      	movs	r3, #10
 80048c4:	e010      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c6:	2308      	movs	r3, #8
 80048c8:	e00e      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e00c      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e6:	2300      	movs	r3, #0
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048f8:	4935      	ldr	r1, [pc, #212]	@ (80049d0 <HAL_GPIO_Init+0x328>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_GPIO_Init+0x354>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492a:	4a34      	ldr	r2, [pc, #208]	@ (80049fc <HAL_GPIO_Init+0x354>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004930:	4b32      	ldr	r3, [pc, #200]	@ (80049fc <HAL_GPIO_Init+0x354>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004954:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <HAL_GPIO_Init+0x354>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495a:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <HAL_GPIO_Init+0x354>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800497e:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <HAL_GPIO_Init+0x354>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004984:	4b1d      	ldr	r3, [pc, #116]	@ (80049fc <HAL_GPIO_Init+0x354>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a8:	4a14      	ldr	r2, [pc, #80]	@ (80049fc <HAL_GPIO_Init+0x354>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	f67f ae86 	bls.w	80046c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3724      	adds	r7, #36	@ 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40020000 	.word	0x40020000
 80049d8:	40020400 	.word	0x40020400
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020c00 	.word	0x40020c00
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40021400 	.word	0x40021400
 80049ec:	40021800 	.word	0x40021800
 80049f0:	40021c00 	.word	0x40021c00
 80049f4:	40022000 	.word	0x40022000
 80049f8:	40022400 	.word	0x40022400
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	887b      	ldrh	r3, [r7, #2]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e001      	b.n	8004a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a40:	787b      	ldrb	r3, [r7, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a4c:	e003      	b.n	8004a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	041a      	lsls	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	619a      	str	r2, [r3, #24]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	041a      	lsls	r2, r3, #16
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43d9      	mvns	r1, r3
 8004a80:	887b      	ldrh	r3, [r7, #2]
 8004a82:	400b      	ands	r3, r1
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	619a      	str	r2, [r3, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af02      	add	r7, sp, #8
 8004a9c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e059      	b.n	8004b5c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f00f fbb2 	bl	801422c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2203      	movs	r2, #3
 8004acc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad6:	d102      	bne.n	8004ade <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f008 ff2b 	bl	800d93e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7c1a      	ldrb	r2, [r3, #16]
 8004af0:	f88d 2000 	strb.w	r2, [sp]
 8004af4:	3304      	adds	r3, #4
 8004af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af8:	f008 feb6 	bl	800d868 <USB_CoreInit>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e026      	b.n	8004b5c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f008 ff23 	bl	800d960 <USB_SetCurrentMode>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e017      	b.n	8004b5c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7c1a      	ldrb	r2, [r3, #16]
 8004b34:	f88d 2000 	strb.w	r2, [sp]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b3c:	f009 f8c6 	bl	800dccc <USB_HostInit>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e004      	b.n	8004b5c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b08b      	sub	sp, #44	@ 0x2c
 8004b68:	af04      	add	r7, sp, #16
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	70fb      	strb	r3, [r7, #3]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70bb      	strb	r3, [r7, #2]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004b7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b80:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_HCD_HC_Init+0x2c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e09d      	b.n	8004ccc <HAL_HCD_HC_Init+0x168>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3319      	adds	r3, #25
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3314      	adds	r3, #20
 8004bbc:	787a      	ldrb	r2, [r7, #1]
 8004bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3315      	adds	r3, #21
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3326      	adds	r3, #38	@ 0x26
 8004be4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	78bb      	ldrb	r3, [r7, #2]
 8004bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf2:	b2d8      	uxtb	r0, r3
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3316      	adds	r3, #22
 8004c02:	4602      	mov	r2, r0
 8004c04:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fbc8 	bl	80053a0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004c10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da0a      	bge.n	8004c2e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3317      	adds	r3, #23
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e009      	b.n	8004c42 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3317      	adds	r3, #23
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f009 f998 	bl	800df7c <USB_GetHostSpeed>
 8004c4c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10b      	bne.n	8004c6e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_HCD_HC_Init+0x10a>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2bbc      	cmp	r3, #188	@ 0xbc
 8004c68:	d901      	bls.n	8004c6e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004c6a:	23bc      	movs	r3, #188	@ 0xbc
 8004c6c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	b298      	uxth	r0, r3
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3328      	adds	r3, #40	@ 0x28
 8004c98:	4602      	mov	r2, r0
 8004c9a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	787c      	ldrb	r4, [r7, #1]
 8004ca6:	78ba      	ldrb	r2, [r7, #2]
 8004ca8:	78f9      	ldrb	r1, [r7, #3]
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4623      	mov	r3, r4
 8004cba:	f009 f987 	bl	800dfcc <USB_HC_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd90      	pop	{r4, r7, pc}

08004cd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_HCD_HC_Halt+0x1e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e00f      	b.n	8004d12 <HAL_HCD_HC_Halt+0x3e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f009 fd19 	bl	800e73a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	70fb      	strb	r3, [r7, #3]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70bb      	strb	r3, [r7, #2]
 8004d32:	4613      	mov	r3, r2
 8004d34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3317      	adds	r3, #23
 8004d46:	78ba      	ldrb	r2, [r7, #2]
 8004d48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3326      	adds	r3, #38	@ 0x26
 8004d5a:	787a      	ldrb	r2, [r7, #1]
 8004d5c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d5e:	7c3b      	ldrb	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d114      	bne.n	8004d8e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	332a      	adds	r3, #42	@ 0x2a
 8004d74:	2203      	movs	r2, #3
 8004d76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	3319      	adds	r3, #25
 8004d88:	7f3a      	ldrb	r2, [r7, #28]
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e009      	b.n	8004da2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	332a      	adds	r3, #42	@ 0x2a
 8004d9e:	2202      	movs	r2, #2
 8004da0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004da2:	787b      	ldrb	r3, [r7, #1]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	f200 8102 	bhi.w	8004fae <HAL_HCD_HC_SubmitRequest+0x292>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004f99 	.word	0x08004f99
 8004db8:	08004e85 	.word	0x08004e85
 8004dbc:	08004f0f 	.word	0x08004f0f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004dc0:	7c3b      	ldrb	r3, [r7, #16]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f040 80f5 	bne.w	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004dc8:	78bb      	ldrb	r3, [r7, #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d12d      	bne.n	8004e2a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004dce:	8b3b      	ldrh	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	333d      	adds	r3, #61	@ 0x3d
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	333d      	adds	r3, #61	@ 0x3d
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	332a      	adds	r3, #42	@ 0x2a
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004e12:	e0ce      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	332a      	adds	r3, #42	@ 0x2a
 8004e24:	2202      	movs	r2, #2
 8004e26:	701a      	strb	r2, [r3, #0]
      break;
 8004e28:	e0c3      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	331a      	adds	r3, #26
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	f040 80b8 	bne.w	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	333c      	adds	r3, #60	@ 0x3c
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	332a      	adds	r3, #42	@ 0x2a
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
      break;
 8004e6c:	e0a1      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	332a      	adds	r3, #42	@ 0x2a
 8004e7e:	2202      	movs	r2, #2
 8004e80:	701a      	strb	r2, [r3, #0]
      break;
 8004e82:	e096      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e84:	78bb      	ldrb	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d120      	bne.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	333d      	adds	r3, #61	@ 0x3d
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	332a      	adds	r3, #42	@ 0x2a
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004eb4:	e07e      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	332a      	adds	r3, #42	@ 0x2a
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e073      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	333c      	adds	r3, #60	@ 0x3c
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	332a      	adds	r3, #42	@ 0x2a
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
      break;
 8004ef6:	e05d      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	332a      	adds	r3, #42	@ 0x2a
 8004f08:	2202      	movs	r2, #2
 8004f0a:	701a      	strb	r2, [r3, #0]
      break;
 8004f0c:	e052      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f0e:	78bb      	ldrb	r3, [r7, #2]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d120      	bne.n	8004f56 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	333d      	adds	r3, #61	@ 0x3d
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	332a      	adds	r3, #42	@ 0x2a
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f3e:	e039      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	332a      	adds	r3, #42	@ 0x2a
 8004f50:	2202      	movs	r2, #2
 8004f52:	701a      	strb	r2, [r3, #0]
      break;
 8004f54:	e02e      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	333c      	adds	r3, #60	@ 0x3c
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	332a      	adds	r3, #42	@ 0x2a
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
      break;
 8004f80:	e018      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	332a      	adds	r3, #42	@ 0x2a
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e00d      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	332a      	adds	r3, #42	@ 0x2a
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
      break;
 8004fac:	e002      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004fb2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	332c      	adds	r3, #44	@ 0x2c
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	8b39      	ldrh	r1, [r7, #24]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3334      	adds	r3, #52	@ 0x34
 8004fda:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	334c      	adds	r3, #76	@ 0x4c
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3338      	adds	r3, #56	@ 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	3315      	adds	r3, #21
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	334d      	adds	r3, #77	@ 0x4d
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	3310      	adds	r3, #16
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	799b      	ldrb	r3, [r3, #6]
 8005046:	461a      	mov	r2, r3
 8005048:	f009 f8ec 	bl	800e224 <USB_HC_StartXfer>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop

08005058 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f008 fdec 	bl	800dc4c <USB_GetMode>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	f040 80fb 	bne.w	8005272 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f008 fdaf 	bl	800dbe4 <USB_ReadInterrupts>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80f1 	beq.w	8005270 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f008 fda6 	bl	800dbe4 <USB_ReadInterrupts>
 8005098:	4603      	mov	r3, r0
 800509a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800509e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050a2:	d104      	bne.n	80050ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80050ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 fd96 	bl	800dbe4 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c2:	d104      	bne.n	80050ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f008 fd86 	bl	800dbe4 <USB_ReadInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e2:	d104      	bne.n	80050ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f008 fd76 	bl	800dbe4 <USB_ReadInterrupts>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2202      	movs	r2, #2
 8005108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f008 fd68 	bl	800dbe4 <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800511a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800511e:	d120      	bne.n	8005162 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005128:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800513a:	2110      	movs	r1, #16
 800513c:	6938      	ldr	r0, [r7, #16]
 800513e:	f008 fc5b 	bl	800d9f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005142:	6938      	ldr	r0, [r7, #16]
 8005144:	f008 fc8a 	bl	800da5c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7a5b      	ldrb	r3, [r3, #9]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d105      	bne.n	800515c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2101      	movs	r1, #1
 8005156:	4618      	mov	r0, r3
 8005158:	f008 fe70 	bl	800de3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f00f f8d7 	bl	8014310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f008 fd3c 	bl	800dbe4 <USB_ReadInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005176:	d102      	bne.n	800517e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 fd33 	bl	8006be4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f008 fd2e 	bl	800dbe4 <USB_ReadInterrupts>
 8005188:	4603      	mov	r3, r0
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b08      	cmp	r3, #8
 8005190:	d106      	bne.n	80051a0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f00f f8a0 	bl	80142d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2208      	movs	r2, #8
 800519e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f008 fd1d 	bl	800dbe4 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051b4:	d139      	bne.n	800522a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f009 faac 	bl	800e718 <USB_HC_ReadInterrupt>
 80051c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e025      	b.n	8005214 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d018      	beq.n	800520e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f2:	d106      	bne.n	8005202 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f905 	bl	800540a <HCD_HC_IN_IRQHandler>
 8005200:	e005      	b.n	800520e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff67 	bl	80060dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	795b      	ldrb	r3, [r3, #5]
 8005218:	461a      	mov	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4293      	cmp	r3, r2
 800521e:	d3d3      	bcc.n	80051c8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f008 fcd8 	bl	800dbe4 <USB_ReadInterrupts>
 8005234:	4603      	mov	r3, r0
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b10      	cmp	r3, #16
 800523c:	d101      	bne.n	8005242 <HAL_HCD_IRQHandler+0x1ea>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_HCD_IRQHandler+0x1ec>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d014      	beq.n	8005272 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0210 	bic.w	r2, r2, #16
 8005256:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 fbe4 	bl	8006a26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0210 	orr.w	r2, r2, #16
 800526c:	619a      	str	r2, [r3, #24]
 800526e:	e000      	b.n	8005272 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005270:	bf00      	nop
    }
  }
}
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_HCD_Start+0x16>
 800528a:	2302      	movs	r3, #2
 800528c:	e013      	b.n	80052b6 <HAL_HCD_Start+0x3e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f008 fe34 	bl	800df0a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f008 fb38 	bl	800d91c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_HCD_Stop+0x16>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e00d      	b.n	80052f0 <HAL_HCD_Stop+0x32>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f009 fb87 	bl	800e9f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f008 fdd6 	bl	800deb6 <USB_ResetPort>
 800530a:	4603      	mov	r3, r0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334c      	adds	r3, #76	@ 0x4c
 8005330:	781b      	ldrb	r3, [r3, #0]
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3338      	adds	r3, #56	@ 0x38
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f008 fe18 	bl	800dfaa <USB_GetCurrentFrame>
 800537a:	4603      	mov	r3, r0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f008 fdf3 	bl	800df7c <USB_GetHostSpeed>
 8005396:	4603      	mov	r3, r0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	331a      	adds	r3, #26
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	331b      	adds	r3, #27
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3325      	adds	r3, #37	@ 0x25
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3324      	adds	r3, #36	@ 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f008 fbee 	bl	800dc0a <USB_ReadChInterrupts>
 800542e:	4603      	mov	r3, r0
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d11a      	bne.n	800546e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005444:	461a      	mov	r2, r3
 8005446:	2304      	movs	r3, #4
 8005448:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	334d      	adds	r3, #77	@ 0x4d
 800545a:	2207      	movs	r2, #7
 800545c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	4611      	mov	r1, r2
 8005466:	4618      	mov	r0, r3
 8005468:	f009 f967 	bl	800e73a <USB_HC_Halt>
 800546c:	e09e      	b.n	80055ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f008 fbc7 	bl	800dc0a <USB_ReadChInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d11b      	bne.n	80054c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005494:	461a      	mov	r2, r3
 8005496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800549a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	@ 0x4d
 80054ac:	2208      	movs	r2, #8
 80054ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f009 f93e 	bl	800e73a <USB_HC_Halt>
 80054be:	e075      	b.n	80055ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f008 fb9e 	bl	800dc0a <USB_ReadChInterrupts>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d11a      	bne.n	800550e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	2308      	movs	r3, #8
 80054e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	334d      	adds	r3, #77	@ 0x4d
 80054fa:	2206      	movs	r2, #6
 80054fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f009 f917 	bl	800e73a <USB_HC_Halt>
 800550c:	e04e      	b.n	80055ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f008 fb77 	bl	800dc0a <USB_ReadChInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005526:	d11b      	bne.n	8005560 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005534:	461a      	mov	r2, r3
 8005536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800553a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	334d      	adds	r3, #77	@ 0x4d
 800554c:	2209      	movs	r2, #9
 800554e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f009 f8ee 	bl	800e73a <USB_HC_Halt>
 800555e:	e025      	b.n	80055ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f008 fb4e 	bl	800dc0a <USB_ReadChInterrupts>
 800556e:	4603      	mov	r3, r0
 8005570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005574:	2b80      	cmp	r3, #128	@ 0x80
 8005576:	d119      	bne.n	80055ac <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005584:	461a      	mov	r2, r3
 8005586:	2380      	movs	r3, #128	@ 0x80
 8005588:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	334d      	adds	r3, #77	@ 0x4d
 800559a:	2207      	movs	r2, #7
 800559c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f009 f8c7 	bl	800e73a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f008 fb28 	bl	800dc0a <USB_ReadChInterrupts>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c4:	d112      	bne.n	80055ec <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f009 f8b3 	bl	800e73a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e0:	461a      	mov	r2, r3
 80055e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055e6:	6093      	str	r3, [r2, #8]
 80055e8:	f000 bd75 	b.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f008 fb08 	bl	800dc0a <USB_ReadChInterrupts>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 8128 	bne.w	8005856 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	2320      	movs	r3, #32
 8005616:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	331b      	adds	r3, #27
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d119      	bne.n	8005662 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	331b      	adds	r3, #27
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800565c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005660:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	799b      	ldrb	r3, [r3, #6]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01b      	beq.n	80056a2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3330      	adds	r3, #48	@ 0x30
 800567a:	6819      	ldr	r1, [r3, #0]
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	1ac9      	subs	r1, r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4403      	add	r3, r0
 800569e:	3338      	adds	r3, #56	@ 0x38
 80056a0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334d      	adds	r3, #77	@ 0x4d
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3344      	adds	r3, #68	@ 0x44
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d6:	461a      	mov	r2, r3
 80056d8:	2301      	movs	r3, #1
 80056da:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	3326      	adds	r3, #38	@ 0x26
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3326      	adds	r3, #38	@ 0x26
 8005702:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005704:	2b02      	cmp	r3, #2
 8005706:	d110      	bne.n	800572a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f009 f812 	bl	800e73a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005722:	461a      	mov	r2, r3
 8005724:	2310      	movs	r3, #16
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	e03d      	b.n	80057a6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3326      	adds	r3, #38	@ 0x26
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d00a      	beq.n	8005756 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	3326      	adds	r3, #38	@ 0x26
 8005750:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005752:	2b01      	cmp	r3, #1
 8005754:	d127      	bne.n	80057a6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	440a      	add	r2, r1
 800576c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005774:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	334c      	adds	r3, #76	@ 0x4c
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	334c      	adds	r3, #76	@ 0x4c
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f00e fdc3 	bl	801432c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	799b      	ldrb	r3, [r3, #6]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d13b      	bne.n	8005826 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80057ae:	78fa      	ldrb	r2, [r7, #3]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3338      	adds	r3, #56	@ 0x38
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4403      	add	r3, r0
 80057ce:	3328      	adds	r3, #40	@ 0x28
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	440b      	add	r3, r1
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4403      	add	r3, r0
 80057e4:	3328      	adds	r3, #40	@ 0x28
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8470 	beq.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	333c      	adds	r3, #60	@ 0x3c
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	f083 0301 	eor.w	r3, r3, #1
 800580e:	b2d8      	uxtb	r0, r3
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	333c      	adds	r3, #60	@ 0x3c
 800581e:	4602      	mov	r2, r0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	f000 bc58 	b.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	333c      	adds	r3, #60	@ 0x3c
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	b2d8      	uxtb	r0, r3
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	333c      	adds	r3, #60	@ 0x3c
 800584e:	4602      	mov	r2, r0
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	f000 bc40 	b.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f008 f9d3 	bl	800dc0a <USB_ReadChInterrupts>
 8005864:	4603      	mov	r3, r0
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d131      	bne.n	80058d2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587a:	461a      	mov	r2, r3
 800587c:	2320      	movs	r3, #32
 800587e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	331a      	adds	r3, #26
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	f040 841f 	bne.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	331b      	adds	r3, #27
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	334d      	adds	r3, #77	@ 0x4d
 80058bc:	2203      	movs	r2, #3
 80058be:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	4611      	mov	r1, r2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f008 ff36 	bl	800e73a <USB_HC_Halt>
 80058ce:	f000 bc02 	b.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f008 f995 	bl	800dc0a <USB_ReadChInterrupts>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	f040 8305 	bne.w	8005ef6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f8:	461a      	mov	r2, r3
 80058fa:	2302      	movs	r3, #2
 80058fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	334d      	adds	r3, #77	@ 0x4d
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d114      	bne.n	800593e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	334d      	adds	r3, #77	@ 0x4d
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	334c      	adds	r3, #76	@ 0x4c
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e2cc      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	334d      	adds	r3, #77	@ 0x4d
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d114      	bne.n	800597e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	334d      	adds	r3, #77	@ 0x4d
 8005964:	2202      	movs	r2, #2
 8005966:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	334c      	adds	r3, #76	@ 0x4c
 8005978:	2205      	movs	r2, #5
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e2ac      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	334d      	adds	r3, #77	@ 0x4d
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b07      	cmp	r3, #7
 8005992:	d00b      	beq.n	80059ac <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	334d      	adds	r3, #77	@ 0x4d
 80059a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80059a6:	2b09      	cmp	r3, #9
 80059a8:	f040 80a6 	bne.w	8005af8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	334d      	adds	r3, #77	@ 0x4d
 80059bc:	2202      	movs	r2, #2
 80059be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	3344      	adds	r3, #68	@ 0x44
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4403      	add	r3, r0
 80059e0:	3344      	adds	r3, #68	@ 0x44
 80059e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3344      	adds	r3, #68	@ 0x44
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d943      	bls.n	8005a82 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	3344      	adds	r3, #68	@ 0x44
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	331a      	adds	r3, #26
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d123      	bne.n	8005a6c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	331b      	adds	r3, #27
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	331c      	adds	r3, #28
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	334c      	adds	r3, #76	@ 0x4c
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a80:	e229      	b.n	8005ed6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	334c      	adds	r3, #76	@ 0x4c
 8005a92:	2202      	movs	r2, #2
 8005a94:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3326      	adds	r3, #38	@ 0x26
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3326      	adds	r3, #38	@ 0x26
 8005abc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	f040 8209 	bne.w	8005ed6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ada:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ae2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af0:	461a      	mov	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005af6:	e1ee      	b.n	8005ed6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	334d      	adds	r3, #77	@ 0x4d
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	f040 80c8 	bne.w	8005ca0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	334d      	adds	r3, #77	@ 0x4d
 8005b20:	2202      	movs	r2, #2
 8005b22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	331b      	adds	r3, #27
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f040 81ce 	bne.w	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b3c:	78fa      	ldrb	r2, [r7, #3]
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3326      	adds	r3, #38	@ 0x26
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d16b      	bne.n	8005c2a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3348      	adds	r3, #72	@ 0x48
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1c59      	adds	r1, r3, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4403      	add	r3, r0
 8005b72:	3348      	adds	r3, #72	@ 0x48
 8005b74:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3348      	adds	r3, #72	@ 0x48
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d943      	bls.n	8005c14 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3348      	adds	r3, #72	@ 0x48
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	331b      	adds	r3, #27
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3344      	adds	r3, #68	@ 0x44
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d809      	bhi.n	8005bde <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	331c      	adds	r3, #28
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	334c      	adds	r3, #76	@ 0x4c
 8005c0e:	2204      	movs	r2, #4
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e014      	b.n	8005c3e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	334c      	adds	r3, #76	@ 0x4c
 8005c24:	2202      	movs	r2, #2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e009      	b.n	8005c3e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	334c      	adds	r3, #76	@ 0x4c
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3326      	adds	r3, #38	@ 0x26
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3326      	adds	r3, #38	@ 0x26
 8005c64:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	f040 8136 	bne.w	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c82:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e11b      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	334d      	adds	r3, #77	@ 0x4d
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	f040 8081 	bne.w	8005dba <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	334d      	adds	r3, #77	@ 0x4d
 8005cc8:	2202      	movs	r2, #2
 8005cca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	331b      	adds	r3, #27
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	f040 80fa 	bne.w	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	334c      	adds	r3, #76	@ 0x4c
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d16:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d36:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d52:	f023 0320 	bic.w	r3, r3, #32
 8005d56:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	3326      	adds	r3, #38	@ 0x26
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3326      	adds	r3, #38	@ 0x26
 8005d7e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	f040 80a9 	bne.w	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005da4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	e08e      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	334d      	adds	r3, #77	@ 0x4d
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d143      	bne.n	8005e58 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	334d      	adds	r3, #77	@ 0x4d
 8005de0:	2202      	movs	r2, #2
 8005de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	4613      	mov	r3, r2
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	334c      	adds	r3, #76	@ 0x4c
 8005df4:	2202      	movs	r2, #2
 8005df6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	3326      	adds	r3, #38	@ 0x26
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3326      	adds	r3, #38	@ 0x26
 8005e1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d159      	bne.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e3a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e42:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e50:	461a      	mov	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e03f      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	334d      	adds	r3, #77	@ 0x4d
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d126      	bne.n	8005ebc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	334d      	adds	r3, #77	@ 0x4d
 8005e7e:	2202      	movs	r2, #2
 8005e80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3344      	adds	r3, #68	@ 0x44
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4403      	add	r3, r0
 8005ea2:	3344      	adds	r3, #68	@ 0x44
 8005ea4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	334c      	adds	r3, #76	@ 0x4c
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e00d      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	334d      	adds	r3, #77	@ 0x4d
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	f000 8100 	beq.w	80060d4 <HCD_HC_IN_IRQHandler+0xcca>
 8005ed4:	e000      	b.n	8005ed8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ed6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	334c      	adds	r3, #76	@ 0x4c
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f00e fa1c 	bl	801432c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ef4:	e0ef      	b.n	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f007 fe83 	bl	800dc0a <USB_ReadChInterrupts>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d12f      	bne.n	8005f6e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2340      	movs	r3, #64	@ 0x40
 8005f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	334d      	adds	r3, #77	@ 0x4d
 8005f30:	2205      	movs	r2, #5
 8005f32:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	331a      	adds	r3, #26
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	3344      	adds	r3, #68	@ 0x44
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	4611      	mov	r1, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f008 fbe7 	bl	800e73a <USB_HC_Halt>
 8005f6c:	e0b3      	b.n	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	78fa      	ldrb	r2, [r7, #3]
 8005f74:	4611      	mov	r1, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f007 fe47 	bl	800dc0a <USB_ReadChInterrupts>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	f040 80a7 	bne.w	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	3326      	adds	r3, #38	@ 0x26
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d11b      	bne.n	8005fd6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3344      	adds	r3, #68	@ 0x44
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	334d      	adds	r3, #77	@ 0x4d
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f008 fbb3 	bl	800e73a <USB_HC_Halt>
 8005fd4:	e03f      	b.n	8006056 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3326      	adds	r3, #38	@ 0x26
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3326      	adds	r3, #38	@ 0x26
 8005ffc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d129      	bne.n	8006056 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3344      	adds	r3, #68	@ 0x44
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	799b      	ldrb	r3, [r3, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HCD_HC_IN_IRQHandler+0xc2a>
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	331b      	adds	r3, #27
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d110      	bne.n	8006056 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	334d      	adds	r3, #77	@ 0x4d
 8006044:	2204      	movs	r2, #4
 8006046:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f008 fb72 	bl	800e73a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	331b      	adds	r3, #27
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d129      	bne.n	80060c0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	331b      	adds	r3, #27
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	440a      	add	r2, r1
 8006096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800609a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ba:	f043 0320 	orr.w	r3, r3, #32
 80060be:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060cc:	461a      	mov	r2, r3
 80060ce:	2310      	movs	r3, #16
 80060d0:	6093      	str	r3, [r2, #8]
 80060d2:	e000      	b.n	80060d6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80060d4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f007 fd85 	bl	800dc0a <USB_ReadChInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d11b      	bne.n	8006142 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006116:	461a      	mov	r2, r3
 8006118:	2304      	movs	r3, #4
 800611a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	334d      	adds	r3, #77	@ 0x4d
 800612c:	2207      	movs	r2, #7
 800612e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f008 fafe 	bl	800e73a <USB_HC_Halt>
 800613e:	f000 bc6f 	b.w	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f007 fd5d 	bl	800dc0a <USB_ReadChInterrupts>
 8006150:	4603      	mov	r3, r0
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 8082 	bne.w	8006260 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006168:	461a      	mov	r2, r3
 800616a:	2320      	movs	r3, #32
 800616c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3319      	adds	r3, #25
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d124      	bne.n	80061ce <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	3319      	adds	r3, #25
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	334c      	adds	r3, #76	@ 0x4c
 80061a8:	2202      	movs	r2, #2
 80061aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	334d      	adds	r3, #77	@ 0x4d
 80061bc:	2203      	movs	r2, #3
 80061be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f008 fab6 	bl	800e73a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	331a      	adds	r3, #26
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 841d 	bne.w	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	331b      	adds	r3, #27
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 8411 	bne.w	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3326      	adds	r3, #38	@ 0x26
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d009      	beq.n	8006228 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	331b      	adds	r3, #27
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	334d      	adds	r3, #77	@ 0x4d
 8006238:	2203      	movs	r2, #3
 800623a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f008 fa78 	bl	800e73a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800624a:	78fa      	ldrb	r2, [r7, #3]
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	3344      	adds	r3, #68	@ 0x44
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e3df      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f007 fcce 	bl	800dc0a <USB_ReadChInterrupts>
 800626e:	4603      	mov	r3, r0
 8006270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006278:	d111      	bne.n	800629e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006286:	461a      	mov	r2, r3
 8006288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800628c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f008 fa4f 	bl	800e73a <USB_HC_Halt>
 800629c:	e3c0      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f007 fcaf 	bl	800dc0a <USB_ReadChInterrupts>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d168      	bne.n	8006388 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	3344      	adds	r3, #68	@ 0x44
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f007 fc99 	bl	800dc0a <USB_ReadChInterrupts>
 80062d8:	4603      	mov	r3, r0
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d112      	bne.n	8006308 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3319      	adds	r3, #25
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006302:	461a      	mov	r2, r3
 8006304:	2340      	movs	r3, #64	@ 0x40
 8006306:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	331b      	adds	r3, #27
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d019      	beq.n	8006352 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	331b      	adds	r3, #27
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800634c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006350:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	2301      	movs	r3, #1
 8006362:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	334d      	adds	r3, #77	@ 0x4d
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f008 f9da 	bl	800e73a <USB_HC_Halt>
 8006386:	e34b      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	4611      	mov	r1, r2
 8006390:	4618      	mov	r0, r3
 8006392:	f007 fc3a 	bl	800dc0a <USB_ReadChInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639c:	2b40      	cmp	r3, #64	@ 0x40
 800639e:	d139      	bne.n	8006414 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	334d      	adds	r3, #77	@ 0x4d
 80063b0:	2205      	movs	r2, #5
 80063b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	331a      	adds	r3, #26
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	3319      	adds	r3, #25
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	3344      	adds	r3, #68	@ 0x44
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f008 f99d 	bl	800e73a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640c:	461a      	mov	r2, r3
 800640e:	2340      	movs	r3, #64	@ 0x40
 8006410:	6093      	str	r3, [r2, #8]
 8006412:	e305      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f007 fbf4 	bl	800dc0a <USB_ReadChInterrupts>
 8006422:	4603      	mov	r3, r0
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d11a      	bne.n	8006462 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006438:	461a      	mov	r2, r3
 800643a:	2308      	movs	r3, #8
 800643c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	334d      	adds	r3, #77	@ 0x4d
 800644e:	2206      	movs	r2, #6
 8006450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f008 f96d 	bl	800e73a <USB_HC_Halt>
 8006460:	e2de      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f007 fbcd 	bl	800dc0a <USB_ReadChInterrupts>
 8006470:	4603      	mov	r3, r0
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d144      	bne.n	8006504 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3344      	adds	r3, #68	@ 0x44
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	334d      	adds	r3, #77	@ 0x4d
 800649e:	2204      	movs	r2, #4
 80064a0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	3319      	adds	r3, #25
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d114      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3318      	adds	r3, #24
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3319      	adds	r3, #25
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f008 f925 	bl	800e73a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fc:	461a      	mov	r2, r3
 80064fe:	2310      	movs	r3, #16
 8006500:	6093      	str	r3, [r2, #8]
 8006502:	e28d      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f007 fb7c 	bl	800dc0a <USB_ReadChInterrupts>
 8006512:	4603      	mov	r3, r0
 8006514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006518:	2b80      	cmp	r3, #128	@ 0x80
 800651a:	d169      	bne.n	80065f0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	799b      	ldrb	r3, [r3, #6]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d111      	bne.n	8006548 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4613      	mov	r3, r2
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	334d      	adds	r3, #77	@ 0x4d
 8006534:	2207      	movs	r2, #7
 8006536:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f008 f8fa 	bl	800e73a <USB_HC_Halt>
 8006546:	e049      	b.n	80065dc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	3344      	adds	r3, #68	@ 0x44
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4403      	add	r3, r0
 8006568:	3344      	adds	r3, #68	@ 0x44
 800656a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800656c:	78fa      	ldrb	r2, [r7, #3]
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	3344      	adds	r3, #68	@ 0x44
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d922      	bls.n	80065c8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3344      	adds	r3, #68	@ 0x44
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	334c      	adds	r3, #76	@ 0x4c
 80065a6:	2204      	movs	r2, #4
 80065a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	334c      	adds	r3, #76	@ 0x4c
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f00d feb3 	bl	801432c <HAL_HCD_HC_NotifyURBChange_Callback>
 80065c6:	e009      	b.n	80065dc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	334c      	adds	r3, #76	@ 0x4c
 80065d8:	2202      	movs	r2, #2
 80065da:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e8:	461a      	mov	r2, r3
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	6093      	str	r3, [r2, #8]
 80065ee:	e217      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f007 fb06 	bl	800dc0a <USB_ReadChInterrupts>
 80065fe:	4603      	mov	r3, r0
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006608:	d11b      	bne.n	8006642 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	334d      	adds	r3, #77	@ 0x4d
 800661a:	2209      	movs	r2, #9
 800661c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f008 f887 	bl	800e73a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	461a      	mov	r2, r3
 800663a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663e:	6093      	str	r3, [r2, #8]
 8006640:	e1ee      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	4611      	mov	r1, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f007 fadd 	bl	800dc0a <USB_ReadChInterrupts>
 8006650:	4603      	mov	r3, r0
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b02      	cmp	r3, #2
 8006658:	f040 81df 	bne.w	8006a1a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006668:	461a      	mov	r2, r3
 800666a:	2302      	movs	r3, #2
 800666c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	334d      	adds	r3, #77	@ 0x4d
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b01      	cmp	r3, #1
 8006682:	f040 8093 	bne.w	80067ac <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	334d      	adds	r3, #77	@ 0x4d
 8006696:	2202      	movs	r2, #2
 8006698:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	334c      	adds	r3, #76	@ 0x4c
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3326      	adds	r3, #38	@ 0x26
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d00b      	beq.n	80066dc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	3326      	adds	r3, #38	@ 0x26
 80066d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	f040 8190 	bne.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	799b      	ldrb	r3, [r3, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d115      	bne.n	8006710 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	333d      	adds	r3, #61	@ 0x3d
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	f083 0301 	eor.w	r3, r3, #1
 80066fc:	b2d8      	uxtb	r0, r3
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	333d      	adds	r3, #61	@ 0x3d
 800670c:	4602      	mov	r2, r0
 800670e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	799b      	ldrb	r3, [r3, #6]
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 8171 	bne.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	3334      	adds	r3, #52	@ 0x34
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8165 	beq.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3334      	adds	r3, #52	@ 0x34
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4403      	add	r3, r0
 8006752:	3328      	adds	r3, #40	@ 0x28
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	440b      	add	r3, r1
 8006758:	1e59      	subs	r1, r3, #1
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4403      	add	r3, r0
 8006768:	3328      	adds	r3, #40	@ 0x28
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006770:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 813f 	beq.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	333d      	adds	r3, #61	@ 0x3d
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	78fa      	ldrb	r2, [r7, #3]
 8006792:	f083 0301 	eor.w	r3, r3, #1
 8006796:	b2d8      	uxtb	r0, r3
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	333d      	adds	r3, #61	@ 0x3d
 80067a6:	4602      	mov	r2, r0
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	e127      	b.n	80069fc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	334d      	adds	r3, #77	@ 0x4d
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d120      	bne.n	8006804 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067c2:	78fa      	ldrb	r2, [r7, #3]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	334d      	adds	r3, #77	@ 0x4d
 80067d2:	2202      	movs	r2, #2
 80067d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	331b      	adds	r3, #27
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 8107 	bne.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	334c      	adds	r3, #76	@ 0x4c
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e0fb      	b.n	80069fc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	334d      	adds	r3, #77	@ 0x4d
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d13a      	bne.n	8006890 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	334d      	adds	r3, #77	@ 0x4d
 800682a:	2202      	movs	r2, #2
 800682c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	334c      	adds	r3, #76	@ 0x4c
 800683e:	2202      	movs	r2, #2
 8006840:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	331b      	adds	r3, #27
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 80d1 	bne.w	80069fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	331b      	adds	r3, #27
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	440a      	add	r2, r1
 8006884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	e0b5      	b.n	80069fc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006890:	78fa      	ldrb	r2, [r7, #3]
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	1a9b      	subs	r3, r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	334d      	adds	r3, #77	@ 0x4d
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d114      	bne.n	80068d0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	334d      	adds	r3, #77	@ 0x4d
 80068b6:	2202      	movs	r2, #2
 80068b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	334c      	adds	r3, #76	@ 0x4c
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e095      	b.n	80069fc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	334d      	adds	r3, #77	@ 0x4d
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b06      	cmp	r3, #6
 80068e4:	d114      	bne.n	8006910 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	334d      	adds	r3, #77	@ 0x4d
 80068f6:	2202      	movs	r2, #2
 80068f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	334c      	adds	r3, #76	@ 0x4c
 800690a:	2205      	movs	r2, #5
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	e075      	b.n	80069fc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	334d      	adds	r3, #77	@ 0x4d
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b07      	cmp	r3, #7
 8006924:	d00a      	beq.n	800693c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	334d      	adds	r3, #77	@ 0x4d
 8006936:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006938:	2b09      	cmp	r3, #9
 800693a:	d170      	bne.n	8006a1e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	334d      	adds	r3, #77	@ 0x4d
 800694c:	2202      	movs	r2, #2
 800694e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	3344      	adds	r3, #68	@ 0x44
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4403      	add	r3, r0
 8006970:	3344      	adds	r3, #68	@ 0x44
 8006972:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3344      	adds	r3, #68	@ 0x44
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d914      	bls.n	80069b4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800698a:	78fa      	ldrb	r2, [r7, #3]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3344      	adds	r3, #68	@ 0x44
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	334c      	adds	r3, #76	@ 0x4c
 80069ae:	2204      	movs	r2, #4
 80069b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069b2:	e022      	b.n	80069fa <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	334c      	adds	r3, #76	@ 0x4c
 80069c4:	2202      	movs	r2, #2
 80069c6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f4:	461a      	mov	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	334c      	adds	r3, #76	@ 0x4c
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f00d fc8a 	bl	801432c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a18:	e002      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006a1e:	bf00      	nop
  }
}
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b08a      	sub	sp, #40	@ 0x28
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	0c5b      	lsrs	r3, r3, #17
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d004      	beq.n	8006a6c <HCD_RXQLVL_IRQHandler+0x46>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	f000 80b6 	beq.w	8006bd6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a6a:	e0b7      	b.n	8006bdc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80b3 	beq.w	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	332c      	adds	r3, #44	@ 0x2c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80a7 	beq.w	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4613      	mov	r3, r2
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3338      	adds	r3, #56	@ 0x38
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	18d1      	adds	r1, r2, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4403      	add	r3, r0
 8006ab0:	3334      	adds	r3, #52	@ 0x34
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	f200 8083 	bhi.w	8006bc0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	332c      	adds	r3, #44	@ 0x2c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f007 f82d 	bl	800db34 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	332c      	adds	r3, #44	@ 0x2c
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	18d1      	adds	r1, r2, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4613      	mov	r3, r2
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4403      	add	r3, r0
 8006afe:	332c      	adds	r3, #44	@ 0x2c
 8006b00:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4613      	mov	r3, r2
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	3338      	adds	r3, #56	@ 0x38
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	18d1      	adds	r1, r2, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4403      	add	r3, r0
 8006b26:	3338      	adds	r3, #56	@ 0x38
 8006b28:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	0cdb      	lsrs	r3, r3, #19
 8006b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4613      	mov	r3, r2
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	3328      	adds	r3, #40	@ 0x28
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d13f      	bne.n	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d03c      	beq.n	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4613      	mov	r3, r2
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	333c      	adds	r3, #60	@ 0x3c
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2d8      	uxtb	r0, r3
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	333c      	adds	r3, #60	@ 0x3c
 8006bba:	4602      	mov	r2, r0
 8006bbc:	701a      	strb	r2, [r3, #0]
      break;
 8006bbe:	e00c      	b.n	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	334c      	adds	r3, #76	@ 0x4c
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	701a      	strb	r2, [r3, #0]
      break;
 8006bd4:	e001      	b.n	8006bda <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006bda:	bf00      	nop
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3728      	adds	r7, #40	@ 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d10b      	bne.n	8006c34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d102      	bne.n	8006c2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f00d fb64 	bl	80142f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d132      	bne.n	8006ca4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f043 0308 	orr.w	r3, r3, #8
 8006c44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d126      	bne.n	8006c9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7a5b      	ldrb	r3, [r3, #9]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d113      	bne.n	8006c80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006c5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c62:	d106      	bne.n	8006c72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f007 f8e6 	bl	800de3c <USB_InitFSLSPClkSel>
 8006c70:	e011      	b.n	8006c96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2101      	movs	r1, #1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f007 f8df 	bl	800de3c <USB_InitFSLSPClkSel>
 8006c7e:	e00a      	b.n	8006c96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	79db      	ldrb	r3, [r3, #7]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006c94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f00d fb5a 	bl	8014350 <HAL_HCD_PortEnabled_Callback>
 8006c9c:	e002      	b.n	8006ca4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f00d fb64 	bl	801436c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d103      	bne.n	8006cb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f043 0320 	orr.w	r3, r3, #32
 8006cb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6013      	str	r3, [r2, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e08b      	b.n	8006df6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa faac 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2224      	movs	r2, #36	@ 0x24
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0201 	bic.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d107      	bne.n	8006d46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	e006      	b.n	8006d54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d108      	bne.n	8006d6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	e007      	b.n	8006d7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6859      	ldr	r1, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <HAL_I2C_Init+0x134>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	02008000 	.word	0x02008000

08006e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d138      	bne.n	8006e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e032      	b.n	8006e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	@ 0x24
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e000      	b.n	8006e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e8c:	2302      	movs	r3, #2
  }
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d139      	bne.n	8006f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e033      	b.n	8006f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	@ 0x24
 8006eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0bf      	b.n	80070c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa faa2 	bl	80014a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006f76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80070d0 <HAL_LTDC_Init+0x19c>)
 8006fa8:	400b      	ands	r3, r1
 8006faa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6899      	ldr	r1, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68d9      	ldr	r1, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80070d0 <HAL_LTDC_Init+0x19c>)
 8006fd6:	400b      	ands	r3, r1
 8006fd8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68d9      	ldr	r1, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1a      	ldr	r2, [r3, #32]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6919      	ldr	r1, [r3, #16]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b33      	ldr	r3, [pc, #204]	@ (80070d0 <HAL_LTDC_Init+0x19c>)
 8007004:	400b      	ands	r3, r1
 8007006:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6919      	ldr	r1, [r3, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6959      	ldr	r1, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <HAL_LTDC_Init+0x19c>)
 8007032:	400b      	ands	r3, r1
 8007034:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6959      	ldr	r1, [r3, #20]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0206 	orr.w	r2, r2, #6
 80070a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	f000f800 	.word	0xf000f800

080070d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d023      	beq.n	800713e <HAL_LTDC_IRQHandler+0x6a>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0204 	bic.w	r2, r2, #4
 800710e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2204      	movs	r2, #4
 8007116:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f86f 	bl	800721c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d023      	beq.n	8007190 <HAL_LTDC_IRQHandler+0xbc>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01e      	beq.n	8007190 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0202 	bic.w	r2, r2, #2
 8007160:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2202      	movs	r2, #2
 8007168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007170:	f043 0202 	orr.w	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2204      	movs	r2, #4
 800717e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f846 	bl	800721c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <HAL_LTDC_IRQHandler+0xfe>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d016      	beq.n	80071d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0201 	bic.w	r2, r2, #1
 80071b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f82f 	bl	8007230 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01b      	beq.n	8007214 <HAL_LTDC_IRQHandler+0x140>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0208 	bic.w	r2, r2, #8
 80071f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2208      	movs	r2, #8
 80071fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f818 	bl	8007244 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007258:	b5b0      	push	{r4, r5, r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_LTDC_ConfigLayer+0x1a>
 800726e:	2302      	movs	r3, #2
 8007270:	e02c      	b.n	80072cc <HAL_LTDC_ConfigLayer+0x74>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2134      	movs	r1, #52	@ 0x34
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	4413      	add	r3, r2
 800728e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4614      	mov	r4, r2
 8007296:	461d      	mov	r5, r3
 8007298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800729e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f811 	bl	80072d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2201      	movs	r2, #1
 80072b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bdb0      	pop	{r4, r5, r7, pc}

080072d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b089      	sub	sp, #36	@ 0x24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f0:	4413      	add	r3, r2
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	4413      	add	r3, r2
 8007302:	3384      	adds	r3, #132	@ 0x84
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	4611      	mov	r1, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	01d2      	lsls	r2, r2, #7
 8007310:	440a      	add	r2, r1
 8007312:	3284      	adds	r2, #132	@ 0x84
 8007314:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007318:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800732a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800732c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4619      	mov	r1, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	440b      	add	r3, r1
 800733a:	3384      	adds	r3, #132	@ 0x84
 800733c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007342:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007352:	4413      	add	r3, r2
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	01db      	lsls	r3, r3, #7
 8007362:	4413      	add	r3, r2
 8007364:	3384      	adds	r3, #132	@ 0x84
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	4611      	mov	r1, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	01d2      	lsls	r2, r2, #7
 8007372:	440a      	add	r2, r1
 8007374:	3284      	adds	r2, #132	@ 0x84
 8007376:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800737a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738a:	4413      	add	r3, r2
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	01db      	lsls	r3, r3, #7
 8007398:	440b      	add	r3, r1
 800739a:	3384      	adds	r3, #132	@ 0x84
 800739c:	4619      	mov	r1, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	01db      	lsls	r3, r3, #7
 80073ae:	4413      	add	r3, r2
 80073b0:	3384      	adds	r3, #132	@ 0x84
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	4611      	mov	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	01d2      	lsls	r2, r2, #7
 80073be:	440a      	add	r2, r1
 80073c0:	3284      	adds	r2, #132	@ 0x84
 80073c2:	f023 0307 	bic.w	r3, r3, #7
 80073c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	01db      	lsls	r3, r3, #7
 80073d2:	4413      	add	r3, r2
 80073d4:	3384      	adds	r3, #132	@ 0x84
 80073d6:	461a      	mov	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	061b      	lsls	r3, r3, #24
 80073f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	@ 0x84
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	01db      	lsls	r3, r3, #7
 8007414:	4413      	add	r3, r2
 8007416:	3384      	adds	r3, #132	@ 0x84
 8007418:	461a      	mov	r2, r3
 800741a:	2300      	movs	r3, #0
 800741c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007424:	461a      	mov	r2, r3
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	431a      	orrs	r2, r3
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	440b      	add	r3, r1
 800743a:	3384      	adds	r3, #132	@ 0x84
 800743c:	4619      	mov	r1, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	01db      	lsls	r3, r3, #7
 800744e:	4413      	add	r3, r2
 8007450:	3384      	adds	r3, #132	@ 0x84
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	4611      	mov	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	01d2      	lsls	r2, r2, #7
 800745e:	440a      	add	r2, r1
 8007460:	3284      	adds	r2, #132	@ 0x84
 8007462:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007466:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	4413      	add	r3, r2
 8007474:	3384      	adds	r3, #132	@ 0x84
 8007476:	461a      	mov	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	01db      	lsls	r3, r3, #7
 8007488:	4413      	add	r3, r2
 800748a:	3384      	adds	r3, #132	@ 0x84
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	01db      	lsls	r3, r3, #7
 8007498:	440b      	add	r3, r1
 800749a:	3384      	adds	r3, #132	@ 0x84
 800749c:	4619      	mov	r1, r3
 800749e:	4b58      	ldr	r3, [pc, #352]	@ (8007600 <LTDC_SetConfig+0x32c>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	6809      	ldr	r1, [r1, #0]
 80074b0:	4608      	mov	r0, r1
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	01c9      	lsls	r1, r1, #7
 80074b6:	4401      	add	r1, r0
 80074b8:	3184      	adds	r1, #132	@ 0x84
 80074ba:	4313      	orrs	r3, r2
 80074bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	4413      	add	r3, r2
 80074ca:	3384      	adds	r3, #132	@ 0x84
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	4413      	add	r3, r2
 80074da:	3384      	adds	r3, #132	@ 0x84
 80074dc:	461a      	mov	r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	4413      	add	r3, r2
 80074ee:	3384      	adds	r3, #132	@ 0x84
 80074f0:	461a      	mov	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007500:	2304      	movs	r3, #4
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	e01b      	b.n	800753e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d102      	bne.n	8007514 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800750e:	2303      	movs	r3, #3
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e014      	b.n	800753e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b04      	cmp	r3, #4
 800751a:	d00b      	beq.n	8007534 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007520:	2b02      	cmp	r3, #2
 8007522:	d007      	beq.n	8007534 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007528:	2b03      	cmp	r3, #3
 800752a:	d003      	beq.n	8007534 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007530:	2b07      	cmp	r3, #7
 8007532:	d102      	bne.n	800753a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007534:	2302      	movs	r3, #2
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e001      	b.n	800753e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800753a:	2301      	movs	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	01db      	lsls	r3, r3, #7
 8007548:	4413      	add	r3, r2
 800754a:	3384      	adds	r3, #132	@ 0x84
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	4611      	mov	r1, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	01d2      	lsls	r2, r2, #7
 8007558:	440a      	add	r2, r1
 800755a:	3284      	adds	r2, #132	@ 0x84
 800755c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007560:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	fb02 f303 	mul.w	r3, r2, r3
 800756c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6859      	ldr	r1, [r3, #4]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1acb      	subs	r3, r1, r3
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007580:	68f9      	ldr	r1, [r7, #12]
 8007582:	6809      	ldr	r1, [r1, #0]
 8007584:	4608      	mov	r0, r1
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	01c9      	lsls	r1, r1, #7
 800758a:	4401      	add	r1, r0
 800758c:	3184      	adds	r1, #132	@ 0x84
 800758e:	4313      	orrs	r3, r2
 8007590:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	4413      	add	r3, r2
 800759e:	3384      	adds	r3, #132	@ 0x84
 80075a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	01db      	lsls	r3, r3, #7
 80075ac:	440b      	add	r3, r1
 80075ae:	3384      	adds	r3, #132	@ 0x84
 80075b0:	4619      	mov	r1, r3
 80075b2:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <LTDC_SetConfig+0x330>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	01db      	lsls	r3, r3, #7
 80075c2:	4413      	add	r3, r2
 80075c4:	3384      	adds	r3, #132	@ 0x84
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	4413      	add	r3, r2
 80075da:	3384      	adds	r3, #132	@ 0x84
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	4611      	mov	r1, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	01d2      	lsls	r2, r2, #7
 80075e8:	440a      	add	r2, r1
 80075ea:	3284      	adds	r2, #132	@ 0x84
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	6013      	str	r3, [r2, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3724      	adds	r7, #36	@ 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	fffff8f8 	.word	0xfffff8f8
 8007604:	fffff800 	.word	0xfffff800

08007608 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800760c:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a04      	ldr	r2, [pc, #16]	@ (8007624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007616:	6013      	str	r3, [r2, #0]
}
 8007618:	bf00      	nop
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40007000 	.word	0x40007000

08007628 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007632:	4b23      	ldr	r3, [pc, #140]	@ (80076c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	4a22      	ldr	r2, [pc, #136]	@ (80076c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800763c:	6413      	str	r3, [r2, #64]	@ 0x40
 800763e:	4b20      	ldr	r3, [pc, #128]	@ (80076c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800764a:	4b1e      	ldr	r3, [pc, #120]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007654:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007656:	f7fb fcaf 	bl	8002fb8 <HAL_GetTick>
 800765a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800765c:	e009      	b.n	8007672 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800765e:	f7fb fcab 	bl	8002fb8 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800766c:	d901      	bls.n	8007672 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e022      	b.n	80076b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007672:	4b14      	ldr	r3, [pc, #80]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800767e:	d1ee      	bne.n	800765e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007680:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a0f      	ldr	r2, [pc, #60]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800768a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800768c:	f7fb fc94 	bl	8002fb8 <HAL_GetTick>
 8007690:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007692:	e009      	b.n	80076a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007694:	f7fb fc90 	bl	8002fb8 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076a2:	d901      	bls.n	80076a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e007      	b.n	80076b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076a8:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b4:	d1ee      	bne.n	8007694 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40023800 	.word	0x40023800
 80076c4:	40007000 	.word	0x40007000

080076c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7fb fc72 	bl	8002fb8 <HAL_GetTick>
 80076d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e067      	b.n	80077b0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fa f9ab 	bl	8001a50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80076fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f85e 	bl	80077c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	021a      	lsls	r2, r3, #8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	2120      	movs	r1, #32
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f856 	bl	80077dc <QSPI_WaitFlagStateUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d135      	bne.n	80077a6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4b1d      	ldr	r3, [pc, #116]	@ (80077b8 <HAL_QSPI_Init+0xf0>)
 8007742:	4013      	ands	r3, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6852      	ldr	r2, [r2, #4]
 8007748:	0611      	lsls	r1, r2, #24
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68d2      	ldr	r2, [r2, #12]
 800774e:	4311      	orrs	r1, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	69d2      	ldr	r2, [r2, #28]
 8007754:	4311      	orrs	r1, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6a12      	ldr	r2, [r2, #32]
 800775a:	4311      	orrs	r1, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6812      	ldr	r2, [r2, #0]
 8007760:	430b      	orrs	r3, r1
 8007762:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	4b14      	ldr	r3, [pc, #80]	@ (80077bc <HAL_QSPI_Init+0xf4>)
 800776c:	4013      	ands	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6912      	ldr	r2, [r2, #16]
 8007772:	0411      	lsls	r1, r2, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6952      	ldr	r2, [r2, #20]
 8007778:	4311      	orrs	r1, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6992      	ldr	r2, [r2, #24]
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	430b      	orrs	r3, r1
 8007786:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80077ae:	7afb      	ldrb	r3, [r7, #11]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	00ffff2f 	.word	0x00ffff2f
 80077bc:	ffe0f8fe 	.word	0xffe0f8fe

080077c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	4613      	mov	r3, r2
 80077ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077ec:	e01a      	b.n	8007824 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d016      	beq.n	8007824 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f6:	f7fb fbdf 	bl	8002fb8 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	429a      	cmp	r2, r3
 8007804:	d302      	bcc.n	800780c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2204      	movs	r2, #4
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007818:	f043 0201 	orr.w	r2, r3, #1
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e00e      	b.n	8007842 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf14      	ite	ne
 8007832:	2301      	movne	r3, #1
 8007834:	2300      	moveq	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	429a      	cmp	r2, r3
 800783e:	d1d6      	bne.n	80077ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007854:	2300      	movs	r3, #0
 8007856:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e291      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8087 	beq.w	800797e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007870:	4b96      	ldr	r3, [pc, #600]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 030c 	and.w	r3, r3, #12
 8007878:	2b04      	cmp	r3, #4
 800787a:	d00c      	beq.n	8007896 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800787c:	4b93      	ldr	r3, [pc, #588]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 030c 	and.w	r3, r3, #12
 8007884:	2b08      	cmp	r3, #8
 8007886:	d112      	bne.n	80078ae <HAL_RCC_OscConfig+0x62>
 8007888:	4b90      	ldr	r3, [pc, #576]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007894:	d10b      	bne.n	80078ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007896:	4b8d      	ldr	r3, [pc, #564]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d06c      	beq.n	800797c <HAL_RCC_OscConfig+0x130>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d168      	bne.n	800797c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e26b      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b6:	d106      	bne.n	80078c6 <HAL_RCC_OscConfig+0x7a>
 80078b8:	4b84      	ldr	r3, [pc, #528]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a83      	ldr	r2, [pc, #524]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	e02e      	b.n	8007924 <HAL_RCC_OscConfig+0xd8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10c      	bne.n	80078e8 <HAL_RCC_OscConfig+0x9c>
 80078ce:	4b7f      	ldr	r3, [pc, #508]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a7e      	ldr	r2, [pc, #504]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	4b7c      	ldr	r3, [pc, #496]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a7b      	ldr	r2, [pc, #492]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	e01d      	b.n	8007924 <HAL_RCC_OscConfig+0xd8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078f0:	d10c      	bne.n	800790c <HAL_RCC_OscConfig+0xc0>
 80078f2:	4b76      	ldr	r3, [pc, #472]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a75      	ldr	r2, [pc, #468]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80078f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	4b73      	ldr	r3, [pc, #460]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a72      	ldr	r2, [pc, #456]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e00b      	b.n	8007924 <HAL_RCC_OscConfig+0xd8>
 800790c:	4b6f      	ldr	r3, [pc, #444]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a6e      	ldr	r2, [pc, #440]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	4b6c      	ldr	r3, [pc, #432]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a6b      	ldr	r2, [pc, #428]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800791e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d013      	beq.n	8007954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fb fb44 	bl	8002fb8 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007934:	f7fb fb40 	bl	8002fb8 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	@ 0x64
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e21f      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007946:	4b61      	ldr	r3, [pc, #388]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0xe8>
 8007952:	e014      	b.n	800797e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fb fb30 	bl	8002fb8 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800795c:	f7fb fb2c 	bl	8002fb8 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b64      	cmp	r3, #100	@ 0x64
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e20b      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800796e:	4b57      	ldr	r3, [pc, #348]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x110>
 800797a:	e000      	b.n	800797e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800797c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d069      	beq.n	8007a5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800798a:	4b50      	ldr	r3, [pc, #320]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 030c 	and.w	r3, r3, #12
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007996:	4b4d      	ldr	r3, [pc, #308]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 030c 	and.w	r3, r3, #12
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d11c      	bne.n	80079dc <HAL_RCC_OscConfig+0x190>
 80079a2:	4b4a      	ldr	r3, [pc, #296]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d116      	bne.n	80079dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ae:	4b47      	ldr	r3, [pc, #284]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_RCC_OscConfig+0x17a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d001      	beq.n	80079c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e1df      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c6:	4b41      	ldr	r3, [pc, #260]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	493d      	ldr	r1, [pc, #244]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079da:	e040      	b.n	8007a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d023      	beq.n	8007a2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079e4:	4b39      	ldr	r3, [pc, #228]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a38      	ldr	r2, [pc, #224]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fb fae2 	bl	8002fb8 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f8:	f7fb fade 	bl	8002fb8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e1bd      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0a:	4b30      	ldr	r3, [pc, #192]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a16:	4b2d      	ldr	r3, [pc, #180]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4929      	ldr	r1, [pc, #164]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	600b      	str	r3, [r1, #0]
 8007a2a:	e018      	b.n	8007a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2c:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a26      	ldr	r2, [pc, #152]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a32:	f023 0301 	bic.w	r3, r3, #1
 8007a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fb fabe 	bl	8002fb8 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a40:	f7fb faba 	bl	8002fb8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e199      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a52:	4b1e      	ldr	r3, [pc, #120]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d038      	beq.n	8007adc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d019      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a72:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a76:	4a15      	ldr	r2, [pc, #84]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a7e:	f7fb fa9b 	bl	8002fb8 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a86:	f7fb fa97 	bl	8002fb8 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e176      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a98:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0x23a>
 8007aa4:	e01a      	b.n	8007adc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aa6:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aaa:	4a08      	ldr	r2, [pc, #32]	@ (8007acc <HAL_RCC_OscConfig+0x280>)
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab2:	f7fb fa81 	bl	8002fb8 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aba:	f7fb fa7d 	bl	8002fb8 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d903      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e15c      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
 8007acc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ad0:	4b91      	ldr	r3, [pc, #580]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1ee      	bne.n	8007aba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80a4 	beq.w	8007c32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aea:	4b8b      	ldr	r3, [pc, #556]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10d      	bne.n	8007b12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007af6:	4b88      	ldr	r3, [pc, #544]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	4a87      	ldr	r2, [pc, #540]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b02:	4b85      	ldr	r3, [pc, #532]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b12:	4b82      	ldr	r3, [pc, #520]	@ (8007d1c <HAL_RCC_OscConfig+0x4d0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d118      	bne.n	8007b50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d1c <HAL_RCC_OscConfig+0x4d0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a7e      	ldr	r2, [pc, #504]	@ (8007d1c <HAL_RCC_OscConfig+0x4d0>)
 8007b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b2a:	f7fb fa45 	bl	8002fb8 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b32:	f7fb fa41 	bl	8002fb8 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b64      	cmp	r3, #100	@ 0x64
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e120      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b44:	4b75      	ldr	r3, [pc, #468]	@ (8007d1c <HAL_RCC_OscConfig+0x4d0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <HAL_RCC_OscConfig+0x31a>
 8007b58:	4b6f      	ldr	r3, [pc, #444]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b64:	e02d      	b.n	8007bc2 <HAL_RCC_OscConfig+0x376>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10c      	bne.n	8007b88 <HAL_RCC_OscConfig+0x33c>
 8007b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b72:	4a69      	ldr	r2, [pc, #420]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b7a:	4b67      	ldr	r3, [pc, #412]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	4a66      	ldr	r2, [pc, #408]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b80:	f023 0304 	bic.w	r3, r3, #4
 8007b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b86:	e01c      	b.n	8007bc2 <HAL_RCC_OscConfig+0x376>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b05      	cmp	r3, #5
 8007b8e:	d10c      	bne.n	8007baa <HAL_RCC_OscConfig+0x35e>
 8007b90:	4b61      	ldr	r3, [pc, #388]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b94:	4a60      	ldr	r2, [pc, #384]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b96:	f043 0304 	orr.w	r3, r3, #4
 8007b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba8:	e00b      	b.n	8007bc2 <HAL_RCC_OscConfig+0x376>
 8007baa:	4b5b      	ldr	r3, [pc, #364]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bae:	4a5a      	ldr	r2, [pc, #360]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bb6:	4b58      	ldr	r3, [pc, #352]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bba:	4a57      	ldr	r2, [pc, #348]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007bbc:	f023 0304 	bic.w	r3, r3, #4
 8007bc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d015      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bca:	f7fb f9f5 	bl	8002fb8 <HAL_GetTick>
 8007bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd0:	e00a      	b.n	8007be8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd2:	f7fb f9f1 	bl	8002fb8 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e0ce      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be8:	4b4b      	ldr	r3, [pc, #300]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0ee      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x386>
 8007bf4:	e014      	b.n	8007c20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf6:	f7fb f9df 	bl	8002fb8 <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bfc:	e00a      	b.n	8007c14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bfe:	f7fb f9db 	bl	8002fb8 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e0b8      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c14:	4b40      	ldr	r3, [pc, #256]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1ee      	bne.n	8007bfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d105      	bne.n	8007c32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c26:	4b3c      	ldr	r3, [pc, #240]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c30:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80a4 	beq.w	8007d84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c3c:	4b36      	ldr	r3, [pc, #216]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 030c 	and.w	r3, r3, #12
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d06b      	beq.n	8007d20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d149      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c50:	4b31      	ldr	r3, [pc, #196]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a30      	ldr	r2, [pc, #192]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb f9ac 	bl	8002fb8 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fb f9a8 	bl	8002fb8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e087      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c76:	4b28      	ldr	r3, [pc, #160]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69da      	ldr	r2, [r3, #28]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	019b      	lsls	r3, r3, #6
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	085b      	lsrs	r3, r3, #1
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	041b      	lsls	r3, r3, #16
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	061b      	lsls	r3, r3, #24
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007caa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cb0:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a18      	ldr	r2, [pc, #96]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fb f97c 	bl	8002fb8 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc4:	f7fb f978 	bl	8002fb8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e057      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd6:	4b10      	ldr	r3, [pc, #64]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x478>
 8007ce2:	e04f      	b.n	8007d84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fb f962 	bl	8002fb8 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cf8:	f7fb f95e 	bl	8002fb8 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e03d      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d0a:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <HAL_RCC_OscConfig+0x4cc>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1f0      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x4ac>
 8007d16:	e035      	b.n	8007d84 <HAL_RCC_OscConfig+0x538>
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d20:	4b1b      	ldr	r3, [pc, #108]	@ (8007d90 <HAL_RCC_OscConfig+0x544>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d028      	beq.n	8007d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d121      	bne.n	8007d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d11a      	bne.n	8007d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d111      	bne.n	8007d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	40023800 	.word	0x40023800

08007d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0d0      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dac:	4b6a      	ldr	r3, [pc, #424]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d910      	bls.n	8007ddc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dba:	4b67      	ldr	r3, [pc, #412]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f023 020f 	bic.w	r2, r3, #15
 8007dc2:	4965      	ldr	r1, [pc, #404]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dca:	4b63      	ldr	r3, [pc, #396]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0b8      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d020      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007df4:	4b59      	ldr	r3, [pc, #356]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a58      	ldr	r2, [pc, #352]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007dfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007dfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e0c:	4b53      	ldr	r3, [pc, #332]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4a52      	ldr	r2, [pc, #328]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e18:	4b50      	ldr	r3, [pc, #320]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	494d      	ldr	r1, [pc, #308]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d040      	beq.n	8007eb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d107      	bne.n	8007e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3e:	4b47      	ldr	r3, [pc, #284]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d115      	bne.n	8007e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e07f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d107      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e56:	4b41      	ldr	r3, [pc, #260]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e073      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e66:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e06b      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e76:	4b39      	ldr	r3, [pc, #228]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f023 0203 	bic.w	r2, r3, #3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4936      	ldr	r1, [pc, #216]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e88:	f7fb f896 	bl	8002fb8 <HAL_GetTick>
 8007e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8e:	e00a      	b.n	8007ea6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e90:	f7fb f892 	bl	8002fb8 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e053      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 020c 	and.w	r2, r3, #12
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d1eb      	bne.n	8007e90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007eb8:	4b27      	ldr	r3, [pc, #156]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d210      	bcs.n	8007ee8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec6:	4b24      	ldr	r3, [pc, #144]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f023 020f 	bic.w	r2, r3, #15
 8007ece:	4922      	ldr	r1, [pc, #136]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed6:	4b20      	ldr	r3, [pc, #128]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e032      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ef4:	4b19      	ldr	r3, [pc, #100]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4916      	ldr	r1, [pc, #88]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f12:	4b12      	ldr	r3, [pc, #72]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	490e      	ldr	r1, [pc, #56]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f26:	f000 f821 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	490a      	ldr	r1, [pc, #40]	@ (8007f60 <HAL_RCC_ClockConfig+0x1cc>)
 8007f38:	5ccb      	ldrb	r3, [r1, r3]
 8007f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3e:	4a09      	ldr	r2, [pc, #36]	@ (8007f64 <HAL_RCC_ClockConfig+0x1d0>)
 8007f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f42:	4b09      	ldr	r3, [pc, #36]	@ (8007f68 <HAL_RCC_ClockConfig+0x1d4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa f936 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023c00 	.word	0x40023c00
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	08015220 	.word	0x08015220
 8007f64:	20000000 	.word	0x20000000
 8007f68:	20000004 	.word	0x20000004

08007f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f70:	b090      	sub	sp, #64	@ 0x40
 8007f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	2300      	movs	r3, #0
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f84:	4b59      	ldr	r3, [pc, #356]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 030c 	and.w	r3, r3, #12
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d00d      	beq.n	8007fac <HAL_RCC_GetSysClockFreq+0x40>
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	f200 80a1 	bhi.w	80080d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d003      	beq.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f9e:	e09b      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fa0:	4b53      	ldr	r3, [pc, #332]	@ (80080f0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007fa4:	e09b      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fa6:	4b53      	ldr	r3, [pc, #332]	@ (80080f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007faa:	e098      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fac:	4b4f      	ldr	r3, [pc, #316]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d028      	beq.n	8008014 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	2200      	movs	r2, #0
 8007fca:	623b      	str	r3, [r7, #32]
 8007fcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fd8:	fb03 f201 	mul.w	r2, r3, r1
 8007fdc:	2300      	movs	r3, #0
 8007fde:	fb00 f303 	mul.w	r3, r0, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	4a43      	ldr	r2, [pc, #268]	@ (80080f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fe6:	fba0 1202 	umull	r1, r2, r0, r2
 8007fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fec:	460a      	mov	r2, r1
 8007fee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff2:	4413      	add	r3, r2
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	61fa      	str	r2, [r7, #28]
 8007ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008002:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008006:	f7f8 f903 	bl	8000210 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4613      	mov	r3, r2
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008012:	e053      	b.n	80080bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008014:	4b35      	ldr	r3, [pc, #212]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	099b      	lsrs	r3, r3, #6
 800801a:	2200      	movs	r2, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	617a      	str	r2, [r7, #20]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008026:	f04f 0b00 	mov.w	fp, #0
 800802a:	4652      	mov	r2, sl
 800802c:	465b      	mov	r3, fp
 800802e:	f04f 0000 	mov.w	r0, #0
 8008032:	f04f 0100 	mov.w	r1, #0
 8008036:	0159      	lsls	r1, r3, #5
 8008038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800803c:	0150      	lsls	r0, r2, #5
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	ebb2 080a 	subs.w	r8, r2, sl
 8008046:	eb63 090b 	sbc.w	r9, r3, fp
 800804a:	f04f 0200 	mov.w	r2, #0
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008056:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800805a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800805e:	ebb2 0408 	subs.w	r4, r2, r8
 8008062:	eb63 0509 	sbc.w	r5, r3, r9
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	00eb      	lsls	r3, r5, #3
 8008070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008074:	00e2      	lsls	r2, r4, #3
 8008076:	4614      	mov	r4, r2
 8008078:	461d      	mov	r5, r3
 800807a:	eb14 030a 	adds.w	r3, r4, sl
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	eb45 030b 	adc.w	r3, r5, fp
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008092:	4629      	mov	r1, r5
 8008094:	028b      	lsls	r3, r1, #10
 8008096:	4621      	mov	r1, r4
 8008098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800809c:	4621      	mov	r1, r4
 800809e:	028a      	lsls	r2, r1, #10
 80080a0:	4610      	mov	r0, r2
 80080a2:	4619      	mov	r1, r3
 80080a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a6:	2200      	movs	r2, #0
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	60fa      	str	r2, [r7, #12]
 80080ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080b0:	f7f8 f8ae 	bl	8000210 <__aeabi_uldivmod>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4613      	mov	r3, r2
 80080ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80080bc:	4b0b      	ldr	r3, [pc, #44]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x180>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	0c1b      	lsrs	r3, r3, #16
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	3301      	adds	r3, #1
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80080cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080d6:	e002      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080d8:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80080da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3740      	adds	r7, #64	@ 0x40
 80080e4:	46bd      	mov	sp, r7
 80080e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ea:	bf00      	nop
 80080ec:	40023800 	.word	0x40023800
 80080f0:	00f42400 	.word	0x00f42400
 80080f4:	017d7840 	.word	0x017d7840

080080f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080fc:	4b03      	ldr	r3, [pc, #12]	@ (800810c <HAL_RCC_GetHCLKFreq+0x14>)
 80080fe:	681b      	ldr	r3, [r3, #0]
}
 8008100:	4618      	mov	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000000 	.word	0x20000000

08008110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008114:	f7ff fff0 	bl	80080f8 <HAL_RCC_GetHCLKFreq>
 8008118:	4602      	mov	r2, r0
 800811a:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	0a9b      	lsrs	r3, r3, #10
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	4903      	ldr	r1, [pc, #12]	@ (8008134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008126:	5ccb      	ldrb	r3, [r1, r3]
 8008128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800812c:	4618      	mov	r0, r3
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40023800 	.word	0x40023800
 8008134:	08015230 	.word	0x08015230

08008138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800813c:	f7ff ffdc 	bl	80080f8 <HAL_RCC_GetHCLKFreq>
 8008140:	4602      	mov	r2, r0
 8008142:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	0b5b      	lsrs	r3, r3, #13
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	4903      	ldr	r1, [pc, #12]	@ (800815c <HAL_RCC_GetPCLK2Freq+0x24>)
 800814e:	5ccb      	ldrb	r3, [r1, r3]
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40023800 	.word	0x40023800
 800815c:	08015230 	.word	0x08015230

08008160 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220f      	movs	r2, #15
 800816e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008170:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <HAL_RCC_GetClockConfig+0x5c>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 0203 	and.w	r2, r3, #3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800817c:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <HAL_RCC_GetClockConfig+0x5c>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008188:	4b0c      	ldr	r3, [pc, #48]	@ (80081bc <HAL_RCC_GetClockConfig+0x5c>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008194:	4b09      	ldr	r3, [pc, #36]	@ (80081bc <HAL_RCC_GetClockConfig+0x5c>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	08db      	lsrs	r3, r3, #3
 800819a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081a2:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <HAL_RCC_GetClockConfig+0x60>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	601a      	str	r2, [r3, #0]
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	40023c00 	.word	0x40023c00

080081c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d012      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081ec:	4b69      	ldr	r3, [pc, #420]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4a68      	ldr	r2, [pc, #416]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081f6:	6093      	str	r3, [r2, #8]
 80081f8:	4b66      	ldr	r3, [pc, #408]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008200:	4964      	ldr	r1, [pc, #400]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d017      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800821e:	4b5d      	ldr	r3, [pc, #372]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008224:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	4959      	ldr	r1, [pc, #356]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800823e:	2301      	movs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800824a:	2301      	movs	r3, #1
 800824c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d017      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800825a:	4b4e      	ldr	r3, [pc, #312]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008260:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	494a      	ldr	r1, [pc, #296]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008278:	d101      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008286:	2301      	movs	r3, #1
 8008288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 808b 	beq.w	80083be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	4a39      	ldr	r2, [pc, #228]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80082b4:	4b37      	ldr	r3, [pc, #220]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082c0:	4b35      	ldr	r3, [pc, #212]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a34      	ldr	r2, [pc, #208]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082cc:	f7fa fe74 	bl	8002fb8 <HAL_GetTick>
 80082d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082d2:	e008      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d4:	f7fa fe70 	bl	8002fb8 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b64      	cmp	r3, #100	@ 0x64
 80082e0:	d901      	bls.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e357      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082f2:	4b28      	ldr	r3, [pc, #160]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d035      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	429a      	cmp	r2, r3
 800830e:	d02e      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008310:	4b20      	ldr	r3, [pc, #128]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008318:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800831a:	4b1e      	ldr	r3, [pc, #120]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831e:	4a1d      	ldr	r2, [pc, #116]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008324:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008326:	4b1b      	ldr	r3, [pc, #108]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800832a:	4a1a      	ldr	r2, [pc, #104]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800832c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008330:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008332:	4a18      	ldr	r2, [pc, #96]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008338:	4b16      	ldr	r3, [pc, #88]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b01      	cmp	r3, #1
 8008342:	d114      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fa fe38 	bl	8002fb8 <HAL_GetTick>
 8008348:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834a:	e00a      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800834c:	f7fa fe34 	bl	8002fb8 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800835a:	4293      	cmp	r3, r2
 800835c:	d901      	bls.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e319      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008362:	4b0c      	ldr	r3, [pc, #48]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ee      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800837a:	d111      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800837c:	4b05      	ldr	r3, [pc, #20]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008388:	4b04      	ldr	r3, [pc, #16]	@ (800839c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800838a:	400b      	ands	r3, r1
 800838c:	4901      	ldr	r1, [pc, #4]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	4313      	orrs	r3, r2
 8008390:	608b      	str	r3, [r1, #8]
 8008392:	e00b      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008394:	40023800 	.word	0x40023800
 8008398:	40007000 	.word	0x40007000
 800839c:	0ffffcff 	.word	0x0ffffcff
 80083a0:	4baa      	ldr	r3, [pc, #680]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4aa9      	ldr	r2, [pc, #676]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80083aa:	6093      	str	r3, [r2, #8]
 80083ac:	4ba7      	ldr	r3, [pc, #668]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b8:	49a4      	ldr	r1, [pc, #656]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d010      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083ca:	4ba0      	ldr	r3, [pc, #640]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083d0:	4a9e      	ldr	r2, [pc, #632]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80083da:	4b9c      	ldr	r3, [pc, #624]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	4999      	ldr	r1, [pc, #612]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083f8:	4b94      	ldr	r3, [pc, #592]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008406:	4991      	ldr	r1, [pc, #580]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800841a:	4b8c      	ldr	r3, [pc, #560]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008420:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008428:	4988      	ldr	r1, [pc, #544]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800843c:	4b83      	ldr	r3, [pc, #524]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008442:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800844a:	4980      	ldr	r1, [pc, #512]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800845e:	4b7b      	ldr	r3, [pc, #492]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008464:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846c:	4977      	ldr	r1, [pc, #476]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008480:	4b72      	ldr	r3, [pc, #456]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008486:	f023 0203 	bic.w	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848e:	496f      	ldr	r1, [pc, #444]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084a2:	4b6a      	ldr	r3, [pc, #424]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a8:	f023 020c 	bic.w	r2, r3, #12
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b0:	4966      	ldr	r1, [pc, #408]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084c4:	4b61      	ldr	r3, [pc, #388]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d2:	495e      	ldr	r1, [pc, #376]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084e6:	4b59      	ldr	r3, [pc, #356]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f4:	4955      	ldr	r1, [pc, #340]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008508:	4b50      	ldr	r3, [pc, #320]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008516:	494d      	ldr	r1, [pc, #308]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800852a:	4b48      	ldr	r3, [pc, #288]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008530:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008538:	4944      	ldr	r1, [pc, #272]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800854c:	4b3f      	ldr	r3, [pc, #252]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008552:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855a:	493c      	ldr	r1, [pc, #240]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800856e:	4b37      	ldr	r3, [pc, #220]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008574:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800857c:	4933      	ldr	r1, [pc, #204]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008590:	4b2e      	ldr	r3, [pc, #184]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008596:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800859e:	492b      	ldr	r1, [pc, #172]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d011      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80085b2:	4b26      	ldr	r3, [pc, #152]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c0:	4922      	ldr	r1, [pc, #136]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085d0:	d101      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085f2:	4b16      	ldr	r3, [pc, #88]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008600:	4912      	ldr	r1, [pc, #72]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008614:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008624:	4909      	ldr	r1, [pc, #36]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d006      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 80d9 	beq.w	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008640:	4b02      	ldr	r3, [pc, #8]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a01      	ldr	r2, [pc, #4]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800864a:	e001      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800864c:	40023800 	.word	0x40023800
 8008650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008652:	f7fa fcb1 	bl	8002fb8 <HAL_GetTick>
 8008656:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008658:	e008      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800865a:	f7fa fcad 	bl	8002fb8 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b64      	cmp	r3, #100	@ 0x64
 8008666:	d901      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e194      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800866c:	4b6c      	ldr	r3, [pc, #432]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f0      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d021      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11d      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800868c:	4b64      	ldr	r3, [pc, #400]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800868e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800869a:	4b61      	ldr	r3, [pc, #388]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a0:	0e1b      	lsrs	r3, r3, #24
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	019a      	lsls	r2, r3, #6
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	061b      	lsls	r3, r3, #24
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	071b      	lsls	r3, r3, #28
 80086c0:	4957      	ldr	r1, [pc, #348]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086dc:	d00a      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d02e      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086f2:	d129      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008702:	4b47      	ldr	r3, [pc, #284]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008708:	0f1b      	lsrs	r3, r3, #28
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	019a      	lsls	r2, r3, #6
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	061b      	lsls	r3, r3, #24
 8008722:	431a      	orrs	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	071b      	lsls	r3, r3, #28
 8008728:	493d      	ldr	r1, [pc, #244]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008730:	4b3b      	ldr	r3, [pc, #236]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008736:	f023 021f 	bic.w	r2, r3, #31
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	3b01      	subs	r3, #1
 8008740:	4937      	ldr	r1, [pc, #220]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01d      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008754:	4b32      	ldr	r3, [pc, #200]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800875a:	0e1b      	lsrs	r3, r3, #24
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008762:	4b2f      	ldr	r3, [pc, #188]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008768:	0f1b      	lsrs	r3, r3, #28
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	019a      	lsls	r2, r3, #6
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	431a      	orrs	r2, r3
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	061b      	lsls	r3, r3, #24
 8008782:	431a      	orrs	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	071b      	lsls	r3, r3, #28
 8008788:	4925      	ldr	r1, [pc, #148]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d011      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	019a      	lsls	r2, r3, #6
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	071b      	lsls	r3, r3, #28
 80087b8:	4919      	ldr	r1, [pc, #100]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087c0:	4b17      	ldr	r3, [pc, #92]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a16      	ldr	r2, [pc, #88]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087cc:	f7fa fbf4 	bl	8002fb8 <HAL_GetTick>
 80087d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087d2:	e008      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087d4:	f7fa fbf0 	bl	8002fb8 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b64      	cmp	r3, #100	@ 0x64
 80087e0:	d901      	bls.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e0d7      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f040 80cd 	bne.w	8008994 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087fa:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a08      	ldr	r2, [pc, #32]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fa fbd7 	bl	8002fb8 <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800880c:	e00a      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800880e:	f7fa fbd3 	bl	8002fb8 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b64      	cmp	r3, #100	@ 0x64
 800881a:	d903      	bls.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e0ba      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008820:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008824:	4b5e      	ldr	r3, [pc, #376]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008830:	d0ed      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800884e:	2b00      	cmp	r3, #0
 8008850:	d02e      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d12a      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800885a:	4b51      	ldr	r3, [pc, #324]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800885c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008868:	4b4d      	ldr	r3, [pc, #308]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886e:	0f1b      	lsrs	r3, r3, #28
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	019a      	lsls	r2, r3, #6
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	061b      	lsls	r3, r3, #24
 8008888:	431a      	orrs	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	071b      	lsls	r3, r3, #28
 800888e:	4944      	ldr	r1, [pc, #272]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008896:	4b42      	ldr	r3, [pc, #264]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800889c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	493d      	ldr	r1, [pc, #244]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d022      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c4:	d11d      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088c6:	4b36      	ldr	r3, [pc, #216]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088cc:	0e1b      	lsrs	r3, r3, #24
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088d4:	4b32      	ldr	r3, [pc, #200]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	019a      	lsls	r2, r3, #6
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	041b      	lsls	r3, r3, #16
 80088ee:	431a      	orrs	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	431a      	orrs	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	071b      	lsls	r3, r3, #28
 80088fa:	4929      	ldr	r1, [pc, #164]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d028      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800890e:	4b24      	ldr	r3, [pc, #144]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008914:	0e1b      	lsrs	r3, r3, #24
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800891c:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	019a      	lsls	r2, r3, #6
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	431a      	orrs	r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	071b      	lsls	r3, r3, #28
 8008942:	4917      	ldr	r1, [pc, #92]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800894a:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008950:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	4911      	ldr	r1, [pc, #68]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800895a:	4313      	orrs	r3, r2
 800895c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008960:	4b0f      	ldr	r3, [pc, #60]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a0e      	ldr	r2, [pc, #56]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800896a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896c:	f7fa fb24 	bl	8002fb8 <HAL_GetTick>
 8008970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008974:	f7fa fb20 	bl	8002fb8 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b64      	cmp	r3, #100	@ 0x64
 8008980:	d901      	bls.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e007      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008986:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800898e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008992:	d1ef      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3720      	adds	r7, #32
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40023800 	.word	0x40023800

080089a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089c2:	f040 808d 	bne.w	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80089c6:	4b93      	ldr	r3, [pc, #588]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089cc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80089d4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089dc:	d07c      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089e4:	d87b      	bhi.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f2:	d039      	beq.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80089f4:	e073      	b.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80089f6:	4b87      	ldr	r3, [pc, #540]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d108      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a02:	4b84      	ldr	r3, [pc, #528]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a0a:	4a83      	ldr	r2, [pc, #524]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	e007      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a14:	4b7f      	ldr	r3, [pc, #508]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008a24:	4b7b      	ldr	r3, [pc, #492]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008a32:	4b78      	ldr	r3, [pc, #480]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a38:	099b      	lsrs	r3, r3, #6
 8008a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	fb03 f202 	mul.w	r2, r3, r2
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008a4c:	4b71      	ldr	r3, [pc, #452]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	f003 031f 	and.w	r3, r3, #31
 8008a58:	3301      	adds	r3, #1
 8008a5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]
        break;
 8008a66:	e03b      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a68:	4b6a      	ldr	r3, [pc, #424]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d108      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a74:	4b67      	ldr	r3, [pc, #412]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a7c:	4a66      	ldr	r2, [pc, #408]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	e007      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a86:	4b63      	ldr	r3, [pc, #396]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a8e:	4a63      	ldr	r2, [pc, #396]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008a96:	4b5f      	ldr	r3, [pc, #380]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9c:	0e1b      	lsrs	r3, r3, #24
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aaa:	099b      	lsrs	r3, r3, #6
 8008aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	fb03 f202 	mul.w	r2, r3, r2
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008abe:	4b55      	ldr	r3, [pc, #340]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac4:	f003 031f 	and.w	r3, r3, #31
 8008ac8:	3301      	adds	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]
        break;
 8008ad6:	e003      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ad8:	4b51      	ldr	r3, [pc, #324]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008ada:	617b      	str	r3, [r7, #20]
        break;
 8008adc:	e000      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008ade:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ae6:	f040 808d 	bne.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008aea:	4b4a      	ldr	r3, [pc, #296]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008af8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b00:	d07c      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b08:	d87b      	bhi.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d004      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b16:	d039      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008b18:	e073      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d108      	bne.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b26:	4b3b      	ldr	r3, [pc, #236]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	e007      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b38:	4b36      	ldr	r3, [pc, #216]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b40:	4a36      	ldr	r2, [pc, #216]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008b48:	4b32      	ldr	r3, [pc, #200]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4e:	0e1b      	lsrs	r3, r3, #24
 8008b50:	f003 030f 	and.w	r3, r3, #15
 8008b54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008b56:	4b2f      	ldr	r3, [pc, #188]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5c:	099b      	lsrs	r3, r3, #6
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	fb03 f202 	mul.w	r2, r3, r2
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008b70:	4b28      	ldr	r3, [pc, #160]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	f003 031f 	and.w	r3, r3, #31
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]
        break;
 8008b8a:	e03b      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b8c:	4b21      	ldr	r3, [pc, #132]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d108      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b98:	4b1e      	ldr	r3, [pc, #120]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	e007      	b.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008baa:	4b1a      	ldr	r3, [pc, #104]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008bba:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bc0:	0e1b      	lsrs	r3, r3, #24
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008bc8:	4b12      	ldr	r3, [pc, #72]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bce:	099b      	lsrs	r3, r3, #6
 8008bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	fb03 f202 	mul.w	r2, r3, r2
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf8:	617b      	str	r3, [r7, #20]
        break;
 8008bfa:	e003      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bfc:	4b08      	ldr	r3, [pc, #32]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008bfe:	617b      	str	r3, [r7, #20]
        break;
 8008c00:	e000      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008c02:	bf00      	nop
      }
    }
  }

  return frequency;
 8008c04:	697b      	ldr	r3, [r7, #20]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	40023800 	.word	0x40023800
 8008c18:	00f42400 	.word	0x00f42400
 8008c1c:	017d7840 	.word	0x017d7840
 8008c20:	00bb8000 	.word	0x00bb8000

08008c24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e071      	b.n	8008d1e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7f5b      	ldrb	r3, [r3, #29]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 f834 	bl	8001cb8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d053      	beq.n	8008d0c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	22ca      	movs	r2, #202	@ 0xca
 8008c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2253      	movs	r2, #83	@ 0x53
 8008c72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fac7 	bl	8009208 <RTC_EnterInitMode>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d12a      	bne.n	8008cda <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6899      	ldr	r1, [r3, #8]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b26      	ldr	r3, [pc, #152]	@ (8008d28 <HAL_RTC_Init+0x104>)
 8008c90:	400b      	ands	r3, r1
 8008c92:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6899      	ldr	r1, [r3, #8]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	68d2      	ldr	r2, [r2, #12]
 8008cba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6919      	ldr	r1, [r3, #16]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	041a      	lsls	r2, r3, #16
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fad0 	bl	8009276 <RTC_ExitInitMode>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d110      	bne.n	8008d02 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0208 	bic.w	r2, r2, #8
 8008cee:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	22ff      	movs	r2, #255	@ 0xff
 8008d08:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d0a:	e001      	b.n	8008d10 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	ff8fffbf 	.word	0xff8fffbf

08008d2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d2c:	b590      	push	{r4, r7, lr}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	7f1b      	ldrb	r3, [r3, #28]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_RTC_SetTime+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e085      	b.n	8008e54 <HAL_RTC_SetTime+0x128>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2202      	movs	r2, #2
 8008d52:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d126      	bne.n	8008da8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 faa4 	bl	80092c0 <RTC_ByteToBcd2>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fa9d 	bl	80092c0 <RTC_ByteToBcd2>
 8008d86:	4603      	mov	r3, r0
 8008d88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d8a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	789b      	ldrb	r3, [r3, #2]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fa95 	bl	80092c0 <RTC_ByteToBcd2>
 8008d96:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d98:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	78db      	ldrb	r3, [r3, #3]
 8008da0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	e018      	b.n	8008dda <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dc8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008dce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	78db      	ldrb	r3, [r3, #3]
 8008dd4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	22ca      	movs	r2, #202	@ 0xca
 8008de0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2253      	movs	r2, #83	@ 0x53
 8008de8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fa0c 	bl	8009208 <RTC_EnterInitMode>
 8008df0:	4603      	mov	r3, r0
 8008df2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008df4:	7cfb      	ldrb	r3, [r7, #19]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11e      	bne.n	8008e38 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	6979      	ldr	r1, [r7, #20]
 8008e00:	4b16      	ldr	r3, [pc, #88]	@ (8008e5c <HAL_RTC_SetTime+0x130>)
 8008e02:	400b      	ands	r3, r1
 8008e04:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008e14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6899      	ldr	r1, [r3, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	431a      	orrs	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 fa21 	bl	8009276 <RTC_ExitInitMode>
 8008e34:	4603      	mov	r3, r0
 8008e36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e38:	7cfb      	ldrb	r3, [r7, #19]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	22ff      	movs	r2, #255	@ 0xff
 8008e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	771a      	strb	r2, [r3, #28]

  return status;
 8008e52:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd90      	pop	{r4, r7, pc}
 8008e5c:	007f7f7f 	.word	0x007f7f7f

08008e60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	7f1b      	ldrb	r3, [r3, #28]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_RTC_SetDate+0x1c>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e06f      	b.n	8008f5c <HAL_RTC_SetDate+0xfc>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2202      	movs	r2, #2
 8008e86:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10e      	bne.n	8008eac <HAL_RTC_SetDate+0x4c>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	f003 0310 	and.w	r3, r3, #16
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d008      	beq.n	8008eac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	330a      	adds	r3, #10
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d11c      	bne.n	8008eec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	78db      	ldrb	r3, [r3, #3]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa02 	bl	80092c0 <RTC_ByteToBcd2>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f9fb 	bl	80092c0 <RTC_ByteToBcd2>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ece:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 f9f3 	bl	80092c0 <RTC_ByteToBcd2>
 8008eda:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008edc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e00e      	b.n	8008f0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	78db      	ldrb	r3, [r3, #3]
 8008ef0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ef8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008efe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	22ca      	movs	r2, #202	@ 0xca
 8008f10:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2253      	movs	r2, #83	@ 0x53
 8008f18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f974 	bl	8009208 <RTC_EnterInitMode>
 8008f20:	4603      	mov	r3, r0
 8008f22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f24:	7cfb      	ldrb	r3, [r7, #19]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	6979      	ldr	r1, [r7, #20]
 8008f30:	4b0c      	ldr	r3, [pc, #48]	@ (8008f64 <HAL_RTC_SetDate+0x104>)
 8008f32:	400b      	ands	r3, r1
 8008f34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 f99d 	bl	8009276 <RTC_ExitInitMode>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008f40:	7cfb      	ldrb	r3, [r7, #19]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	22ff      	movs	r2, #255	@ 0xff
 8008f52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	771a      	strb	r2, [r3, #28]

  return status;
 8008f5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}
 8008f64:	00ffff3f 	.word	0x00ffff3f

08008f68 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008f68:	b590      	push	{r4, r7, lr}
 8008f6a:	b089      	sub	sp, #36	@ 0x24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	7f1b      	ldrb	r3, [r3, #28]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_RTC_SetAlarm+0x24>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e113      	b.n	80091b4 <HAL_RTC_SetAlarm+0x24c>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d137      	bne.n	800900e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f982 	bl	80092c0 <RTC_ByteToBcd2>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f97b 	bl	80092c0 <RTC_ByteToBcd2>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	789b      	ldrb	r3, [r3, #2]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f973 	bl	80092c0 <RTC_ByteToBcd2>
 8008fda:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fdc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	78db      	ldrb	r3, [r3, #3]
 8008fe4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008fe6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f965 	bl	80092c0 <RTC_ByteToBcd2>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008ffa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009002:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009008:	4313      	orrs	r3, r2
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e023      	b.n	8009056 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800902e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009034:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800903c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009044:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009046:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800904c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009052:	4313      	orrs	r3, r2
 8009054:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	22ca      	movs	r2, #202	@ 0xca
 8009068:	625a      	str	r2, [r3, #36]	@ 0x24
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2253      	movs	r2, #83	@ 0x53
 8009070:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907a:	d148      	bne.n	800910e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800908a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800909a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80090ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090ae:	f7f9 ff83 	bl	8002fb8 <HAL_GetTick>
 80090b2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80090b4:	e013      	b.n	80090de <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090b6:	f7f9 ff7f 	bl	8002fb8 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090c4:	d90b      	bls.n	80090de <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	22ff      	movs	r2, #255	@ 0xff
 80090cc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2203      	movs	r2, #3
 80090d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e06a      	b.n	80091b4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0e4      	beq.n	80090b6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800910a:	609a      	str	r2, [r3, #8]
 800910c:	e047      	b.n	800919e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800911c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800912c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800913e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009140:	f7f9 ff3a 	bl	8002fb8 <HAL_GetTick>
 8009144:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009146:	e013      	b.n	8009170 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009148:	f7f9 ff36 	bl	8002fb8 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009156:	d90b      	bls.n	8009170 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	22ff      	movs	r2, #255	@ 0xff
 800915e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2203      	movs	r2, #3
 8009164:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e021      	b.n	80091b4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0e4      	beq.n	8009148 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800919c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3724      	adds	r7, #36	@ 0x24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd90      	pop	{r4, r7, pc}

080091bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009204 <HAL_RTC_WaitForSynchro+0x48>)
 80091ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091d0:	f7f9 fef2 	bl	8002fb8 <HAL_GetTick>
 80091d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091d6:	e009      	b.n	80091ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091d8:	f7f9 feee 	bl	8002fb8 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091e6:	d901      	bls.n	80091ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e007      	b.n	80091fc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0ee      	beq.n	80091d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	0001ff5f 	.word	0x0001ff5f

08009208 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d122      	bne.n	800926c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009234:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009236:	f7f9 febf 	bl	8002fb8 <HAL_GetTick>
 800923a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800923c:	e00c      	b.n	8009258 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800923e:	f7f9 febb 	bl	8002fb8 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800924c:	d904      	bls.n	8009258 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2204      	movs	r2, #4
 8009252:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <RTC_EnterInitMode+0x64>
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d1e8      	bne.n	800923e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009290:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff8b 	bl	80091bc <HAL_RTC_WaitForSynchro>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2204      	movs	r2, #4
 80092b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80092ce:	e005      	b.n	80092dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3301      	adds	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	3b0a      	subs	r3, #10
 80092da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b09      	cmp	r3, #9
 80092e0:	d8f6      	bhi.n	80092d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	b2db      	uxtb	r3, r3
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7f1b      	ldrb	r3, [r3, #28]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009314:	2302      	movs	r3, #2
 8009316:	e050      	b.n	80093ba <HAL_RTCEx_SetTimeStamp+0xbe>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2202      	movs	r2, #2
 8009322:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0206 	bic.w	r2, r2, #6
 8009332:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	430a      	orrs	r2, r1
 8009342:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	4b1f      	ldr	r3, [pc, #124]	@ (80093c8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800934c:	4013      	ands	r3, r2
 800934e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	22ca      	movs	r2, #202	@ 0xca
 800935e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2253      	movs	r2, #83	@ 0x53
 8009366:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	b2da      	uxtb	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009380:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009392:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	22ff      	movs	r2, #255	@ 0xff
 80093aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	fffff7f7 	.word	0xfffff7f7

080093cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e156      	b.n	8009698 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f8 fd30 	bl	8001e64 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f95b 	bl	80096c8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d00c      	beq.n	8009434 <HAL_SAI_Init+0x68>
 800941a:	2b02      	cmp	r3, #2
 800941c:	d80d      	bhi.n	800943a <HAL_SAI_Init+0x6e>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <HAL_SAI_Init+0x5c>
 8009422:	2b01      	cmp	r3, #1
 8009424:	d003      	beq.n	800942e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009426:	e008      	b.n	800943a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	61fb      	str	r3, [r7, #28]
      break;
 800942c:	e006      	b.n	800943c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800942e:	2310      	movs	r3, #16
 8009430:	61fb      	str	r3, [r7, #28]
      break;
 8009432:	e003      	b.n	800943c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009434:	2320      	movs	r3, #32
 8009436:	61fb      	str	r3, [r7, #28]
      break;
 8009438:	e000      	b.n	800943c <HAL_SAI_Init+0x70>
      break;
 800943a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d81e      	bhi.n	8009482 <HAL_SAI_Init+0xb6>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <HAL_SAI_Init+0x80>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	0800945d 	.word	0x0800945d
 8009450:	08009463 	.word	0x08009463
 8009454:	0800946b 	.word	0x0800946b
 8009458:	08009473 	.word	0x08009473
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009460:	e010      	b.n	8009484 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009466:	617b      	str	r3, [r7, #20]
    }
    break;
 8009468:	e00c      	b.n	8009484 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800946a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800946e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009470:	e008      	b.n	8009484 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009476:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009480:	e000      	b.n	8009484 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009482:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a85      	ldr	r2, [pc, #532]	@ (80096a0 <HAL_SAI_Init+0x2d4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d004      	beq.n	8009498 <HAL_SAI_Init+0xcc>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a84      	ldr	r2, [pc, #528]	@ (80096a4 <HAL_SAI_Init+0x2d8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d103      	bne.n	80094a0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009498:	4a83      	ldr	r2, [pc, #524]	@ (80096a8 <HAL_SAI_Init+0x2dc>)
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e002      	b.n	80094a6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80094a0:	4a82      	ldr	r2, [pc, #520]	@ (80096ac <HAL_SAI_Init+0x2e0>)
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04c      	beq.n	8009548 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a7a      	ldr	r2, [pc, #488]	@ (80096a0 <HAL_SAI_Init+0x2d4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <HAL_SAI_Init+0xfa>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a78      	ldr	r2, [pc, #480]	@ (80096a4 <HAL_SAI_Init+0x2d8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d104      	bne.n	80094d0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80094c6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80094ca:	f7ff fa6b 	bl	80089a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80094ce:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a76      	ldr	r2, [pc, #472]	@ (80096b0 <HAL_SAI_Init+0x2e4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d004      	beq.n	80094e4 <HAL_SAI_Init+0x118>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a75      	ldr	r2, [pc, #468]	@ (80096b4 <HAL_SAI_Init+0x2e8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d104      	bne.n	80094ee <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80094e4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80094e8:	f7ff fa5c 	bl	80089a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80094ec:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	025b      	lsls	r3, r3, #9
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4a6b      	ldr	r2, [pc, #428]	@ (80096b8 <HAL_SAI_Init+0x2ec>)
 800950a:	fba2 2303 	umull	r2, r3, r2, r3
 800950e:	08da      	lsrs	r2, r3, #3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009514:	68f9      	ldr	r1, [r7, #12]
 8009516:	4b68      	ldr	r3, [pc, #416]	@ (80096b8 <HAL_SAI_Init+0x2ec>)
 8009518:	fba3 2301 	umull	r2, r3, r3, r1
 800951c:	08da      	lsrs	r2, r3, #3
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	1aca      	subs	r2, r1, r3
 8009528:	2a08      	cmp	r2, #8
 800952a:	d904      	bls.n	8009536 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953a:	2b04      	cmp	r3, #4
 800953c:	d104      	bne.n	8009548 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	085a      	lsrs	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <HAL_SAI_Init+0x18c>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d109      	bne.n	800956c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_SAI_Init+0x198>
 8009560:	2300      	movs	r3, #0
 8009562:	e001      	b.n	8009568 <HAL_SAI_Init+0x19c>
 8009564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e008      	b.n	800957e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d102      	bne.n	800957a <HAL_SAI_Init+0x1ae>
 8009574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009578:	e000      	b.n	800957c <HAL_SAI_Init+0x1b0>
 800957a:	2300      	movs	r3, #0
 800957c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4b4c      	ldr	r3, [pc, #304]	@ (80096bc <HAL_SAI_Init+0x2f0>)
 800958a:	400b      	ands	r3, r1
 800958c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095a2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a8:	431a      	orrs	r2, r3
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80095b6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095c2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	051b      	lsls	r3, r3, #20
 80095ca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6859      	ldr	r1, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4b38      	ldr	r3, [pc, #224]	@ (80096c0 <HAL_SAI_Init+0x2f4>)
 80095e0:	400b      	ands	r3, r1
 80095e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6859      	ldr	r1, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6899      	ldr	r1, [r3, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	4b2d      	ldr	r3, [pc, #180]	@ (80096c4 <HAL_SAI_Init+0x2f8>)
 800960e:	400b      	ands	r3, r1
 8009610:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6899      	ldr	r1, [r3, #8]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009622:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009628:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800962e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009634:	3b01      	subs	r3, #1
 8009636:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009638:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68d9      	ldr	r1, [r3, #12]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009650:	400b      	ands	r3, r1
 8009652:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68d9      	ldr	r1, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009662:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009668:	041b      	lsls	r3, r3, #16
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009670:	3b01      	subs	r3, #1
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3720      	adds	r7, #32
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	40015804 	.word	0x40015804
 80096a4:	40015824 	.word	0x40015824
 80096a8:	40015800 	.word	0x40015800
 80096ac:	40015c00 	.word	0x40015c00
 80096b0:	40015c04 	.word	0x40015c04
 80096b4:	40015c24 	.word	0x40015c24
 80096b8:	cccccccd 	.word	0xcccccccd
 80096bc:	ff05c010 	.word	0xff05c010
 80096c0:	ffff1ff0 	.word	0xffff1ff0
 80096c4:	fff88000 	.word	0xfff88000

080096c8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80096d0:	4b17      	ldr	r3, [pc, #92]	@ (8009730 <SAI_Disable+0x68>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a17      	ldr	r2, [pc, #92]	@ (8009734 <SAI_Disable+0x6c>)
 80096d6:	fba2 2303 	umull	r2, r3, r2, r3
 80096da:	0b1b      	lsrs	r3, r3, #12
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80096f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1e5a      	subs	r2, r3, #1
 80096f8:	60fa      	str	r2, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10a      	bne.n	8009714 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009704:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	72fb      	strb	r3, [r7, #11]
      break;
 8009712:	e006      	b.n	8009722 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e8      	bne.n	80096f4 <SAI_Disable+0x2c>

  return status;
 8009722:	7afb      	ldrb	r3, [r7, #11]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	20000000 	.word	0x20000000
 8009734:	95cbec1b 	.word	0x95cbec1b

08009738 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e022      	b.n	8009790 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d105      	bne.n	8009762 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7f8 fc0d 	bl	8001f7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2203      	movs	r2, #3
 8009766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f814 	bl	8009798 <HAL_SD_InitCard>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e00a      	b.n	8009790 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009798:	b5b0      	push	{r4, r5, r7, lr}
 800979a:	b08e      	sub	sp, #56	@ 0x38
 800979c:	af04      	add	r7, sp, #16
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80097b4:	2376      	movs	r3, #118	@ 0x76
 80097b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681d      	ldr	r5, [r3, #0]
 80097bc:	466c      	mov	r4, sp
 80097be:	f107 0314 	add.w	r3, r7, #20
 80097c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097d0:	4628      	mov	r0, r5
 80097d2:	f003 fae3 	bl	800cd9c <SDMMC_Init>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80097dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e059      	b.n	800989c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097f6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f003 fb06 	bl	800ce0e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009810:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009812:	2002      	movs	r0, #2
 8009814:	f7f9 fbdc 	bl	8002fd0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fe0f 	bl	800a43c <SD_PowerON>
 800981e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e02e      	b.n	800989c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fd2e 	bl	800a2a0 <SD_InitCard>
 8009844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00b      	beq.n	8009864 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e01b      	b.n	800989c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800986c:	4618      	mov	r0, r3
 800986e:	f003 fb61 	bl	800cf34 <SDMMC_CmdBlockLength>
 8009872:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a09      	ldr	r2, [pc, #36]	@ (80098a4 <HAL_SD_InitCard+0x10c>)
 8009880:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e000      	b.n	800989c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3728      	adds	r7, #40	@ 0x28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bdb0      	pop	{r4, r5, r7, pc}
 80098a4:	004005ff 	.word	0x004005ff

080098a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08c      	sub	sp, #48	@ 0x30
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d107      	bne.n	80098d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0c3      	b.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	f040 80bc 	bne.w	8009a56 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	441a      	add	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d907      	bls.n	8009902 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e0aa      	b.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2203      	movs	r2, #3
 8009906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2200      	movs	r2, #0
 8009910:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	4a4e      	ldr	r2, [pc, #312]	@ (8009a60 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009928:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	4a4d      	ldr	r2, [pc, #308]	@ (8009a64 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009930:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009936:	2200      	movs	r2, #0
 8009938:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993e:	2200      	movs	r2, #0
 8009940:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3380      	adds	r3, #128	@ 0x80
 8009968:	4619      	mov	r1, r3
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	025b      	lsls	r3, r3, #9
 8009970:	089b      	lsrs	r3, r3, #2
 8009972:	f7fa f833 	bl	80039dc <HAL_DMA_Start_IT>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800998a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a35      	ldr	r2, [pc, #212]	@ (8009a68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009992:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009998:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e055      	b.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0208 	orr.w	r2, r2, #8
 80099ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d002      	beq.n	80099ca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	025b      	lsls	r3, r3, #9
 80099c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099ca:	f04f 33ff 	mov.w	r3, #4294967295
 80099ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	025b      	lsls	r3, r3, #9
 80099d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099d6:	2390      	movs	r3, #144	@ 0x90
 80099d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099da:	2302      	movs	r3, #2
 80099dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099de:	2300      	movs	r3, #0
 80099e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80099e2:	2301      	movs	r3, #1
 80099e4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f107 0210 	add.w	r2, r7, #16
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f003 fa73 	bl	800cedc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d90a      	bls.n	8009a12 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2282      	movs	r2, #130	@ 0x82
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f003 fad7 	bl	800cfbc <SDMMC_CmdReadMultiBlock>
 8009a0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009a10:	e009      	b.n	8009a26 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2281      	movs	r2, #129	@ 0x81
 8009a16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f003 faaa 	bl	800cf78 <SDMMC_CmdReadSingleBlock>
 8009a24:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d012      	beq.n	8009a52 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0d      	ldr	r2, [pc, #52]	@ (8009a68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009a32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e002      	b.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e000      	b.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009a56:	2302      	movs	r3, #2
  }
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3730      	adds	r7, #48	@ 0x30
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	0800a18b 	.word	0x0800a18b
 8009a64:	0800a1fd 	.word	0x0800a1fd
 8009a68:	004005ff 	.word	0x004005ff

08009a6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08c      	sub	sp, #48	@ 0x30
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d107      	bne.n	8009a94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e0c6      	b.n	8009c22 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	f040 80bf 	bne.w	8009c20 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	441a      	add	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d907      	bls.n	8009ac6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e0ad      	b.n	8009c22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2203      	movs	r2, #3
 8009aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 021a 	orr.w	r2, r2, #26
 8009ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aea:	4a50      	ldr	r2, [pc, #320]	@ (8009c2c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af2:	4a4f      	ldr	r2, [pc, #316]	@ (8009c30 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009af4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009afa:	2200      	movs	r2, #0
 8009afc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d002      	beq.n	8009b0c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	025b      	lsls	r3, r3, #9
 8009b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d90a      	bls.n	8009b28 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	22a0      	movs	r2, #160	@ 0xa0
 8009b16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f003 fa90 	bl	800d044 <SDMMC_CmdWriteMultiBlock>
 8009b24:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009b26:	e009      	b.n	8009b3c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2290      	movs	r2, #144	@ 0x90
 8009b2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b34:	4618      	mov	r0, r3
 8009b36:	f003 fa63 	bl	800d000 <SDMMC_CmdWriteSingleBlock>
 8009b3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d012      	beq.n	8009b68 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a3b      	ldr	r2, [pc, #236]	@ (8009c34 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009b48:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	431a      	orrs	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e05c      	b.n	8009c22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0208 	orr.w	r2, r2, #8
 8009b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b7c:	2240      	movs	r2, #64	@ 0x40
 8009b7e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3380      	adds	r3, #128	@ 0x80
 8009ba8:	461a      	mov	r2, r3
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	025b      	lsls	r3, r3, #9
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	f7f9 ff14 	bl	80039dc <HAL_DMA_Start_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01a      	beq.n	8009bf0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 021a 	bic.w	r2, r2, #26
 8009bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a19      	ldr	r2, [pc, #100]	@ (8009c34 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009bd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e018      	b.n	8009c22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	025b      	lsls	r3, r3, #9
 8009bfa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009bfc:	2390      	movs	r3, #144	@ 0x90
 8009bfe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f107 0210 	add.w	r2, r7, #16
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f003 f960 	bl	800cedc <SDMMC_ConfigData>

      return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e000      	b.n	8009c22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009c20:	2302      	movs	r3, #2
  }
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3730      	adds	r7, #48	@ 0x30
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	0800a161 	.word	0x0800a161
 8009c30:	0800a1fd 	.word	0x0800a1fd
 8009c34:	004005ff 	.word	0x004005ff

08009c38 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c5a:	0f9b      	lsrs	r3, r3, #30
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c66:	0e9b      	lsrs	r3, r3, #26
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 030f 	and.w	r3, r3, #15
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c78:	0e1b      	lsrs	r3, r3, #24
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f003 0303 	and.w	r3, r3, #3
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c8a:	0c1b      	lsrs	r3, r3, #16
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c96:	0a1b      	lsrs	r3, r3, #8
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cac:	0d1b      	lsrs	r3, r3, #20
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cb8:	0c1b      	lsrs	r3, r3, #16
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cca:	0bdb      	lsrs	r3, r3, #15
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cdc:	0b9b      	lsrs	r3, r3, #14
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cee:	0b5b      	lsrs	r3, r3, #13
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d00:	0b1b      	lsrs	r3, r3, #12
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2200      	movs	r2, #0
 8009d12:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d163      	bne.n	8009de4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d20:	009a      	lsls	r2, r3, #2
 8009d22:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d26:	4013      	ands	r3, r2
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009d2c:	0f92      	lsrs	r2, r2, #30
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d38:	0edb      	lsrs	r3, r3, #27
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4a:	0e1b      	lsrs	r3, r3, #24
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d5c:	0d5b      	lsrs	r3, r3, #21
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d6e:	0c9b      	lsrs	r3, r3, #18
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d80:	0bdb      	lsrs	r3, r3, #15
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	7e1b      	ldrb	r3, [r3, #24]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	3302      	adds	r3, #2
 8009da4:	2201      	movs	r2, #1
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009dae:	fb03 f202 	mul.w	r2, r3, r2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	7a1b      	ldrb	r3, [r3, #8]
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	409a      	lsls	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009dd0:	0a52      	lsrs	r2, r2, #9
 8009dd2:	fb03 f202 	mul.w	r2, r3, r2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009de0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009de2:	e031      	b.n	8009e48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d11d      	bne.n	8009e28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dfa:	0c1b      	lsrs	r3, r3, #16
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	3301      	adds	r3, #1
 8009e08:	029a      	lsls	r2, r3, #10
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e1c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e26:	e00f      	b.n	8009e48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a58      	ldr	r2, [pc, #352]	@ (8009f90 <HAL_SD_GetCardCSD+0x344>)
 8009e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e09d      	b.n	8009f84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e4c:	0b9b      	lsrs	r3, r3, #14
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e5e:	09db      	lsrs	r3, r3, #7
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e80:	0fdb      	lsrs	r3, r3, #31
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8c:	0f5b      	lsrs	r3, r3, #29
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e9e:	0e9b      	lsrs	r3, r3, #26
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eb0:	0d9b      	lsrs	r3, r3, #22
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	f003 030f 	and.w	r3, r3, #15
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec2:	0d5b      	lsrs	r3, r3, #21
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ef2:	0bdb      	lsrs	r3, r3, #15
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f06:	0b9b      	lsrs	r3, r3, #14
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1a:	0b5b      	lsrs	r3, r3, #13
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f2e:	0b1b      	lsrs	r3, r3, #12
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f42:	0a9b      	lsrs	r3, r3, #10
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	004005ff 	.word	0x004005ff

08009f94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009fec:	b5b0      	push	{r4, r5, r7, lr}
 8009fee:	b08e      	sub	sp, #56	@ 0x38
 8009ff0:	af04      	add	r7, sp, #16
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2203      	movs	r2, #3
 800a000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d02e      	beq.n	800a06a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a012:	d106      	bne.n	800a022 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a018:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a020:	e029      	b.n	800a076 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a028:	d10a      	bne.n	800a040 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fabc 	bl	800a5a8 <SD_WideBus_Enable>
 800a030:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	431a      	orrs	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a03e:	e01a      	b.n	800a076 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 faf9 	bl	800a63e <SD_WideBus_Disable>
 800a04c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	639a      	str	r2, [r3, #56]	@ 0x38
 800a05a:	e00c      	b.n	800a076 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a060:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	639a      	str	r2, [r3, #56]	@ 0x38
 800a068:	e005      	b.n	800a076 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a26      	ldr	r2, [pc, #152]	@ (800a11c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a084:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a094:	e01f      	b.n	800a0d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681d      	ldr	r5, [r3, #0]
 800a0bc:	466c      	mov	r4, sp
 800a0be:	f107 0314 	add.w	r3, r7, #20
 800a0c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f002 fe63 	bl	800cd9c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f002 ff28 	bl	800cf34 <SDMMC_CmdBlockLength>
 800a0e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00c      	beq.n	800a106 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a11c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a0f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a10e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a112:	4618      	mov	r0, r3
 800a114:	3728      	adds	r7, #40	@ 0x28
 800a116:	46bd      	mov	sp, r7
 800a118:	bdb0      	pop	{r4, r5, r7, pc}
 800a11a:	bf00      	nop
 800a11c:	004005ff 	.word	0x004005ff

0800a120 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a12c:	f107 030c 	add.w	r3, r7, #12
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa10 	bl	800a558 <SD_SendStatus>
 800a138:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	0a5b      	lsrs	r3, r3, #9
 800a150:	f003 030f 	and.w	r3, r3, #15
 800a154:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a156:	693b      	ldr	r3, [r7, #16]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a17c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a17e:	bf00      	nop
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a196:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a19c:	2b82      	cmp	r3, #130	@ 0x82
 800a19e:	d111      	bne.n	800a1c4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f002 ff6f 	bl	800d088 <SDMMC_CmdStopTransfer>
 800a1aa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff fd3a 	bl	8009c38 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0208 	bic.w	r2, r2, #8
 800a1d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a1dc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f004 fd1d 	bl	800ec2c <HAL_SD_RxCpltCallback>
#endif
}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a208:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f9 fcd8 	bl	8003bc0 <HAL_DMA_GetError>
 800a210:	4603      	mov	r3, r0
 800a212:	2b02      	cmp	r3, #2
 800a214:	d03e      	beq.n	800a294 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a21a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a21c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a224:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d002      	beq.n	800a232 <SD_DMAError+0x36>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d12d      	bne.n	800a28e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a19      	ldr	r2, [pc, #100]	@ (800a29c <SD_DMAError+0xa0>)
 800a238:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a248:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a256:	6978      	ldr	r0, [r7, #20]
 800a258:	f7ff ff62 	bl	800a120 <HAL_SD_GetCardState>
 800a25c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b06      	cmp	r3, #6
 800a262:	d002      	beq.n	800a26a <SD_DMAError+0x6e>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b05      	cmp	r3, #5
 800a268:	d10a      	bne.n	800a280 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f002 ff0a 	bl	800d088 <SDMMC_CmdStopTransfer>
 800a274:	4602      	mov	r2, r0
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27a:	431a      	orrs	r2, r3
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2200      	movs	r2, #0
 800a28c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a28e:	6978      	ldr	r0, [r7, #20]
 800a290:	f7ff fcd2 	bl	8009c38 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a294:	bf00      	nop
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	004005ff 	.word	0x004005ff

0800a2a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2a0:	b5b0      	push	{r4, r5, r7, lr}
 800a2a2:	b094      	sub	sp, #80	@ 0x50
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f002 fdba 	bl	800ce2a <SDMMC_GetPowerState>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a2c0:	e0b8      	b.n	800a434 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d02f      	beq.n	800a32a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f002 ffe5 	bl	800d29e <SDMMC_CmdSendCID>
 800a2d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <SD_InitCard+0x40>
    {
      return errorstate;
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2de:	e0a9      	b.n	800a434 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 fde5 	bl	800ceb6 <SDMMC_GetResponse>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 fddc 	bl	800ceb6 <SDMMC_GetResponse>
 800a2fe:	4602      	mov	r2, r0
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2108      	movs	r1, #8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f002 fdd3 	bl	800ceb6 <SDMMC_GetResponse>
 800a310:	4602      	mov	r2, r0
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	210c      	movs	r1, #12
 800a31c:	4618      	mov	r0, r3
 800a31e:	f002 fdca 	bl	800ceb6 <SDMMC_GetResponse>
 800a322:	4602      	mov	r2, r0
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d00d      	beq.n	800a34e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f107 020e 	add.w	r2, r7, #14
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f002 ffeb 	bl	800d318 <SDMMC_CmdSetRelAdd>
 800a342:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <SD_InitCard+0xae>
    {
      return errorstate;
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	e072      	b.n	800a434 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a352:	2b03      	cmp	r3, #3
 800a354:	d036      	beq.n	800a3c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a356:	89fb      	ldrh	r3, [r7, #14]
 800a358:	461a      	mov	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a366:	041b      	lsls	r3, r3, #16
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f002 ffb5 	bl	800d2da <SDMMC_CmdSendCSD>
 800a370:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37a:	e05b      	b.n	800a434 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f002 fd97 	bl	800ceb6 <SDMMC_GetResponse>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2104      	movs	r1, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f002 fd8e 	bl	800ceb6 <SDMMC_GetResponse>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2108      	movs	r1, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 fd85 	bl	800ceb6 <SDMMC_GetResponse>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	210c      	movs	r1, #12
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 fd7c 	bl	800ceb6 <SDMMC_GetResponse>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f002 fd73 	bl	800ceb6 <SDMMC_GetResponse>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	0d1a      	lsrs	r2, r3, #20
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a3d8:	f107 0310 	add.w	r3, r7, #16
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff fc34 	bl	8009c4c <HAL_SD_GetCardCSD>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a3ee:	e021      	b.n	800a434 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6819      	ldr	r1, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	461c      	mov	r4, r3
 800a3fe:	4615      	mov	r5, r2
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	4608      	mov	r0, r1
 800a406:	f002 fe61 	bl	800d0cc <SDMMC_CmdSelDesel>
 800a40a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <SD_InitCard+0x176>
  {
    return errorstate;
 800a412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a414:	e00e      	b.n	800a434 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681d      	ldr	r5, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	466c      	mov	r4, sp
 800a41e:	f103 0210 	add.w	r2, r3, #16
 800a422:	ca07      	ldmia	r2, {r0, r1, r2}
 800a424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a428:	3304      	adds	r3, #4
 800a42a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a42c:	4628      	mov	r0, r5
 800a42e:	f002 fcb5 	bl	800cd9c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3740      	adds	r7, #64	@ 0x40
 800a438:	46bd      	mov	sp, r7
 800a43a:	bdb0      	pop	{r4, r5, r7, pc}

0800a43c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f002 fe5c 	bl	800d112 <SDMMC_CmdGoIdleState>
 800a45a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	e072      	b.n	800a54c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f002 fe6f 	bl	800d14e <SDMMC_CmdOperCond>
 800a470:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00d      	beq.n	800a494 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f002 fe45 	bl	800d112 <SDMMC_CmdGoIdleState>
 800a488:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <SD_PowerON+0x5e>
    {
      return errorstate;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	e05b      	b.n	800a54c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d137      	bne.n	800a512 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f002 fe6f 	bl	800d18c <SDMMC_CmdAppCommand>
 800a4ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d02d      	beq.n	800a512 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4ba:	e047      	b.n	800a54c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f002 fe62 	bl	800d18c <SDMMC_CmdAppCommand>
 800a4c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	e03b      	b.n	800a54c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	491e      	ldr	r1, [pc, #120]	@ (800a554 <SD_PowerON+0x118>)
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f002 fe78 	bl	800d1d0 <SDMMC_CmdAppOperCommand>
 800a4e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4ec:	e02e      	b.n	800a54c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f002 fcde 	bl	800ceb6 <SDMMC_GetResponse>
 800a4fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	0fdb      	lsrs	r3, r3, #31
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <SD_PowerON+0xcc>
 800a504:	2301      	movs	r3, #1
 800a506:	e000      	b.n	800a50a <SD_PowerON+0xce>
 800a508:	2300      	movs	r3, #0
 800a50a:	613b      	str	r3, [r7, #16]

    count++;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3301      	adds	r3, #1
 800a510:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a518:	4293      	cmp	r3, r2
 800a51a:	d802      	bhi.n	800a522 <SD_PowerON+0xe6>
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0cc      	beq.n	800a4bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a528:	4293      	cmp	r3, r2
 800a52a:	d902      	bls.n	800a532 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a52c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a530:	e00c      	b.n	800a54c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	645a      	str	r2, [r3, #68]	@ 0x44
 800a542:	e002      	b.n	800a54a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	c1100000 	.word	0xc1100000

0800a558 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a568:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a56c:	e018      	b.n	800a5a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f002 feed 	bl	800d35a <SDMMC_CmdSendStatus>
 800a580:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	e009      	b.n	800a5a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f002 fc8f 	bl	800ceb6 <SDMMC_GetResponse>
 800a598:	4602      	mov	r2, r0
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 fc79 	bl	800ceb6 <SDMMC_GetResponse>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ce:	d102      	bne.n	800a5d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5d4:	e02f      	b.n	800a636 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a5d6:	f107 030c 	add.w	r3, r7, #12
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f879 	bl	800a6d4 <SD_FindSCR>
 800a5e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	e023      	b.n	800a636 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d01c      	beq.n	800a632 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a600:	041b      	lsls	r3, r3, #16
 800a602:	4619      	mov	r1, r3
 800a604:	4610      	mov	r0, r2
 800a606:	f002 fdc1 	bl	800d18c <SDMMC_CmdAppCommand>
 800a60a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	e00f      	b.n	800a636 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2102      	movs	r1, #2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f002 fdfb 	bl	800d218 <SDMMC_CmdBusWidth>
 800a622:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	e003      	b.n	800a636 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
 800a630:	e001      	b.n	800a636 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a632:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b086      	sub	sp, #24
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	2300      	movs	r3, #0
 800a64c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f002 fc2e 	bl	800ceb6 <SDMMC_GetResponse>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a664:	d102      	bne.n	800a66c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a666:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a66a:	e02f      	b.n	800a6cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f82e 	bl	800a6d4 <SD_FindSCR>
 800a678:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	e023      	b.n	800a6cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d01c      	beq.n	800a6c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a696:	041b      	lsls	r3, r3, #16
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f002 fd76 	bl	800d18c <SDMMC_CmdAppCommand>
 800a6a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	e00f      	b.n	800a6cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f002 fdb0 	bl	800d218 <SDMMC_CmdBusWidth>
 800a6b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	e003      	b.n	800a6cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e001      	b.n	800a6cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a6d4:	b590      	push	{r4, r7, lr}
 800a6d6:	b08f      	sub	sp, #60	@ 0x3c
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a6de:	f7f8 fc6b 	bl	8002fb8 <HAL_GetTick>
 800a6e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60bb      	str	r3, [r7, #8]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2108      	movs	r1, #8
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f002 fc1a 	bl	800cf34 <SDMMC_CmdBlockLength>
 800a700:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	e0b2      	b.n	800a872 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a714:	041b      	lsls	r3, r3, #16
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f002 fd37 	bl	800d18c <SDMMC_CmdAppCommand>
 800a71e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a728:	e0a3      	b.n	800a872 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a72a:	f04f 33ff 	mov.w	r3, #4294967295
 800a72e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a730:	2308      	movs	r3, #8
 800a732:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a734:	2330      	movs	r3, #48	@ 0x30
 800a736:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a738:	2302      	movs	r3, #2
 800a73a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a740:	2301      	movs	r3, #1
 800a742:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f107 0210 	add.w	r2, r7, #16
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f002 fbc4 	bl	800cedc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f002 fd7f 	bl	800d25c <SDMMC_CmdSendSCR>
 800a75e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a762:	2b00      	cmp	r3, #0
 800a764:	d02a      	beq.n	800a7bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	e083      	b.n	800a872 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00f      	beq.n	800a798 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	f107 0208 	add.w	r2, r7, #8
 800a784:	18d4      	adds	r4, r2, r3
 800a786:	4608      	mov	r0, r1
 800a788:	f002 fb34 	bl	800cdf4 <SDMMC_ReadFIFO>
 800a78c:	4603      	mov	r3, r0
 800a78e:	6023      	str	r3, [r4, #0]
      index++;
 800a790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a792:	3301      	adds	r3, #1
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
 800a796:	e006      	b.n	800a7a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d012      	beq.n	800a7cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7a6:	f7f8 fc07 	bl	8002fb8 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b4:	d102      	bne.n	800a7bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a7b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7ba:	e05a      	b.n	800a872 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0cf      	beq.n	800a76a <SD_FindSCR+0x96>
 800a7ca:	e000      	b.n	800a7ce <SD_FindSCR+0xfa>
      break;
 800a7cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	e044      	b.n	800a872 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ee:	f003 0302 	and.w	r3, r3, #2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a7fe:	2302      	movs	r3, #2
 800a800:	e037      	b.n	800a872 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a808:	f003 0320 	and.w	r3, r3, #32
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2220      	movs	r2, #32
 800a816:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a818:	2320      	movs	r3, #32
 800a81a:	e02a      	b.n	800a872 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	061a      	lsls	r2, r3, #24
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a832:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	0a1b      	lsrs	r3, r3, #8
 800a838:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a83c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	0e1b      	lsrs	r3, r3, #24
 800a842:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a846:	601a      	str	r2, [r3, #0]
    scr++;
 800a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84a:	3304      	adds	r3, #4
 800a84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	061a      	lsls	r2, r3, #24
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	021b      	lsls	r3, r3, #8
 800a856:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a85a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a864:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	0e1b      	lsrs	r3, r3, #24
 800a86a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	373c      	adds	r7, #60	@ 0x3c
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}

0800a87a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e025      	b.n	800a8da <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7f6 fa10 	bl	8000cc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f002 f9a8 	bl	800cc10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	f002 f9fc 	bl	800ccc8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e04c      	b.n	800a990 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f7 fbc8 	bl	80020a0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0203 	bic.w	r2, r2, #3
 800a926:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4b19      	ldr	r3, [pc, #100]	@ (800a998 <HAL_SPDIFRX_Init+0xb4>)
 800a934:	4013      	ands	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a940:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a946:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a94c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a952:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a958:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a95e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a964:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a96a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a970:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	fff88407 	.word	0xfff88407

0800a99c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e049      	b.n	800aa42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f8 f822 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f000 fc12 	bl	800b204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d001      	beq.n	800aa64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e054      	b.n	800ab0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2202      	movs	r2, #2
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f042 0201 	orr.w	r2, r2, #1
 800aa7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a26      	ldr	r2, [pc, #152]	@ (800ab1c <HAL_TIM_Base_Start_IT+0xd0>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d022      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa8e:	d01d      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a22      	ldr	r2, [pc, #136]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d018      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a21      	ldr	r2, [pc, #132]	@ (800ab24 <HAL_TIM_Base_Start_IT+0xd8>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d013      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1f      	ldr	r2, [pc, #124]	@ (800ab28 <HAL_TIM_Base_Start_IT+0xdc>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00e      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab2c <HAL_TIM_Base_Start_IT+0xe0>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d009      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1c      	ldr	r2, [pc, #112]	@ (800ab30 <HAL_TIM_Base_Start_IT+0xe4>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x80>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab34 <HAL_TIM_Base_Start_IT+0xe8>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d115      	bne.n	800aaf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	4b19      	ldr	r3, [pc, #100]	@ (800ab38 <HAL_TIM_Base_Start_IT+0xec>)
 800aad4:	4013      	ands	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b06      	cmp	r3, #6
 800aadc:	d015      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0xbe>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aae4:	d011      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f042 0201 	orr.w	r2, r2, #1
 800aaf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf6:	e008      	b.n	800ab0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e000      	b.n	800ab0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40000400 	.word	0x40000400
 800ab24:	40000800 	.word	0x40000800
 800ab28:	40000c00 	.word	0x40000c00
 800ab2c:	40010400 	.word	0x40010400
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40001800 	.word	0x40001800
 800ab38:	00010007 	.word	0x00010007

0800ab3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e049      	b.n	800abe2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7f7 ffc0 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f000 fb42 	bl	800b204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d020      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01b      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f06f 0202 	mvn.w	r2, #2
 800ac1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	f003 0303 	and.w	r3, r3, #3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fac7 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800ac3a:	e005      	b.n	800ac48 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fab9 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 faca 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d020      	beq.n	800ac9a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01b      	beq.n	800ac9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f06f 0204 	mvn.w	r2, #4
 800ac6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 faa1 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800ac86:	e005      	b.n	800ac94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa93 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 faa4 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d020      	beq.n	800ace6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01b      	beq.n	800ace6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f06f 0208 	mvn.w	r2, #8
 800acb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2204      	movs	r2, #4
 800acbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	f003 0303 	and.w	r3, r3, #3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fa7b 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800acd2:	e005      	b.n	800ace0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fa6d 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa7e 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f003 0310 	and.w	r3, r3, #16
 800acec:	2b00      	cmp	r3, #0
 800acee:	d020      	beq.n	800ad32 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f003 0310 	and.w	r3, r3, #16
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01b      	beq.n	800ad32 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f06f 0210 	mvn.w	r2, #16
 800ad02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2208      	movs	r2, #8
 800ad08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa55 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800ad1e:	e005      	b.n	800ad2c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fa47 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa58 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00c      	beq.n	800ad56 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f06f 0201 	mvn.w	r2, #1
 800ad4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7f6 fe39 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00c      	beq.n	800ad84 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d007      	beq.n	800ad84 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fefa 	bl	800bb78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00c      	beq.n	800ada8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ada0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fef2 	bl	800bb8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00c      	beq.n	800adcc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d007      	beq.n	800adcc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800adc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa12 	bl	800b1f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00c      	beq.n	800adf0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d007      	beq.n	800adf0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f06f 0220 	mvn.w	r2, #32
 800ade8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 feba 	bl	800bb64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adf0:	bf00      	nop
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d101      	bne.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e0ff      	b.n	800b016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b14      	cmp	r3, #20
 800ae22:	f200 80f0 	bhi.w	800b006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae26:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae81 	.word	0x0800ae81
 800ae30:	0800b007 	.word	0x0800b007
 800ae34:	0800b007 	.word	0x0800b007
 800ae38:	0800b007 	.word	0x0800b007
 800ae3c:	0800aec1 	.word	0x0800aec1
 800ae40:	0800b007 	.word	0x0800b007
 800ae44:	0800b007 	.word	0x0800b007
 800ae48:	0800b007 	.word	0x0800b007
 800ae4c:	0800af03 	.word	0x0800af03
 800ae50:	0800b007 	.word	0x0800b007
 800ae54:	0800b007 	.word	0x0800b007
 800ae58:	0800b007 	.word	0x0800b007
 800ae5c:	0800af43 	.word	0x0800af43
 800ae60:	0800b007 	.word	0x0800b007
 800ae64:	0800b007 	.word	0x0800b007
 800ae68:	0800b007 	.word	0x0800b007
 800ae6c:	0800af85 	.word	0x0800af85
 800ae70:	0800b007 	.word	0x0800b007
 800ae74:	0800b007 	.word	0x0800b007
 800ae78:	0800b007 	.word	0x0800b007
 800ae7c:	0800afc5 	.word	0x0800afc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fa68 	bl	800b35c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0208 	orr.w	r2, r2, #8
 800ae9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f022 0204 	bic.w	r2, r2, #4
 800aeaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6999      	ldr	r1, [r3, #24]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	619a      	str	r2, [r3, #24]
      break;
 800aebe:	e0a5      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 faba 	bl	800b440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	699a      	ldr	r2, [r3, #24]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6999      	ldr	r1, [r3, #24]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	021a      	lsls	r2, r3, #8
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	619a      	str	r2, [r3, #24]
      break;
 800af00:	e084      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fb11 	bl	800b530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0208 	orr.w	r2, r2, #8
 800af1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69da      	ldr	r2, [r3, #28]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0204 	bic.w	r2, r2, #4
 800af2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69d9      	ldr	r1, [r3, #28]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	61da      	str	r2, [r3, #28]
      break;
 800af40:	e064      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fb67 	bl	800b61c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69d9      	ldr	r1, [r3, #28]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	021a      	lsls	r2, r3, #8
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	61da      	str	r2, [r3, #28]
      break;
 800af82:	e043      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fb9e 	bl	800b6cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0208 	orr.w	r2, r2, #8
 800af9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0204 	bic.w	r2, r2, #4
 800afae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afc2:	e023      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fbd0 	bl	800b770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	021a      	lsls	r2, r3, #8
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b004:	e002      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]
      break;
 800b00a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b014:	7dfb      	ldrb	r3, [r7, #23]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop

0800b020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_TIM_ConfigClockSource+0x1c>
 800b038:	2302      	movs	r3, #2
 800b03a:	e0b4      	b.n	800b1a6 <HAL_TIM_ConfigClockSource+0x186>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	4b56      	ldr	r3, [pc, #344]	@ (800b1b0 <HAL_TIM_ConfigClockSource+0x190>)
 800b058:	4013      	ands	r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b074:	d03e      	beq.n	800b0f4 <HAL_TIM_ConfigClockSource+0xd4>
 800b076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b07a:	f200 8087 	bhi.w	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b07e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b082:	f000 8086 	beq.w	800b192 <HAL_TIM_ConfigClockSource+0x172>
 800b086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08a:	d87f      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b08c:	2b70      	cmp	r3, #112	@ 0x70
 800b08e:	d01a      	beq.n	800b0c6 <HAL_TIM_ConfigClockSource+0xa6>
 800b090:	2b70      	cmp	r3, #112	@ 0x70
 800b092:	d87b      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b094:	2b60      	cmp	r3, #96	@ 0x60
 800b096:	d050      	beq.n	800b13a <HAL_TIM_ConfigClockSource+0x11a>
 800b098:	2b60      	cmp	r3, #96	@ 0x60
 800b09a:	d877      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b09c:	2b50      	cmp	r3, #80	@ 0x50
 800b09e:	d03c      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0xfa>
 800b0a0:	2b50      	cmp	r3, #80	@ 0x50
 800b0a2:	d873      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b0a4:	2b40      	cmp	r3, #64	@ 0x40
 800b0a6:	d058      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x13a>
 800b0a8:	2b40      	cmp	r3, #64	@ 0x40
 800b0aa:	d86f      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b0ac:	2b30      	cmp	r3, #48	@ 0x30
 800b0ae:	d064      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0x15a>
 800b0b0:	2b30      	cmp	r3, #48	@ 0x30
 800b0b2:	d86b      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	d060      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0x15a>
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d867      	bhi.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d05c      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c0:	2b10      	cmp	r3, #16
 800b0c2:	d05a      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c4:	e062      	b.n	800b18c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0d6:	f000 fc19 	bl	800b90c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	609a      	str	r2, [r3, #8]
      break;
 800b0f2:	e04f      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b104:	f000 fc02 	bl	800b90c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b116:	609a      	str	r2, [r3, #8]
      break;
 800b118:	e03c      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b126:	461a      	mov	r2, r3
 800b128:	f000 fb76 	bl	800b818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2150      	movs	r1, #80	@ 0x50
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fbcf 	bl	800b8d6 <TIM_ITRx_SetConfig>
      break;
 800b138:	e02c      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b146:	461a      	mov	r2, r3
 800b148:	f000 fb95 	bl	800b876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2160      	movs	r1, #96	@ 0x60
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fbbf 	bl	800b8d6 <TIM_ITRx_SetConfig>
      break;
 800b158:	e01c      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b166:	461a      	mov	r2, r3
 800b168:	f000 fb56 	bl	800b818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2140      	movs	r1, #64	@ 0x40
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fbaf 	bl	800b8d6 <TIM_ITRx_SetConfig>
      break;
 800b178:	e00c      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4619      	mov	r1, r3
 800b184:	4610      	mov	r0, r2
 800b186:	f000 fba6 	bl	800b8d6 <TIM_ITRx_SetConfig>
      break;
 800b18a:	e003      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
      break;
 800b190:	e000      	b.n	800b194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	fffeff88 	.word	0xfffeff88

0800b1b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a46      	ldr	r2, [pc, #280]	@ (800b330 <TIM_Base_SetConfig+0x12c>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d013      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b222:	d00f      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a43      	ldr	r2, [pc, #268]	@ (800b334 <TIM_Base_SetConfig+0x130>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d00b      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a42      	ldr	r2, [pc, #264]	@ (800b338 <TIM_Base_SetConfig+0x134>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d007      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a41      	ldr	r2, [pc, #260]	@ (800b33c <TIM_Base_SetConfig+0x138>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d003      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a40      	ldr	r2, [pc, #256]	@ (800b340 <TIM_Base_SetConfig+0x13c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d108      	bne.n	800b256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a35      	ldr	r2, [pc, #212]	@ (800b330 <TIM_Base_SetConfig+0x12c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d02b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b264:	d027      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a32      	ldr	r2, [pc, #200]	@ (800b334 <TIM_Base_SetConfig+0x130>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d023      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a31      	ldr	r2, [pc, #196]	@ (800b338 <TIM_Base_SetConfig+0x134>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d01f      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a30      	ldr	r2, [pc, #192]	@ (800b33c <TIM_Base_SetConfig+0x138>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d01b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a2f      	ldr	r2, [pc, #188]	@ (800b340 <TIM_Base_SetConfig+0x13c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d017      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a2e      	ldr	r2, [pc, #184]	@ (800b344 <TIM_Base_SetConfig+0x140>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d013      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a2d      	ldr	r2, [pc, #180]	@ (800b348 <TIM_Base_SetConfig+0x144>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00f      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a2c      	ldr	r2, [pc, #176]	@ (800b34c <TIM_Base_SetConfig+0x148>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b350 <TIM_Base_SetConfig+0x14c>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d007      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a2a      	ldr	r2, [pc, #168]	@ (800b354 <TIM_Base_SetConfig+0x150>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d003      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a29      	ldr	r2, [pc, #164]	@ (800b358 <TIM_Base_SetConfig+0x154>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d108      	bne.n	800b2c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a10      	ldr	r2, [pc, #64]	@ (800b330 <TIM_Base_SetConfig+0x12c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_Base_SetConfig+0xf8>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a12      	ldr	r2, [pc, #72]	@ (800b340 <TIM_Base_SetConfig+0x13c>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d103      	bne.n	800b304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b01      	cmp	r3, #1
 800b314:	d105      	bne.n	800b322 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f023 0201 	bic.w	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	611a      	str	r2, [r3, #16]
  }
}
 800b322:	bf00      	nop
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	40010000 	.word	0x40010000
 800b334:	40000400 	.word	0x40000400
 800b338:	40000800 	.word	0x40000800
 800b33c:	40000c00 	.word	0x40000c00
 800b340:	40010400 	.word	0x40010400
 800b344:	40014000 	.word	0x40014000
 800b348:	40014400 	.word	0x40014400
 800b34c:	40014800 	.word	0x40014800
 800b350:	40001800 	.word	0x40001800
 800b354:	40001c00 	.word	0x40001c00
 800b358:	40002000 	.word	0x40002000

0800b35c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	f023 0201 	bic.w	r2, r3, #1
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	4b2b      	ldr	r3, [pc, #172]	@ (800b434 <TIM_OC1_SetConfig+0xd8>)
 800b388:	4013      	ands	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f023 0302 	bic.w	r3, r3, #2
 800b3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a21      	ldr	r2, [pc, #132]	@ (800b438 <TIM_OC1_SetConfig+0xdc>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_OC1_SetConfig+0x64>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a20      	ldr	r2, [pc, #128]	@ (800b43c <TIM_OC1_SetConfig+0xe0>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10c      	bne.n	800b3da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f023 0308 	bic.w	r3, r3, #8
 800b3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f023 0304 	bic.w	r3, r3, #4
 800b3d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a16      	ldr	r2, [pc, #88]	@ (800b438 <TIM_OC1_SetConfig+0xdc>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d003      	beq.n	800b3ea <TIM_OC1_SetConfig+0x8e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a15      	ldr	r2, [pc, #84]	@ (800b43c <TIM_OC1_SetConfig+0xe0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d111      	bne.n	800b40e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	621a      	str	r2, [r3, #32]
}
 800b428:	bf00      	nop
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	fffeff8f 	.word	0xfffeff8f
 800b438:	40010000 	.word	0x40010000
 800b43c:	40010400 	.word	0x40010400

0800b440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	f023 0210 	bic.w	r2, r3, #16
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4b2e      	ldr	r3, [pc, #184]	@ (800b524 <TIM_OC2_SetConfig+0xe4>)
 800b46c:	4013      	ands	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f023 0320 	bic.w	r3, r3, #32
 800b48a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	4313      	orrs	r3, r2
 800b496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a23      	ldr	r2, [pc, #140]	@ (800b528 <TIM_OC2_SetConfig+0xe8>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d003      	beq.n	800b4a8 <TIM_OC2_SetConfig+0x68>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a22      	ldr	r2, [pc, #136]	@ (800b52c <TIM_OC2_SetConfig+0xec>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d10d      	bne.n	800b4c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a18      	ldr	r2, [pc, #96]	@ (800b528 <TIM_OC2_SetConfig+0xe8>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <TIM_OC2_SetConfig+0x94>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a17      	ldr	r2, [pc, #92]	@ (800b52c <TIM_OC2_SetConfig+0xec>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d113      	bne.n	800b4fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	621a      	str	r2, [r3, #32]
}
 800b516:	bf00      	nop
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	feff8fff 	.word	0xfeff8fff
 800b528:	40010000 	.word	0x40010000
 800b52c:	40010400 	.word	0x40010400

0800b530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4b2d      	ldr	r3, [pc, #180]	@ (800b610 <TIM_OC3_SetConfig+0xe0>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a22      	ldr	r2, [pc, #136]	@ (800b614 <TIM_OC3_SetConfig+0xe4>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <TIM_OC3_SetConfig+0x66>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a21      	ldr	r2, [pc, #132]	@ (800b618 <TIM_OC3_SetConfig+0xe8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d10d      	bne.n	800b5b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b59c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	021b      	lsls	r3, r3, #8
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a17      	ldr	r2, [pc, #92]	@ (800b614 <TIM_OC3_SetConfig+0xe4>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d003      	beq.n	800b5c2 <TIM_OC3_SetConfig+0x92>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a16      	ldr	r2, [pc, #88]	@ (800b618 <TIM_OC3_SetConfig+0xe8>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d113      	bne.n	800b5ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	621a      	str	r2, [r3, #32]
}
 800b604:	bf00      	nop
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	fffeff8f 	.word	0xfffeff8f
 800b614:	40010000 	.word	0x40010000
 800b618:	40010400 	.word	0x40010400

0800b61c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c0 <TIM_OC4_SetConfig+0xa4>)
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	021b      	lsls	r3, r3, #8
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	031b      	lsls	r3, r3, #12
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a13      	ldr	r2, [pc, #76]	@ (800b6c4 <TIM_OC4_SetConfig+0xa8>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_OC4_SetConfig+0x68>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a12      	ldr	r2, [pc, #72]	@ (800b6c8 <TIM_OC4_SetConfig+0xac>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d109      	bne.n	800b698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b68a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	019b      	lsls	r3, r3, #6
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	621a      	str	r2, [r3, #32]
}
 800b6b2:	bf00      	nop
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	feff8fff 	.word	0xfeff8fff
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40010400 	.word	0x40010400

0800b6cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a1b      	ldr	r3, [r3, #32]
 800b6e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b764 <TIM_OC5_SetConfig+0x98>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b70c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	041b      	lsls	r3, r3, #16
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a12      	ldr	r2, [pc, #72]	@ (800b768 <TIM_OC5_SetConfig+0x9c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d003      	beq.n	800b72a <TIM_OC5_SetConfig+0x5e>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a11      	ldr	r2, [pc, #68]	@ (800b76c <TIM_OC5_SetConfig+0xa0>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d109      	bne.n	800b73e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b730:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	021b      	lsls	r3, r3, #8
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	621a      	str	r2, [r3, #32]
}
 800b758:	bf00      	nop
 800b75a:	371c      	adds	r7, #28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	fffeff8f 	.word	0xfffeff8f
 800b768:	40010000 	.word	0x40010000
 800b76c:	40010400 	.word	0x40010400

0800b770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4b1c      	ldr	r3, [pc, #112]	@ (800b80c <TIM_OC6_SetConfig+0x9c>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	051b      	lsls	r3, r3, #20
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a13      	ldr	r2, [pc, #76]	@ (800b810 <TIM_OC6_SetConfig+0xa0>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_OC6_SetConfig+0x60>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a12      	ldr	r2, [pc, #72]	@ (800b814 <TIM_OC6_SetConfig+0xa4>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d109      	bne.n	800b7e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	029b      	lsls	r3, r3, #10
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	621a      	str	r2, [r3, #32]
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	feff8fff 	.word	0xfeff8fff
 800b810:	40010000 	.word	0x40010000
 800b814:	40010400 	.word	0x40010400

0800b818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	f023 0201 	bic.w	r2, r3, #1
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f023 030a 	bic.w	r3, r3, #10
 800b854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	621a      	str	r2, [r3, #32]
}
 800b86a:	bf00      	nop
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b876:	b480      	push	{r7}
 800b878:	b087      	sub	sp, #28
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	f023 0210 	bic.w	r2, r3, #16
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	031b      	lsls	r3, r3, #12
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b8b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	621a      	str	r2, [r3, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	f043 0307 	orr.w	r3, r3, #7
 800b8f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	609a      	str	r2, [r3, #8]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	021a      	lsls	r2, r3, #8
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	431a      	orrs	r2, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4313      	orrs	r3, r2
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4313      	orrs	r3, r2
 800b938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	609a      	str	r2, [r3, #8]
}
 800b940:	bf00      	nop
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b960:	2302      	movs	r3, #2
 800b962:	e06d      	b.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a30      	ldr	r2, [pc, #192]	@ (800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d004      	beq.n	800b998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a2f      	ldr	r2, [pc, #188]	@ (800ba50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d108      	bne.n	800b9aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b99e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a20      	ldr	r2, [pc, #128]	@ (800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d022      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9d6:	d01d      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d018      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a1c      	ldr	r2, [pc, #112]	@ (800ba58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d013      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00e      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a15      	ldr	r2, [pc, #84]	@ (800ba50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d009      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a16      	ldr	r2, [pc, #88]	@ (800ba60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d004      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a15      	ldr	r2, [pc, #84]	@ (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d10c      	bne.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40010400 	.word	0x40010400
 800ba54:	40000400 	.word	0x40000400
 800ba58:	40000800 	.word	0x40000800
 800ba5c:	40000c00 	.word	0x40000c00
 800ba60:	40014000 	.word	0x40014000
 800ba64:	40001800 	.word	0x40001800

0800ba68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e065      	b.n	800bb50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	4313      	orrs	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baea:	4313      	orrs	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	041b      	lsls	r3, r3, #16
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a16      	ldr	r2, [pc, #88]	@ (800bb5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d004      	beq.n	800bb12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a14      	ldr	r2, [pc, #80]	@ (800bb60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d115      	bne.n	800bb3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1c:	051b      	lsls	r3, r3, #20
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	40010000 	.word	0x40010000
 800bb60:	40010400 	.word	0x40010400

0800bb64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e040      	b.n	800bc34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7f7 f8de 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2224      	movs	r2, #36	@ 0x24
 800bbcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0201 	bic.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fe08 	bl	800c7fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fba1 	bl	800c334 <UART_SetConfig>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e01b      	b.n	800bc34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689a      	ldr	r2, [r3, #8]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0201 	orr.w	r2, r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fe87 	bl	800c940 <UART_CheckIdleState>
 800bc32:	4603      	mov	r3, r0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	@ 0x28
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc50:	2b20      	cmp	r3, #32
 800bc52:	d177      	bne.n	800bd44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <HAL_UART_Transmit+0x24>
 800bc5a:	88fb      	ldrh	r3, [r7, #6]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e070      	b.n	800bd46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2221      	movs	r2, #33	@ 0x21
 800bc70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc72:	f7f7 f9a1 	bl	8002fb8 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	88fa      	ldrh	r2, [r7, #6]
 800bc7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc90:	d108      	bne.n	800bca4 <HAL_UART_Transmit+0x68>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d104      	bne.n	800bca4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	e003      	b.n	800bcac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bcac:	e02f      	b.n	800bd0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2180      	movs	r1, #128	@ 0x80
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 fe98 	bl	800c9ee <UART_WaitOnFlagUntilTimeout>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e03b      	b.n	800bd46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10b      	bne.n	800bcec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bce2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	3302      	adds	r3, #2
 800bce8:	61bb      	str	r3, [r7, #24]
 800bcea:	e007      	b.n	800bcfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	781a      	ldrb	r2, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1c9      	bne.n	800bcae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2200      	movs	r2, #0
 800bd22:	2140      	movs	r1, #64	@ 0x40
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 fe62 	bl	800c9ee <UART_WaitOnFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d004      	beq.n	800bd3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2220      	movs	r2, #32
 800bd34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e005      	b.n	800bd46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	e000      	b.n	800bd46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bd44:	2302      	movs	r3, #2
  }
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b0ba      	sub	sp, #232	@ 0xe8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bd7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bd7e:	4013      	ands	r3, r2
 800bd80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bd84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d115      	bne.n	800bdb8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd90:	f003 0320 	and.w	r3, r3, #32
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00f      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd9c:	f003 0320 	and.w	r3, r3, #32
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d009      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 8297 	beq.w	800c2dc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
      }
      return;
 800bdb6:	e291      	b.n	800c2dc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8117 	beq.w	800bff0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bdc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d106      	bne.n	800bddc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bdce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bdd2:	4b85      	ldr	r3, [pc, #532]	@ (800bfe8 <HAL_UART_IRQHandler+0x298>)
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 810a 	beq.w	800bff0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d011      	beq.n	800be0c <HAL_UART_IRQHandler+0xbc>
 800bde8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00b      	beq.n	800be0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be02:	f043 0201 	orr.w	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be10:	f003 0302 	and.w	r3, r3, #2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d011      	beq.n	800be3c <HAL_UART_IRQHandler+0xec>
 800be18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2202      	movs	r2, #2
 800be2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be32:	f043 0204 	orr.w	r2, r3, #4
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d011      	beq.n	800be6c <HAL_UART_IRQHandler+0x11c>
 800be48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00b      	beq.n	800be6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2204      	movs	r2, #4
 800be5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be62:	f043 0202 	orr.w	r2, r3, #2
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b00      	cmp	r3, #0
 800be76:	d017      	beq.n	800bea8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800be78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be7c:	f003 0320 	and.w	r3, r3, #32
 800be80:	2b00      	cmp	r3, #0
 800be82:	d105      	bne.n	800be90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800be84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2208      	movs	r2, #8
 800be96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be9e:	f043 0208 	orr.w	r2, r3, #8
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d012      	beq.n	800beda <HAL_UART_IRQHandler+0x18a>
 800beb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00c      	beq.n	800beda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bed0:	f043 0220 	orr.w	r2, r3, #32
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 81fd 	beq.w	800c2e0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00d      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b00      	cmp	r3, #0
 800befc:	d007      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf22:	2b40      	cmp	r3, #64	@ 0x40
 800bf24:	d005      	beq.n	800bf32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d04f      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fdc8 	bl	800cac8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf42:	2b40      	cmp	r3, #64	@ 0x40
 800bf44:	d141      	bne.n	800bfca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf54:	e853 3f00 	ldrex	r3, [r3]
 800bf58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bf5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bf72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bf76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bf7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bf82:	e841 2300 	strex	r3, r2, [r1]
 800bf86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bf8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1d9      	bne.n	800bf46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d013      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf9e:	4a13      	ldr	r2, [pc, #76]	@ (800bfec <HAL_UART_IRQHandler+0x29c>)
 800bfa0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f7 fde8 	bl	8003b7c <HAL_DMA_Abort_IT>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d017      	beq.n	800bfe2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc0:	e00f      	b.n	800bfe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f9a0 	bl	800c308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc8:	e00b      	b.n	800bfe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f99c 	bl	800c308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd0:	e007      	b.n	800bfe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f998 	bl	800c308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bfe0:	e17e      	b.n	800c2e0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe2:	bf00      	nop
    return;
 800bfe4:	e17c      	b.n	800c2e0 <HAL_UART_IRQHandler+0x590>
 800bfe6:	bf00      	nop
 800bfe8:	04000120 	.word	0x04000120
 800bfec:	0800cb91 	.word	0x0800cb91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	f040 814c 	bne.w	800c292 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bffe:	f003 0310 	and.w	r3, r3, #16
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 8145 	beq.w	800c292 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c00c:	f003 0310 	and.w	r3, r3, #16
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 813e 	beq.w	800c292 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2210      	movs	r2, #16
 800c01c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c028:	2b40      	cmp	r3, #64	@ 0x40
 800c02a:	f040 80b6 	bne.w	800c19a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c03a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8150 	beq.w	800c2e4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c04a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c04e:	429a      	cmp	r2, r3
 800c050:	f080 8148 	bcs.w	800c2e4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c05a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c068:	f000 8086 	beq.w	800c178 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c09a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c0a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c0ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1da      	bne.n	800c06c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0c8:	f023 0301 	bic.w	r3, r3, #1
 800c0cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c0da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c0de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c0e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c0ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e1      	bne.n	800c0b6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0fc:	e853 3f00 	ldrex	r3, [r3]
 800c100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3308      	adds	r3, #8
 800c112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c116:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c118:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c11c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c11e:	e841 2300 	strex	r3, r2, [r1]
 800c122:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e3      	bne.n	800c0f2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2220      	movs	r2, #32
 800c12e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c140:	e853 3f00 	ldrex	r3, [r3]
 800c144:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c148:	f023 0310 	bic.w	r3, r3, #16
 800c14c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c15a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c15c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c162:	e841 2300 	strex	r3, r2, [r1]
 800c166:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1e4      	bne.n	800c138 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c172:	4618      	mov	r0, r3
 800c174:	f7f7 fc92 	bl	8003a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	b29b      	uxth	r3, r3
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f8c2 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c198:	e0a4      	b.n	800c2e4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 8096 	beq.w	800c2e8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c1bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 8091 	beq.w	800c2e8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	e853 3f00 	ldrex	r3, [r3]
 800c1d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c1ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1f0:	e841 2300 	strex	r3, r2, [r1]
 800c1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e4      	bne.n	800c1c6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
 800c202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	623b      	str	r3, [r7, #32]
   return(result);
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	f023 0301 	bic.w	r3, r3, #1
 800c212:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c220:	633a      	str	r2, [r7, #48]	@ 0x30
 800c222:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c228:	e841 2300 	strex	r3, r2, [r1]
 800c22c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e3      	bne.n	800c1fc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2220      	movs	r2, #32
 800c238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	e853 3f00 	ldrex	r3, [r3]
 800c254:	60fb      	str	r3, [r7, #12]
   return(result);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f023 0310 	bic.w	r3, r3, #16
 800c25c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c26a:	61fb      	str	r3, [r7, #28]
 800c26c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	69b9      	ldr	r1, [r7, #24]
 800c270:	69fa      	ldr	r2, [r7, #28]
 800c272:	e841 2300 	strex	r3, r2, [r1]
 800c276:	617b      	str	r3, [r7, #20]
   return(result);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e4      	bne.n	800c248 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2202      	movs	r2, #2
 800c282:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f846 	bl	800c31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c290:	e02a      	b.n	800c2e8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00e      	beq.n	800c2bc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01c      	beq.n	800c2ec <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	4798      	blx	r3
    }
    return;
 800c2ba:	e017      	b.n	800c2ec <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d012      	beq.n	800c2ee <HAL_UART_IRQHandler+0x59e>
 800c2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00c      	beq.n	800c2ee <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fc71 	bl	800cbbc <UART_EndTransmit_IT>
    return;
 800c2da:	e008      	b.n	800c2ee <HAL_UART_IRQHandler+0x59e>
      return;
 800c2dc:	bf00      	nop
 800c2de:	e006      	b.n	800c2ee <HAL_UART_IRQHandler+0x59e>
    return;
 800c2e0:	bf00      	nop
 800c2e2:	e004      	b.n	800c2ee <HAL_UART_IRQHandler+0x59e>
      return;
 800c2e4:	bf00      	nop
 800c2e6:	e002      	b.n	800c2ee <HAL_UART_IRQHandler+0x59e>
      return;
 800c2e8:	bf00      	nop
 800c2ea:	e000      	b.n	800c2ee <HAL_UART_IRQHandler+0x59e>
    return;
 800c2ec:	bf00      	nop
  }

}
 800c2ee:	37e8      	adds	r7, #232	@ 0xe8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c328:	bf00      	nop
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	431a      	orrs	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	431a      	orrs	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	69db      	ldr	r3, [r3, #28]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4ba6      	ldr	r3, [pc, #664]	@ (800c5f8 <UART_SetConfig+0x2c4>)
 800c360:	4013      	ands	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6812      	ldr	r2, [r2, #0]
 800c366:	6979      	ldr	r1, [r7, #20]
 800c368:	430b      	orrs	r3, r1
 800c36a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a1b      	ldr	r3, [r3, #32]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a94      	ldr	r2, [pc, #592]	@ (800c5fc <UART_SetConfig+0x2c8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d120      	bne.n	800c3f2 <UART_SetConfig+0xbe>
 800c3b0:	4b93      	ldr	r3, [pc, #588]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d816      	bhi.n	800c3ec <UART_SetConfig+0xb8>
 800c3be:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c4 <UART_SetConfig+0x90>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c3d5 	.word	0x0800c3d5
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3db 	.word	0x0800c3db
 800c3d0:	0800c3e7 	.word	0x0800c3e7
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	77fb      	strb	r3, [r7, #31]
 800c3d8:	e150      	b.n	800c67c <UART_SetConfig+0x348>
 800c3da:	2302      	movs	r3, #2
 800c3dc:	77fb      	strb	r3, [r7, #31]
 800c3de:	e14d      	b.n	800c67c <UART_SetConfig+0x348>
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	77fb      	strb	r3, [r7, #31]
 800c3e4:	e14a      	b.n	800c67c <UART_SetConfig+0x348>
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	77fb      	strb	r3, [r7, #31]
 800c3ea:	e147      	b.n	800c67c <UART_SetConfig+0x348>
 800c3ec:	2310      	movs	r3, #16
 800c3ee:	77fb      	strb	r3, [r7, #31]
 800c3f0:	e144      	b.n	800c67c <UART_SetConfig+0x348>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a83      	ldr	r2, [pc, #524]	@ (800c604 <UART_SetConfig+0x2d0>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d132      	bne.n	800c462 <UART_SetConfig+0x12e>
 800c3fc:	4b80      	ldr	r3, [pc, #512]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c402:	f003 030c 	and.w	r3, r3, #12
 800c406:	2b0c      	cmp	r3, #12
 800c408:	d828      	bhi.n	800c45c <UART_SetConfig+0x128>
 800c40a:	a201      	add	r2, pc, #4	@ (adr r2, 800c410 <UART_SetConfig+0xdc>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c445 	.word	0x0800c445
 800c414:	0800c45d 	.word	0x0800c45d
 800c418:	0800c45d 	.word	0x0800c45d
 800c41c:	0800c45d 	.word	0x0800c45d
 800c420:	0800c451 	.word	0x0800c451
 800c424:	0800c45d 	.word	0x0800c45d
 800c428:	0800c45d 	.word	0x0800c45d
 800c42c:	0800c45d 	.word	0x0800c45d
 800c430:	0800c44b 	.word	0x0800c44b
 800c434:	0800c45d 	.word	0x0800c45d
 800c438:	0800c45d 	.word	0x0800c45d
 800c43c:	0800c45d 	.word	0x0800c45d
 800c440:	0800c457 	.word	0x0800c457
 800c444:	2300      	movs	r3, #0
 800c446:	77fb      	strb	r3, [r7, #31]
 800c448:	e118      	b.n	800c67c <UART_SetConfig+0x348>
 800c44a:	2302      	movs	r3, #2
 800c44c:	77fb      	strb	r3, [r7, #31]
 800c44e:	e115      	b.n	800c67c <UART_SetConfig+0x348>
 800c450:	2304      	movs	r3, #4
 800c452:	77fb      	strb	r3, [r7, #31]
 800c454:	e112      	b.n	800c67c <UART_SetConfig+0x348>
 800c456:	2308      	movs	r3, #8
 800c458:	77fb      	strb	r3, [r7, #31]
 800c45a:	e10f      	b.n	800c67c <UART_SetConfig+0x348>
 800c45c:	2310      	movs	r3, #16
 800c45e:	77fb      	strb	r3, [r7, #31]
 800c460:	e10c      	b.n	800c67c <UART_SetConfig+0x348>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a68      	ldr	r2, [pc, #416]	@ (800c608 <UART_SetConfig+0x2d4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d120      	bne.n	800c4ae <UART_SetConfig+0x17a>
 800c46c:	4b64      	ldr	r3, [pc, #400]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c472:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c476:	2b30      	cmp	r3, #48	@ 0x30
 800c478:	d013      	beq.n	800c4a2 <UART_SetConfig+0x16e>
 800c47a:	2b30      	cmp	r3, #48	@ 0x30
 800c47c:	d814      	bhi.n	800c4a8 <UART_SetConfig+0x174>
 800c47e:	2b20      	cmp	r3, #32
 800c480:	d009      	beq.n	800c496 <UART_SetConfig+0x162>
 800c482:	2b20      	cmp	r3, #32
 800c484:	d810      	bhi.n	800c4a8 <UART_SetConfig+0x174>
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <UART_SetConfig+0x15c>
 800c48a:	2b10      	cmp	r3, #16
 800c48c:	d006      	beq.n	800c49c <UART_SetConfig+0x168>
 800c48e:	e00b      	b.n	800c4a8 <UART_SetConfig+0x174>
 800c490:	2300      	movs	r3, #0
 800c492:	77fb      	strb	r3, [r7, #31]
 800c494:	e0f2      	b.n	800c67c <UART_SetConfig+0x348>
 800c496:	2302      	movs	r3, #2
 800c498:	77fb      	strb	r3, [r7, #31]
 800c49a:	e0ef      	b.n	800c67c <UART_SetConfig+0x348>
 800c49c:	2304      	movs	r3, #4
 800c49e:	77fb      	strb	r3, [r7, #31]
 800c4a0:	e0ec      	b.n	800c67c <UART_SetConfig+0x348>
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	77fb      	strb	r3, [r7, #31]
 800c4a6:	e0e9      	b.n	800c67c <UART_SetConfig+0x348>
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	77fb      	strb	r3, [r7, #31]
 800c4ac:	e0e6      	b.n	800c67c <UART_SetConfig+0x348>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a56      	ldr	r2, [pc, #344]	@ (800c60c <UART_SetConfig+0x2d8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d120      	bne.n	800c4fa <UART_SetConfig+0x1c6>
 800c4b8:	4b51      	ldr	r3, [pc, #324]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4c4:	d013      	beq.n	800c4ee <UART_SetConfig+0x1ba>
 800c4c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4c8:	d814      	bhi.n	800c4f4 <UART_SetConfig+0x1c0>
 800c4ca:	2b80      	cmp	r3, #128	@ 0x80
 800c4cc:	d009      	beq.n	800c4e2 <UART_SetConfig+0x1ae>
 800c4ce:	2b80      	cmp	r3, #128	@ 0x80
 800c4d0:	d810      	bhi.n	800c4f4 <UART_SetConfig+0x1c0>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <UART_SetConfig+0x1a8>
 800c4d6:	2b40      	cmp	r3, #64	@ 0x40
 800c4d8:	d006      	beq.n	800c4e8 <UART_SetConfig+0x1b4>
 800c4da:	e00b      	b.n	800c4f4 <UART_SetConfig+0x1c0>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	77fb      	strb	r3, [r7, #31]
 800c4e0:	e0cc      	b.n	800c67c <UART_SetConfig+0x348>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	77fb      	strb	r3, [r7, #31]
 800c4e6:	e0c9      	b.n	800c67c <UART_SetConfig+0x348>
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	77fb      	strb	r3, [r7, #31]
 800c4ec:	e0c6      	b.n	800c67c <UART_SetConfig+0x348>
 800c4ee:	2308      	movs	r3, #8
 800c4f0:	77fb      	strb	r3, [r7, #31]
 800c4f2:	e0c3      	b.n	800c67c <UART_SetConfig+0x348>
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	77fb      	strb	r3, [r7, #31]
 800c4f8:	e0c0      	b.n	800c67c <UART_SetConfig+0x348>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a44      	ldr	r2, [pc, #272]	@ (800c610 <UART_SetConfig+0x2dc>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d125      	bne.n	800c550 <UART_SetConfig+0x21c>
 800c504:	4b3e      	ldr	r3, [pc, #248]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c50e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c512:	d017      	beq.n	800c544 <UART_SetConfig+0x210>
 800c514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c518:	d817      	bhi.n	800c54a <UART_SetConfig+0x216>
 800c51a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c51e:	d00b      	beq.n	800c538 <UART_SetConfig+0x204>
 800c520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c524:	d811      	bhi.n	800c54a <UART_SetConfig+0x216>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <UART_SetConfig+0x1fe>
 800c52a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c52e:	d006      	beq.n	800c53e <UART_SetConfig+0x20a>
 800c530:	e00b      	b.n	800c54a <UART_SetConfig+0x216>
 800c532:	2300      	movs	r3, #0
 800c534:	77fb      	strb	r3, [r7, #31]
 800c536:	e0a1      	b.n	800c67c <UART_SetConfig+0x348>
 800c538:	2302      	movs	r3, #2
 800c53a:	77fb      	strb	r3, [r7, #31]
 800c53c:	e09e      	b.n	800c67c <UART_SetConfig+0x348>
 800c53e:	2304      	movs	r3, #4
 800c540:	77fb      	strb	r3, [r7, #31]
 800c542:	e09b      	b.n	800c67c <UART_SetConfig+0x348>
 800c544:	2308      	movs	r3, #8
 800c546:	77fb      	strb	r3, [r7, #31]
 800c548:	e098      	b.n	800c67c <UART_SetConfig+0x348>
 800c54a:	2310      	movs	r3, #16
 800c54c:	77fb      	strb	r3, [r7, #31]
 800c54e:	e095      	b.n	800c67c <UART_SetConfig+0x348>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a2f      	ldr	r2, [pc, #188]	@ (800c614 <UART_SetConfig+0x2e0>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d125      	bne.n	800c5a6 <UART_SetConfig+0x272>
 800c55a:	4b29      	ldr	r3, [pc, #164]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c568:	d017      	beq.n	800c59a <UART_SetConfig+0x266>
 800c56a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c56e:	d817      	bhi.n	800c5a0 <UART_SetConfig+0x26c>
 800c570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c574:	d00b      	beq.n	800c58e <UART_SetConfig+0x25a>
 800c576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c57a:	d811      	bhi.n	800c5a0 <UART_SetConfig+0x26c>
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <UART_SetConfig+0x254>
 800c580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c584:	d006      	beq.n	800c594 <UART_SetConfig+0x260>
 800c586:	e00b      	b.n	800c5a0 <UART_SetConfig+0x26c>
 800c588:	2301      	movs	r3, #1
 800c58a:	77fb      	strb	r3, [r7, #31]
 800c58c:	e076      	b.n	800c67c <UART_SetConfig+0x348>
 800c58e:	2302      	movs	r3, #2
 800c590:	77fb      	strb	r3, [r7, #31]
 800c592:	e073      	b.n	800c67c <UART_SetConfig+0x348>
 800c594:	2304      	movs	r3, #4
 800c596:	77fb      	strb	r3, [r7, #31]
 800c598:	e070      	b.n	800c67c <UART_SetConfig+0x348>
 800c59a:	2308      	movs	r3, #8
 800c59c:	77fb      	strb	r3, [r7, #31]
 800c59e:	e06d      	b.n	800c67c <UART_SetConfig+0x348>
 800c5a0:	2310      	movs	r3, #16
 800c5a2:	77fb      	strb	r3, [r7, #31]
 800c5a4:	e06a      	b.n	800c67c <UART_SetConfig+0x348>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c618 <UART_SetConfig+0x2e4>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d138      	bne.n	800c622 <UART_SetConfig+0x2ee>
 800c5b0:	4b13      	ldr	r3, [pc, #76]	@ (800c600 <UART_SetConfig+0x2cc>)
 800c5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c5ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c5be:	d017      	beq.n	800c5f0 <UART_SetConfig+0x2bc>
 800c5c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c5c4:	d82a      	bhi.n	800c61c <UART_SetConfig+0x2e8>
 800c5c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5ca:	d00b      	beq.n	800c5e4 <UART_SetConfig+0x2b0>
 800c5cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5d0:	d824      	bhi.n	800c61c <UART_SetConfig+0x2e8>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <UART_SetConfig+0x2aa>
 800c5d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5da:	d006      	beq.n	800c5ea <UART_SetConfig+0x2b6>
 800c5dc:	e01e      	b.n	800c61c <UART_SetConfig+0x2e8>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	77fb      	strb	r3, [r7, #31]
 800c5e2:	e04b      	b.n	800c67c <UART_SetConfig+0x348>
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	77fb      	strb	r3, [r7, #31]
 800c5e8:	e048      	b.n	800c67c <UART_SetConfig+0x348>
 800c5ea:	2304      	movs	r3, #4
 800c5ec:	77fb      	strb	r3, [r7, #31]
 800c5ee:	e045      	b.n	800c67c <UART_SetConfig+0x348>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	77fb      	strb	r3, [r7, #31]
 800c5f4:	e042      	b.n	800c67c <UART_SetConfig+0x348>
 800c5f6:	bf00      	nop
 800c5f8:	efff69f3 	.word	0xefff69f3
 800c5fc:	40011000 	.word	0x40011000
 800c600:	40023800 	.word	0x40023800
 800c604:	40004400 	.word	0x40004400
 800c608:	40004800 	.word	0x40004800
 800c60c:	40004c00 	.word	0x40004c00
 800c610:	40005000 	.word	0x40005000
 800c614:	40011400 	.word	0x40011400
 800c618:	40007800 	.word	0x40007800
 800c61c:	2310      	movs	r3, #16
 800c61e:	77fb      	strb	r3, [r7, #31]
 800c620:	e02c      	b.n	800c67c <UART_SetConfig+0x348>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a72      	ldr	r2, [pc, #456]	@ (800c7f0 <UART_SetConfig+0x4bc>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d125      	bne.n	800c678 <UART_SetConfig+0x344>
 800c62c:	4b71      	ldr	r3, [pc, #452]	@ (800c7f4 <UART_SetConfig+0x4c0>)
 800c62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c632:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c636:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c63a:	d017      	beq.n	800c66c <UART_SetConfig+0x338>
 800c63c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c640:	d817      	bhi.n	800c672 <UART_SetConfig+0x33e>
 800c642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c646:	d00b      	beq.n	800c660 <UART_SetConfig+0x32c>
 800c648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c64c:	d811      	bhi.n	800c672 <UART_SetConfig+0x33e>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <UART_SetConfig+0x326>
 800c652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c656:	d006      	beq.n	800c666 <UART_SetConfig+0x332>
 800c658:	e00b      	b.n	800c672 <UART_SetConfig+0x33e>
 800c65a:	2300      	movs	r3, #0
 800c65c:	77fb      	strb	r3, [r7, #31]
 800c65e:	e00d      	b.n	800c67c <UART_SetConfig+0x348>
 800c660:	2302      	movs	r3, #2
 800c662:	77fb      	strb	r3, [r7, #31]
 800c664:	e00a      	b.n	800c67c <UART_SetConfig+0x348>
 800c666:	2304      	movs	r3, #4
 800c668:	77fb      	strb	r3, [r7, #31]
 800c66a:	e007      	b.n	800c67c <UART_SetConfig+0x348>
 800c66c:	2308      	movs	r3, #8
 800c66e:	77fb      	strb	r3, [r7, #31]
 800c670:	e004      	b.n	800c67c <UART_SetConfig+0x348>
 800c672:	2310      	movs	r3, #16
 800c674:	77fb      	strb	r3, [r7, #31]
 800c676:	e001      	b.n	800c67c <UART_SetConfig+0x348>
 800c678:	2310      	movs	r3, #16
 800c67a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c684:	d15b      	bne.n	800c73e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c686:	7ffb      	ldrb	r3, [r7, #31]
 800c688:	2b08      	cmp	r3, #8
 800c68a:	d828      	bhi.n	800c6de <UART_SetConfig+0x3aa>
 800c68c:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <UART_SetConfig+0x360>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c6b9 	.word	0x0800c6b9
 800c698:	0800c6c1 	.word	0x0800c6c1
 800c69c:	0800c6c9 	.word	0x0800c6c9
 800c6a0:	0800c6df 	.word	0x0800c6df
 800c6a4:	0800c6cf 	.word	0x0800c6cf
 800c6a8:	0800c6df 	.word	0x0800c6df
 800c6ac:	0800c6df 	.word	0x0800c6df
 800c6b0:	0800c6df 	.word	0x0800c6df
 800c6b4:	0800c6d7 	.word	0x0800c6d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6b8:	f7fb fd2a 	bl	8008110 <HAL_RCC_GetPCLK1Freq>
 800c6bc:	61b8      	str	r0, [r7, #24]
        break;
 800c6be:	e013      	b.n	800c6e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6c0:	f7fb fd3a 	bl	8008138 <HAL_RCC_GetPCLK2Freq>
 800c6c4:	61b8      	str	r0, [r7, #24]
        break;
 800c6c6:	e00f      	b.n	800c6e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6c8:	4b4b      	ldr	r3, [pc, #300]	@ (800c7f8 <UART_SetConfig+0x4c4>)
 800c6ca:	61bb      	str	r3, [r7, #24]
        break;
 800c6cc:	e00c      	b.n	800c6e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6ce:	f7fb fc4d 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
 800c6d2:	61b8      	str	r0, [r7, #24]
        break;
 800c6d4:	e008      	b.n	800c6e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6da:	61bb      	str	r3, [r7, #24]
        break;
 800c6dc:	e004      	b.n	800c6e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	77bb      	strb	r3, [r7, #30]
        break;
 800c6e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d074      	beq.n	800c7d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	005a      	lsls	r2, r3, #1
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	085b      	lsrs	r3, r3, #1
 800c6f8:	441a      	add	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c702:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b0f      	cmp	r3, #15
 800c708:	d916      	bls.n	800c738 <UART_SetConfig+0x404>
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c710:	d212      	bcs.n	800c738 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	b29b      	uxth	r3, r3
 800c716:	f023 030f 	bic.w	r3, r3, #15
 800c71a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	085b      	lsrs	r3, r3, #1
 800c720:	b29b      	uxth	r3, r3
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	b29a      	uxth	r2, r3
 800c728:	89fb      	ldrh	r3, [r7, #14]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	89fa      	ldrh	r2, [r7, #14]
 800c734:	60da      	str	r2, [r3, #12]
 800c736:	e04f      	b.n	800c7d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	77bb      	strb	r3, [r7, #30]
 800c73c:	e04c      	b.n	800c7d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c73e:	7ffb      	ldrb	r3, [r7, #31]
 800c740:	2b08      	cmp	r3, #8
 800c742:	d828      	bhi.n	800c796 <UART_SetConfig+0x462>
 800c744:	a201      	add	r2, pc, #4	@ (adr r2, 800c74c <UART_SetConfig+0x418>)
 800c746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74a:	bf00      	nop
 800c74c:	0800c771 	.word	0x0800c771
 800c750:	0800c779 	.word	0x0800c779
 800c754:	0800c781 	.word	0x0800c781
 800c758:	0800c797 	.word	0x0800c797
 800c75c:	0800c787 	.word	0x0800c787
 800c760:	0800c797 	.word	0x0800c797
 800c764:	0800c797 	.word	0x0800c797
 800c768:	0800c797 	.word	0x0800c797
 800c76c:	0800c78f 	.word	0x0800c78f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c770:	f7fb fcce 	bl	8008110 <HAL_RCC_GetPCLK1Freq>
 800c774:	61b8      	str	r0, [r7, #24]
        break;
 800c776:	e013      	b.n	800c7a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c778:	f7fb fcde 	bl	8008138 <HAL_RCC_GetPCLK2Freq>
 800c77c:	61b8      	str	r0, [r7, #24]
        break;
 800c77e:	e00f      	b.n	800c7a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c780:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f8 <UART_SetConfig+0x4c4>)
 800c782:	61bb      	str	r3, [r7, #24]
        break;
 800c784:	e00c      	b.n	800c7a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c786:	f7fb fbf1 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
 800c78a:	61b8      	str	r0, [r7, #24]
        break;
 800c78c:	e008      	b.n	800c7a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c78e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c792:	61bb      	str	r3, [r7, #24]
        break;
 800c794:	e004      	b.n	800c7a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	77bb      	strb	r3, [r7, #30]
        break;
 800c79e:	bf00      	nop
    }

    if (pclk != 0U)
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d018      	beq.n	800c7d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	085a      	lsrs	r2, r3, #1
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	441a      	add	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b0f      	cmp	r3, #15
 800c7be:	d909      	bls.n	800c7d4 <UART_SetConfig+0x4a0>
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7c6:	d205      	bcs.n	800c7d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	60da      	str	r2, [r3, #12]
 800c7d2:	e001      	b.n	800c7d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c7e4:	7fbb      	ldrb	r3, [r7, #30]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3720      	adds	r7, #32
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	40007c00 	.word	0x40007c00
 800c7f4:	40023800 	.word	0x40023800
 800c7f8:	00f42400 	.word	0x00f42400

0800c7fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00a      	beq.n	800c826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82a:	f003 0301 	and.w	r3, r3, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00a      	beq.n	800c848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	430a      	orrs	r2, r1
 800c846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00a      	beq.n	800c86a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86e:	f003 0304 	and.w	r3, r3, #4
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00a      	beq.n	800c88c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	430a      	orrs	r2, r1
 800c88a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00a      	beq.n	800c8ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00a      	beq.n	800c8d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01a      	beq.n	800c912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8fa:	d10a      	bne.n	800c912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	430a      	orrs	r2, r1
 800c910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	430a      	orrs	r2, r1
 800c932:	605a      	str	r2, [r3, #4]
  }
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08c      	sub	sp, #48	@ 0x30
 800c944:	af02      	add	r7, sp, #8
 800c946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c950:	f7f6 fb32 	bl	8002fb8 <HAL_GetTick>
 800c954:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0308 	and.w	r3, r3, #8
 800c960:	2b08      	cmp	r3, #8
 800c962:	d12e      	bne.n	800c9c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96c:	2200      	movs	r2, #0
 800c96e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f83b 	bl	800c9ee <UART_WaitOnFlagUntilTimeout>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d021      	beq.n	800c9c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	e853 3f00 	ldrex	r3, [r3]
 800c98a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c992:	623b      	str	r3, [r7, #32]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	461a      	mov	r2, r3
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	61fb      	str	r3, [r7, #28]
 800c99e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a0:	69b9      	ldr	r1, [r7, #24]
 800c9a2:	69fa      	ldr	r2, [r7, #28]
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e6      	bne.n	800c97e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e011      	b.n	800c9e6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3728      	adds	r7, #40	@ 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	603b      	str	r3, [r7, #0]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9fe:	e04f      	b.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca06:	d04b      	beq.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca08:	f7f6 fad6 	bl	8002fb8 <HAL_GetTick>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	69ba      	ldr	r2, [r7, #24]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d302      	bcc.n	800ca1e <UART_WaitOnFlagUntilTimeout+0x30>
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e04e      	b.n	800cac0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d037      	beq.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b80      	cmp	r3, #128	@ 0x80
 800ca34:	d034      	beq.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b40      	cmp	r3, #64	@ 0x40
 800ca3a:	d031      	beq.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	f003 0308 	and.w	r3, r3, #8
 800ca46:	2b08      	cmp	r3, #8
 800ca48:	d110      	bne.n	800ca6c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2208      	movs	r2, #8
 800ca50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f000 f838 	bl	800cac8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2208      	movs	r2, #8
 800ca5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e029      	b.n	800cac0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca7a:	d111      	bne.n	800caa0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f000 f81e 	bl	800cac8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e00f      	b.n	800cac0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	69da      	ldr	r2, [r3, #28]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	4013      	ands	r3, r2
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	bf0c      	ite	eq
 800cab0:	2301      	moveq	r3, #1
 800cab2:	2300      	movne	r3, #0
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	461a      	mov	r2, r3
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d0a0      	beq.n	800ca00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cac8:	b480      	push	{r7}
 800caca:	b095      	sub	sp, #84	@ 0x54
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caee:	643b      	str	r3, [r7, #64]	@ 0x40
 800caf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800caf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caf6:	e841 2300 	strex	r3, r2, [r1]
 800cafa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1e6      	bne.n	800cad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3308      	adds	r3, #8
 800cb08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	f023 0301 	bic.w	r3, r3, #1
 800cb18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e5      	bne.n	800cb02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d118      	bne.n	800cb70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	e853 3f00 	ldrex	r3, [r3]
 800cb4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f023 0310 	bic.w	r3, r3, #16
 800cb52:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	6979      	ldr	r1, [r7, #20]
 800cb62:	69ba      	ldr	r2, [r7, #24]
 800cb64:	e841 2300 	strex	r3, r2, [r1]
 800cb68:	613b      	str	r3, [r7, #16]
   return(result);
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e6      	bne.n	800cb3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2220      	movs	r2, #32
 800cb74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cb84:	bf00      	nop
 800cb86:	3754      	adds	r7, #84	@ 0x54
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff fbaa 	bl	800c308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbb4:	bf00      	nop
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	e853 3f00 	ldrex	r3, [r3]
 800cbd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbd8:	61fb      	str	r3, [r7, #28]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	61bb      	str	r3, [r7, #24]
 800cbe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	6979      	ldr	r1, [r7, #20]
 800cbe8:	69ba      	ldr	r2, [r7, #24]
 800cbea:	e841 2300 	strex	r3, r2, [r1]
 800cbee:	613b      	str	r3, [r7, #16]
   return(result);
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1e6      	bne.n	800cbc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2220      	movs	r2, #32
 800cbfa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fb76 	bl	800c2f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc08:	bf00      	nop
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d121      	bne.n	800cc66 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	4b27      	ldr	r3, [pc, #156]	@ (800ccc4 <FMC_SDRAM_Init+0xb4>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	6851      	ldr	r1, [r2, #4]
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	6892      	ldr	r2, [r2, #8]
 800cc32:	4311      	orrs	r1, r2
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	68d2      	ldr	r2, [r2, #12]
 800cc38:	4311      	orrs	r1, r2
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	6912      	ldr	r2, [r2, #16]
 800cc3e:	4311      	orrs	r1, r2
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	6952      	ldr	r2, [r2, #20]
 800cc44:	4311      	orrs	r1, r2
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	6992      	ldr	r2, [r2, #24]
 800cc4a:	4311      	orrs	r1, r2
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	69d2      	ldr	r2, [r2, #28]
 800cc50:	4311      	orrs	r1, r2
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	6a12      	ldr	r2, [r2, #32]
 800cc56:	4311      	orrs	r1, r2
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	601a      	str	r2, [r3, #0]
 800cc64:	e026      	b.n	800ccb4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	69d9      	ldr	r1, [r3, #28]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	6a1b      	ldr	r3, [r3, #32]
 800cc76:	4319      	orrs	r1, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	4b0e      	ldr	r3, [pc, #56]	@ (800ccc4 <FMC_SDRAM_Init+0xb4>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	6851      	ldr	r1, [r2, #4]
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	6892      	ldr	r2, [r2, #8]
 800cc94:	4311      	orrs	r1, r2
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	68d2      	ldr	r2, [r2, #12]
 800cc9a:	4311      	orrs	r1, r2
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	6912      	ldr	r2, [r2, #16]
 800cca0:	4311      	orrs	r1, r2
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	6952      	ldr	r2, [r2, #20]
 800cca6:	4311      	orrs	r1, r2
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	6992      	ldr	r2, [r2, #24]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	ffff8000 	.word	0xffff8000

0800ccc8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d128      	bne.n	800cd2c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	1e59      	subs	r1, r3, #1
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	4319      	orrs	r1, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	021b      	lsls	r3, r3, #8
 800ccfa:	4319      	orrs	r1, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	031b      	lsls	r3, r3, #12
 800cd04:	4319      	orrs	r1, r3
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	041b      	lsls	r3, r3, #16
 800cd0e:	4319      	orrs	r1, r3
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	051b      	lsls	r3, r3, #20
 800cd18:	4319      	orrs	r1, r3
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	061b      	lsls	r3, r3, #24
 800cd22:	430b      	orrs	r3, r1
 800cd24:	431a      	orrs	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	609a      	str	r2, [r3, #8]
 800cd2a:	e02d      	b.n	800cd88 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	689a      	ldr	r2, [r3, #8]
 800cd30:	4b19      	ldr	r3, [pc, #100]	@ (800cd98 <FMC_SDRAM_Timing_Init+0xd0>)
 800cd32:	4013      	ands	r3, r2
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	68d2      	ldr	r2, [r2, #12]
 800cd38:	3a01      	subs	r2, #1
 800cd3a:	0311      	lsls	r1, r2, #12
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	6952      	ldr	r2, [r2, #20]
 800cd40:	3a01      	subs	r2, #1
 800cd42:	0512      	lsls	r2, r2, #20
 800cd44:	430a      	orrs	r2, r1
 800cd46:	431a      	orrs	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	1e59      	subs	r1, r3, #1
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	011b      	lsls	r3, r3, #4
 800cd62:	4319      	orrs	r1, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	021b      	lsls	r3, r3, #8
 800cd6c:	4319      	orrs	r1, r3
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	041b      	lsls	r3, r3, #16
 800cd76:	4319      	orrs	r1, r3
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	061b      	lsls	r3, r3, #24
 800cd80:	430b      	orrs	r3, r1
 800cd82:	431a      	orrs	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	ff0f0fff 	.word	0xff0f0fff

0800cd9c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	f107 001c 	add.w	r0, r7, #28
 800cdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cdb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cdb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cdba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cdbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cdc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cdc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	4b07      	ldr	r3, [pc, #28]	@ (800cdf0 <SDMMC_Init+0x54>)
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	b004      	add	sp, #16
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	ffff8100 	.word	0xffff8100

0800cdf4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2203      	movs	r2, #3
 800ce1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 0303 	and.w	r3, r3, #3
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
	...

0800ce48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ce72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68da      	ldr	r2, [r3, #12]
 800ce7e:	4b06      	ldr	r3, [pc, #24]	@ (800ce98 <SDMMC_SendCommand+0x50>)
 800ce80:	4013      	ands	r3, r2
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	fffff000 	.word	0xfffff000

0800ce9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	b2db      	uxtb	r3, r3
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3314      	adds	r3, #20
 800cec4:	461a      	mov	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	4413      	add	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
}  
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf02:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cf08:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cf0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	431a      	orrs	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0

}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf42:	2310      	movs	r3, #16
 800cf44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf46:	2340      	movs	r3, #64	@ 0x40
 800cf48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf54:	f107 0308 	add.w	r3, r7, #8
 800cf58:	4619      	mov	r1, r3
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f7ff ff74 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf64:	2110      	movs	r1, #16
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa1a 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cf6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf6e:	69fb      	ldr	r3, [r7, #28]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3720      	adds	r7, #32
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b088      	sub	sp, #32
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf86:	2311      	movs	r3, #17
 800cf88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf8a:	2340      	movs	r3, #64	@ 0x40
 800cf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf98:	f107 0308 	add.w	r3, r7, #8
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff ff52 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cfa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfa8:	2111      	movs	r1, #17
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f9f8 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cfb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfb2:	69fb      	ldr	r3, [r7, #28]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b088      	sub	sp, #32
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cfca:	2312      	movs	r3, #18
 800cfcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfce:	2340      	movs	r3, #64	@ 0x40
 800cfd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfdc:	f107 0308 	add.w	r3, r7, #8
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff ff30 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cfe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfec:	2112      	movs	r1, #18
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f9d6 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cff6:	69fb      	ldr	r3, [r7, #28]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3720      	adds	r7, #32
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b088      	sub	sp, #32
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d00e:	2318      	movs	r3, #24
 800d010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d012:	2340      	movs	r3, #64	@ 0x40
 800d014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d01e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d020:	f107 0308 	add.w	r3, r7, #8
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff ff0e 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d02c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d030:	2118      	movs	r1, #24
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f9b4 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d052:	2319      	movs	r3, #25
 800d054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d05e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff feec 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d074:	2119      	movs	r1, #25
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f992 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d07e:	69fb      	ldr	r3, [r7, #28]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d094:	230c      	movs	r3, #12
 800d096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d098:	2340      	movs	r3, #64	@ 0x40
 800d09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0a6:	f107 0308 	add.w	r3, r7, #8
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff fecb 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d0b2:	4a05      	ldr	r2, [pc, #20]	@ (800d0c8 <SDMMC_CmdStopTransfer+0x40>)
 800d0b4:	210c      	movs	r1, #12
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f972 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0be:	69fb      	ldr	r3, [r7, #28]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3720      	adds	r7, #32
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	05f5e100 	.word	0x05f5e100

0800d0cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08a      	sub	sp, #40	@ 0x28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d0dc:	2307      	movs	r3, #7
 800d0de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0e0:	2340      	movs	r3, #64	@ 0x40
 800d0e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ee:	f107 0310 	add.w	r3, r7, #16
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7ff fea7 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d0fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0fe:	2107      	movs	r1, #7
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f94d 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d106:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3728      	adds	r7, #40	@ 0x28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d122:	2300      	movs	r3, #0
 800d124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d126:	2300      	movs	r3, #0
 800d128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d12a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d12e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d130:	f107 0308 	add.w	r3, r7, #8
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fe86 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fb67 	bl	800d810 <SDMMC_GetCmdError>
 800d142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d144:	69fb      	ldr	r3, [r7, #28]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b088      	sub	sp, #32
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d156:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d15a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d15c:	2308      	movs	r3, #8
 800d15e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d160:	2340      	movs	r3, #64	@ 0x40
 800d162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d164:	2300      	movs	r3, #0
 800d166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d16c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d16e:	f107 0308 	add.w	r3, r7, #8
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff fe67 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fafa 	bl	800d774 <SDMMC_GetCmdResp7>
 800d180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d182:	69fb      	ldr	r3, [r7, #28]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3720      	adds	r7, #32
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d19a:	2337      	movs	r3, #55	@ 0x37
 800d19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d19e:	2340      	movs	r3, #64	@ 0x40
 800d1a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fe48 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d1b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1bc:	2137      	movs	r1, #55	@ 0x37
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f8ee 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d1c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1c6:	69fb      	ldr	r3, [r7, #28]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3720      	adds	r7, #32
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b088      	sub	sp, #32
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d214 <SDMMC_CmdAppOperCommand+0x44>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d1e2:	2329      	movs	r3, #41	@ 0x29
 800d1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1e6:	2340      	movs	r3, #64	@ 0x40
 800d1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1f4:	f107 0308 	add.w	r3, r7, #8
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fe24 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fa03 	bl	800d60c <SDMMC_GetCmdResp3>
 800d206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d208:	69fb      	ldr	r3, [r7, #28]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3720      	adds	r7, #32
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	80100000 	.word	0x80100000

0800d218 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d226:	2306      	movs	r3, #6
 800d228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d22a:	2340      	movs	r3, #64	@ 0x40
 800d22c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d238:	f107 0308 	add.w	r3, r7, #8
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff fe02 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d244:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d248:	2106      	movs	r1, #6
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f8a8 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d252:	69fb      	ldr	r3, [r7, #28]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d264:	2300      	movs	r3, #0
 800d266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d268:	2333      	movs	r3, #51	@ 0x33
 800d26a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d26c:	2340      	movs	r3, #64	@ 0x40
 800d26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d270:	2300      	movs	r3, #0
 800d272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff fde1 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d28a:	2133      	movs	r1, #51	@ 0x33
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f887 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d294:	69fb      	ldr	r3, [r7, #28]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3720      	adds	r7, #32
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b088      	sub	sp, #32
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2ae:	23c0      	movs	r3, #192	@ 0xc0
 800d2b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2bc:	f107 0308 	add.w	r3, r7, #8
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff fdc0 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f957 	bl	800d57c <SDMMC_GetCmdResp2>
 800d2ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2d0:	69fb      	ldr	r3, [r7, #28]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b088      	sub	sp, #32
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d2e8:	2309      	movs	r3, #9
 800d2ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2ec:	23c0      	movs	r3, #192	@ 0xc0
 800d2ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2fa:	f107 0308 	add.w	r3, r7, #8
 800d2fe:	4619      	mov	r1, r3
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7ff fda1 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f938 	bl	800d57c <SDMMC_GetCmdResp2>
 800d30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d30e:	69fb      	ldr	r3, [r7, #28]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d322:	2300      	movs	r3, #0
 800d324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d326:	2303      	movs	r3, #3
 800d328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d32a:	2340      	movs	r3, #64	@ 0x40
 800d32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d32e:	2300      	movs	r3, #0
 800d330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d338:	f107 0308 	add.w	r3, r7, #8
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fd82 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	2103      	movs	r1, #3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f99d 	bl	800d688 <SDMMC_GetCmdResp6>
 800d34e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d350:	69fb      	ldr	r3, [r7, #28]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3720      	adds	r7, #32
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b088      	sub	sp, #32
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d368:	230d      	movs	r3, #13
 800d36a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d36c:	2340      	movs	r3, #64	@ 0x40
 800d36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d370:	2300      	movs	r3, #0
 800d372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d37a:	f107 0308 	add.w	r3, r7, #8
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff fd61 	bl	800ce48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d38a:	210d      	movs	r1, #13
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f807 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d394:	69fb      	ldr	r3, [r7, #28]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3720      	adds	r7, #32
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
	...

0800d3a0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	607a      	str	r2, [r7, #4]
 800d3ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3ae:	4b70      	ldr	r3, [pc, #448]	@ (800d570 <SDMMC_GetCmdResp1+0x1d0>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a70      	ldr	r2, [pc, #448]	@ (800d574 <SDMMC_GetCmdResp1+0x1d4>)
 800d3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b8:	0a5a      	lsrs	r2, r3, #9
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	fb02 f303 	mul.w	r3, r2, r3
 800d3c0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	1e5a      	subs	r2, r3, #1
 800d3c6:	61fa      	str	r2, [r7, #28]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d102      	bne.n	800d3d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3d0:	e0c9      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0ef      	beq.n	800d3c2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1ea      	bne.n	800d3c2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2204      	movs	r2, #4
 800d3fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3fe:	2304      	movs	r3, #4
 800d400:	e0b1      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d004      	beq.n	800d418 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2201      	movs	r2, #1
 800d412:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d414:	2301      	movs	r3, #1
 800d416:	e0a6      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	22c5      	movs	r2, #197	@ 0xc5
 800d41c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff fd3c 	bl	800ce9c <SDMMC_GetCommandResponse>
 800d424:	4603      	mov	r3, r0
 800d426:	461a      	mov	r2, r3
 800d428:	7afb      	ldrb	r3, [r7, #11]
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d001      	beq.n	800d432 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d42e:	2301      	movs	r3, #1
 800d430:	e099      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff fd3e 	bl	800ceb6 <SDMMC_GetResponse>
 800d43a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	4b4e      	ldr	r3, [pc, #312]	@ (800d578 <SDMMC_GetCmdResp1+0x1d8>)
 800d440:	4013      	ands	r3, r2
 800d442:	2b00      	cmp	r3, #0
 800d444:	d101      	bne.n	800d44a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d446:	2300      	movs	r3, #0
 800d448:	e08d      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	da02      	bge.n	800d456 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d454:	e087      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d460:	2340      	movs	r3, #64	@ 0x40
 800d462:	e080      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d46e:	2380      	movs	r3, #128	@ 0x80
 800d470:	e079      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d47c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d480:	e071      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d48c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d490:	e069      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d49c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4a0:	e061      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4b0:	e059      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4c0:	e051      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d4d0:	e049      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d4e0:	e041      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d4ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4f0:	e039      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d4fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d500:	e031      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d50c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d510:	e029      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d51c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d520:	e021      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d52c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d530:	e019      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d53c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d540:	e011      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d54c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d550:	e009      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f003 0308 	and.w	r3, r3, #8
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d55c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d560:	e001      	b.n	800d566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d566:	4618      	mov	r0, r3
 800d568:	3720      	adds	r7, #32
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20000000 	.word	0x20000000
 800d574:	10624dd3 	.word	0x10624dd3
 800d578:	fdffe008 	.word	0xfdffe008

0800d57c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d584:	4b1f      	ldr	r3, [pc, #124]	@ (800d604 <SDMMC_GetCmdResp2+0x88>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a1f      	ldr	r2, [pc, #124]	@ (800d608 <SDMMC_GetCmdResp2+0x8c>)
 800d58a:	fba2 2303 	umull	r2, r3, r2, r3
 800d58e:	0a5b      	lsrs	r3, r3, #9
 800d590:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d594:	fb02 f303 	mul.w	r3, r2, r3
 800d598:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	1e5a      	subs	r2, r3, #1
 800d59e:	60fa      	str	r2, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5a8:	e026      	b.n	800d5f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0ef      	beq.n	800d59a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1ea      	bne.n	800d59a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c8:	f003 0304 	and.w	r3, r3, #4
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5d6:	2304      	movs	r3, #4
 800d5d8:	e00e      	b.n	800d5f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e003      	b.n	800d5f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	22c5      	movs	r2, #197	@ 0xc5
 800d5f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	20000000 	.word	0x20000000
 800d608:	10624dd3 	.word	0x10624dd3

0800d60c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d614:	4b1a      	ldr	r3, [pc, #104]	@ (800d680 <SDMMC_GetCmdResp3+0x74>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a1a      	ldr	r2, [pc, #104]	@ (800d684 <SDMMC_GetCmdResp3+0x78>)
 800d61a:	fba2 2303 	umull	r2, r3, r2, r3
 800d61e:	0a5b      	lsrs	r3, r3, #9
 800d620:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d624:	fb02 f303 	mul.w	r3, r2, r3
 800d628:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1e5a      	subs	r2, r3, #1
 800d62e:	60fa      	str	r2, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d634:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d638:	e01b      	b.n	800d672 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d63e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0ef      	beq.n	800d62a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1ea      	bne.n	800d62a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d004      	beq.n	800d66a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2204      	movs	r2, #4
 800d664:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d666:	2304      	movs	r3, #4
 800d668:	e003      	b.n	800d672 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	22c5      	movs	r2, #197	@ 0xc5
 800d66e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20000000 	.word	0x20000000
 800d684:	10624dd3 	.word	0x10624dd3

0800d688 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	460b      	mov	r3, r1
 800d692:	607a      	str	r2, [r7, #4]
 800d694:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d696:	4b35      	ldr	r3, [pc, #212]	@ (800d76c <SDMMC_GetCmdResp6+0xe4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a35      	ldr	r2, [pc, #212]	@ (800d770 <SDMMC_GetCmdResp6+0xe8>)
 800d69c:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a0:	0a5b      	lsrs	r3, r3, #9
 800d6a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a6:	fb02 f303 	mul.w	r3, r2, r3
 800d6aa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d6ac:	69fb      	ldr	r3, [r7, #28]
 800d6ae:	1e5a      	subs	r2, r3, #1
 800d6b0:	61fa      	str	r2, [r7, #28]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d6ba:	e052      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d0ef      	beq.n	800d6ac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1ea      	bne.n	800d6ac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6da:	f003 0304 	and.w	r3, r3, #4
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d004      	beq.n	800d6ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2204      	movs	r2, #4
 800d6e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6e8:	2304      	movs	r3, #4
 800d6ea:	e03a      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e02f      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f7ff fbca 	bl	800ce9c <SDMMC_GetCommandResponse>
 800d708:	4603      	mov	r3, r0
 800d70a:	461a      	mov	r2, r3
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	4293      	cmp	r3, r2
 800d710:	d001      	beq.n	800d716 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d712:	2301      	movs	r3, #1
 800d714:	e025      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	22c5      	movs	r2, #197	@ 0xc5
 800d71a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d71c:	2100      	movs	r1, #0
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff fbc9 	bl	800ceb6 <SDMMC_GetResponse>
 800d724:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	0c1b      	lsrs	r3, r3, #16
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d73a:	2300      	movs	r3, #0
 800d73c:	e011      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d74c:	e009      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d75c:	e001      	b.n	800d762 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d75e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d762:	4618      	mov	r0, r3
 800d764:	3720      	adds	r7, #32
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20000000 	.word	0x20000000
 800d770:	10624dd3 	.word	0x10624dd3

0800d774 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d77c:	4b22      	ldr	r3, [pc, #136]	@ (800d808 <SDMMC_GetCmdResp7+0x94>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a22      	ldr	r2, [pc, #136]	@ (800d80c <SDMMC_GetCmdResp7+0x98>)
 800d782:	fba2 2303 	umull	r2, r3, r2, r3
 800d786:	0a5b      	lsrs	r3, r3, #9
 800d788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
 800d790:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	1e5a      	subs	r2, r3, #1
 800d796:	60fa      	str	r2, [r7, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d102      	bne.n	800d7a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d79c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7a0:	e02c      	b.n	800d7fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0ef      	beq.n	800d792 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1ea      	bne.n	800d792 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2204      	movs	r2, #4
 800d7cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ce:	2304      	movs	r3, #4
 800d7d0:	e014      	b.n	800d7fc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d004      	beq.n	800d7e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e009      	b.n	800d7fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2240      	movs	r2, #64	@ 0x40
 800d7f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d7fa:	2300      	movs	r3, #0
  
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	20000000 	.word	0x20000000
 800d80c:	10624dd3 	.word	0x10624dd3

0800d810 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d818:	4b11      	ldr	r3, [pc, #68]	@ (800d860 <SDMMC_GetCmdError+0x50>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a11      	ldr	r2, [pc, #68]	@ (800d864 <SDMMC_GetCmdError+0x54>)
 800d81e:	fba2 2303 	umull	r2, r3, r2, r3
 800d822:	0a5b      	lsrs	r3, r3, #9
 800d824:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d828:	fb02 f303 	mul.w	r3, r2, r3
 800d82c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	1e5a      	subs	r2, r3, #1
 800d832:	60fa      	str	r2, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d838:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d83c:	e009      	b.n	800d852 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d846:	2b00      	cmp	r3, #0
 800d848:	d0f1      	beq.n	800d82e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	22c5      	movs	r2, #197	@ 0xc5
 800d84e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	20000000 	.word	0x20000000
 800d864:	10624dd3 	.word	0x10624dd3

0800d868 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d868:	b084      	sub	sp, #16
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	f107 001c 	add.w	r0, r7, #28
 800d876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d87a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d121      	bne.n	800d8c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d886:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	4b21      	ldr	r3, [pc, #132]	@ (800d918 <USB_CoreInit+0xb0>)
 800d894:	4013      	ands	r3, r2
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d8a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d105      	bne.n	800d8ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f9d4 	bl	800dc68 <USB_CoreReset>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
 800d8c4:	e010      	b.n	800d8e8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f9c8 	bl	800dc68 <USB_CoreReset>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d8e8:	7fbb      	ldrb	r3, [r7, #30]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d10b      	bne.n	800d906 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	f043 0206 	orr.w	r2, r3, #6
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f043 0220 	orr.w	r2, r3, #32
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d906:	7bfb      	ldrb	r3, [r7, #15]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d912:	b004      	add	sp, #16
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	ffbdffbf 	.word	0xffbdffbf

0800d91c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	f043 0201 	orr.w	r2, r3, #1
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	f023 0201 	bic.w	r2, r3, #1
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d96c:	2300      	movs	r3, #0
 800d96e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d97c:	78fb      	ldrb	r3, [r7, #3]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d115      	bne.n	800d9ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d98e:	200a      	movs	r0, #10
 800d990:	f7f5 fb1e 	bl	8002fd0 <HAL_Delay>
      ms += 10U;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	330a      	adds	r3, #10
 800d998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f956 	bl	800dc4c <USB_GetMode>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d01e      	beq.n	800d9e4 <USB_SetCurrentMode+0x84>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2bc7      	cmp	r3, #199	@ 0xc7
 800d9aa:	d9f0      	bls.n	800d98e <USB_SetCurrentMode+0x2e>
 800d9ac:	e01a      	b.n	800d9e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9ae:	78fb      	ldrb	r3, [r7, #3]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d115      	bne.n	800d9e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d9c0:	200a      	movs	r0, #10
 800d9c2:	f7f5 fb05 	bl	8002fd0 <HAL_Delay>
      ms += 10U;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	330a      	adds	r3, #10
 800d9ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f93d 	bl	800dc4c <USB_GetMode>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d005      	beq.n	800d9e4 <USB_SetCurrentMode+0x84>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2bc7      	cmp	r3, #199	@ 0xc7
 800d9dc:	d9f0      	bls.n	800d9c0 <USB_SetCurrentMode+0x60>
 800d9de:	e001      	b.n	800d9e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e005      	b.n	800d9f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d9e8:	d101      	bne.n	800d9ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800da02:	2300      	movs	r3, #0
 800da04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3301      	adds	r3, #1
 800da0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da12:	d901      	bls.n	800da18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	e01b      	b.n	800da50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	daf2      	bge.n	800da06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	019b      	lsls	r3, r3, #6
 800da28:	f043 0220 	orr.w	r2, r3, #32
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	3301      	adds	r3, #1
 800da34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da3c:	d901      	bls.n	800da42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	e006      	b.n	800da50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	f003 0320 	and.w	r3, r3, #32
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	d0f0      	beq.n	800da30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da64:	2300      	movs	r3, #0
 800da66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3301      	adds	r3, #1
 800da6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da74:	d901      	bls.n	800da7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e018      	b.n	800daac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	daf2      	bge.n	800da68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2210      	movs	r2, #16
 800da8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3301      	adds	r3, #1
 800da90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da98:	d901      	bls.n	800da9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e006      	b.n	800daac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	f003 0310 	and.w	r3, r3, #16
 800daa6:	2b10      	cmp	r3, #16
 800daa8:	d0f0      	beq.n	800da8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dab8:	b480      	push	{r7}
 800daba:	b089      	sub	sp, #36	@ 0x24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	4611      	mov	r1, r2
 800dac4:	461a      	mov	r2, r3
 800dac6:	460b      	mov	r3, r1
 800dac8:	71fb      	strb	r3, [r7, #7]
 800daca:	4613      	mov	r3, r2
 800dacc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d123      	bne.n	800db26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dade:	88bb      	ldrh	r3, [r7, #4]
 800dae0:	3303      	adds	r3, #3
 800dae2:	089b      	lsrs	r3, r3, #2
 800dae4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dae6:	2300      	movs	r3, #0
 800dae8:	61bb      	str	r3, [r7, #24]
 800daea:	e018      	b.n	800db1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	031a      	lsls	r2, r3, #12
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800daf8:	461a      	mov	r2, r3
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	3301      	adds	r3, #1
 800db04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	3301      	adds	r3, #1
 800db0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3301      	adds	r3, #1
 800db10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	3301      	adds	r3, #1
 800db16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	3301      	adds	r3, #1
 800db1c:	61bb      	str	r3, [r7, #24]
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	429a      	cmp	r2, r3
 800db24:	d3e2      	bcc.n	800daec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3724      	adds	r7, #36	@ 0x24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800db34:	b480      	push	{r7}
 800db36:	b08b      	sub	sp, #44	@ 0x2c
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	4613      	mov	r3, r2
 800db40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800db4a:	88fb      	ldrh	r3, [r7, #6]
 800db4c:	089b      	lsrs	r3, r3, #2
 800db4e:	b29b      	uxth	r3, r3
 800db50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800db52:	88fb      	ldrh	r3, [r7, #6]
 800db54:	f003 0303 	and.w	r3, r3, #3
 800db58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800db5a:	2300      	movs	r3, #0
 800db5c:	623b      	str	r3, [r7, #32]
 800db5e:	e014      	b.n	800db8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6e:	3301      	adds	r3, #1
 800db70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db74:	3301      	adds	r3, #1
 800db76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7a:	3301      	adds	r3, #1
 800db7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	3301      	adds	r3, #1
 800db82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	3301      	adds	r3, #1
 800db88:	623b      	str	r3, [r7, #32]
 800db8a:	6a3a      	ldr	r2, [r7, #32]
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d3e6      	bcc.n	800db60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800db92:	8bfb      	ldrh	r3, [r7, #30]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d01e      	beq.n	800dbd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800db98:	2300      	movs	r3, #0
 800db9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dba2:	461a      	mov	r2, r3
 800dba4:	f107 0310 	add.w	r3, r7, #16
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	fa22 f303 	lsr.w	r3, r2, r3
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbc:	701a      	strb	r2, [r3, #0]
      i++;
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	623b      	str	r3, [r7, #32]
      pDest++;
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dbca:	8bfb      	ldrh	r3, [r7, #30]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dbd0:	8bfb      	ldrh	r3, [r7, #30]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1ea      	bne.n	800dbac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	372c      	adds	r7, #44	@ 0x2c
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	460b      	mov	r3, r1
 800dc14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800dc1a:	78fb      	ldrb	r3, [r7, #3]
 800dc1c:	015a      	lsls	r2, r3, #5
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	4413      	add	r3, r2
 800dc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc3e:	68bb      	ldr	r3, [r7, #8]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	695b      	ldr	r3, [r3, #20]
 800dc58:	f003 0301 	and.w	r3, r3, #1
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc70:	2300      	movs	r3, #0
 800dc72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc80:	d901      	bls.n	800dc86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e01b      	b.n	800dcbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	daf2      	bge.n	800dc74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	f043 0201 	orr.w	r2, r3, #1
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3301      	adds	r3, #1
 800dca2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dcaa:	d901      	bls.n	800dcb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e006      	b.n	800dcbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d0f0      	beq.n	800dc9e <USB_CoreReset+0x36>

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
	...

0800dccc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dccc:	b084      	sub	sp, #16
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b086      	sub	sp, #24
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dcde:	2300      	movs	r3, #0
 800dce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dcec:	461a      	mov	r2, r3
 800dcee:	2300      	movs	r3, #0
 800dcf0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d119      	bne.n	800dd3e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800dd0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d10a      	bne.n	800dd28 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd20:	f043 0304 	orr.w	r3, r3, #4
 800dd24:	6013      	str	r3, [r2, #0]
 800dd26:	e014      	b.n	800dd52 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd36:	f023 0304 	bic.w	r3, r3, #4
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	e009      	b.n	800dd52 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd4c:	f023 0304 	bic.w	r3, r3, #4
 800dd50:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd52:	2110      	movs	r1, #16
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7ff fe4f 	bl	800d9f8 <USB_FlushTxFifo>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fe79 	bl	800da5c <USB_FlushRxFifo>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dd74:	2300      	movs	r3, #0
 800dd76:	613b      	str	r3, [r7, #16]
 800dd78:	e015      	b.n	800dda6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd86:	461a      	mov	r2, r3
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295
 800dd8c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	015a      	lsls	r2, r3, #5
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4413      	add	r3, r2
 800dd96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3301      	adds	r3, #1
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ddaa:	461a      	mov	r2, r3
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d3e3      	bcc.n	800dd7a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f04f 32ff 	mov.w	r2, #4294967295
 800ddbe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a18      	ldr	r2, [pc, #96]	@ (800de24 <USB_HostInit+0x158>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d10b      	bne.n	800dde0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddce:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a15      	ldr	r2, [pc, #84]	@ (800de28 <USB_HostInit+0x15c>)
 800ddd4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a14      	ldr	r2, [pc, #80]	@ (800de2c <USB_HostInit+0x160>)
 800ddda:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ddde:	e009      	b.n	800ddf4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2280      	movs	r2, #128	@ 0x80
 800dde4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4a11      	ldr	r2, [pc, #68]	@ (800de30 <USB_HostInit+0x164>)
 800ddea:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a11      	ldr	r2, [pc, #68]	@ (800de34 <USB_HostInit+0x168>)
 800ddf0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d105      	bne.n	800de08 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	f043 0210 	orr.w	r2, r3, #16
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	699a      	ldr	r2, [r3, #24]
 800de0c:	4b0a      	ldr	r3, [pc, #40]	@ (800de38 <USB_HostInit+0x16c>)
 800de0e:	4313      	orrs	r3, r2
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800de14:	7dfb      	ldrb	r3, [r7, #23]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de20:	b004      	add	sp, #16
 800de22:	4770      	bx	lr
 800de24:	40040000 	.word	0x40040000
 800de28:	01000200 	.word	0x01000200
 800de2c:	00e00300 	.word	0x00e00300
 800de30:	00600080 	.word	0x00600080
 800de34:	004000e0 	.word	0x004000e0
 800de38:	a3200008 	.word	0xa3200008

0800de3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de5a:	f023 0303 	bic.w	r3, r3, #3
 800de5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	78fb      	ldrb	r3, [r7, #3]
 800de6a:	f003 0303 	and.w	r3, r3, #3
 800de6e:	68f9      	ldr	r1, [r7, #12]
 800de70:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800de74:	4313      	orrs	r3, r2
 800de76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800de78:	78fb      	ldrb	r3, [r7, #3]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d107      	bne.n	800de8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de84:	461a      	mov	r2, r3
 800de86:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800de8a:	6053      	str	r3, [r2, #4]
 800de8c:	e00c      	b.n	800dea8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800de8e:	78fb      	ldrb	r3, [r7, #3]
 800de90:	2b02      	cmp	r3, #2
 800de92:	d107      	bne.n	800dea4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de9a:	461a      	mov	r2, r3
 800de9c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800dea0:	6053      	str	r3, [r2, #4]
 800dea2:	e001      	b.n	800dea8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e000      	b.n	800deaa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b084      	sub	sp, #16
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dec2:	2300      	movs	r3, #0
 800dec4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ded6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dee4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dee6:	2064      	movs	r0, #100	@ 0x64
 800dee8:	f7f5 f872 	bl	8002fd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800def4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800def8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800defa:	200a      	movs	r0, #10
 800defc:	f7f5 f868 	bl	8002fd0 <HAL_Delay>

  return HAL_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800df0a:	b480      	push	{r7}
 800df0c:	b085      	sub	sp, #20
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	460b      	mov	r3, r1
 800df14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800df2e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <USB_DriveVbus+0x44>
 800df3a:	78fb      	ldrb	r3, [r7, #3]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d106      	bne.n	800df4e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800df48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800df4c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800df54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df58:	d109      	bne.n	800df6e <USB_DriveVbus+0x64>
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d106      	bne.n	800df6e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800df68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df6c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	0c5b      	lsrs	r3, r3, #17
 800df9a:	f003 0303 	and.w	r3, r3, #3
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	b29b      	uxth	r3, r3
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4603      	mov	r3, r0
 800dfdc:	70fb      	strb	r3, [r7, #3]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70bb      	strb	r3, [r7, #2]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dfee:	78fb      	ldrb	r3, [r7, #3]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dffa:	461a      	mov	r2, r3
 800dffc:	f04f 33ff 	mov.w	r3, #4294967295
 800e000:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e002:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e006:	2b03      	cmp	r3, #3
 800e008:	d87c      	bhi.n	800e104 <USB_HC_Init+0x138>
 800e00a:	a201      	add	r2, pc, #4	@ (adr r2, 800e010 <USB_HC_Init+0x44>)
 800e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e010:	0800e021 	.word	0x0800e021
 800e014:	0800e0c7 	.word	0x0800e0c7
 800e018:	0800e021 	.word	0x0800e021
 800e01c:	0800e089 	.word	0x0800e089
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	4413      	add	r3, r2
 800e028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e02c:	461a      	mov	r2, r3
 800e02e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e032:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e034:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	da10      	bge.n	800e05e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e03c:	78fb      	ldrb	r3, [r7, #3]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	4413      	add	r3, r2
 800e044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	78fa      	ldrb	r2, [r7, #3]
 800e04c:	0151      	lsls	r1, r2, #5
 800e04e:	693a      	ldr	r2, [r7, #16]
 800e050:	440a      	add	r2, r1
 800e052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e05a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e05c:	e055      	b.n	800e10a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a6f      	ldr	r2, [pc, #444]	@ (800e220 <USB_HC_Init+0x254>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d151      	bne.n	800e10a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e066:	78fb      	ldrb	r3, [r7, #3]
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	78fa      	ldrb	r2, [r7, #3]
 800e076:	0151      	lsls	r1, r2, #5
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	440a      	add	r2, r1
 800e07c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e080:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e084:	60d3      	str	r3, [r2, #12]
      break;
 800e086:	e040      	b.n	800e10a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e094:	461a      	mov	r2, r3
 800e096:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e09a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e09c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da34      	bge.n	800e10e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e0a4:	78fb      	ldrb	r3, [r7, #3]
 800e0a6:	015a      	lsls	r2, r3, #5
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	78fa      	ldrb	r2, [r7, #3]
 800e0b4:	0151      	lsls	r1, r2, #5
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	440a      	add	r2, r1
 800e0ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e0c4:	e023      	b.n	800e10e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e0c6:	78fb      	ldrb	r3, [r7, #3]
 800e0c8:	015a      	lsls	r2, r3, #5
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	f240 2325 	movw	r3, #549	@ 0x225
 800e0d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e0da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da17      	bge.n	800e112 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e0e2:	78fb      	ldrb	r3, [r7, #3]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	78fa      	ldrb	r2, [r7, #3]
 800e0f2:	0151      	lsls	r1, r2, #5
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	440a      	add	r2, r1
 800e0f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0fc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e100:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e102:	e006      	b.n	800e112 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	77fb      	strb	r3, [r7, #31]
      break;
 800e108:	e004      	b.n	800e114 <USB_HC_Init+0x148>
      break;
 800e10a:	bf00      	nop
 800e10c:	e002      	b.n	800e114 <USB_HC_Init+0x148>
      break;
 800e10e:	bf00      	nop
 800e110:	e000      	b.n	800e114 <USB_HC_Init+0x148>
      break;
 800e112:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	015a      	lsls	r2, r3, #5
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	4413      	add	r3, r2
 800e11c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e120:	461a      	mov	r2, r3
 800e122:	2300      	movs	r3, #0
 800e124:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e126:	78fb      	ldrb	r3, [r7, #3]
 800e128:	015a      	lsls	r2, r3, #5
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	4413      	add	r3, r2
 800e12e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	78fa      	ldrb	r2, [r7, #3]
 800e136:	0151      	lsls	r1, r2, #5
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	440a      	add	r2, r1
 800e13c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e140:	f043 0302 	orr.w	r3, r3, #2
 800e144:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e14c:	699a      	ldr	r2, [r3, #24]
 800e14e:	78fb      	ldrb	r3, [r7, #3]
 800e150:	f003 030f 	and.w	r3, r3, #15
 800e154:	2101      	movs	r1, #1
 800e156:	fa01 f303 	lsl.w	r3, r1, r3
 800e15a:	6939      	ldr	r1, [r7, #16]
 800e15c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e160:	4313      	orrs	r3, r2
 800e162:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e170:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e174:	2b00      	cmp	r3, #0
 800e176:	da03      	bge.n	800e180 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e17c:	61bb      	str	r3, [r7, #24]
 800e17e:	e001      	b.n	800e184 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff fef9 	bl	800df7c <USB_GetHostSpeed>
 800e18a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e18c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e190:	2b02      	cmp	r3, #2
 800e192:	d106      	bne.n	800e1a2 <USB_HC_Init+0x1d6>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b02      	cmp	r3, #2
 800e198:	d003      	beq.n	800e1a2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e19a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e001      	b.n	800e1a6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1a6:	787b      	ldrb	r3, [r7, #1]
 800e1a8:	059b      	lsls	r3, r3, #22
 800e1aa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e1ae:	78bb      	ldrb	r3, [r7, #2]
 800e1b0:	02db      	lsls	r3, r3, #11
 800e1b2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e1b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1bc:	049b      	lsls	r3, r3, #18
 800e1be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e1c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e1c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e1c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e1ca:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1d4:	78fa      	ldrb	r2, [r7, #3]
 800e1d6:	0151      	lsls	r1, r2, #5
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	440a      	add	r2, r1
 800e1dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e1e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e1e4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e1e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d003      	beq.n	800e1f6 <USB_HC_Init+0x22a>
 800e1ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d10f      	bne.n	800e216 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e1f6:	78fb      	ldrb	r3, [r7, #3]
 800e1f8:	015a      	lsls	r2, r3, #5
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	78fa      	ldrb	r2, [r7, #3]
 800e206:	0151      	lsls	r1, r2, #5
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	440a      	add	r2, r1
 800e20c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e210:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e214:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e216:	7ffb      	ldrb	r3, [r7, #31]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	40040000 	.word	0x40040000

0800e224 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08c      	sub	sp, #48	@ 0x30
 800e228:	af02      	add	r7, sp, #8
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	4613      	mov	r3, r2
 800e230:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	785b      	ldrb	r3, [r3, #1]
 800e23a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e23c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e240:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4a5d      	ldr	r2, [pc, #372]	@ (800e3bc <USB_HC_StartXfer+0x198>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d12f      	bne.n	800e2aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d11c      	bne.n	800e28a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	7c9b      	ldrb	r3, [r3, #18]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d003      	beq.n	800e260 <USB_HC_StartXfer+0x3c>
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	7c9b      	ldrb	r3, [r3, #18]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d124      	bne.n	800e2aa <USB_HC_StartXfer+0x86>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	799b      	ldrb	r3, [r3, #6]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d120      	bne.n	800e2aa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	69fa      	ldr	r2, [r7, #28]
 800e278:	0151      	lsls	r1, r2, #5
 800e27a:	6a3a      	ldr	r2, [r7, #32]
 800e27c:	440a      	add	r2, r1
 800e27e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e286:	60d3      	str	r3, [r2, #12]
 800e288:	e00f      	b.n	800e2aa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	791b      	ldrb	r3, [r3, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <USB_HC_StartXfer+0x86>
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	795b      	ldrb	r3, [r3, #5]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d107      	bne.n	800e2aa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	785b      	ldrb	r3, [r3, #1]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 fb6b 	bl	800e97c <USB_DoPing>
        return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e232      	b.n	800e710 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	799b      	ldrb	r3, [r3, #6]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d158      	bne.n	800e364 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	78db      	ldrb	r3, [r3, #3]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d007      	beq.n	800e2ce <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e2be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	8a92      	ldrh	r2, [r2, #20]
 800e2c4:	fb03 f202 	mul.w	r2, r3, r2
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	61da      	str	r2, [r3, #28]
 800e2cc:	e07c      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	7c9b      	ldrb	r3, [r3, #18]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d130      	bne.n	800e338 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	2bbc      	cmp	r3, #188	@ 0xbc
 800e2dc:	d918      	bls.n	800e310 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	8a9b      	ldrh	r3, [r3, #20]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	69da      	ldr	r2, [r3, #28]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d003      	beq.n	800e300 <USB_HC_StartXfer+0xdc>
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d103      	bne.n	800e308 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2202      	movs	r2, #2
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	e05f      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2201      	movs	r2, #1
 800e30c:	60da      	str	r2, [r3, #12]
 800e30e:	e05b      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	6a1a      	ldr	r2, [r3, #32]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d007      	beq.n	800e330 <USB_HC_StartXfer+0x10c>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	2b02      	cmp	r3, #2
 800e326:	d003      	beq.n	800e330 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2204      	movs	r2, #4
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	e04b      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2203      	movs	r2, #3
 800e334:	60da      	str	r2, [r3, #12]
 800e336:	e047      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d10d      	bne.n	800e35a <USB_HC_StartXfer+0x136>
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	8a92      	ldrh	r2, [r2, #20]
 800e346:	4293      	cmp	r3, r2
 800e348:	d907      	bls.n	800e35a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e34a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	8a92      	ldrh	r2, [r2, #20]
 800e350:	fb03 f202 	mul.w	r2, r3, r2
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	61da      	str	r2, [r3, #28]
 800e358:	e036      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	6a1a      	ldr	r2, [r3, #32]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	61da      	str	r2, [r3, #28]
 800e362:	e031      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	6a1b      	ldr	r3, [r3, #32]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d018      	beq.n	800e39e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	6a1b      	ldr	r3, [r3, #32]
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	8a92      	ldrh	r2, [r2, #20]
 800e374:	4413      	add	r3, r2
 800e376:	3b01      	subs	r3, #1
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	8a92      	ldrh	r2, [r2, #20]
 800e37c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e380:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e382:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e384:	8b7b      	ldrh	r3, [r7, #26]
 800e386:	429a      	cmp	r2, r3
 800e388:	d90b      	bls.n	800e3a2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e38a:	8b7b      	ldrh	r3, [r7, #26]
 800e38c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e38e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	8a92      	ldrh	r2, [r2, #20]
 800e394:	fb03 f202 	mul.w	r2, r3, r2
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	61da      	str	r2, [r3, #28]
 800e39c:	e001      	b.n	800e3a2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	78db      	ldrb	r3, [r3, #3]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e3aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	8a92      	ldrh	r2, [r2, #20]
 800e3b0:	fb03 f202 	mul.w	r2, r3, r2
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	61da      	str	r2, [r3, #28]
 800e3b8:	e006      	b.n	800e3c8 <USB_HC_StartXfer+0x1a4>
 800e3ba:	bf00      	nop
 800e3bc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	6a1a      	ldr	r2, [r3, #32]
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3d2:	04d9      	lsls	r1, r3, #19
 800e3d4:	4ba3      	ldr	r3, [pc, #652]	@ (800e664 <USB_HC_StartXfer+0x440>)
 800e3d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	7d9b      	ldrb	r3, [r3, #22]
 800e3de:	075b      	lsls	r3, r3, #29
 800e3e0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3e4:	69f9      	ldr	r1, [r7, #28]
 800e3e6:	0148      	lsls	r0, r1, #5
 800e3e8:	6a39      	ldr	r1, [r7, #32]
 800e3ea:	4401      	add	r1, r0
 800e3ec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e3f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	6999      	ldr	r1, [r3, #24]
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	4413      	add	r3, r2
 800e406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e40a:	460a      	mov	r2, r1
 800e40c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e40e:	6a3b      	ldr	r3, [r7, #32]
 800e410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	bf0c      	ite	eq
 800e41e:	2301      	moveq	r3, #1
 800e420:	2300      	movne	r3, #0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	69fa      	ldr	r2, [r7, #28]
 800e436:	0151      	lsls	r1, r2, #5
 800e438:	6a3a      	ldr	r2, [r7, #32]
 800e43a:	440a      	add	r2, r1
 800e43c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e440:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e444:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	015a      	lsls	r2, r3, #5
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	7e7b      	ldrb	r3, [r7, #25]
 800e456:	075b      	lsls	r3, r3, #29
 800e458:	69f9      	ldr	r1, [r7, #28]
 800e45a:	0148      	lsls	r0, r1, #5
 800e45c:	6a39      	ldr	r1, [r7, #32]
 800e45e:	4401      	add	r1, r0
 800e460:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e464:	4313      	orrs	r3, r2
 800e466:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	799b      	ldrb	r3, [r3, #6]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	f040 80c3 	bne.w	800e5f8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	7c5b      	ldrb	r3, [r3, #17]
 800e476:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e47c:	4313      	orrs	r3, r2
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	6a3a      	ldr	r2, [r7, #32]
 800e484:	440a      	add	r2, r1
 800e486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e48a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e48e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	6a3b      	ldr	r3, [r7, #32]
 800e496:	4413      	add	r3, r2
 800e498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	69fa      	ldr	r2, [r7, #28]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	6a3a      	ldr	r2, [r7, #32]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e4ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	79db      	ldrb	r3, [r3, #7]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d123      	bne.n	800e500 <USB_HC_StartXfer+0x2dc>
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	78db      	ldrb	r3, [r3, #3]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d11f      	bne.n	800e500 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	69fa      	ldr	r2, [r7, #28]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	6a3a      	ldr	r2, [r7, #32]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4de:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	69fa      	ldr	r2, [r7, #28]
 800e4f0:	0151      	lsls	r1, r2, #5
 800e4f2:	6a3a      	ldr	r2, [r7, #32]
 800e4f4:	440a      	add	r2, r1
 800e4f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4fe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	7c9b      	ldrb	r3, [r3, #18]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d003      	beq.n	800e510 <USB_HC_StartXfer+0x2ec>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	7c9b      	ldrb	r3, [r3, #18]
 800e50c:	2b03      	cmp	r3, #3
 800e50e:	d117      	bne.n	800e540 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e514:	2b01      	cmp	r3, #1
 800e516:	d113      	bne.n	800e540 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	78db      	ldrb	r3, [r3, #3]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d10f      	bne.n	800e540 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	015a      	lsls	r2, r3, #5
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	4413      	add	r3, r2
 800e528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	69fa      	ldr	r2, [r7, #28]
 800e530:	0151      	lsls	r1, r2, #5
 800e532:	6a3a      	ldr	r2, [r7, #32]
 800e534:	440a      	add	r2, r1
 800e536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e53a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e53e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	7c9b      	ldrb	r3, [r3, #18]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d162      	bne.n	800e60e <USB_HC_StartXfer+0x3ea>
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	78db      	ldrb	r3, [r3, #3]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d15e      	bne.n	800e60e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	3b01      	subs	r3, #1
 800e556:	2b03      	cmp	r3, #3
 800e558:	d858      	bhi.n	800e60c <USB_HC_StartXfer+0x3e8>
 800e55a:	a201      	add	r2, pc, #4	@ (adr r2, 800e560 <USB_HC_StartXfer+0x33c>)
 800e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e560:	0800e571 	.word	0x0800e571
 800e564:	0800e593 	.word	0x0800e593
 800e568:	0800e5b5 	.word	0x0800e5b5
 800e56c:	0800e5d7 	.word	0x0800e5d7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	6a3b      	ldr	r3, [r7, #32]
 800e576:	4413      	add	r3, r2
 800e578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	69fa      	ldr	r2, [r7, #28]
 800e580:	0151      	lsls	r1, r2, #5
 800e582:	6a3a      	ldr	r2, [r7, #32]
 800e584:	440a      	add	r2, r1
 800e586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e58a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e58e:	6053      	str	r3, [r2, #4]
          break;
 800e590:	e03d      	b.n	800e60e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	015a      	lsls	r2, r3, #5
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	69fa      	ldr	r2, [r7, #28]
 800e5a2:	0151      	lsls	r1, r2, #5
 800e5a4:	6a3a      	ldr	r2, [r7, #32]
 800e5a6:	440a      	add	r2, r1
 800e5a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5ac:	f043 030e 	orr.w	r3, r3, #14
 800e5b0:	6053      	str	r3, [r2, #4]
          break;
 800e5b2:	e02c      	b.n	800e60e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	015a      	lsls	r2, r3, #5
 800e5b8:	6a3b      	ldr	r3, [r7, #32]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	0151      	lsls	r1, r2, #5
 800e5c6:	6a3a      	ldr	r2, [r7, #32]
 800e5c8:	440a      	add	r2, r1
 800e5ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e5d2:	6053      	str	r3, [r2, #4]
          break;
 800e5d4:	e01b      	b.n	800e60e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	0151      	lsls	r1, r2, #5
 800e5e8:	6a3a      	ldr	r2, [r7, #32]
 800e5ea:	440a      	add	r2, r1
 800e5ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e5f4:	6053      	str	r3, [r2, #4]
          break;
 800e5f6:	e00a      	b.n	800e60e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	6a3b      	ldr	r3, [r7, #32]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e604:	461a      	mov	r2, r3
 800e606:	2300      	movs	r3, #0
 800e608:	6053      	str	r3, [r2, #4]
 800e60a:	e000      	b.n	800e60e <USB_HC_StartXfer+0x3ea>
          break;
 800e60c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	4413      	add	r3, r2
 800e616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e624:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	78db      	ldrb	r3, [r3, #3]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e634:	613b      	str	r3, [r7, #16]
 800e636:	e003      	b.n	800e640 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e63e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e646:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e654:	461a      	mov	r2, r3
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e65a:	79fb      	ldrb	r3, [r7, #7]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	e055      	b.n	800e710 <USB_HC_StartXfer+0x4ec>
 800e664:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	78db      	ldrb	r3, [r3, #3]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d14e      	bne.n	800e70e <USB_HC_StartXfer+0x4ea>
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	6a1b      	ldr	r3, [r3, #32]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d04a      	beq.n	800e70e <USB_HC_StartXfer+0x4ea>
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	79db      	ldrb	r3, [r3, #7]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d146      	bne.n	800e70e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	7c9b      	ldrb	r3, [r3, #18]
 800e684:	2b03      	cmp	r3, #3
 800e686:	d831      	bhi.n	800e6ec <USB_HC_StartXfer+0x4c8>
 800e688:	a201      	add	r2, pc, #4	@ (adr r2, 800e690 <USB_HC_StartXfer+0x46c>)
 800e68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68e:	bf00      	nop
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6c5 	.word	0x0800e6c5
 800e698:	0800e6a1 	.word	0x0800e6a1
 800e69c:	0800e6c5 	.word	0x0800e6c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	6a1b      	ldr	r3, [r3, #32]
 800e6a4:	3303      	adds	r3, #3
 800e6a6:	089b      	lsrs	r3, r3, #2
 800e6a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e6aa:	8afa      	ldrh	r2, [r7, #22]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d91c      	bls.n	800e6f0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	f043 0220 	orr.w	r2, r3, #32
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e6c2:	e015      	b.n	800e6f0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	6a1b      	ldr	r3, [r3, #32]
 800e6c8:	3303      	adds	r3, #3
 800e6ca:	089b      	lsrs	r3, r3, #2
 800e6cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e6ce:	8afa      	ldrh	r2, [r7, #22]
 800e6d0:	6a3b      	ldr	r3, [r7, #32]
 800e6d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d90a      	bls.n	800e6f4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	619a      	str	r2, [r3, #24]
        }
        break;
 800e6ea:	e003      	b.n	800e6f4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e6ec:	bf00      	nop
 800e6ee:	e002      	b.n	800e6f6 <USB_HC_StartXfer+0x4d2>
        break;
 800e6f0:	bf00      	nop
 800e6f2:	e000      	b.n	800e6f6 <USB_HC_StartXfer+0x4d2>
        break;
 800e6f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	6999      	ldr	r1, [r3, #24]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	785a      	ldrb	r2, [r3, #1]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	b29b      	uxth	r3, r3
 800e704:	2000      	movs	r0, #0
 800e706:	9000      	str	r0, [sp, #0]
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff f9d5 	bl	800dab8 <USB_WritePacket>
  }

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3728      	adds	r7, #40	@ 0x28
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	b29b      	uxth	r3, r3
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b089      	sub	sp, #36	@ 0x24
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	460b      	mov	r3, r1
 800e744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	0c9b      	lsrs	r3, r3, #18
 800e762:	f003 0303 	and.w	r3, r3, #3
 800e766:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	015a      	lsls	r2, r3, #5
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	4413      	add	r3, r2
 800e770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	0fdb      	lsrs	r3, r3, #31
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	015a      	lsls	r2, r3, #5
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	4413      	add	r3, r2
 800e786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	0fdb      	lsrs	r3, r3, #31
 800e78e:	f003 0301 	and.w	r3, r3, #1
 800e792:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b20      	cmp	r3, #32
 800e79e:	d10d      	bne.n	800e7bc <USB_HC_Halt+0x82>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <USB_HC_Halt+0x82>
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d002      	beq.n	800e7b8 <USB_HC_Halt+0x7e>
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b03      	cmp	r3, #3
 800e7b6:	d101      	bne.n	800e7bc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e0d8      	b.n	800e96e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d002      	beq.n	800e7c8 <USB_HC_Halt+0x8e>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d173      	bne.n	800e8b0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69ba      	ldr	r2, [r7, #24]
 800e7d8:	0151      	lsls	r1, r2, #5
 800e7da:	69fa      	ldr	r2, [r7, #28]
 800e7dc:	440a      	add	r2, r1
 800e7de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f003 0320 	and.w	r3, r3, #32
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d14a      	bne.n	800e88a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d133      	bne.n	800e868 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	4413      	add	r3, r2
 800e808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	69ba      	ldr	r2, [r7, #24]
 800e810:	0151      	lsls	r1, r2, #5
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	440a      	add	r2, r1
 800e816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e81a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e81e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	4413      	add	r3, r2
 800e828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	69ba      	ldr	r2, [r7, #24]
 800e830:	0151      	lsls	r1, r2, #5
 800e832:	69fa      	ldr	r2, [r7, #28]
 800e834:	440a      	add	r2, r1
 800e836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e83a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e83e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	3301      	adds	r3, #1
 800e844:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e84c:	d82e      	bhi.n	800e8ac <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	015a      	lsls	r2, r3, #5
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	4413      	add	r3, r2
 800e856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e864:	d0ec      	beq.n	800e840 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e866:	e081      	b.n	800e96c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	015a      	lsls	r2, r3, #5
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	4413      	add	r3, r2
 800e870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	69ba      	ldr	r2, [r7, #24]
 800e878:	0151      	lsls	r1, r2, #5
 800e87a:	69fa      	ldr	r2, [r7, #28]
 800e87c:	440a      	add	r2, r1
 800e87e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e886:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e888:	e070      	b.n	800e96c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	015a      	lsls	r2, r3, #5
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	4413      	add	r3, r2
 800e892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	69ba      	ldr	r2, [r7, #24]
 800e89a:	0151      	lsls	r1, r2, #5
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	440a      	add	r2, r1
 800e8a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e8a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e8aa:	e05f      	b.n	800e96c <USB_HC_Halt+0x232>
            break;
 800e8ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e8ae:	e05d      	b.n	800e96c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	69fa      	ldr	r2, [r7, #28]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d133      	bne.n	800e948 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	4413      	add	r3, r2
 800e908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	0151      	lsls	r1, r2, #5
 800e912:	69fa      	ldr	r2, [r7, #28]
 800e914:	440a      	add	r2, r1
 800e916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e91a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e91e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	3301      	adds	r3, #1
 800e924:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e92c:	d81d      	bhi.n	800e96a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	4413      	add	r3, r2
 800e936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e940:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e944:	d0ec      	beq.n	800e920 <USB_HC_Halt+0x1e6>
 800e946:	e011      	b.n	800e96c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	015a      	lsls	r2, r3, #5
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	4413      	add	r3, r2
 800e950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69ba      	ldr	r2, [r7, #24]
 800e958:	0151      	lsls	r1, r2, #5
 800e95a:	69fa      	ldr	r2, [r7, #28]
 800e95c:	440a      	add	r2, r1
 800e95e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e962:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e966:	6013      	str	r3, [r2, #0]
 800e968:	e000      	b.n	800e96c <USB_HC_Halt+0x232>
          break;
 800e96a:	bf00      	nop
    }
  }

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3724      	adds	r7, #36	@ 0x24
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
	...

0800e97c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b087      	sub	sp, #28
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e990:	2301      	movs	r3, #1
 800e992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	04da      	lsls	r2, r3, #19
 800e998:	4b15      	ldr	r3, [pc, #84]	@ (800e9f0 <USB_DoPing+0x74>)
 800e99a:	4013      	ands	r3, r2
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	0151      	lsls	r1, r2, #5
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	440a      	add	r2, r1
 800e9a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e9ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	015a      	lsls	r2, r3, #5
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e9c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e9cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	015a      	lsls	r2, r3, #5
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9da:	461a      	mov	r2, r3
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	1ff80000 	.word	0x1ff80000

0800e9f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b088      	sub	sp, #32
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7fe ff98 	bl	800d93e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ea0e:	2110      	movs	r1, #16
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7fe fff1 	bl	800d9f8 <USB_FlushTxFifo>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7ff f81b 	bl	800da5c <USB_FlushRxFifo>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ea30:	2300      	movs	r3, #0
 800ea32:	61bb      	str	r3, [r7, #24]
 800ea34:	e01f      	b.n	800ea76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	3301      	adds	r3, #1
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	2b0f      	cmp	r3, #15
 800ea7a:	d9dc      	bls.n	800ea36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	61bb      	str	r3, [r7, #24]
 800ea80:	e034      	b.n	800eaec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	015a      	lsls	r2, r3, #5
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	4413      	add	r3, r2
 800ea8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eaa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eaa8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	015a      	lsls	r2, r3, #5
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	4413      	add	r3, r2
 800eab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eab6:	461a      	mov	r2, r3
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3301      	adds	r3, #1
 800eac0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eac8:	d80c      	bhi.n	800eae4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	015a      	lsls	r2, r3, #5
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	4413      	add	r3, r2
 800ead2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eadc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eae0:	d0ec      	beq.n	800eabc <USB_StopHost+0xc8>
 800eae2:	e000      	b.n	800eae6 <USB_StopHost+0xf2>
        break;
 800eae4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	3301      	adds	r3, #1
 800eaea:	61bb      	str	r3, [r7, #24]
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	2b0f      	cmp	r3, #15
 800eaf0:	d9c7      	bls.n	800ea82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eaf8:	461a      	mov	r2, r3
 800eafa:	f04f 33ff 	mov.w	r3, #4294967295
 800eafe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295
 800eb06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7fe ff07 	bl	800d91c <USB_EnableGlobalInt>

  return ret;
 800eb0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eb1c:	4904      	ldr	r1, [pc, #16]	@ (800eb30 <MX_FATFS_Init+0x18>)
 800eb1e:	4805      	ldr	r0, [pc, #20]	@ (800eb34 <MX_FATFS_Init+0x1c>)
 800eb20:	f002 fd74 	bl	801160c <FATFS_LinkDriver>
 800eb24:	4603      	mov	r3, r0
 800eb26:	461a      	mov	r2, r3
 800eb28:	4b03      	ldr	r3, [pc, #12]	@ (800eb38 <MX_FATFS_Init+0x20>)
 800eb2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb2c:	bf00      	nop
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20000d34 	.word	0x20000d34
 800eb34:	08015238 	.word	0x08015238
 800eb38:	20000d30 	.word	0x20000d30

0800eb3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eb46:	f000 f87b 	bl	800ec40 <BSP_SD_IsDetected>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d001      	beq.n	800eb54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eb50:	2302      	movs	r3, #2
 800eb52:	e012      	b.n	800eb7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eb54:	480b      	ldr	r0, [pc, #44]	@ (800eb84 <BSP_SD_Init+0x48>)
 800eb56:	f7fa fdef 	bl	8009738 <HAL_SD_Init>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eb64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800eb68:	4806      	ldr	r0, [pc, #24]	@ (800eb84 <BSP_SD_Init+0x48>)
 800eb6a:	f7fb fa3f 	bl	8009fec <HAL_SD_ConfigWideBusOperation>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eb78:	79fb      	ldrb	r3, [r7, #7]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20000934 	.word	0x20000934

0800eb88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	68f9      	ldr	r1, [r7, #12]
 800eb9e:	4806      	ldr	r0, [pc, #24]	@ (800ebb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eba0:	f7fa fe82 	bl	80098a8 <HAL_SD_ReadBlocks_DMA>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ebae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	20000934 	.word	0x20000934

0800ebbc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	68f9      	ldr	r1, [r7, #12]
 800ebd2:	4806      	ldr	r0, [pc, #24]	@ (800ebec <BSP_SD_WriteBlocks_DMA+0x30>)
 800ebd4:	f7fa ff4a 	bl	8009a6c <HAL_SD_WriteBlocks_DMA>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20000934 	.word	0x20000934

0800ebf0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ebf4:	4805      	ldr	r0, [pc, #20]	@ (800ec0c <BSP_SD_GetCardState+0x1c>)
 800ebf6:	f7fb fa93 	bl	800a120 <HAL_SD_GetCardState>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	bf14      	ite	ne
 800ec00:	2301      	movne	r3, #1
 800ec02:	2300      	moveq	r3, #0
 800ec04:	b2db      	uxtb	r3, r3
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	20000934 	.word	0x20000934

0800ec10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	4803      	ldr	r0, [pc, #12]	@ (800ec28 <BSP_SD_GetCardInfo+0x18>)
 800ec1c:	f7fb f9ba 	bl	8009f94 <HAL_SD_GetCardInfo>
}
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	20000934 	.word	0x20000934

0800ec2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ec34:	f000 f9b2 	bl	800ef9c <BSP_SD_ReadCpltCallback>
}
 800ec38:	bf00      	nop
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ec46:	2301      	movs	r3, #1
 800ec48:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ec4a:	f000 f80b 	bl	800ec64 <BSP_PlatformIsDetected>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ec54:	2300      	movs	r3, #0
 800ec56:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	b2db      	uxtb	r3, r3
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ec6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ec72:	4806      	ldr	r0, [pc, #24]	@ (800ec8c <BSP_PlatformIsDetected+0x28>)
 800ec74:	f7f5 fec4 	bl	8004a00 <HAL_GPIO_ReadPin>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ec82:	79fb      	ldrb	r3, [r7, #7]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	40020800 	.word	0x40020800

0800ec90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ec98:	f002 fd04 	bl	80116a4 <osKernelSysTick>
 800ec9c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ec9e:	e006      	b.n	800ecae <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eca0:	f7ff ffa6 	bl	800ebf0 <BSP_SD_GetCardState>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d101      	bne.n	800ecae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	e009      	b.n	800ecc2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ecae:	f002 fcf9 	bl	80116a4 <osKernelSysTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d8f0      	bhi.n	800eca0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ecbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
	...

0800eccc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ecd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ed04 <SD_CheckStatus+0x38>)
 800ecd8:	2201      	movs	r2, #1
 800ecda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecdc:	f7ff ff88 	bl	800ebf0 <BSP_SD_GetCardState>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d107      	bne.n	800ecf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ece6:	4b07      	ldr	r3, [pc, #28]	@ (800ed04 <SD_CheckStatus+0x38>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	f023 0301 	bic.w	r3, r3, #1
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	4b04      	ldr	r3, [pc, #16]	@ (800ed04 <SD_CheckStatus+0x38>)
 800ecf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ecf6:	4b03      	ldr	r3, [pc, #12]	@ (800ed04 <SD_CheckStatus+0x38>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	b2db      	uxtb	r3, r3
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	20000009 	.word	0x20000009

0800ed08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ed08:	b590      	push	{r4, r7, lr}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	4603      	mov	r3, r0
 800ed10:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ed12:	4b20      	ldr	r3, [pc, #128]	@ (800ed94 <SD_initialize+0x8c>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ed18:	f002 fcb8 	bl	801168c <osKernelRunning>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d030      	beq.n	800ed84 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ed22:	f7ff ff0b 	bl	800eb3c <BSP_SD_Init>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d107      	bne.n	800ed3c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7ff ffcc 	bl	800eccc <SD_CheckStatus>
 800ed34:	4603      	mov	r3, r0
 800ed36:	461a      	mov	r2, r3
 800ed38:	4b16      	ldr	r3, [pc, #88]	@ (800ed94 <SD_initialize+0x8c>)
 800ed3a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ed3c:	4b15      	ldr	r3, [pc, #84]	@ (800ed94 <SD_initialize+0x8c>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d01e      	beq.n	800ed84 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ed46:	4b14      	ldr	r3, [pc, #80]	@ (800ed98 <SD_initialize+0x90>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10e      	bne.n	800ed6c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ed4e:	4b13      	ldr	r3, [pc, #76]	@ (800ed9c <SD_initialize+0x94>)
 800ed50:	f107 0408 	add.w	r4, r7, #8
 800ed54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	2100      	movs	r1, #0
 800ed60:	4618      	mov	r0, r3
 800ed62:	f002 fd0f 	bl	8011784 <osMessageCreate>
 800ed66:	4603      	mov	r3, r0
 800ed68:	4a0b      	ldr	r2, [pc, #44]	@ (800ed98 <SD_initialize+0x90>)
 800ed6a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed98 <SD_initialize+0x90>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d107      	bne.n	800ed84 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ed74:	4b07      	ldr	r3, [pc, #28]	@ (800ed94 <SD_initialize+0x8c>)
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	f043 0301 	orr.w	r3, r3, #1
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	4b04      	ldr	r3, [pc, #16]	@ (800ed94 <SD_initialize+0x8c>)
 800ed82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ed84:	4b03      	ldr	r3, [pc, #12]	@ (800ed94 <SD_initialize+0x8c>)
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	b2db      	uxtb	r3, r3
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	371c      	adds	r7, #28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd90      	pop	{r4, r7, pc}
 800ed92:	bf00      	nop
 800ed94:	20000009 	.word	0x20000009
 800ed98:	20000d38 	.word	0x20000d38
 800ed9c:	080151cc 	.word	0x080151cc

0800eda0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff ff8d 	bl	800eccc <SD_CheckStatus>
 800edb2:	4603      	mov	r3, r0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08a      	sub	sp, #40	@ 0x28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60b9      	str	r1, [r7, #8]
 800edc4:	607a      	str	r2, [r7, #4]
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	4603      	mov	r3, r0
 800edca:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800edd2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800edd6:	f7ff ff5b 	bl	800ec90 <SD_CheckStatusWithTimeout>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	da02      	bge.n	800ede6 <SD_read+0x2a>
  {
    return res;
 800ede0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ede4:	e032      	b.n	800ee4c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	6879      	ldr	r1, [r7, #4]
 800edea:	68b8      	ldr	r0, [r7, #8]
 800edec:	f7ff fecc 	bl	800eb88 <BSP_SD_ReadBlocks_DMA>
 800edf0:	4603      	mov	r3, r0
 800edf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800edf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d124      	bne.n	800ee48 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800edfe:	4b15      	ldr	r3, [pc, #84]	@ (800ee54 <SD_read+0x98>)
 800ee00:	6819      	ldr	r1, [r3, #0]
 800ee02:	f107 0314 	add.w	r3, r7, #20
 800ee06:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f002 fd22 	bl	8011854 <osMessageGet>

    if (event.status == osEventMessage)
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b10      	cmp	r3, #16
 800ee14:	d118      	bne.n	800ee48 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d115      	bne.n	800ee48 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ee1c:	f002 fc42 	bl	80116a4 <osKernelSysTick>
 800ee20:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ee22:	e008      	b.n	800ee36 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee24:	f7ff fee4 	bl	800ebf0 <BSP_SD_GetCardState>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d103      	bne.n	800ee36 <SD_read+0x7a>
              {
                res = RES_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ee34:	e008      	b.n	800ee48 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ee36:	f002 fc35 	bl	80116a4 <osKernelSysTick>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d9ed      	bls.n	800ee24 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ee48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3728      	adds	r7, #40	@ 0x28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20000d38 	.word	0x20000d38

0800ee58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08a      	sub	sp, #40	@ 0x28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60b9      	str	r1, [r7, #8]
 800ee60:	607a      	str	r2, [r7, #4]
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	4603      	mov	r3, r0
 800ee66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ee6e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ee72:	f7ff ff0d 	bl	800ec90 <SD_CheckStatusWithTimeout>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	da02      	bge.n	800ee82 <SD_write+0x2a>
  {
    return res;
 800ee7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee80:	e02e      	b.n	800eee0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	68b8      	ldr	r0, [r7, #8]
 800ee88:	f7ff fe98 	bl	800ebbc <BSP_SD_WriteBlocks_DMA>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d124      	bne.n	800eedc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ee92:	4b15      	ldr	r3, [pc, #84]	@ (800eee8 <SD_write+0x90>)
 800ee94:	6819      	ldr	r1, [r3, #0]
 800ee96:	f107 0314 	add.w	r3, r7, #20
 800ee9a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f002 fcd8 	bl	8011854 <osMessageGet>

    if (event.status == osEventMessage)
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2b10      	cmp	r3, #16
 800eea8:	d118      	bne.n	800eedc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d115      	bne.n	800eedc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800eeb0:	f002 fbf8 	bl	80116a4 <osKernelSysTick>
 800eeb4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eeb6:	e008      	b.n	800eeca <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eeb8:	f7ff fe9a 	bl	800ebf0 <BSP_SD_GetCardState>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d103      	bne.n	800eeca <SD_write+0x72>
          {
            res = RES_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eec8:	e008      	b.n	800eedc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eeca:	f002 fbeb 	bl	80116a4 <osKernelSysTick>
 800eece:	4602      	mov	r2, r0
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d9ed      	bls.n	800eeb8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800eedc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3728      	adds	r7, #40	@ 0x28
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20000d38 	.word	0x20000d38

0800eeec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b08c      	sub	sp, #48	@ 0x30
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	603a      	str	r2, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
 800eef8:	460b      	mov	r3, r1
 800eefa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ef02:	4b25      	ldr	r3, [pc, #148]	@ (800ef98 <SD_ioctl+0xac>)
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	f003 0301 	and.w	r3, r3, #1
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <SD_ioctl+0x28>
 800ef10:	2303      	movs	r3, #3
 800ef12:	e03c      	b.n	800ef8e <SD_ioctl+0xa2>

  switch (cmd)
 800ef14:	79bb      	ldrb	r3, [r7, #6]
 800ef16:	2b03      	cmp	r3, #3
 800ef18:	d834      	bhi.n	800ef84 <SD_ioctl+0x98>
 800ef1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef20 <SD_ioctl+0x34>)
 800ef1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef20:	0800ef31 	.word	0x0800ef31
 800ef24:	0800ef39 	.word	0x0800ef39
 800ef28:	0800ef51 	.word	0x0800ef51
 800ef2c:	0800ef6b 	.word	0x0800ef6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef36:	e028      	b.n	800ef8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef38:	f107 030c 	add.w	r3, r7, #12
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fe67 	bl	800ec10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ef42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef4e:	e01c      	b.n	800ef8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef50:	f107 030c 	add.w	r3, r7, #12
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff fe5b 	bl	800ec10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef68:	e00f      	b.n	800ef8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef6a:	f107 030c 	add.w	r3, r7, #12
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fe4e 	bl	800ec10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ef74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef76:	0a5a      	lsrs	r2, r3, #9
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ef82:	e002      	b.n	800ef8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ef84:	2304      	movs	r3, #4
 800ef86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ef8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3730      	adds	r7, #48	@ 0x30
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20000009 	.word	0x20000009

0800ef9c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800efa0:	4b04      	ldr	r3, [pc, #16]	@ (800efb4 <BSP_SD_ReadCpltCallback+0x18>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2200      	movs	r2, #0
 800efa6:	2101      	movs	r1, #1
 800efa8:	4618      	mov	r0, r3
 800efaa:	f002 fc13 	bl	80117d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800efae:	bf00      	nop
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000d38 	.word	0x20000d38

0800efb8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800efb8:	b590      	push	{r4, r7, lr}
 800efba:	b089      	sub	sp, #36	@ 0x24
 800efbc:	af04      	add	r7, sp, #16
 800efbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800efc0:	2301      	movs	r3, #1
 800efc2:	2202      	movs	r2, #2
 800efc4:	2102      	movs	r1, #2
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fcd7 	bl	800f97a <USBH_FindInterface>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	2bff      	cmp	r3, #255	@ 0xff
 800efd4:	d002      	beq.n	800efdc <USBH_CDC_InterfaceInit+0x24>
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d901      	bls.n	800efe0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800efdc:	2302      	movs	r3, #2
 800efde:	e13d      	b.n	800f25c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
 800efe2:	4619      	mov	r1, r3
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 fcac 	bl	800f942 <USBH_SelectInterface>
 800efea:	4603      	mov	r3, r0
 800efec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800efee:	7bbb      	ldrb	r3, [r7, #14]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d001      	beq.n	800eff8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800eff4:	2302      	movs	r3, #2
 800eff6:	e131      	b.n	800f25c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800effe:	2050      	movs	r0, #80	@ 0x50
 800f000:	f005 fbb8 	bl	8014774 <malloc>
 800f004:	4603      	mov	r3, r0
 800f006:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f018:	2302      	movs	r3, #2
 800f01a:	e11f      	b.n	800f25c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f01c:	2250      	movs	r2, #80	@ 0x50
 800f01e:	2100      	movs	r1, #0
 800f020:	68b8      	ldr	r0, [r7, #8]
 800f022:	f005 fe5d 	bl	8014ce0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	211a      	movs	r1, #26
 800f02c:	fb01 f303 	mul.w	r3, r1, r3
 800f030:	4413      	add	r3, r2
 800f032:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	b25b      	sxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	da15      	bge.n	800f06a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f03e:	7bfb      	ldrb	r3, [r7, #15]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	211a      	movs	r1, #26
 800f044:	fb01 f303 	mul.w	r3, r1, r3
 800f048:	4413      	add	r3, r2
 800f04a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f054:	7bfb      	ldrb	r3, [r7, #15]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	211a      	movs	r1, #26
 800f05a:	fb01 f303 	mul.w	r3, r1, r3
 800f05e:	4413      	add	r3, r2
 800f060:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f064:	881a      	ldrh	r2, [r3, #0]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	785b      	ldrb	r3, [r3, #1]
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f002 fa1c 	bl	80114ae <USBH_AllocPipe>
 800f076:	4603      	mov	r3, r0
 800f078:	461a      	mov	r2, r3
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	7819      	ldrb	r1, [r3, #0]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	7858      	ldrb	r0, [r3, #1]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	8952      	ldrh	r2, [r2, #10]
 800f096:	9202      	str	r2, [sp, #8]
 800f098:	2203      	movs	r2, #3
 800f09a:	9201      	str	r2, [sp, #4]
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	4623      	mov	r3, r4
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f002 f9d4 	bl	8011450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f005 fad9 	bl	8014668 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	210a      	movs	r1, #10
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 fc5c 	bl	800f97a <USBH_FindInterface>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f0c6:	7bfb      	ldrb	r3, [r7, #15]
 800f0c8:	2bff      	cmp	r3, #255	@ 0xff
 800f0ca:	d002      	beq.n	800f0d2 <USBH_CDC_InterfaceInit+0x11a>
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d901      	bls.n	800f0d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	e0c2      	b.n	800f25c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	211a      	movs	r1, #26
 800f0dc:	fb01 f303 	mul.w	r3, r1, r3
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b25b      	sxtb	r3, r3
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	da16      	bge.n	800f11c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	211a      	movs	r1, #26
 800f0f4:	fb01 f303 	mul.w	r3, r1, r3
 800f0f8:	4413      	add	r3, r2
 800f0fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f0fe:	781a      	ldrb	r2, [r3, #0]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	211a      	movs	r1, #26
 800f10a:	fb01 f303 	mul.w	r3, r1, r3
 800f10e:	4413      	add	r3, r2
 800f110:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f114:	881a      	ldrh	r2, [r3, #0]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	835a      	strh	r2, [r3, #26]
 800f11a:	e015      	b.n	800f148 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	211a      	movs	r1, #26
 800f122:	fb01 f303 	mul.w	r3, r1, r3
 800f126:	4413      	add	r3, r2
 800f128:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f12c:	781a      	ldrb	r2, [r3, #0]
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f132:	7bfb      	ldrb	r3, [r7, #15]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	211a      	movs	r1, #26
 800f138:	fb01 f303 	mul.w	r3, r1, r3
 800f13c:	4413      	add	r3, r2
 800f13e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f142:	881a      	ldrh	r2, [r3, #0]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	211a      	movs	r1, #26
 800f14e:	fb01 f303 	mul.w	r3, r1, r3
 800f152:	4413      	add	r3, r2
 800f154:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	b25b      	sxtb	r3, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da16      	bge.n	800f18e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f160:	7bfb      	ldrb	r3, [r7, #15]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	211a      	movs	r1, #26
 800f166:	fb01 f303 	mul.w	r3, r1, r3
 800f16a:	4413      	add	r3, r2
 800f16c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f170:	781a      	ldrb	r2, [r3, #0]
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f176:	7bfb      	ldrb	r3, [r7, #15]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	211a      	movs	r1, #26
 800f17c:	fb01 f303 	mul.w	r3, r1, r3
 800f180:	4413      	add	r3, r2
 800f182:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f186:	881a      	ldrh	r2, [r3, #0]
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	835a      	strh	r2, [r3, #26]
 800f18c:	e015      	b.n	800f1ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	211a      	movs	r1, #26
 800f194:	fb01 f303 	mul.w	r3, r1, r3
 800f198:	4413      	add	r3, r2
 800f19a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f19e:	781a      	ldrb	r2, [r3, #0]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	211a      	movs	r1, #26
 800f1aa:	fb01 f303 	mul.w	r3, r1, r3
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f1b4:	881a      	ldrh	r2, [r3, #0]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	7b9b      	ldrb	r3, [r3, #14]
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f002 f974 	bl	80114ae <USBH_AllocPipe>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	7bdb      	ldrb	r3, [r3, #15]
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f002 f96a 	bl	80114ae <USBH_AllocPipe>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	461a      	mov	r2, r3
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	7b59      	ldrb	r1, [r3, #13]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	7b98      	ldrb	r0, [r3, #14]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f1f6:	68ba      	ldr	r2, [r7, #8]
 800f1f8:	8b12      	ldrh	r2, [r2, #24]
 800f1fa:	9202      	str	r2, [sp, #8]
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	9201      	str	r2, [sp, #4]
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	4623      	mov	r3, r4
 800f204:	4602      	mov	r2, r0
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f002 f922 	bl	8011450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	7b19      	ldrb	r1, [r3, #12]
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	7bd8      	ldrb	r0, [r3, #15]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	8b52      	ldrh	r2, [r2, #26]
 800f224:	9202      	str	r2, [sp, #8]
 800f226:	2202      	movs	r2, #2
 800f228:	9201      	str	r2, [sp, #4]
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	4623      	mov	r3, r4
 800f22e:	4602      	mov	r2, r0
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f002 f90d 	bl	8011450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	7b5b      	ldrb	r3, [r3, #13]
 800f242:	2200      	movs	r2, #0
 800f244:	4619      	mov	r1, r3
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f005 fa0e 	bl	8014668 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	7b1b      	ldrb	r3, [r3, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	4619      	mov	r1, r3
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f005 fa07 	bl	8014668 <USBH_LL_SetToggle>

  return USBH_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	bd90      	pop	{r4, r7, pc}

0800f264 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00e      	beq.n	800f29c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f002 f902 	bl	801148e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	4619      	mov	r1, r3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f002 f92d 	bl	80114f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	7b1b      	ldrb	r3, [r3, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00e      	beq.n	800f2c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	7b1b      	ldrb	r3, [r3, #12]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f002 f8ef 	bl	801148e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	7b1b      	ldrb	r3, [r3, #12]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f002 f91a 	bl	80114f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	7b5b      	ldrb	r3, [r3, #13]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	7b5b      	ldrb	r3, [r3, #13]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f002 f8dc 	bl	801148e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	7b5b      	ldrb	r3, [r3, #13]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f002 f907 	bl	80114f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2ee:	69db      	ldr	r3, [r3, #28]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f005 fa41 	bl	8014784 <free>
    phost->pActiveClass->pData = 0U;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f308:	2200      	movs	r2, #0
 800f30a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}

0800f316 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b084      	sub	sp, #16
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f324:	69db      	ldr	r3, [r3, #28]
 800f326:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3340      	adds	r3, #64	@ 0x40
 800f32c:	4619      	mov	r1, r3
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 f8b1 	bl	800f496 <GetLineCoding>
 800f334:	4603      	mov	r3, r0
 800f336:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f338:	7afb      	ldrb	r3, [r7, #11]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f344:	2102      	movs	r1, #2
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f34a:	7afb      	ldrb	r3, [r7, #11]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f35c:	2301      	movs	r3, #1
 800f35e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f360:	2300      	movs	r3, #0
 800f362:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f36a:	69db      	ldr	r3, [r3, #28]
 800f36c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f374:	2b04      	cmp	r3, #4
 800f376:	d877      	bhi.n	800f468 <USBH_CDC_Process+0x114>
 800f378:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <USBH_CDC_Process+0x2c>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f395 	.word	0x0800f395
 800f384:	0800f39b 	.word	0x0800f39b
 800f388:	0800f3cb 	.word	0x0800f3cb
 800f38c:	0800f43f 	.word	0x0800f43f
 800f390:	0800f44d 	.word	0x0800f44d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	73fb      	strb	r3, [r7, #15]
      break;
 800f398:	e06d      	b.n	800f476 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 f897 	bl	800f4d4 <SetLineCoding>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d104      	bne.n	800f3ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2202      	movs	r2, #2
 800f3b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f3b8:	e058      	b.n	800f46c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d055      	beq.n	800f46c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2204      	movs	r2, #4
 800f3c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f3c8:	e050      	b.n	800f46c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	3340      	adds	r3, #64	@ 0x40
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f860 	bl	800f496 <GetLineCoding>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d126      	bne.n	800f42e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3f2:	791b      	ldrb	r3, [r3, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d13b      	bne.n	800f470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f402:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f404:	429a      	cmp	r2, r3
 800f406:	d133      	bne.n	800f470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f412:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f414:	429a      	cmp	r2, r3
 800f416:	d12b      	bne.n	800f470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f420:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f422:	429a      	cmp	r2, r3
 800f424:	d124      	bne.n	800f470 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f982 	bl	800f730 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f42c:	e020      	b.n	800f470 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d01d      	beq.n	800f470 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	2204      	movs	r2, #4
 800f438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f43c:	e018      	b.n	800f470 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f867 	bl	800f512 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f8f6 	bl	800f636 <CDC_ProcessReception>
      break;
 800f44a:	e014      	b.n	800f476 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f44c:	2100      	movs	r1, #0
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f001 f988 	bl	8010764 <USBH_ClrFeature>
 800f454:	4603      	mov	r3, r0
 800f456:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f458:	7bbb      	ldrb	r3, [r7, #14]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10a      	bne.n	800f474 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f466:	e005      	b.n	800f474 <USBH_CDC_Process+0x120>

    default:
      break;
 800f468:	bf00      	nop
 800f46a:	e004      	b.n	800f476 <USBH_CDC_Process+0x122>
      break;
 800f46c:	bf00      	nop
 800f46e:	e002      	b.n	800f476 <USBH_CDC_Process+0x122>
      break;
 800f470:	bf00      	nop
 800f472:	e000      	b.n	800f476 <USBH_CDC_Process+0x122>
      break;
 800f474:	bf00      	nop

  }

  return status;
 800f476:	7bfb      	ldrb	r3, [r7, #15]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	22a1      	movs	r2, #161	@ 0xa1
 800f4a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2221      	movs	r2, #33	@ 0x21
 800f4aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2207      	movs	r2, #7
 800f4bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2207      	movs	r2, #7
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f001 fc82 	bl	8010dce <USBH_CtlReq>
 800f4ca:	4603      	mov	r3, r0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2221      	movs	r2, #33	@ 0x21
 800f4e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2207      	movs	r2, #7
 800f4fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2207      	movs	r2, #7
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f001 fc63 	bl	8010dce <USBH_CtlReq>
 800f508:	4603      	mov	r3, r0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f512:	b580      	push	{r7, lr}
 800f514:	b086      	sub	sp, #24
 800f516:	af02      	add	r7, sp, #8
 800f518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f520:	69db      	ldr	r3, [r3, #28]
 800f522:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f524:	2300      	movs	r3, #0
 800f526:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d002      	beq.n	800f538 <CDC_ProcessTransmission+0x26>
 800f532:	2b02      	cmp	r3, #2
 800f534:	d023      	beq.n	800f57e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f536:	e07a      	b.n	800f62e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	8b12      	ldrh	r2, [r2, #24]
 800f540:	4293      	cmp	r3, r2
 800f542:	d90b      	bls.n	800f55c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	69d9      	ldr	r1, [r3, #28]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	8b1a      	ldrh	r2, [r3, #24]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	7b5b      	ldrb	r3, [r3, #13]
 800f550:	2001      	movs	r0, #1
 800f552:	9000      	str	r0, [sp, #0]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f001 ff38 	bl	80113ca <USBH_BulkSendData>
 800f55a:	e00b      	b.n	800f574 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f564:	b29a      	uxth	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	7b5b      	ldrb	r3, [r3, #13]
 800f56a:	2001      	movs	r0, #1
 800f56c:	9000      	str	r0, [sp, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f001 ff2b 	bl	80113ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2202      	movs	r2, #2
 800f578:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f57c:	e057      	b.n	800f62e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	7b5b      	ldrb	r3, [r3, #13]
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f005 f845 	bl	8014614 <USBH_LL_GetURBState>
 800f58a:	4603      	mov	r3, r0
 800f58c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f58e:	7afb      	ldrb	r3, [r7, #11]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d136      	bne.n	800f602 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	8b12      	ldrh	r2, [r2, #24]
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d90e      	bls.n	800f5be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	8b12      	ldrh	r2, [r2, #24]
 800f5a8:	1a9a      	subs	r2, r3, r2
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	69db      	ldr	r3, [r3, #28]
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	8b12      	ldrh	r2, [r2, #24]
 800f5b6:	441a      	add	r2, r3
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	61da      	str	r2, [r3, #28]
 800f5bc:	e002      	b.n	800f5c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d004      	beq.n	800f5d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800f5d4:	e006      	b.n	800f5e4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f892 	bl	800f708 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2204      	movs	r2, #4
 800f5e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	f002 f8ea 	bl	80117d4 <osMessagePut>
      break;
 800f600:	e014      	b.n	800f62c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f602:	7afb      	ldrb	r3, [r7, #11]
 800f604:	2b02      	cmp	r3, #2
 800f606:	d111      	bne.n	800f62c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2201      	movs	r2, #1
 800f60c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2204      	movs	r2, #4
 800f614:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f624:	2200      	movs	r2, #0
 800f626:	4619      	mov	r1, r3
 800f628:	f002 f8d4 	bl	80117d4 <osMessagePut>
      break;
 800f62c:	bf00      	nop
  }
}
 800f62e:	bf00      	nop
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b086      	sub	sp, #24
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f644:	69db      	ldr	r3, [r3, #28]
 800f646:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f648:	2300      	movs	r3, #0
 800f64a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800f652:	2b03      	cmp	r3, #3
 800f654:	d002      	beq.n	800f65c <CDC_ProcessReception+0x26>
 800f656:	2b04      	cmp	r3, #4
 800f658:	d00e      	beq.n	800f678 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f65a:	e051      	b.n	800f700 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	6a19      	ldr	r1, [r3, #32]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	8b5a      	ldrh	r2, [r3, #26]
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	7b1b      	ldrb	r3, [r3, #12]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f001 fed3 	bl	8011414 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2204      	movs	r2, #4
 800f672:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f676:	e043      	b.n	800f700 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	7b1b      	ldrb	r3, [r3, #12]
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f004 ffc8 	bl	8014614 <USBH_LL_GetURBState>
 800f684:	4603      	mov	r3, r0
 800f686:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f688:	7cfb      	ldrb	r3, [r7, #19]
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d137      	bne.n	800f6fe <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	7b1b      	ldrb	r3, [r3, #12]
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f004 ff2b 	bl	80144f0 <USBH_LL_GetLastXferSize>
 800f69a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d016      	beq.n	800f6d4 <CDC_ProcessReception+0x9e>
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	8b5b      	ldrh	r3, [r3, #26]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d110      	bne.n	800f6d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	1ad2      	subs	r2, r2, r3
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	6a1a      	ldr	r2, [r3, #32]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	441a      	add	r2, r3
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800f6d2:	e006      	b.n	800f6e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f000 f81d 	bl	800f71c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2204      	movs	r2, #4
 800f6e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	f002 f86b 	bl	80117d4 <osMessagePut>
      break;
 800f6fe:	bf00      	nop
  }
}
 800f700:	bf00      	nop
 800f702:	3718      	adds	r7, #24
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f744:	b5b0      	push	{r4, r5, r7, lr}
 800f746:	b090      	sub	sp, #64	@ 0x40
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	4613      	mov	r3, r2
 800f750:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d101      	bne.n	800f75c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f758:	2302      	movs	r3, #2
 800f75a:	e04d      	b.n	800f7f8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	79fa      	ldrb	r2, [r7, #7]
 800f760:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2200      	movs	r2, #0
 800f768:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 f847 	bl	800f808 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2200      	movs	r2, #0
 800f77e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2200      	movs	r2, #0
 800f796:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d003      	beq.n	800f7a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f7a8:	4b15      	ldr	r3, [pc, #84]	@ (800f800 <USBH_Init+0xbc>)
 800f7aa:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f7ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f7b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f7b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f001 ffe2 	bl	8011784 <osMessageCreate>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f804 <USBH_Init+0xc0>)
 800f7ca:	f107 0414 	add.w	r4, r7, #20
 800f7ce:	461d      	mov	r5, r3
 800f7d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f7dc:	f107 0314 	add.w	r3, r7, #20
 800f7e0:	68f9      	ldr	r1, [r7, #12]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f001 ff6e 	bl	80116c4 <osThreadCreate>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f004 fdc9 	bl	8014388 <USBH_LL_Init>

  return USBH_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3740      	adds	r7, #64	@ 0x40
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bdb0      	pop	{r4, r5, r7, pc}
 800f800:	080151e0 	.word	0x080151e0
 800f804:	080151fc 	.word	0x080151fc

0800f808 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f810:	2300      	movs	r3, #0
 800f812:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	e009      	b.n	800f82e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	33e0      	adds	r3, #224	@ 0xe0
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	2200      	movs	r2, #0
 800f826:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3301      	adds	r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b0f      	cmp	r3, #15
 800f832:	d9f2      	bls.n	800f81a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f834:	2300      	movs	r3, #0
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	e009      	b.n	800f84e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	4413      	add	r3, r2
 800f840:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f844:	2200      	movs	r2, #0
 800f846:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	3301      	adds	r3, #1
 800f84c:	60fb      	str	r3, [r7, #12]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f854:	d3f1      	bcc.n	800f83a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2201      	movs	r2, #1
 800f866:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2240      	movs	r2, #64	@ 0x40
 800f87a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2200      	movs	r2, #0
 800f886:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	331c      	adds	r3, #28
 800f8a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f005 fa17 	bl	8014ce0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f8b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f005 fa0e 	bl	8014ce0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f8ca:	2212      	movs	r2, #18
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f005 fa06 	bl	8014ce0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f8da:	223e      	movs	r2, #62	@ 0x3e
 800f8dc:	2100      	movs	r1, #0
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f005 f9fe 	bl	8014ce0 <memset>

  return USBH_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b085      	sub	sp, #20
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d016      	beq.n	800f930 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10e      	bne.n	800f92a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f912:	1c59      	adds	r1, r3, #1
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	33de      	adds	r3, #222	@ 0xde
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73fb      	strb	r3, [r7, #15]
 800f928:	e004      	b.n	800f934 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f92a:	2302      	movs	r3, #2
 800f92c:	73fb      	strb	r3, [r7, #15]
 800f92e:	e001      	b.n	800f934 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f930:	2302      	movs	r3, #2
 800f932:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f934:	7bfb      	ldrb	r3, [r7, #15]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3714      	adds	r7, #20
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr

0800f942 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f942:	b480      	push	{r7}
 800f944:	b085      	sub	sp, #20
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	460b      	mov	r3, r1
 800f94c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f958:	78fa      	ldrb	r2, [r7, #3]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d204      	bcs.n	800f968 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	78fa      	ldrb	r2, [r7, #3]
 800f962:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f966:	e001      	b.n	800f96c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f968:	2302      	movs	r3, #2
 800f96a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b087      	sub	sp, #28
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	4608      	mov	r0, r1
 800f984:	4611      	mov	r1, r2
 800f986:	461a      	mov	r2, r3
 800f988:	4603      	mov	r3, r0
 800f98a:	70fb      	strb	r3, [r7, #3]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70bb      	strb	r3, [r7, #2]
 800f990:	4613      	mov	r3, r2
 800f992:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f994:	2300      	movs	r3, #0
 800f996:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f998:	2300      	movs	r3, #0
 800f99a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f9a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f9a4:	e025      	b.n	800f9f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
 800f9a8:	221a      	movs	r2, #26
 800f9aa:	fb02 f303 	mul.w	r3, r2, r3
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	3302      	adds	r3, #2
 800f9b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	795b      	ldrb	r3, [r3, #5]
 800f9bc:	78fa      	ldrb	r2, [r7, #3]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d002      	beq.n	800f9c8 <USBH_FindInterface+0x4e>
 800f9c2:	78fb      	ldrb	r3, [r7, #3]
 800f9c4:	2bff      	cmp	r3, #255	@ 0xff
 800f9c6:	d111      	bne.n	800f9ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f9cc:	78ba      	ldrb	r2, [r7, #2]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d002      	beq.n	800f9d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9d2:	78bb      	ldrb	r3, [r7, #2]
 800f9d4:	2bff      	cmp	r3, #255	@ 0xff
 800f9d6:	d109      	bne.n	800f9ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f9dc:	787a      	ldrb	r2, [r7, #1]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d002      	beq.n	800f9e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f9e2:	787b      	ldrb	r3, [r7, #1]
 800f9e4:	2bff      	cmp	r3, #255	@ 0xff
 800f9e6:	d101      	bne.n	800f9ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ea:	e006      	b.n	800f9fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d9d6      	bls.n	800f9a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f9f8:	23ff      	movs	r3, #255	@ 0xff
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	371c      	adds	r7, #28
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b082      	sub	sp, #8
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f004 fcf6 	bl	8014400 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800fa14:	2101      	movs	r1, #1
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f004 fe0f 	bl	801463a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
	...

0800fa28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af04      	add	r7, sp, #16
 800fa2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fa30:	2302      	movs	r3, #2
 800fa32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fa34:	2300      	movs	r3, #0
 800fa36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d102      	bne.n	800fa4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2203      	movs	r2, #3
 800fa48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b0b      	cmp	r3, #11
 800fa52:	f200 8244 	bhi.w	800fede <USBH_Process+0x4b6>
 800fa56:	a201      	add	r2, pc, #4	@ (adr r2, 800fa5c <USBH_Process+0x34>)
 800fa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5c:	0800fa8d 	.word	0x0800fa8d
 800fa60:	0800fadb 	.word	0x0800fadb
 800fa64:	0800fb5f 	.word	0x0800fb5f
 800fa68:	0800fe5d 	.word	0x0800fe5d
 800fa6c:	0800fedf 	.word	0x0800fedf
 800fa70:	0800fc1b 	.word	0x0800fc1b
 800fa74:	0800fde7 	.word	0x0800fde7
 800fa78:	0800fc6d 	.word	0x0800fc6d
 800fa7c:	0800fca9 	.word	0x0800fca9
 800fa80:	0800fce1 	.word	0x0800fce1
 800fa84:	0800fd3f 	.word	0x0800fd3f
 800fa88:	0800fe45 	.word	0x0800fe45
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 8224 	beq.w	800fee2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800faa0:	20c8      	movs	r0, #200	@ 0xc8
 800faa2:	f004 fe14 	bl	80146ce <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f004 fd07 	bl	80144ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fad0:	2200      	movs	r2, #0
 800fad2:	4619      	mov	r1, r3
 800fad4:	f001 fe7e 	bl	80117d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fad8:	e203      	b.n	800fee2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d107      	bne.n	800faf4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2202      	movs	r2, #2
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	e025      	b.n	800fb40 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fafa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fafe:	d914      	bls.n	800fb2a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fb06:	3301      	adds	r3, #1
 800fb08:	b2da      	uxtb	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d903      	bls.n	800fb22 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	220d      	movs	r2, #13
 800fb1e:	701a      	strb	r2, [r3, #0]
 800fb20:	e00e      	b.n	800fb40 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	701a      	strb	r2, [r3, #0]
 800fb28:	e00a      	b.n	800fb40 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fb30:	f103 020a 	add.w	r2, r3, #10
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800fb3a:	200a      	movs	r0, #10
 800fb3c:	f004 fdc7 	bl	80146ce <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb54:	2200      	movs	r2, #0
 800fb56:	4619      	mov	r1, r3
 800fb58:	f001 fe3c 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb5c:	e1c8      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d005      	beq.n	800fb74 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb6e:	2104      	movs	r1, #4
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fb74:	2064      	movs	r0, #100	@ 0x64
 800fb76:	f004 fdaa 	bl	80146ce <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f004 fc76 	bl	801446c <USBH_LL_GetSpeed>
 800fb80:	4603      	mov	r3, r0
 800fb82:	461a      	mov	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2205      	movs	r2, #5
 800fb8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800fb90:	2100      	movs	r1, #0
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f001 fc8b 	bl	80114ae <USBH_AllocPipe>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fba0:	2180      	movs	r1, #128	@ 0x80
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f001 fc83 	bl	80114ae <USBH_AllocPipe>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	7919      	ldrb	r1, [r3, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fbc4:	9202      	str	r2, [sp, #8]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	9201      	str	r2, [sp, #4]
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2280      	movs	r2, #128	@ 0x80
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f001 fc3d 	bl	8011450 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	7959      	ldrb	r1, [r3, #5]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fbea:	9202      	str	r2, [sp, #8]
 800fbec:	2200      	movs	r2, #0
 800fbee:	9201      	str	r2, [sp, #4]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f001 fc2a 	bl	8011450 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fc10:	2200      	movs	r2, #0
 800fc12:	4619      	mov	r1, r3
 800fc14:	f001 fdde 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fc18:	e16a      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 f96e 	bl	800fefc <USBH_HandleEnum>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fc24:	7bbb      	ldrb	r3, [r7, #14]
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f040 815c 	bne.w	800fee6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d103      	bne.n	800fc48 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2208      	movs	r2, #8
 800fc44:	701a      	strb	r2, [r3, #0]
 800fc46:	e002      	b.n	800fc4e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2207      	movs	r2, #7
 800fc4c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2205      	movs	r2, #5
 800fc52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fc62:	2200      	movs	r2, #0
 800fc64:	4619      	mov	r1, r3
 800fc66:	f001 fdb5 	bl	80117d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fc6a:	e13c      	b.n	800fee6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f000 8139 	beq.w	800feea <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fc7e:	2101      	movs	r1, #1
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2208      	movs	r2, #8
 800fc88:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2205      	movs	r2, #5
 800fc8e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fc9e:	2200      	movs	r2, #0
 800fca0:	4619      	mov	r1, r3
 800fca2:	f001 fd97 	bl	80117d4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fca6:	e120      	b.n	800feea <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fd10 	bl	80106d6 <USBH_SetCfg>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2209      	movs	r2, #9
 800fcc0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	4619      	mov	r1, r3
 800fcda:	f001 fd7b 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fcde:	e107      	b.n	800fef0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800fce6:	f003 0320 	and.w	r3, r3, #32
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d015      	beq.n	800fd1a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fcee:	2101      	movs	r1, #1
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 fd13 	bl	801071c <USBH_SetFeature>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fcfa:	7bbb      	ldrb	r3, [r7, #14]
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d103      	bne.n	800fd0a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	220a      	movs	r2, #10
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	e00a      	b.n	800fd20 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d106      	bne.n	800fd20 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	220a      	movs	r2, #10
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	e002      	b.n	800fd20 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	220a      	movs	r2, #10
 800fd1e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fd34:	2200      	movs	r2, #0
 800fd36:	4619      	mov	r1, r3
 800fd38:	f001 fd4c 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fd3c:	e0d8      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d03f      	beq.n	800fdc8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd50:	2300      	movs	r3, #0
 800fd52:	73fb      	strb	r3, [r7, #15]
 800fd54:	e016      	b.n	800fd84 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fd56:	7bfa      	ldrb	r2, [r7, #15]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	32de      	adds	r2, #222	@ 0xde
 800fd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd60:	791a      	ldrb	r2, [r3, #4]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d108      	bne.n	800fd7e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fd6c:	7bfa      	ldrb	r2, [r7, #15]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	32de      	adds	r2, #222	@ 0xde
 800fd72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800fd7c:	e005      	b.n	800fd8a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd7e:	7bfb      	ldrb	r3, [r7, #15]
 800fd80:	3301      	adds	r3, #1
 800fd82:	73fb      	strb	r3, [r7, #15]
 800fd84:	7bfb      	ldrb	r3, [r7, #15]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d0e5      	beq.n	800fd56 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d016      	beq.n	800fdc2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	4798      	blx	r3
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d109      	bne.n	800fdba <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2206      	movs	r2, #6
 800fdaa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fdb2:	2103      	movs	r1, #3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	4798      	blx	r3
 800fdb8:	e006      	b.n	800fdc8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	220d      	movs	r2, #13
 800fdbe:	701a      	strb	r2, [r3, #0]
 800fdc0:	e002      	b.n	800fdc8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	220d      	movs	r2, #13
 800fdc6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2205      	movs	r2, #5
 800fdcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fddc:	2200      	movs	r2, #0
 800fdde:	4619      	mov	r1, r3
 800fde0:	f001 fcf8 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fde4:	e084      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d017      	beq.n	800fe20 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdf6:	691b      	ldr	r3, [r3, #16]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fe00:	7bbb      	ldrb	r3, [r7, #14]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d103      	bne.n	800fe10 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	220b      	movs	r2, #11
 800fe0c:	701a      	strb	r2, [r3, #0]
 800fe0e:	e00a      	b.n	800fe26 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800fe10:	7bbb      	ldrb	r3, [r7, #14]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	d106      	bne.n	800fe26 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	220d      	movs	r2, #13
 800fe1c:	701a      	strb	r2, [r3, #0]
 800fe1e:	e002      	b.n	800fe26 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	220d      	movs	r2, #13
 800fe24:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2205      	movs	r2, #5
 800fe2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	f001 fcc9 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fe42:	e055      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d04f      	beq.n	800feee <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe54:	695b      	ldr	r3, [r3, #20]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	4798      	blx	r3
      }
      break;
 800fe5a:	e048      	b.n	800feee <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff fccf 	bl	800f808 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d009      	beq.n	800fe88 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d005      	beq.n	800fe9e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fe98:	2105      	movs	r1, #5
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d107      	bne.n	800feba <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7ff fda7 	bl	800fa06 <USBH_Start>
 800feb8:	e002      	b.n	800fec0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f004 faa0 	bl	8014400 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fed4:	2200      	movs	r2, #0
 800fed6:	4619      	mov	r1, r3
 800fed8:	f001 fc7c 	bl	80117d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fedc:	e008      	b.n	800fef0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800fede:	bf00      	nop
 800fee0:	e006      	b.n	800fef0 <USBH_Process+0x4c8>
      break;
 800fee2:	bf00      	nop
 800fee4:	e004      	b.n	800fef0 <USBH_Process+0x4c8>
      break;
 800fee6:	bf00      	nop
 800fee8:	e002      	b.n	800fef0 <USBH_Process+0x4c8>
    break;
 800feea:	bf00      	nop
 800feec:	e000      	b.n	800fef0 <USBH_Process+0x4c8>
      break;
 800feee:	bf00      	nop
  }
  return USBH_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop

0800fefc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af04      	add	r7, sp, #16
 800ff02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ff04:	2301      	movs	r3, #1
 800ff06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	785b      	ldrb	r3, [r3, #1]
 800ff10:	2b07      	cmp	r3, #7
 800ff12:	f200 8204 	bhi.w	801031e <USBH_HandleEnum+0x422>
 800ff16:	a201      	add	r2, pc, #4	@ (adr r2, 800ff1c <USBH_HandleEnum+0x20>)
 800ff18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff1c:	0800ff3d 	.word	0x0800ff3d
 800ff20:	0800fff7 	.word	0x0800fff7
 800ff24:	08010061 	.word	0x08010061
 800ff28:	080100eb 	.word	0x080100eb
 800ff2c:	08010155 	.word	0x08010155
 800ff30:	080101c5 	.word	0x080101c5
 800ff34:	08010261 	.word	0x08010261
 800ff38:	080102df 	.word	0x080102df
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ff3c:	2108      	movs	r1, #8
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 fae6 	bl	8010510 <USBH_Get_DevDesc>
 800ff44:	4603      	mov	r3, r0
 800ff46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ff48:	7bbb      	ldrb	r3, [r7, #14]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d12e      	bne.n	800ffac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	7919      	ldrb	r1, [r3, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff72:	9202      	str	r2, [sp, #8]
 800ff74:	2200      	movs	r2, #0
 800ff76:	9201      	str	r2, [sp, #4]
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2280      	movs	r2, #128	@ 0x80
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f001 fa66 	bl	8011450 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	7959      	ldrb	r1, [r3, #5]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff98:	9202      	str	r2, [sp, #8]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	9201      	str	r2, [sp, #4]
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f001 fa53 	bl	8011450 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ffaa:	e1ba      	b.n	8010322 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffac:	7bbb      	ldrb	r3, [r7, #14]
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	f040 81b7 	bne.w	8010322 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ffba:	3301      	adds	r3, #1
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d903      	bls.n	800ffd6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	220d      	movs	r2, #13
 800ffd2:	701a      	strb	r2, [r3, #0]
      break;
 800ffd4:	e1a5      	b.n	8010322 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	795b      	ldrb	r3, [r3, #5]
 800ffda:	4619      	mov	r1, r3
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f001 fa87 	bl	80114f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	791b      	ldrb	r3, [r3, #4]
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f001 fa81 	bl	80114f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	701a      	strb	r2, [r3, #0]
      break;
 800fff4:	e195      	b.n	8010322 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fff6:	2112      	movs	r1, #18
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fa89 	bl	8010510 <USBH_Get_DevDesc>
 800fffe:	4603      	mov	r3, r0
 8010000:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010002:	7bbb      	ldrb	r3, [r7, #14]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d103      	bne.n	8010010 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2202      	movs	r2, #2
 801000c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801000e:	e18a      	b.n	8010326 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010010:	7bbb      	ldrb	r3, [r7, #14]
 8010012:	2b03      	cmp	r3, #3
 8010014:	f040 8187 	bne.w	8010326 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801001e:	3301      	adds	r3, #1
 8010020:	b2da      	uxtb	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801002e:	2b03      	cmp	r3, #3
 8010030:	d903      	bls.n	801003a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	220d      	movs	r2, #13
 8010036:	701a      	strb	r2, [r3, #0]
      break;
 8010038:	e175      	b.n	8010326 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	795b      	ldrb	r3, [r3, #5]
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f001 fa55 	bl	80114f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	791b      	ldrb	r3, [r3, #4]
 801004a:	4619      	mov	r1, r3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f001 fa4f 	bl	80114f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	701a      	strb	r2, [r3, #0]
      break;
 801005e:	e162      	b.n	8010326 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010060:	2101      	movs	r1, #1
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 fb13 	bl	801068e <USBH_SetAddress>
 8010068:	4603      	mov	r3, r0
 801006a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801006c:	7bbb      	ldrb	r3, [r7, #14]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d130      	bne.n	80100d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8010072:	2002      	movs	r0, #2
 8010074:	f004 fb2b 	bl	80146ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2201      	movs	r2, #1
 801007c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2203      	movs	r2, #3
 8010084:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	7919      	ldrb	r1, [r3, #4]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801009a:	9202      	str	r2, [sp, #8]
 801009c:	2200      	movs	r2, #0
 801009e:	9201      	str	r2, [sp, #4]
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	4603      	mov	r3, r0
 80100a4:	2280      	movs	r2, #128	@ 0x80
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f001 f9d2 	bl	8011450 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	7959      	ldrb	r1, [r3, #5]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80100c0:	9202      	str	r2, [sp, #8]
 80100c2:	2200      	movs	r2, #0
 80100c4:	9201      	str	r2, [sp, #4]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	4603      	mov	r3, r0
 80100ca:	2200      	movs	r2, #0
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f001 f9bf 	bl	8011450 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80100d2:	e12a      	b.n	801032a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100d4:	7bbb      	ldrb	r3, [r7, #14]
 80100d6:	2b03      	cmp	r3, #3
 80100d8:	f040 8127 	bne.w	801032a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	220d      	movs	r2, #13
 80100e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	705a      	strb	r2, [r3, #1]
      break;
 80100e8:	e11f      	b.n	801032a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80100ea:	2109      	movs	r1, #9
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fa3b 	bl	8010568 <USBH_Get_CfgDesc>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d103      	bne.n	8010104 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2204      	movs	r2, #4
 8010100:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010102:	e114      	b.n	801032e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010104:	7bbb      	ldrb	r3, [r7, #14]
 8010106:	2b03      	cmp	r3, #3
 8010108:	f040 8111 	bne.w	801032e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010112:	3301      	adds	r3, #1
 8010114:	b2da      	uxtb	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010122:	2b03      	cmp	r3, #3
 8010124:	d903      	bls.n	801012e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	220d      	movs	r2, #13
 801012a:	701a      	strb	r2, [r3, #0]
      break;
 801012c:	e0ff      	b.n	801032e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	795b      	ldrb	r3, [r3, #5]
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f001 f9db 	bl	80114f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	791b      	ldrb	r3, [r3, #4]
 801013e:	4619      	mov	r1, r3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f001 f9d5 	bl	80114f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	701a      	strb	r2, [r3, #0]
      break;
 8010152:	e0ec      	b.n	801032e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fa03 	bl	8010568 <USBH_Get_CfgDesc>
 8010162:	4603      	mov	r3, r0
 8010164:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010166:	7bbb      	ldrb	r3, [r7, #14]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d103      	bne.n	8010174 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2205      	movs	r2, #5
 8010170:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010172:	e0de      	b.n	8010332 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010174:	7bbb      	ldrb	r3, [r7, #14]
 8010176:	2b03      	cmp	r3, #3
 8010178:	f040 80db 	bne.w	8010332 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010182:	3301      	adds	r3, #1
 8010184:	b2da      	uxtb	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010192:	2b03      	cmp	r3, #3
 8010194:	d903      	bls.n	801019e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	220d      	movs	r2, #13
 801019a:	701a      	strb	r2, [r3, #0]
      break;
 801019c:	e0c9      	b.n	8010332 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	795b      	ldrb	r3, [r3, #5]
 80101a2:	4619      	mov	r1, r3
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f001 f9a3 	bl	80114f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	791b      	ldrb	r3, [r3, #4]
 80101ae:	4619      	mov	r1, r3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f001 f99d 	bl	80114f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	701a      	strb	r2, [r3, #0]
      break;
 80101c2:	e0b6      	b.n	8010332 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d036      	beq.n	801023c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101da:	23ff      	movs	r3, #255	@ 0xff
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 f9ed 	bl	80105bc <USBH_Get_StringDesc>
 80101e2:	4603      	mov	r3, r0
 80101e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101e6:	7bbb      	ldrb	r3, [r7, #14]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d111      	bne.n	8010210 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2206      	movs	r2, #6
 80101f0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2205      	movs	r2, #5
 80101f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010206:	2200      	movs	r2, #0
 8010208:	4619      	mov	r1, r3
 801020a:	f001 fae3 	bl	80117d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801020e:	e092      	b.n	8010336 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010210:	7bbb      	ldrb	r3, [r7, #14]
 8010212:	2b03      	cmp	r3, #3
 8010214:	f040 808f 	bne.w	8010336 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2206      	movs	r2, #6
 801021c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2205      	movs	r2, #5
 8010222:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010232:	2200      	movs	r2, #0
 8010234:	4619      	mov	r1, r3
 8010236:	f001 facd 	bl	80117d4 <osMessagePut>
      break;
 801023a:	e07c      	b.n	8010336 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2206      	movs	r2, #6
 8010240:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2205      	movs	r2, #5
 8010246:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010256:	2200      	movs	r2, #0
 8010258:	4619      	mov	r1, r3
 801025a:	f001 fabb 	bl	80117d4 <osMessagePut>
      break;
 801025e:	e06a      	b.n	8010336 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8010266:	2b00      	cmp	r3, #0
 8010268:	d027      	beq.n	80102ba <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010276:	23ff      	movs	r3, #255	@ 0xff
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f99f 	bl	80105bc <USBH_Get_StringDesc>
 801027e:	4603      	mov	r3, r0
 8010280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010282:	7bbb      	ldrb	r3, [r7, #14]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d103      	bne.n	8010290 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2207      	movs	r2, #7
 801028c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801028e:	e054      	b.n	801033a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010290:	7bbb      	ldrb	r3, [r7, #14]
 8010292:	2b03      	cmp	r3, #3
 8010294:	d151      	bne.n	801033a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2207      	movs	r2, #7
 801029a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2205      	movs	r2, #5
 80102a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80102b0:	2200      	movs	r2, #0
 80102b2:	4619      	mov	r1, r3
 80102b4:	f001 fa8e 	bl	80117d4 <osMessagePut>
      break;
 80102b8:	e03f      	b.n	801033a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2207      	movs	r2, #7
 80102be:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2205      	movs	r2, #5
 80102c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80102d4:	2200      	movs	r2, #0
 80102d6:	4619      	mov	r1, r3
 80102d8:	f001 fa7c 	bl	80117d4 <osMessagePut>
      break;
 80102dc:	e02d      	b.n	801033a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d017      	beq.n	8010318 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80102f4:	23ff      	movs	r3, #255	@ 0xff
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 f960 	bl	80105bc <USBH_Get_StringDesc>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010300:	7bbb      	ldrb	r3, [r7, #14]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801030a:	e018      	b.n	801033e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801030c:	7bbb      	ldrb	r3, [r7, #14]
 801030e:	2b03      	cmp	r3, #3
 8010310:	d115      	bne.n	801033e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8010312:	2300      	movs	r3, #0
 8010314:	73fb      	strb	r3, [r7, #15]
      break;
 8010316:	e012      	b.n	801033e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73fb      	strb	r3, [r7, #15]
      break;
 801031c:	e00f      	b.n	801033e <USBH_HandleEnum+0x442>

    default:
      break;
 801031e:	bf00      	nop
 8010320:	e00e      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 8010322:	bf00      	nop
 8010324:	e00c      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 8010326:	bf00      	nop
 8010328:	e00a      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 801032a:	bf00      	nop
 801032c:	e008      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 801032e:	bf00      	nop
 8010330:	e006      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 8010332:	bf00      	nop
 8010334:	e004      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 8010336:	bf00      	nop
 8010338:	e002      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 801033a:	bf00      	nop
 801033c:	e000      	b.n	8010340 <USBH_HandleEnum+0x444>
      break;
 801033e:	bf00      	nop
  }
  return Status;
 8010340:	7bfb      	ldrb	r3, [r7, #15]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop

0801034c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 801035e:	bf00      	nop
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr

0801036a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b082      	sub	sp, #8
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f804 	bl	801038e <USBH_HandleSof>
}
 8010386:	bf00      	nop
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b0b      	cmp	r3, #11
 801039e:	d10a      	bne.n	80103b6 <USBH_HandleSof+0x28>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d005      	beq.n	80103b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	4798      	blx	r3
  }
}
 80103b6:	bf00      	nop
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2201      	movs	r2, #1
 80103ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80103e2:	2200      	movs	r2, #0
 80103e4:	4619      	mov	r1, r3
 80103e6:	f001 f9f5 	bl	80117d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80103ea:	bf00      	nop
}
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80103f2:	b480      	push	{r7}
 80103f4:	b083      	sub	sp, #12
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8010402:	bf00      	nop
}
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b082      	sub	sp, #8
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2201      	movs	r2, #1
 801041a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2201      	movs	r2, #1
 8010432:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010442:	2200      	movs	r2, #0
 8010444:	4619      	mov	r1, r3
 8010446:	f001 f9c5 	bl	80117d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f003 ffde 	bl	8014436 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	791b      	ldrb	r3, [r3, #4]
 801047e:	4619      	mov	r1, r3
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f001 f835 	bl	80114f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	795b      	ldrb	r3, [r3, #5]
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f82f 	bl	80114f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2201      	movs	r2, #1
 8010496:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80104a6:	2200      	movs	r2, #0
 80104a8:	4619      	mov	r1, r3
 80104aa:	f001 f993 	bl	80117d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80104ae:	2300      	movs	r3, #0
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b086      	sub	sp, #24
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80104c6:	f107 030c 	add.w	r3, r7, #12
 80104ca:	f04f 32ff 	mov.w	r2, #4294967295
 80104ce:	4618      	mov	r0, r3
 80104d0:	f001 f9c0 	bl	8011854 <osMessageGet>
    if (event.status == osEventMessage)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2b10      	cmp	r3, #16
 80104d8:	d1f2      	bne.n	80104c0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7ff faa4 	bl	800fa28 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80104e0:	e7ee      	b.n	80104c0 <USBH_Process_OS+0x8>

080104e2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b082      	sub	sp, #8
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80104fe:	2200      	movs	r2, #0
 8010500:	4619      	mov	r1, r3
 8010502:	f001 f967 	bl	80117d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af02      	add	r7, sp, #8
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801051c:	887b      	ldrh	r3, [r7, #2]
 801051e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010522:	d901      	bls.n	8010528 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010524:	2303      	movs	r3, #3
 8010526:	e01b      	b.n	8010560 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801052e:	887b      	ldrh	r3, [r7, #2]
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	4613      	mov	r3, r2
 8010534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010538:	2100      	movs	r1, #0
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f872 	bl	8010624 <USBH_GetDescriptor>
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d109      	bne.n	801055e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010550:	887a      	ldrh	r2, [r7, #2]
 8010552:	4619      	mov	r1, r3
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f929 	bl	80107ac <USBH_ParseDevDesc>
 801055a:	4603      	mov	r3, r0
 801055c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b086      	sub	sp, #24
 801056c:	af02      	add	r7, sp, #8
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	331c      	adds	r3, #28
 8010578:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801057a:	887b      	ldrh	r3, [r7, #2]
 801057c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010580:	d901      	bls.n	8010586 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010582:	2303      	movs	r3, #3
 8010584:	e016      	b.n	80105b4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010586:	887b      	ldrh	r3, [r7, #2]
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010590:	2100      	movs	r1, #0
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f846 	bl	8010624 <USBH_GetDescriptor>
 8010598:	4603      	mov	r3, r0
 801059a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801059c:	7bfb      	ldrb	r3, [r7, #15]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d107      	bne.n	80105b2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80105a2:	887b      	ldrh	r3, [r7, #2]
 80105a4:	461a      	mov	r2, r3
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f9af 	bl	801090c <USBH_ParseCfgDesc>
 80105ae:	4603      	mov	r3, r0
 80105b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b088      	sub	sp, #32
 80105c0:	af02      	add	r7, sp, #8
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	607a      	str	r2, [r7, #4]
 80105c6:	461a      	mov	r2, r3
 80105c8:	460b      	mov	r3, r1
 80105ca:	72fb      	strb	r3, [r7, #11]
 80105cc:	4613      	mov	r3, r2
 80105ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80105d0:	893b      	ldrh	r3, [r7, #8]
 80105d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80105d6:	d802      	bhi.n	80105de <USBH_Get_StringDesc+0x22>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d101      	bne.n	80105e2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80105de:	2303      	movs	r3, #3
 80105e0:	e01c      	b.n	801061c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80105e2:	7afb      	ldrb	r3, [r7, #11]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80105ea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80105f2:	893b      	ldrh	r3, [r7, #8]
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	460b      	mov	r3, r1
 80105f8:	2100      	movs	r1, #0
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f000 f812 	bl	8010624 <USBH_GetDescriptor>
 8010600:	4603      	mov	r3, r0
 8010602:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010604:	7dfb      	ldrb	r3, [r7, #23]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d107      	bne.n	801061a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010610:	893a      	ldrh	r2, [r7, #8]
 8010612:	6879      	ldr	r1, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 fb8d 	bl	8010d34 <USBH_ParseStringDesc>
  }

  return status;
 801061a:	7dfb      	ldrb	r3, [r7, #23]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3718      	adds	r7, #24
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	607b      	str	r3, [r7, #4]
 801062e:	460b      	mov	r3, r1
 8010630:	72fb      	strb	r3, [r7, #11]
 8010632:	4613      	mov	r3, r2
 8010634:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	789b      	ldrb	r3, [r3, #2]
 801063a:	2b01      	cmp	r3, #1
 801063c:	d11c      	bne.n	8010678 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801063e:	7afb      	ldrb	r3, [r7, #11]
 8010640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010644:	b2da      	uxtb	r2, r3
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2206      	movs	r2, #6
 801064e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	893a      	ldrh	r2, [r7, #8]
 8010654:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010656:	893b      	ldrh	r3, [r7, #8]
 8010658:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801065c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010660:	d104      	bne.n	801066c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f240 4209 	movw	r2, #1033	@ 0x409
 8010668:	829a      	strh	r2, [r3, #20]
 801066a:	e002      	b.n	8010672 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	8b3a      	ldrh	r2, [r7, #24]
 8010676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010678:	8b3b      	ldrh	r3, [r7, #24]
 801067a:	461a      	mov	r2, r3
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f000 fba5 	bl	8010dce <USBH_CtlReq>
 8010684:	4603      	mov	r3, r0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b082      	sub	sp, #8
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	460b      	mov	r3, r1
 8010698:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	789b      	ldrb	r3, [r3, #2]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d10f      	bne.n	80106c2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2205      	movs	r2, #5
 80106ac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80106ae:	78fb      	ldrb	r3, [r7, #3]
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106c2:	2200      	movs	r2, #0
 80106c4:	2100      	movs	r1, #0
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 fb81 	bl	8010dce <USBH_CtlReq>
 80106cc:	4603      	mov	r3, r0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b082      	sub	sp, #8
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	460b      	mov	r3, r1
 80106e0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	789b      	ldrb	r3, [r3, #2]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d10e      	bne.n	8010708 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2209      	movs	r2, #9
 80106f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	887a      	ldrh	r2, [r7, #2]
 80106fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010708:	2200      	movs	r2, #0
 801070a:	2100      	movs	r1, #0
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fb5e 	bl	8010dce <USBH_CtlReq>
 8010712:	4603      	mov	r3, r0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	789b      	ldrb	r3, [r3, #2]
 801072c:	2b01      	cmp	r3, #1
 801072e:	d10f      	bne.n	8010750 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2203      	movs	r2, #3
 801073a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	b29a      	uxth	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010750:	2200      	movs	r2, #0
 8010752:	2100      	movs	r1, #0
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fb3a 	bl	8010dce <USBH_CtlReq>
 801075a:	4603      	mov	r3, r0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	789b      	ldrb	r3, [r3, #2]
 8010774:	2b01      	cmp	r3, #1
 8010776:	d10f      	bne.n	8010798 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2202      	movs	r2, #2
 801077c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801078a:	78fb      	ldrb	r3, [r7, #3]
 801078c:	b29a      	uxth	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010798:	2200      	movs	r2, #0
 801079a:	2100      	movs	r1, #0
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 fb16 	bl	8010dce <USBH_CtlReq>
 80107a2:	4603      	mov	r3, r0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b087      	sub	sp, #28
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	4613      	mov	r3, r2
 80107b8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80107c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d101      	bne.n	80107d0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80107cc:	2302      	movs	r3, #2
 80107ce:	e094      	b.n	80108fa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	781a      	ldrb	r2, [r3, #0]
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	785a      	ldrb	r2, [r3, #1]
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	3302      	adds	r3, #2
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	3303      	adds	r3, #3
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	021b      	lsls	r3, r3, #8
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	4313      	orrs	r3, r2
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	791a      	ldrb	r2, [r3, #4]
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	795a      	ldrb	r2, [r3, #5]
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	799a      	ldrb	r2, [r3, #6]
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	79da      	ldrb	r2, [r3, #7]
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801082a:	2b01      	cmp	r3, #1
 801082c:	d11b      	bne.n	8010866 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	79db      	ldrb	r3, [r3, #7]
 8010832:	2b20      	cmp	r3, #32
 8010834:	dc0f      	bgt.n	8010856 <USBH_ParseDevDesc+0xaa>
 8010836:	2b08      	cmp	r3, #8
 8010838:	db0f      	blt.n	801085a <USBH_ParseDevDesc+0xae>
 801083a:	3b08      	subs	r3, #8
 801083c:	4a32      	ldr	r2, [pc, #200]	@ (8010908 <USBH_ParseDevDesc+0x15c>)
 801083e:	fa22 f303 	lsr.w	r3, r2, r3
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	bf14      	ite	ne
 801084a:	2301      	movne	r3, #1
 801084c:	2300      	moveq	r3, #0
 801084e:	b2db      	uxtb	r3, r3
 8010850:	2b00      	cmp	r3, #0
 8010852:	d106      	bne.n	8010862 <USBH_ParseDevDesc+0xb6>
 8010854:	e001      	b.n	801085a <USBH_ParseDevDesc+0xae>
 8010856:	2b40      	cmp	r3, #64	@ 0x40
 8010858:	d003      	beq.n	8010862 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	2208      	movs	r2, #8
 801085e:	71da      	strb	r2, [r3, #7]
        break;
 8010860:	e000      	b.n	8010864 <USBH_ParseDevDesc+0xb8>
        break;
 8010862:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010864:	e00e      	b.n	8010884 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801086c:	2b02      	cmp	r3, #2
 801086e:	d107      	bne.n	8010880 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	79db      	ldrb	r3, [r3, #7]
 8010874:	2b08      	cmp	r3, #8
 8010876:	d005      	beq.n	8010884 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2208      	movs	r2, #8
 801087c:	71da      	strb	r2, [r3, #7]
 801087e:	e001      	b.n	8010884 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010880:	2303      	movs	r3, #3
 8010882:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	2b08      	cmp	r3, #8
 8010888:	d936      	bls.n	80108f8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	3308      	adds	r3, #8
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	461a      	mov	r2, r3
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	3309      	adds	r3, #9
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	021b      	lsls	r3, r3, #8
 801089a:	b29b      	uxth	r3, r3
 801089c:	4313      	orrs	r3, r2
 801089e:	b29a      	uxth	r2, r3
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	330a      	adds	r3, #10
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	461a      	mov	r2, r3
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	330b      	adds	r3, #11
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	021b      	lsls	r3, r3, #8
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	4313      	orrs	r3, r2
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	330c      	adds	r3, #12
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	461a      	mov	r2, r3
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	330d      	adds	r3, #13
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	021b      	lsls	r3, r3, #8
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	4313      	orrs	r3, r2
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	7b9a      	ldrb	r2, [r3, #14]
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	7bda      	ldrb	r2, [r3, #15]
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	7c1a      	ldrb	r2, [r3, #16]
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	7c5a      	ldrb	r2, [r3, #17]
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80108f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	371c      	adds	r7, #28
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	01000101 	.word	0x01000101

0801090c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b08c      	sub	sp, #48	@ 0x30
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	4613      	mov	r3, r2
 8010918:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010920:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010922:	2300      	movs	r3, #0
 8010924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010928:	2300      	movs	r3, #0
 801092a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801092e:	2300      	movs	r3, #0
 8010930:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801093a:	2302      	movs	r3, #2
 801093c:	e0da      	b.n	8010af4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b09      	cmp	r3, #9
 8010948:	d002      	beq.n	8010950 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094c:	2209      	movs	r2, #9
 801094e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	781a      	ldrb	r2, [r3, #0]
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	785a      	ldrb	r2, [r3, #1]
 801095c:	6a3b      	ldr	r3, [r7, #32]
 801095e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	3302      	adds	r3, #2
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	461a      	mov	r2, r3
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	3303      	adds	r3, #3
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	021b      	lsls	r3, r3, #8
 8010970:	b29b      	uxth	r3, r3
 8010972:	4313      	orrs	r3, r2
 8010974:	b29b      	uxth	r3, r3
 8010976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801097a:	bf28      	it	cs
 801097c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010980:	b29a      	uxth	r2, r3
 8010982:	6a3b      	ldr	r3, [r7, #32]
 8010984:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	791a      	ldrb	r2, [r3, #4]
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	795a      	ldrb	r2, [r3, #5]
 8010992:	6a3b      	ldr	r3, [r7, #32]
 8010994:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	799a      	ldrb	r2, [r3, #6]
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	79da      	ldrb	r2, [r3, #7]
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	7a1a      	ldrb	r2, [r3, #8]
 80109aa:	6a3b      	ldr	r3, [r7, #32]
 80109ac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80109ae:	88fb      	ldrh	r3, [r7, #6]
 80109b0:	2b09      	cmp	r3, #9
 80109b2:	f240 809d 	bls.w	8010af0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80109b6:	2309      	movs	r3, #9
 80109b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80109ba:	2300      	movs	r3, #0
 80109bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80109be:	e081      	b.n	8010ac4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80109c0:	f107 0316 	add.w	r3, r7, #22
 80109c4:	4619      	mov	r1, r3
 80109c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109c8:	f000 f9e7 	bl	8010d9a <USBH_GetNextDesc>
 80109cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80109ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	d176      	bne.n	8010ac4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80109d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	2b09      	cmp	r3, #9
 80109dc:	d002      	beq.n	80109e4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80109de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e0:	2209      	movs	r2, #9
 80109e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80109e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109e8:	221a      	movs	r2, #26
 80109ea:	fb02 f303 	mul.w	r3, r2, r3
 80109ee:	3308      	adds	r3, #8
 80109f0:	6a3a      	ldr	r2, [r7, #32]
 80109f2:	4413      	add	r3, r2
 80109f4:	3302      	adds	r3, #2
 80109f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80109f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109fa:	69f8      	ldr	r0, [r7, #28]
 80109fc:	f000 f87e 	bl	8010afc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010a0a:	e043      	b.n	8010a94 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010a0c:	f107 0316 	add.w	r3, r7, #22
 8010a10:	4619      	mov	r1, r3
 8010a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a14:	f000 f9c1 	bl	8010d9a <USBH_GetNextDesc>
 8010a18:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1c:	785b      	ldrb	r3, [r3, #1]
 8010a1e:	2b05      	cmp	r3, #5
 8010a20:	d138      	bne.n	8010a94 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	795b      	ldrb	r3, [r3, #5]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d113      	bne.n	8010a52 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d003      	beq.n	8010a3a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	799b      	ldrb	r3, [r3, #6]
 8010a36:	2b03      	cmp	r3, #3
 8010a38:	d10b      	bne.n	8010a52 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	79db      	ldrb	r3, [r3, #7]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10b      	bne.n	8010a5a <USBH_ParseCfgDesc+0x14e>
 8010a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	2b09      	cmp	r3, #9
 8010a48:	d007      	beq.n	8010a5a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a4c:	2209      	movs	r2, #9
 8010a4e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a50:	e003      	b.n	8010a5a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a54:	2207      	movs	r2, #7
 8010a56:	701a      	strb	r2, [r3, #0]
 8010a58:	e000      	b.n	8010a5c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010a5a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a60:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a64:	3201      	adds	r2, #1
 8010a66:	00d2      	lsls	r2, r2, #3
 8010a68:	211a      	movs	r1, #26
 8010a6a:	fb01 f303 	mul.w	r3, r1, r3
 8010a6e:	4413      	add	r3, r2
 8010a70:	3308      	adds	r3, #8
 8010a72:	6a3a      	ldr	r2, [r7, #32]
 8010a74:	4413      	add	r3, r2
 8010a76:	3304      	adds	r3, #4
 8010a78:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a7c:	69b9      	ldr	r1, [r7, #24]
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	f000 f870 	bl	8010b64 <USBH_ParseEPDesc>
 8010a84:	4603      	mov	r3, r0
 8010a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a8e:	3301      	adds	r3, #1
 8010a90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	791b      	ldrb	r3, [r3, #4]
 8010a98:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d204      	bcs.n	8010aaa <USBH_ParseCfgDesc+0x19e>
 8010aa0:	6a3b      	ldr	r3, [r7, #32]
 8010aa2:	885a      	ldrh	r2, [r3, #2]
 8010aa4:	8afb      	ldrh	r3, [r7, #22]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d8b0      	bhi.n	8010a0c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	791b      	ldrb	r3, [r3, #4]
 8010aae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d201      	bcs.n	8010aba <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010ab6:	2303      	movs	r3, #3
 8010ab8:	e01c      	b.n	8010af4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8010aba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010abe:	3301      	adds	r3, #1
 8010ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d805      	bhi.n	8010ad8 <USBH_ParseCfgDesc+0x1cc>
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	885a      	ldrh	r2, [r3, #2]
 8010ad0:	8afb      	ldrh	r3, [r7, #22]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	f63f af74 	bhi.w	80109c0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010ad8:	6a3b      	ldr	r3, [r7, #32]
 8010ada:	791b      	ldrb	r3, [r3, #4]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	bf28      	it	cs
 8010ae0:	2302      	movcs	r3, #2
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d201      	bcs.n	8010af0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010aec:	2303      	movs	r3, #3
 8010aee:	e001      	b.n	8010af4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010af0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3730      	adds	r7, #48	@ 0x30
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	781a      	ldrb	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	785a      	ldrb	r2, [r3, #1]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	789a      	ldrb	r2, [r3, #2]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	78da      	ldrb	r2, [r3, #3]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	bf28      	it	cs
 8010b30:	2302      	movcs	r3, #2
 8010b32:	b2da      	uxtb	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	795a      	ldrb	r2, [r3, #5]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	799a      	ldrb	r2, [r3, #6]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	79da      	ldrb	r2, [r3, #7]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	7a1a      	ldrb	r2, [r3, #8]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	721a      	strb	r2, [r3, #8]
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b087      	sub	sp, #28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	785a      	ldrb	r2, [r3, #1]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	789a      	ldrb	r2, [r3, #2]
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	78da      	ldrb	r2, [r3, #3]
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	3304      	adds	r3, #4
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3305      	adds	r3, #5
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	021b      	lsls	r3, r3, #8
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	799a      	ldrb	r2, [r3, #6]
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	889b      	ldrh	r3, [r3, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010bc6:	d804      	bhi.n	8010bd2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bd0:	d901      	bls.n	8010bd6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d136      	bne.n	8010c4e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	78db      	ldrb	r3, [r3, #3]
 8010be4:	f003 0303 	and.w	r3, r3, #3
 8010be8:	2b02      	cmp	r3, #2
 8010bea:	d108      	bne.n	8010bfe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	889b      	ldrh	r3, [r3, #4]
 8010bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bf4:	f240 8097 	bls.w	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	75fb      	strb	r3, [r7, #23]
 8010bfc:	e093      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	78db      	ldrb	r3, [r3, #3]
 8010c02:	f003 0303 	and.w	r3, r3, #3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d107      	bne.n	8010c1a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	889b      	ldrh	r3, [r3, #4]
 8010c0e:	2b40      	cmp	r3, #64	@ 0x40
 8010c10:	f240 8089 	bls.w	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010c14:	2303      	movs	r3, #3
 8010c16:	75fb      	strb	r3, [r7, #23]
 8010c18:	e085      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	78db      	ldrb	r3, [r3, #3]
 8010c1e:	f003 0303 	and.w	r3, r3, #3
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d005      	beq.n	8010c32 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	78db      	ldrb	r3, [r3, #3]
 8010c2a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010c2e:	2b03      	cmp	r3, #3
 8010c30:	d10a      	bne.n	8010c48 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	799b      	ldrb	r3, [r3, #6]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d003      	beq.n	8010c42 <USBH_ParseEPDesc+0xde>
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	799b      	ldrb	r3, [r3, #6]
 8010c3e:	2b10      	cmp	r3, #16
 8010c40:	d970      	bls.n	8010d24 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010c42:	2303      	movs	r3, #3
 8010c44:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c46:	e06d      	b.n	8010d24 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	75fb      	strb	r3, [r7, #23]
 8010c4c:	e06b      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d13c      	bne.n	8010cd2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	78db      	ldrb	r3, [r3, #3]
 8010c5c:	f003 0303 	and.w	r3, r3, #3
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	d005      	beq.n	8010c70 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	78db      	ldrb	r3, [r3, #3]
 8010c68:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d106      	bne.n	8010c7e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	889b      	ldrh	r3, [r3, #4]
 8010c74:	2b40      	cmp	r3, #64	@ 0x40
 8010c76:	d956      	bls.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010c78:	2303      	movs	r3, #3
 8010c7a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c7c:	e053      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	78db      	ldrb	r3, [r3, #3]
 8010c82:	f003 0303 	and.w	r3, r3, #3
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d10e      	bne.n	8010ca8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	799b      	ldrb	r3, [r3, #6]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d007      	beq.n	8010ca2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010c96:	2b10      	cmp	r3, #16
 8010c98:	d803      	bhi.n	8010ca2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010c9e:	2b40      	cmp	r3, #64	@ 0x40
 8010ca0:	d941      	bls.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	75fb      	strb	r3, [r7, #23]
 8010ca6:	e03e      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	78db      	ldrb	r3, [r3, #3]
 8010cac:	f003 0303 	and.w	r3, r3, #3
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d10b      	bne.n	8010ccc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	799b      	ldrb	r3, [r3, #6]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d004      	beq.n	8010cc6 <USBH_ParseEPDesc+0x162>
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	889b      	ldrh	r3, [r3, #4]
 8010cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010cc4:	d32f      	bcc.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010cc6:	2303      	movs	r3, #3
 8010cc8:	75fb      	strb	r3, [r7, #23]
 8010cca:	e02c      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	75fb      	strb	r3, [r7, #23]
 8010cd0:	e029      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010cd8:	2b02      	cmp	r3, #2
 8010cda:	d120      	bne.n	8010d1e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	78db      	ldrb	r3, [r3, #3]
 8010ce0:	f003 0303 	and.w	r3, r3, #3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d106      	bne.n	8010cf6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	889b      	ldrh	r3, [r3, #4]
 8010cec:	2b08      	cmp	r3, #8
 8010cee:	d01a      	beq.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	75fb      	strb	r3, [r7, #23]
 8010cf4:	e017      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	78db      	ldrb	r3, [r3, #3]
 8010cfa:	f003 0303 	and.w	r3, r3, #3
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	d10a      	bne.n	8010d18 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	799b      	ldrb	r3, [r3, #6]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <USBH_ParseEPDesc+0x1ae>
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	889b      	ldrh	r3, [r3, #4]
 8010d0e:	2b08      	cmp	r3, #8
 8010d10:	d909      	bls.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010d12:	2303      	movs	r3, #3
 8010d14:	75fb      	strb	r3, [r7, #23]
 8010d16:	e006      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010d18:	2303      	movs	r3, #3
 8010d1a:	75fb      	strb	r3, [r7, #23]
 8010d1c:	e003      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010d1e:	2303      	movs	r3, #3
 8010d20:	75fb      	strb	r3, [r7, #23]
 8010d22:	e000      	b.n	8010d26 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010d24:	bf00      	nop
  }

  return status;
 8010d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	371c      	adds	r7, #28
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b087      	sub	sp, #28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3301      	adds	r3, #1
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b03      	cmp	r3, #3
 8010d4a:	d120      	bne.n	8010d8e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	1e9a      	subs	r2, r3, #2
 8010d52:	88fb      	ldrh	r3, [r7, #6]
 8010d54:	4293      	cmp	r3, r2
 8010d56:	bf28      	it	cs
 8010d58:	4613      	movcs	r3, r2
 8010d5a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3302      	adds	r3, #2
 8010d60:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010d62:	2300      	movs	r3, #0
 8010d64:	82fb      	strh	r3, [r7, #22]
 8010d66:	e00b      	b.n	8010d80 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010d68:	8afb      	ldrh	r3, [r7, #22]
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	781a      	ldrb	r2, [r3, #0]
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	3301      	adds	r3, #1
 8010d78:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010d7a:	8afb      	ldrh	r3, [r7, #22]
 8010d7c:	3302      	adds	r3, #2
 8010d7e:	82fb      	strh	r3, [r7, #22]
 8010d80:	8afa      	ldrh	r2, [r7, #22]
 8010d82:	8abb      	ldrh	r3, [r7, #20]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d3ef      	bcc.n	8010d68 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	701a      	strb	r2, [r3, #0]
  }
}
 8010d8e:	bf00      	nop
 8010d90:	371c      	adds	r7, #28
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b085      	sub	sp, #20
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
 8010da2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	7812      	ldrb	r2, [r2, #0]
 8010dac:	4413      	add	r3, r2
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3714      	adds	r7, #20
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b086      	sub	sp, #24
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	60b9      	str	r1, [r7, #8]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	789b      	ldrb	r3, [r3, #2]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d002      	beq.n	8010dee <USBH_CtlReq+0x20>
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d01d      	beq.n	8010e28 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010dec:	e043      	b.n	8010e76 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	88fa      	ldrh	r2, [r7, #6]
 8010df8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2202      	movs	r2, #2
 8010e04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010e06:	2301      	movs	r3, #1
 8010e08:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2203      	movs	r2, #3
 8010e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	4619      	mov	r1, r3
 8010e22:	f000 fcd7 	bl	80117d4 <osMessagePut>
      break;
 8010e26:	e026      	b.n	8010e76 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f000 f829 	bl	8010e80 <USBH_HandleControl>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <USBH_CtlReq+0x70>
 8010e38:	7dfb      	ldrb	r3, [r7, #23]
 8010e3a:	2b03      	cmp	r3, #3
 8010e3c:	d106      	bne.n	8010e4c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2201      	movs	r2, #1
 8010e42:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2200      	movs	r2, #0
 8010e48:	761a      	strb	r2, [r3, #24]
 8010e4a:	e005      	b.n	8010e58 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010e4c:	7dfb      	ldrb	r3, [r7, #23]
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d102      	bne.n	8010e58 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2201      	movs	r2, #1
 8010e56:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2203      	movs	r2, #3
 8010e5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4619      	mov	r1, r3
 8010e70:	f000 fcb0 	bl	80117d4 <osMessagePut>
      break;
 8010e74:	bf00      	nop
  }
  return status;
 8010e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3718      	adds	r7, #24
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af02      	add	r7, sp, #8
 8010e86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7e1b      	ldrb	r3, [r3, #24]
 8010e94:	3b01      	subs	r3, #1
 8010e96:	2b0a      	cmp	r3, #10
 8010e98:	f200 8229 	bhi.w	80112ee <USBH_HandleControl+0x46e>
 8010e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea4 <USBH_HandleControl+0x24>)
 8010e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea2:	bf00      	nop
 8010ea4:	08010ed1 	.word	0x08010ed1
 8010ea8:	08010eeb 	.word	0x08010eeb
 8010eac:	08010f8d 	.word	0x08010f8d
 8010eb0:	08010fb3 	.word	0x08010fb3
 8010eb4:	0801103f 	.word	0x0801103f
 8010eb8:	08011069 	.word	0x08011069
 8010ebc:	0801112b 	.word	0x0801112b
 8010ec0:	0801114d 	.word	0x0801114d
 8010ec4:	080111df 	.word	0x080111df
 8010ec8:	08011205 	.word	0x08011205
 8010ecc:	08011297 	.word	0x08011297
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f103 0110 	add.w	r1, r3, #16
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	795b      	ldrb	r3, [r3, #5]
 8010eda:	461a      	mov	r2, r3
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 fa17 	bl	8011310 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2202      	movs	r2, #2
 8010ee6:	761a      	strb	r2, [r3, #24]
      break;
 8010ee8:	e20c      	b.n	8011304 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	795b      	ldrb	r3, [r3, #5]
 8010eee:	4619      	mov	r1, r3
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f003 fb8f 	bl	8014614 <USBH_LL_GetURBState>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010efa:	7bbb      	ldrb	r3, [r7, #14]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d12c      	bne.n	8010f5a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	7c1b      	ldrb	r3, [r3, #16]
 8010f04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010f08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	8adb      	ldrh	r3, [r3, #22]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00a      	beq.n	8010f28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010f12:	7b7b      	ldrb	r3, [r7, #13]
 8010f14:	2b80      	cmp	r3, #128	@ 0x80
 8010f16:	d103      	bne.n	8010f20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2203      	movs	r2, #3
 8010f1c:	761a      	strb	r2, [r3, #24]
 8010f1e:	e00d      	b.n	8010f3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2205      	movs	r2, #5
 8010f24:	761a      	strb	r2, [r3, #24]
 8010f26:	e009      	b.n	8010f3c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010f28:	7b7b      	ldrb	r3, [r7, #13]
 8010f2a:	2b80      	cmp	r3, #128	@ 0x80
 8010f2c:	d103      	bne.n	8010f36 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2209      	movs	r2, #9
 8010f32:	761a      	strb	r2, [r3, #24]
 8010f34:	e002      	b.n	8010f3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2207      	movs	r2, #7
 8010f3a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2203      	movs	r2, #3
 8010f40:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010f50:	2200      	movs	r2, #0
 8010f52:	4619      	mov	r1, r3
 8010f54:	f000 fc3e 	bl	80117d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f58:	e1cb      	b.n	80112f2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010f5a:	7bbb      	ldrb	r3, [r7, #14]
 8010f5c:	2b04      	cmp	r3, #4
 8010f5e:	d003      	beq.n	8010f68 <USBH_HandleControl+0xe8>
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	2b02      	cmp	r3, #2
 8010f64:	f040 81c5 	bne.w	80112f2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	220b      	movs	r2, #11
 8010f6c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2203      	movs	r2, #3
 8010f72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010f82:	2200      	movs	r2, #0
 8010f84:	4619      	mov	r1, r3
 8010f86:	f000 fc25 	bl	80117d4 <osMessagePut>
      break;
 8010f8a:	e1b2      	b.n	80112f2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6899      	ldr	r1, [r3, #8]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	899a      	ldrh	r2, [r3, #12]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	791b      	ldrb	r3, [r3, #4]
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 f9f2 	bl	801138e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2204      	movs	r2, #4
 8010fae:	761a      	strb	r2, [r3, #24]
      break;
 8010fb0:	e1a8      	b.n	8011304 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	791b      	ldrb	r3, [r3, #4]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f003 fb2b 	bl	8014614 <USBH_LL_GetURBState>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010fc2:	7bbb      	ldrb	r3, [r7, #14]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d110      	bne.n	8010fea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2209      	movs	r2, #9
 8010fcc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2203      	movs	r2, #3
 8010fd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	f000 fbf5 	bl	80117d4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010fea:	7bbb      	ldrb	r3, [r7, #14]
 8010fec:	2b05      	cmp	r3, #5
 8010fee:	d110      	bne.n	8011012 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2203      	movs	r2, #3
 8010ff8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011008:	2200      	movs	r2, #0
 801100a:	4619      	mov	r1, r3
 801100c:	f000 fbe2 	bl	80117d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011010:	e171      	b.n	80112f6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8011012:	7bbb      	ldrb	r3, [r7, #14]
 8011014:	2b04      	cmp	r3, #4
 8011016:	f040 816e 	bne.w	80112f6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	220b      	movs	r2, #11
 801101e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2203      	movs	r2, #3
 8011024:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011034:	2200      	movs	r2, #0
 8011036:	4619      	mov	r1, r3
 8011038:	f000 fbcc 	bl	80117d4 <osMessagePut>
      break;
 801103c:	e15b      	b.n	80112f6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6899      	ldr	r1, [r3, #8]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	899a      	ldrh	r2, [r3, #12]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	795b      	ldrb	r3, [r3, #5]
 801104a:	2001      	movs	r0, #1
 801104c:	9000      	str	r0, [sp, #0]
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f978 	bl	8011344 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2206      	movs	r2, #6
 8011064:	761a      	strb	r2, [r3, #24]
      break;
 8011066:	e14d      	b.n	8011304 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	795b      	ldrb	r3, [r3, #5]
 801106c:	4619      	mov	r1, r3
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f003 fad0 	bl	8014614 <USBH_LL_GetURBState>
 8011074:	4603      	mov	r3, r0
 8011076:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011078:	7bbb      	ldrb	r3, [r7, #14]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d111      	bne.n	80110a2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2207      	movs	r2, #7
 8011082:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2203      	movs	r2, #3
 8011088:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011098:	2200      	movs	r2, #0
 801109a:	4619      	mov	r1, r3
 801109c:	f000 fb9a 	bl	80117d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80110a0:	e12b      	b.n	80112fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80110a2:	7bbb      	ldrb	r3, [r7, #14]
 80110a4:	2b05      	cmp	r3, #5
 80110a6:	d113      	bne.n	80110d0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	220c      	movs	r2, #12
 80110ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80110ae:	2303      	movs	r3, #3
 80110b0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2203      	movs	r2, #3
 80110b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80110c6:	2200      	movs	r2, #0
 80110c8:	4619      	mov	r1, r3
 80110ca:	f000 fb83 	bl	80117d4 <osMessagePut>
      break;
 80110ce:	e114      	b.n	80112fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80110d0:	7bbb      	ldrb	r3, [r7, #14]
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	d111      	bne.n	80110fa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2205      	movs	r2, #5
 80110da:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2203      	movs	r2, #3
 80110e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80110f0:	2200      	movs	r2, #0
 80110f2:	4619      	mov	r1, r3
 80110f4:	f000 fb6e 	bl	80117d4 <osMessagePut>
      break;
 80110f8:	e0ff      	b.n	80112fa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80110fa:	7bbb      	ldrb	r3, [r7, #14]
 80110fc:	2b04      	cmp	r3, #4
 80110fe:	f040 80fc 	bne.w	80112fa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	220b      	movs	r2, #11
 8011106:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011108:	2302      	movs	r3, #2
 801110a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2203      	movs	r2, #3
 8011110:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011120:	2200      	movs	r2, #0
 8011122:	4619      	mov	r1, r3
 8011124:	f000 fb56 	bl	80117d4 <osMessagePut>
      break;
 8011128:	e0e7      	b.n	80112fa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	791b      	ldrb	r3, [r3, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	2100      	movs	r1, #0
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 f92b 	bl	801138e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801113e:	b29a      	uxth	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2208      	movs	r2, #8
 8011148:	761a      	strb	r2, [r3, #24]

      break;
 801114a:	e0db      	b.n	8011304 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	791b      	ldrb	r3, [r3, #4]
 8011150:	4619      	mov	r1, r3
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f003 fa5e 	bl	8014614 <USBH_LL_GetURBState>
 8011158:	4603      	mov	r3, r0
 801115a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801115c:	7bbb      	ldrb	r3, [r7, #14]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d113      	bne.n	801118a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	220d      	movs	r2, #13
 8011166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011168:	2300      	movs	r3, #0
 801116a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2203      	movs	r2, #3
 8011170:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011180:	2200      	movs	r2, #0
 8011182:	4619      	mov	r1, r3
 8011184:	f000 fb26 	bl	80117d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011188:	e0b9      	b.n	80112fe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801118a:	7bbb      	ldrb	r3, [r7, #14]
 801118c:	2b04      	cmp	r3, #4
 801118e:	d111      	bne.n	80111b4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	220b      	movs	r2, #11
 8011194:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2203      	movs	r2, #3
 801119a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80111aa:	2200      	movs	r2, #0
 80111ac:	4619      	mov	r1, r3
 80111ae:	f000 fb11 	bl	80117d4 <osMessagePut>
      break;
 80111b2:	e0a4      	b.n	80112fe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80111b4:	7bbb      	ldrb	r3, [r7, #14]
 80111b6:	2b05      	cmp	r3, #5
 80111b8:	f040 80a1 	bne.w	80112fe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80111bc:	2303      	movs	r3, #3
 80111be:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2203      	movs	r2, #3
 80111c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80111d4:	2200      	movs	r2, #0
 80111d6:	4619      	mov	r1, r3
 80111d8:	f000 fafc 	bl	80117d4 <osMessagePut>
      break;
 80111dc:	e08f      	b.n	80112fe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	795b      	ldrb	r3, [r3, #5]
 80111e2:	2201      	movs	r2, #1
 80111e4:	9200      	str	r2, [sp, #0]
 80111e6:	2200      	movs	r2, #0
 80111e8:	2100      	movs	r1, #0
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 f8aa 	bl	8011344 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	220a      	movs	r2, #10
 8011200:	761a      	strb	r2, [r3, #24]
      break;
 8011202:	e07f      	b.n	8011304 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	795b      	ldrb	r3, [r3, #5]
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f003 fa02 	bl	8014614 <USBH_LL_GetURBState>
 8011210:	4603      	mov	r3, r0
 8011212:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011214:	7bbb      	ldrb	r3, [r7, #14]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d113      	bne.n	8011242 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	220d      	movs	r2, #13
 8011222:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2203      	movs	r2, #3
 8011228:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011238:	2200      	movs	r2, #0
 801123a:	4619      	mov	r1, r3
 801123c:	f000 faca 	bl	80117d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011240:	e05f      	b.n	8011302 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011242:	7bbb      	ldrb	r3, [r7, #14]
 8011244:	2b02      	cmp	r3, #2
 8011246:	d111      	bne.n	801126c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2209      	movs	r2, #9
 801124c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2203      	movs	r2, #3
 8011252:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011262:	2200      	movs	r2, #0
 8011264:	4619      	mov	r1, r3
 8011266:	f000 fab5 	bl	80117d4 <osMessagePut>
      break;
 801126a:	e04a      	b.n	8011302 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 801126c:	7bbb      	ldrb	r3, [r7, #14]
 801126e:	2b04      	cmp	r3, #4
 8011270:	d147      	bne.n	8011302 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	220b      	movs	r2, #11
 8011276:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2203      	movs	r2, #3
 801127c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801128c:	2200      	movs	r2, #0
 801128e:	4619      	mov	r1, r3
 8011290:	f000 faa0 	bl	80117d4 <osMessagePut>
      break;
 8011294:	e035      	b.n	8011302 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	7e5b      	ldrb	r3, [r3, #25]
 801129a:	3301      	adds	r3, #1
 801129c:	b2da      	uxtb	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	765a      	strb	r2, [r3, #25]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	7e5b      	ldrb	r3, [r3, #25]
 80112a6:	2b02      	cmp	r3, #2
 80112a8:	d806      	bhi.n	80112b8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2201      	movs	r2, #1
 80112ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2201      	movs	r2, #1
 80112b4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80112b6:	e025      	b.n	8011304 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80112be:	2106      	movs	r1, #6
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	795b      	ldrb	r3, [r3, #5]
 80112ce:	4619      	mov	r1, r3
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 f90d 	bl	80114f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	791b      	ldrb	r3, [r3, #4]
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 f907 	bl	80114f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80112e8:	2302      	movs	r3, #2
 80112ea:	73fb      	strb	r3, [r7, #15]
      break;
 80112ec:	e00a      	b.n	8011304 <USBH_HandleControl+0x484>

    default:
      break;
 80112ee:	bf00      	nop
 80112f0:	e008      	b.n	8011304 <USBH_HandleControl+0x484>
      break;
 80112f2:	bf00      	nop
 80112f4:	e006      	b.n	8011304 <USBH_HandleControl+0x484>
      break;
 80112f6:	bf00      	nop
 80112f8:	e004      	b.n	8011304 <USBH_HandleControl+0x484>
      break;
 80112fa:	bf00      	nop
 80112fc:	e002      	b.n	8011304 <USBH_HandleControl+0x484>
      break;
 80112fe:	bf00      	nop
 8011300:	e000      	b.n	8011304 <USBH_HandleControl+0x484>
      break;
 8011302:	bf00      	nop
  }

  return status;
 8011304:	7bfb      	ldrb	r3, [r7, #15]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop

08011310 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b088      	sub	sp, #32
 8011314:	af04      	add	r7, sp, #16
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	4613      	mov	r3, r2
 801131c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801131e:	79f9      	ldrb	r1, [r7, #7]
 8011320:	2300      	movs	r3, #0
 8011322:	9303      	str	r3, [sp, #12]
 8011324:	2308      	movs	r3, #8
 8011326:	9302      	str	r3, [sp, #8]
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	9301      	str	r3, [sp, #4]
 801132c:	2300      	movs	r3, #0
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	2300      	movs	r3, #0
 8011332:	2200      	movs	r2, #0
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f003 f93c 	bl	80145b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af04      	add	r7, sp, #16
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	4611      	mov	r1, r2
 8011350:	461a      	mov	r2, r3
 8011352:	460b      	mov	r3, r1
 8011354:	80fb      	strh	r3, [r7, #6]
 8011356:	4613      	mov	r3, r2
 8011358:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011360:	2b00      	cmp	r3, #0
 8011362:	d001      	beq.n	8011368 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011364:	2300      	movs	r3, #0
 8011366:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011368:	7979      	ldrb	r1, [r7, #5]
 801136a:	7e3b      	ldrb	r3, [r7, #24]
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	88fb      	ldrh	r3, [r7, #6]
 8011370:	9302      	str	r3, [sp, #8]
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	2301      	movs	r3, #1
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	2300      	movs	r3, #0
 801137c:	2200      	movs	r2, #0
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f003 f917 	bl	80145b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011384:	2300      	movs	r3, #0
}
 8011386:	4618      	mov	r0, r3
 8011388:	3710      	adds	r7, #16
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}

0801138e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b088      	sub	sp, #32
 8011392:	af04      	add	r7, sp, #16
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	4611      	mov	r1, r2
 801139a:	461a      	mov	r2, r3
 801139c:	460b      	mov	r3, r1
 801139e:	80fb      	strh	r3, [r7, #6]
 80113a0:	4613      	mov	r3, r2
 80113a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80113a4:	7979      	ldrb	r1, [r7, #5]
 80113a6:	2300      	movs	r3, #0
 80113a8:	9303      	str	r3, [sp, #12]
 80113aa:	88fb      	ldrh	r3, [r7, #6]
 80113ac:	9302      	str	r3, [sp, #8]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	9301      	str	r3, [sp, #4]
 80113b2:	2301      	movs	r3, #1
 80113b4:	9300      	str	r3, [sp, #0]
 80113b6:	2300      	movs	r3, #0
 80113b8:	2201      	movs	r2, #1
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f003 f8f9 	bl	80145b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80113c0:	2300      	movs	r3, #0

}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}

080113ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b088      	sub	sp, #32
 80113ce:	af04      	add	r7, sp, #16
 80113d0:	60f8      	str	r0, [r7, #12]
 80113d2:	60b9      	str	r1, [r7, #8]
 80113d4:	4611      	mov	r1, r2
 80113d6:	461a      	mov	r2, r3
 80113d8:	460b      	mov	r3, r1
 80113da:	80fb      	strh	r3, [r7, #6]
 80113dc:	4613      	mov	r3, r2
 80113de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80113ea:	2300      	movs	r3, #0
 80113ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80113ee:	7979      	ldrb	r1, [r7, #5]
 80113f0:	7e3b      	ldrb	r3, [r7, #24]
 80113f2:	9303      	str	r3, [sp, #12]
 80113f4:	88fb      	ldrh	r3, [r7, #6]
 80113f6:	9302      	str	r3, [sp, #8]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	2301      	movs	r3, #1
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	2302      	movs	r3, #2
 8011402:	2200      	movs	r2, #0
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f003 f8d4 	bl	80145b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af04      	add	r7, sp, #16
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4611      	mov	r1, r2
 8011420:	461a      	mov	r2, r3
 8011422:	460b      	mov	r3, r1
 8011424:	80fb      	strh	r3, [r7, #6]
 8011426:	4613      	mov	r3, r2
 8011428:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801142a:	7979      	ldrb	r1, [r7, #5]
 801142c:	2300      	movs	r3, #0
 801142e:	9303      	str	r3, [sp, #12]
 8011430:	88fb      	ldrh	r3, [r7, #6]
 8011432:	9302      	str	r3, [sp, #8]
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	2301      	movs	r3, #1
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	2302      	movs	r3, #2
 801143e:	2201      	movs	r2, #1
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f003 f8b6 	bl	80145b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af04      	add	r7, sp, #16
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	4608      	mov	r0, r1
 801145a:	4611      	mov	r1, r2
 801145c:	461a      	mov	r2, r3
 801145e:	4603      	mov	r3, r0
 8011460:	70fb      	strb	r3, [r7, #3]
 8011462:	460b      	mov	r3, r1
 8011464:	70bb      	strb	r3, [r7, #2]
 8011466:	4613      	mov	r3, r2
 8011468:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801146a:	7878      	ldrb	r0, [r7, #1]
 801146c:	78ba      	ldrb	r2, [r7, #2]
 801146e:	78f9      	ldrb	r1, [r7, #3]
 8011470:	8b3b      	ldrh	r3, [r7, #24]
 8011472:	9302      	str	r3, [sp, #8]
 8011474:	7d3b      	ldrb	r3, [r7, #20]
 8011476:	9301      	str	r3, [sp, #4]
 8011478:	7c3b      	ldrb	r3, [r7, #16]
 801147a:	9300      	str	r3, [sp, #0]
 801147c:	4603      	mov	r3, r0
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f003 f849 	bl	8014516 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	460b      	mov	r3, r1
 8011498:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801149a:	78fb      	ldrb	r3, [r7, #3]
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f003 f868 	bl	8014574 <USBH_LL_ClosePipe>

  return USBH_OK;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b084      	sub	sp, #16
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	460b      	mov	r3, r1
 80114b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 f836 	bl	801152c <USBH_GetFreePipe>
 80114c0:	4603      	mov	r3, r0
 80114c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80114c4:	89fb      	ldrh	r3, [r7, #14]
 80114c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d00a      	beq.n	80114e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80114ce:	78fa      	ldrb	r2, [r7, #3]
 80114d0:	89fb      	ldrh	r3, [r7, #14]
 80114d2:	f003 030f 	and.w	r3, r3, #15
 80114d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80114da:	6879      	ldr	r1, [r7, #4]
 80114dc:	33e0      	adds	r3, #224	@ 0xe0
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	440b      	add	r3, r1
 80114e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80114e4:	89fb      	ldrh	r3, [r7, #14]
 80114e6:	b2db      	uxtb	r3, r3
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	460b      	mov	r3, r1
 80114fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80114fc:	78fb      	ldrb	r3, [r7, #3]
 80114fe:	2b0f      	cmp	r3, #15
 8011500:	d80d      	bhi.n	801151e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011502:	78fb      	ldrb	r3, [r7, #3]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	33e0      	adds	r3, #224	@ 0xe0
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4413      	add	r3, r2
 801150c:	685a      	ldr	r2, [r3, #4]
 801150e:	78fb      	ldrb	r3, [r7, #3]
 8011510:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011514:	6879      	ldr	r1, [r7, #4]
 8011516:	33e0      	adds	r3, #224	@ 0xe0
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	440b      	add	r3, r1
 801151c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801151e:	2300      	movs	r3, #0
}
 8011520:	4618      	mov	r0, r3
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011534:	2300      	movs	r3, #0
 8011536:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011538:	2300      	movs	r3, #0
 801153a:	73fb      	strb	r3, [r7, #15]
 801153c:	e00f      	b.n	801155e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	33e0      	adds	r3, #224	@ 0xe0
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4413      	add	r3, r2
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011552:	7bfb      	ldrb	r3, [r7, #15]
 8011554:	b29b      	uxth	r3, r3
 8011556:	e007      	b.n	8011568 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011558:	7bfb      	ldrb	r3, [r7, #15]
 801155a:	3301      	adds	r3, #1
 801155c:	73fb      	strb	r3, [r7, #15]
 801155e:	7bfb      	ldrb	r3, [r7, #15]
 8011560:	2b0f      	cmp	r3, #15
 8011562:	d9ec      	bls.n	801153e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011574:	b480      	push	{r7}
 8011576:	b087      	sub	sp, #28
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	4613      	mov	r3, r2
 8011580:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011582:	2301      	movs	r3, #1
 8011584:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011586:	2300      	movs	r3, #0
 8011588:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801158a:	4b1f      	ldr	r3, [pc, #124]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 801158c:	7a5b      	ldrb	r3, [r3, #9]
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	d131      	bne.n	80115f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011594:	4b1c      	ldr	r3, [pc, #112]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 8011596:	7a5b      	ldrb	r3, [r3, #9]
 8011598:	b2db      	uxtb	r3, r3
 801159a:	461a      	mov	r2, r3
 801159c:	4b1a      	ldr	r3, [pc, #104]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 801159e:	2100      	movs	r1, #0
 80115a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115a2:	4b19      	ldr	r3, [pc, #100]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115a4:	7a5b      	ldrb	r3, [r3, #9]
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	4a17      	ldr	r2, [pc, #92]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80115b2:	4b15      	ldr	r3, [pc, #84]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115b4:	7a5b      	ldrb	r3, [r3, #9]
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	461a      	mov	r2, r3
 80115ba:	4b13      	ldr	r3, [pc, #76]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115bc:	4413      	add	r3, r2
 80115be:	79fa      	ldrb	r2, [r7, #7]
 80115c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80115c2:	4b11      	ldr	r3, [pc, #68]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115c4:	7a5b      	ldrb	r3, [r3, #9]
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	1c5a      	adds	r2, r3, #1
 80115ca:	b2d1      	uxtb	r1, r2
 80115cc:	4a0e      	ldr	r2, [pc, #56]	@ (8011608 <FATFS_LinkDriverEx+0x94>)
 80115ce:	7251      	strb	r1, [r2, #9]
 80115d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80115d2:	7dbb      	ldrb	r3, [r7, #22]
 80115d4:	3330      	adds	r3, #48	@ 0x30
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	3301      	adds	r3, #1
 80115e0:	223a      	movs	r2, #58	@ 0x3a
 80115e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	3302      	adds	r3, #2
 80115e8:	222f      	movs	r2, #47	@ 0x2f
 80115ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	3303      	adds	r3, #3
 80115f0:	2200      	movs	r2, #0
 80115f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80115f4:	2300      	movs	r3, #0
 80115f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80115f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	371c      	adds	r7, #28
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	20000d3c 	.word	0x20000d3c

0801160c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011616:	2200      	movs	r2, #0
 8011618:	6839      	ldr	r1, [r7, #0]
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7ff ffaa 	bl	8011574 <FATFS_LinkDriverEx>
 8011620:	4603      	mov	r3, r0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801162a:	b480      	push	{r7}
 801162c:	b085      	sub	sp, #20
 801162e:	af00      	add	r7, sp, #0
 8011630:	4603      	mov	r3, r0
 8011632:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011634:	2300      	movs	r3, #0
 8011636:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801163c:	2b84      	cmp	r3, #132	@ 0x84
 801163e:	d005      	beq.n	801164c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011640:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	4413      	add	r3, r2
 8011648:	3303      	adds	r3, #3
 801164a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801164c:	68fb      	ldr	r3, [r7, #12]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3714      	adds	r7, #20
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr

0801165a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801165a:	b480      	push	{r7}
 801165c:	b083      	sub	sp, #12
 801165e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011660:	f3ef 8305 	mrs	r3, IPSR
 8011664:	607b      	str	r3, [r7, #4]
  return(result);
 8011666:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011668:	2b00      	cmp	r3, #0
 801166a:	bf14      	ite	ne
 801166c:	2301      	movne	r3, #1
 801166e:	2300      	moveq	r3, #0
 8011670:	b2db      	uxtb	r3, r3
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801167e:	b580      	push	{r7, lr}
 8011680:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011682:	f001 faa5 	bl	8012bd0 <vTaskStartScheduler>
  
  return osOK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	bd80      	pop	{r7, pc}

0801168c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011690:	f001 ff06 	bl	80134a0 <xTaskGetSchedulerState>
 8011694:	4603      	mov	r3, r0
 8011696:	2b01      	cmp	r3, #1
 8011698:	d101      	bne.n	801169e <osKernelRunning+0x12>
    return 0;
 801169a:	2300      	movs	r3, #0
 801169c:	e000      	b.n	80116a0 <osKernelRunning+0x14>
  else
    return 1;
 801169e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80116a8:	f7ff ffd7 	bl	801165a <inHandlerMode>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d003      	beq.n	80116ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80116b2:	f001 fbb1 	bl	8012e18 <xTaskGetTickCountFromISR>
 80116b6:	4603      	mov	r3, r0
 80116b8:	e002      	b.n	80116c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80116ba:	f001 fb9d 	bl	8012df8 <xTaskGetTickCount>
 80116be:	4603      	mov	r3, r0
  }
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116c6:	b089      	sub	sp, #36	@ 0x24
 80116c8:	af04      	add	r7, sp, #16
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	695b      	ldr	r3, [r3, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d020      	beq.n	8011718 <osThreadCreate+0x54>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d01c      	beq.n	8011718 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685c      	ldr	r4, [r3, #4]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	691e      	ldr	r6, [r3, #16]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff ff9a 	bl	801162a <makeFreeRtosPriority>
 80116f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011700:	9202      	str	r2, [sp, #8]
 8011702:	9301      	str	r3, [sp, #4]
 8011704:	9100      	str	r1, [sp, #0]
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	4632      	mov	r2, r6
 801170a:	4629      	mov	r1, r5
 801170c:	4620      	mov	r0, r4
 801170e:	f001 f87d 	bl	801280c <xTaskCreateStatic>
 8011712:	4603      	mov	r3, r0
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	e01c      	b.n	8011752 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685c      	ldr	r4, [r3, #4]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011724:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801172c:	4618      	mov	r0, r3
 801172e:	f7ff ff7c 	bl	801162a <makeFreeRtosPriority>
 8011732:	4602      	mov	r2, r0
 8011734:	f107 030c 	add.w	r3, r7, #12
 8011738:	9301      	str	r3, [sp, #4]
 801173a:	9200      	str	r2, [sp, #0]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	4632      	mov	r2, r6
 8011740:	4629      	mov	r1, r5
 8011742:	4620      	mov	r0, r4
 8011744:	f001 f8c8 	bl	80128d8 <xTaskCreate>
 8011748:	4603      	mov	r3, r0
 801174a:	2b01      	cmp	r3, #1
 801174c:	d001      	beq.n	8011752 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801174e:	2300      	movs	r3, #0
 8011750:	e000      	b.n	8011754 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011752:	68fb      	ldr	r3, [r7, #12]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801175c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <osDelay+0x16>
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	e000      	b.n	8011774 <osDelay+0x18>
 8011772:	2301      	movs	r3, #1
 8011774:	4618      	mov	r0, r3
 8011776:	f001 f9f3 	bl	8012b60 <vTaskDelay>
  
  return osOK;
 801177a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801177c:	4618      	mov	r0, r3
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b085      	sub	sp, #20
 8011788:	af02      	add	r7, sp, #8
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d011      	beq.n	80117ba <osMessageCreate+0x36>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00d      	beq.n	80117ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6818      	ldr	r0, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6859      	ldr	r1, [r3, #4]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	2400      	movs	r4, #0
 80117b0:	9400      	str	r4, [sp, #0]
 80117b2:	f000 f9e3 	bl	8011b7c <xQueueGenericCreateStatic>
 80117b6:	4603      	mov	r3, r0
 80117b8:	e008      	b.n	80117cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6818      	ldr	r0, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	4619      	mov	r1, r3
 80117c6:	f000 fa60 	bl	8011c8a <xQueueGenericCreate>
 80117ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd90      	pop	{r4, r7, pc}

080117d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b086      	sub	sp, #24
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80117e0:	2300      	movs	r3, #0
 80117e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <osMessagePut+0x1e>
    ticks = 1;
 80117ee:	2301      	movs	r3, #1
 80117f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80117f2:	f7ff ff32 	bl	801165a <inHandlerMode>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d018      	beq.n	801182e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80117fc:	f107 0210 	add.w	r2, r7, #16
 8011800:	f107 0108 	add.w	r1, r7, #8
 8011804:	2300      	movs	r3, #0
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f000 fbac 	bl	8011f64 <xQueueGenericSendFromISR>
 801180c:	4603      	mov	r3, r0
 801180e:	2b01      	cmp	r3, #1
 8011810:	d001      	beq.n	8011816 <osMessagePut+0x42>
      return osErrorOS;
 8011812:	23ff      	movs	r3, #255	@ 0xff
 8011814:	e018      	b.n	8011848 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d014      	beq.n	8011846 <osMessagePut+0x72>
 801181c:	4b0c      	ldr	r3, [pc, #48]	@ (8011850 <osMessagePut+0x7c>)
 801181e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	e00b      	b.n	8011846 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801182e:	f107 0108 	add.w	r1, r7, #8
 8011832:	2300      	movs	r3, #0
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	68f8      	ldr	r0, [r7, #12]
 8011838:	f000 fa8a 	bl	8011d50 <xQueueGenericSend>
 801183c:	4603      	mov	r3, r0
 801183e:	2b01      	cmp	r3, #1
 8011840:	d001      	beq.n	8011846 <osMessagePut+0x72>
      return osErrorOS;
 8011842:	23ff      	movs	r3, #255	@ 0xff
 8011844:	e000      	b.n	8011848 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3718      	adds	r7, #24
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	e000ed04 	.word	0xe000ed04

08011854 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b08b      	sub	sp, #44	@ 0x2c
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011864:	2300      	movs	r3, #0
 8011866:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d10a      	bne.n	8011884 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801186e:	2380      	movs	r3, #128	@ 0x80
 8011870:	617b      	str	r3, [r7, #20]
    return event;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	461c      	mov	r4, r3
 8011876:	f107 0314 	add.w	r3, r7, #20
 801187a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801187e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011882:	e054      	b.n	801192e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011884:	2300      	movs	r3, #0
 8011886:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011888:	2300      	movs	r3, #0
 801188a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011892:	d103      	bne.n	801189c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011894:	f04f 33ff 	mov.w	r3, #4294967295
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
 801189a:	e009      	b.n	80118b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d006      	beq.n	80118b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80118a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <osMessageGet+0x5c>
      ticks = 1;
 80118ac:	2301      	movs	r3, #1
 80118ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80118b0:	f7ff fed3 	bl	801165a <inHandlerMode>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d01c      	beq.n	80118f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80118ba:	f107 0220 	add.w	r2, r7, #32
 80118be:	f107 0314 	add.w	r3, r7, #20
 80118c2:	3304      	adds	r3, #4
 80118c4:	4619      	mov	r1, r3
 80118c6:	68b8      	ldr	r0, [r7, #8]
 80118c8:	f000 fdf0 	bl	80124ac <xQueueReceiveFromISR>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d102      	bne.n	80118d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80118d2:	2310      	movs	r3, #16
 80118d4:	617b      	str	r3, [r7, #20]
 80118d6:	e001      	b.n	80118dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80118d8:	2300      	movs	r3, #0
 80118da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80118dc:	6a3b      	ldr	r3, [r7, #32]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d01d      	beq.n	801191e <osMessageGet+0xca>
 80118e2:	4b15      	ldr	r3, [pc, #84]	@ (8011938 <osMessageGet+0xe4>)
 80118e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	f3bf 8f4f 	dsb	sy
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	e014      	b.n	801191e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80118f4:	f107 0314 	add.w	r3, r7, #20
 80118f8:	3304      	adds	r3, #4
 80118fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118fc:	4619      	mov	r1, r3
 80118fe:	68b8      	ldr	r0, [r7, #8]
 8011900:	f000 fbd4 	bl	80120ac <xQueueReceive>
 8011904:	4603      	mov	r3, r0
 8011906:	2b01      	cmp	r3, #1
 8011908:	d102      	bne.n	8011910 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801190a:	2310      	movs	r3, #16
 801190c:	617b      	str	r3, [r7, #20]
 801190e:	e006      	b.n	801191e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011912:	2b00      	cmp	r3, #0
 8011914:	d101      	bne.n	801191a <osMessageGet+0xc6>
 8011916:	2300      	movs	r3, #0
 8011918:	e000      	b.n	801191c <osMessageGet+0xc8>
 801191a:	2340      	movs	r3, #64	@ 0x40
 801191c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	461c      	mov	r4, r3
 8011922:	f107 0314 	add.w	r3, r7, #20
 8011926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801192a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801192e:	68f8      	ldr	r0, [r7, #12]
 8011930:	372c      	adds	r7, #44	@ 0x2c
 8011932:	46bd      	mov	sp, r7
 8011934:	bd90      	pop	{r4, r7, pc}
 8011936:	bf00      	nop
 8011938:	e000ed04 	.word	0xe000ed04

0801193c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f103 0208 	add.w	r2, r3, #8
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f04f 32ff 	mov.w	r2, #4294967295
 8011954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f103 0208 	add.w	r2, r3, #8
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f103 0208 	add.w	r2, r3, #8
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011970:	bf00      	nop
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801198a:	bf00      	nop
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011996:	b480      	push	{r7}
 8011998:	b085      	sub	sp, #20
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	68fa      	ldr	r2, [r7, #12]
 80119aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	683a      	ldr	r2, [r7, #0]
 80119c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	601a      	str	r2, [r3, #0]
}
 80119d2:	bf00      	nop
 80119d4:	3714      	adds	r7, #20
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119de:	b480      	push	{r7}
 80119e0:	b085      	sub	sp, #20
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f4:	d103      	bne.n	80119fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	60fb      	str	r3, [r7, #12]
 80119fc:	e00c      	b.n	8011a18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3308      	adds	r3, #8
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e002      	b.n	8011a0c <vListInsert+0x2e>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d2f6      	bcs.n	8011a06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	685a      	ldr	r2, [r3, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	683a      	ldr	r2, [r7, #0]
 8011a26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	683a      	ldr	r2, [r7, #0]
 8011a32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	601a      	str	r2, [r3, #0]
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a50:	b480      	push	{r7}
 8011a52:	b085      	sub	sp, #20
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	691b      	ldr	r3, [r3, #16]
 8011a5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	6892      	ldr	r2, [r2, #8]
 8011a66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	6852      	ldr	r2, [r2, #4]
 8011a70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d103      	bne.n	8011a84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	689a      	ldr	r2, [r3, #8]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	1e5a      	subs	r2, r3, #1
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10d      	bne.n	8011ad4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011abc:	b672      	cpsid	i
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	b662      	cpsie	i
 8011acc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011ace:	bf00      	nop
 8011ad0:	bf00      	nop
 8011ad2:	e7fd      	b.n	8011ad0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011ad4:	f002 f83a 	bl	8013b4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ae0:	68f9      	ldr	r1, [r7, #12]
 8011ae2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011ae4:	fb01 f303 	mul.w	r3, r1, r3
 8011ae8:	441a      	add	r2, r3
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2200      	movs	r2, #0
 8011af2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b04:	3b01      	subs	r3, #1
 8011b06:	68f9      	ldr	r1, [r7, #12]
 8011b08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011b0a:	fb01 f303 	mul.w	r3, r1, r3
 8011b0e:	441a      	add	r2, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	22ff      	movs	r2, #255	@ 0xff
 8011b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	22ff      	movs	r2, #255	@ 0xff
 8011b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d114      	bne.n	8011b54 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	691b      	ldr	r3, [r3, #16]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d01a      	beq.n	8011b68 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	3310      	adds	r3, #16
 8011b36:	4618      	mov	r0, r3
 8011b38:	f001 fae8 	bl	801310c <xTaskRemoveFromEventList>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d012      	beq.n	8011b68 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b42:	4b0d      	ldr	r3, [pc, #52]	@ (8011b78 <xQueueGenericReset+0xd4>)
 8011b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	e009      	b.n	8011b68 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	3310      	adds	r3, #16
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7ff feef 	bl	801193c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3324      	adds	r3, #36	@ 0x24
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7ff feea 	bl	801193c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b68:	f002 f826 	bl	8013bb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b6c:	2301      	movs	r3, #1
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	e000ed04 	.word	0xe000ed04

08011b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b08e      	sub	sp, #56	@ 0x38
 8011b80:	af02      	add	r7, sp, #8
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
 8011b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10d      	bne.n	8011bac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b94:	b672      	cpsid	i
 8011b96:	f383 8811 	msr	BASEPRI, r3
 8011b9a:	f3bf 8f6f 	isb	sy
 8011b9e:	f3bf 8f4f 	dsb	sy
 8011ba2:	b662      	cpsie	i
 8011ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011ba6:	bf00      	nop
 8011ba8:	bf00      	nop
 8011baa:	e7fd      	b.n	8011ba8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d10d      	bne.n	8011bce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8011bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bb6:	b672      	cpsid	i
 8011bb8:	f383 8811 	msr	BASEPRI, r3
 8011bbc:	f3bf 8f6f 	isb	sy
 8011bc0:	f3bf 8f4f 	dsb	sy
 8011bc4:	b662      	cpsie	i
 8011bc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011bc8:	bf00      	nop
 8011bca:	bf00      	nop
 8011bcc:	e7fd      	b.n	8011bca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <xQueueGenericCreateStatic+0x5e>
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d001      	beq.n	8011bde <xQueueGenericCreateStatic+0x62>
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e000      	b.n	8011be0 <xQueueGenericCreateStatic+0x64>
 8011bde:	2300      	movs	r3, #0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10d      	bne.n	8011c00 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8011be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be8:	b672      	cpsid	i
 8011bea:	f383 8811 	msr	BASEPRI, r3
 8011bee:	f3bf 8f6f 	isb	sy
 8011bf2:	f3bf 8f4f 	dsb	sy
 8011bf6:	b662      	cpsie	i
 8011bf8:	623b      	str	r3, [r7, #32]
}
 8011bfa:	bf00      	nop
 8011bfc:	bf00      	nop
 8011bfe:	e7fd      	b.n	8011bfc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d102      	bne.n	8011c0c <xQueueGenericCreateStatic+0x90>
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <xQueueGenericCreateStatic+0x94>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e000      	b.n	8011c12 <xQueueGenericCreateStatic+0x96>
 8011c10:	2300      	movs	r3, #0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10d      	bne.n	8011c32 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8011c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c1a:	b672      	cpsid	i
 8011c1c:	f383 8811 	msr	BASEPRI, r3
 8011c20:	f3bf 8f6f 	isb	sy
 8011c24:	f3bf 8f4f 	dsb	sy
 8011c28:	b662      	cpsie	i
 8011c2a:	61fb      	str	r3, [r7, #28]
}
 8011c2c:	bf00      	nop
 8011c2e:	bf00      	nop
 8011c30:	e7fd      	b.n	8011c2e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011c32:	2348      	movs	r3, #72	@ 0x48
 8011c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	2b48      	cmp	r3, #72	@ 0x48
 8011c3a:	d00d      	beq.n	8011c58 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c40:	b672      	cpsid	i
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	b662      	cpsie	i
 8011c50:	61bb      	str	r3, [r7, #24]
}
 8011c52:	bf00      	nop
 8011c54:	bf00      	nop
 8011c56:	e7fd      	b.n	8011c54 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011c58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00d      	beq.n	8011c80 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c66:	2201      	movs	r2, #1
 8011c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	4613      	mov	r3, r2
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	68b9      	ldr	r1, [r7, #8]
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	f000 f848 	bl	8011d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3730      	adds	r7, #48	@ 0x30
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}

08011c8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b08a      	sub	sp, #40	@ 0x28
 8011c8e:	af02      	add	r7, sp, #8
 8011c90:	60f8      	str	r0, [r7, #12]
 8011c92:	60b9      	str	r1, [r7, #8]
 8011c94:	4613      	mov	r3, r2
 8011c96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d10d      	bne.n	8011cba <xQueueGenericCreate+0x30>
	__asm volatile
 8011c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca2:	b672      	cpsid	i
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	b662      	cpsie	i
 8011cb2:	613b      	str	r3, [r7, #16]
}
 8011cb4:	bf00      	nop
 8011cb6:	bf00      	nop
 8011cb8:	e7fd      	b.n	8011cb6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d102      	bne.n	8011cc6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	61fb      	str	r3, [r7, #28]
 8011cc4:	e004      	b.n	8011cd0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	fb02 f303 	mul.w	r3, r2, r3
 8011cce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	3348      	adds	r3, #72	@ 0x48
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f002 f867 	bl	8013da8 <pvPortMalloc>
 8011cda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d011      	beq.n	8011d06 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	3348      	adds	r3, #72	@ 0x48
 8011cea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cf4:	79fa      	ldrb	r2, [r7, #7]
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	68b9      	ldr	r1, [r7, #8]
 8011d00:	68f8      	ldr	r0, [r7, #12]
 8011d02:	f000 f805 	bl	8011d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011d06:	69bb      	ldr	r3, [r7, #24]
	}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3720      	adds	r7, #32
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d103      	bne.n	8011d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	69ba      	ldr	r2, [r7, #24]
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	e002      	b.n	8011d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	68ba      	ldr	r2, [r7, #8]
 8011d3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d3e:	2101      	movs	r1, #1
 8011d40:	69b8      	ldr	r0, [r7, #24]
 8011d42:	f7ff feaf 	bl	8011aa4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d46:	bf00      	nop
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
	...

08011d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b08e      	sub	sp, #56	@ 0x38
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
 8011d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d10d      	bne.n	8011d88 <xQueueGenericSend+0x38>
	__asm volatile
 8011d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d70:	b672      	cpsid	i
 8011d72:	f383 8811 	msr	BASEPRI, r3
 8011d76:	f3bf 8f6f 	isb	sy
 8011d7a:	f3bf 8f4f 	dsb	sy
 8011d7e:	b662      	cpsie	i
 8011d80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011d82:	bf00      	nop
 8011d84:	bf00      	nop
 8011d86:	e7fd      	b.n	8011d84 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d103      	bne.n	8011d96 <xQueueGenericSend+0x46>
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d101      	bne.n	8011d9a <xQueueGenericSend+0x4a>
 8011d96:	2301      	movs	r3, #1
 8011d98:	e000      	b.n	8011d9c <xQueueGenericSend+0x4c>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10d      	bne.n	8011dbc <xQueueGenericSend+0x6c>
	__asm volatile
 8011da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011da4:	b672      	cpsid	i
 8011da6:	f383 8811 	msr	BASEPRI, r3
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	f3bf 8f4f 	dsb	sy
 8011db2:	b662      	cpsie	i
 8011db4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011db6:	bf00      	nop
 8011db8:	bf00      	nop
 8011dba:	e7fd      	b.n	8011db8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	d103      	bne.n	8011dca <xQueueGenericSend+0x7a>
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d101      	bne.n	8011dce <xQueueGenericSend+0x7e>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e000      	b.n	8011dd0 <xQueueGenericSend+0x80>
 8011dce:	2300      	movs	r3, #0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d10d      	bne.n	8011df0 <xQueueGenericSend+0xa0>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd8:	b672      	cpsid	i
 8011dda:	f383 8811 	msr	BASEPRI, r3
 8011dde:	f3bf 8f6f 	isb	sy
 8011de2:	f3bf 8f4f 	dsb	sy
 8011de6:	b662      	cpsie	i
 8011de8:	623b      	str	r3, [r7, #32]
}
 8011dea:	bf00      	nop
 8011dec:	bf00      	nop
 8011dee:	e7fd      	b.n	8011dec <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011df0:	f001 fb56 	bl	80134a0 <xTaskGetSchedulerState>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d102      	bne.n	8011e00 <xQueueGenericSend+0xb0>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <xQueueGenericSend+0xb4>
 8011e00:	2301      	movs	r3, #1
 8011e02:	e000      	b.n	8011e06 <xQueueGenericSend+0xb6>
 8011e04:	2300      	movs	r3, #0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d10d      	bne.n	8011e26 <xQueueGenericSend+0xd6>
	__asm volatile
 8011e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e0e:	b672      	cpsid	i
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	b662      	cpsie	i
 8011e1e:	61fb      	str	r3, [r7, #28]
}
 8011e20:	bf00      	nop
 8011e22:	bf00      	nop
 8011e24:	e7fd      	b.n	8011e22 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e26:	f001 fe91 	bl	8013b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d302      	bcc.n	8011e3c <xQueueGenericSend+0xec>
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d129      	bne.n	8011e90 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e3c:	683a      	ldr	r2, [r7, #0]
 8011e3e:	68b9      	ldr	r1, [r7, #8]
 8011e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011e42:	f000 fbd3 	bl	80125ec <prvCopyDataToQueue>
 8011e46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d010      	beq.n	8011e72 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e52:	3324      	adds	r3, #36	@ 0x24
 8011e54:	4618      	mov	r0, r3
 8011e56:	f001 f959 	bl	801310c <xTaskRemoveFromEventList>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d013      	beq.n	8011e88 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e60:	4b3f      	ldr	r3, [pc, #252]	@ (8011f60 <xQueueGenericSend+0x210>)
 8011e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e66:	601a      	str	r2, [r3, #0]
 8011e68:	f3bf 8f4f 	dsb	sy
 8011e6c:	f3bf 8f6f 	isb	sy
 8011e70:	e00a      	b.n	8011e88 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d007      	beq.n	8011e88 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e78:	4b39      	ldr	r3, [pc, #228]	@ (8011f60 <xQueueGenericSend+0x210>)
 8011e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e7e:	601a      	str	r2, [r3, #0]
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e88:	f001 fe96 	bl	8013bb8 <vPortExitCritical>
				return pdPASS;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	e063      	b.n	8011f58 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d103      	bne.n	8011e9e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e96:	f001 fe8f 	bl	8013bb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	e05c      	b.n	8011f58 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d106      	bne.n	8011eb2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ea4:	f107 0314 	add.w	r3, r7, #20
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f001 f995 	bl	80131d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011eb2:	f001 fe81 	bl	8013bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011eb6:	f000 fef1 	bl	8012c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011eba:	f001 fe47 	bl	8013b4c <vPortEnterCritical>
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011ec4:	b25b      	sxtb	r3, r3
 8011ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eca:	d103      	bne.n	8011ed4 <xQueueGenericSend+0x184>
 8011ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee0:	d103      	bne.n	8011eea <xQueueGenericSend+0x19a>
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011eea:	f001 fe65 	bl	8013bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011eee:	1d3a      	adds	r2, r7, #4
 8011ef0:	f107 0314 	add.w	r3, r7, #20
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f001 f984 	bl	8013204 <xTaskCheckForTimeOut>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d124      	bne.n	8011f4c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f04:	f000 fc6a 	bl	80127dc <prvIsQueueFull>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d018      	beq.n	8011f40 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f10:	3310      	adds	r3, #16
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 f8d0 	bl	80130bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f1e:	f000 fbf5 	bl	801270c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011f22:	f000 fec9 	bl	8012cb8 <xTaskResumeAll>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f47f af7c 	bne.w	8011e26 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8011f60 <xQueueGenericSend+0x210>)
 8011f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f34:	601a      	str	r2, [r3, #0]
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	f3bf 8f6f 	isb	sy
 8011f3e:	e772      	b.n	8011e26 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f42:	f000 fbe3 	bl	801270c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f46:	f000 feb7 	bl	8012cb8 <xTaskResumeAll>
 8011f4a:	e76c      	b.n	8011e26 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f4e:	f000 fbdd 	bl	801270c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f52:	f000 feb1 	bl	8012cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011f56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3738      	adds	r7, #56	@ 0x38
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	e000ed04 	.word	0xe000ed04

08011f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b08e      	sub	sp, #56	@ 0x38
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10d      	bne.n	8011f98 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f80:	b672      	cpsid	i
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	b662      	cpsie	i
 8011f90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011f92:	bf00      	nop
 8011f94:	bf00      	nop
 8011f96:	e7fd      	b.n	8011f94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d103      	bne.n	8011fa6 <xQueueGenericSendFromISR+0x42>
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d101      	bne.n	8011faa <xQueueGenericSendFromISR+0x46>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e000      	b.n	8011fac <xQueueGenericSendFromISR+0x48>
 8011faa:	2300      	movs	r3, #0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10d      	bne.n	8011fcc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb4:	b672      	cpsid	i
 8011fb6:	f383 8811 	msr	BASEPRI, r3
 8011fba:	f3bf 8f6f 	isb	sy
 8011fbe:	f3bf 8f4f 	dsb	sy
 8011fc2:	b662      	cpsie	i
 8011fc4:	623b      	str	r3, [r7, #32]
}
 8011fc6:	bf00      	nop
 8011fc8:	bf00      	nop
 8011fca:	e7fd      	b.n	8011fc8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	2b02      	cmp	r3, #2
 8011fd0:	d103      	bne.n	8011fda <xQueueGenericSendFromISR+0x76>
 8011fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d101      	bne.n	8011fde <xQueueGenericSendFromISR+0x7a>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e000      	b.n	8011fe0 <xQueueGenericSendFromISR+0x7c>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10d      	bne.n	8012000 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fe8:	b672      	cpsid	i
 8011fea:	f383 8811 	msr	BASEPRI, r3
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f3bf 8f4f 	dsb	sy
 8011ff6:	b662      	cpsie	i
 8011ff8:	61fb      	str	r3, [r7, #28]
}
 8011ffa:	bf00      	nop
 8011ffc:	bf00      	nop
 8011ffe:	e7fd      	b.n	8011ffc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012000:	f001 fe8c 	bl	8013d1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012004:	f3ef 8211 	mrs	r2, BASEPRI
 8012008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801200c:	b672      	cpsid	i
 801200e:	f383 8811 	msr	BASEPRI, r3
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	f3bf 8f4f 	dsb	sy
 801201a:	b662      	cpsie	i
 801201c:	61ba      	str	r2, [r7, #24]
 801201e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012020:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012022:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801202c:	429a      	cmp	r2, r3
 801202e:	d302      	bcc.n	8012036 <xQueueGenericSendFromISR+0xd2>
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2b02      	cmp	r3, #2
 8012034:	d12c      	bne.n	8012090 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801203c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012040:	683a      	ldr	r2, [r7, #0]
 8012042:	68b9      	ldr	r1, [r7, #8]
 8012044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012046:	f000 fad1 	bl	80125ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801204a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012052:	d112      	bne.n	801207a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012058:	2b00      	cmp	r3, #0
 801205a:	d016      	beq.n	801208a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801205e:	3324      	adds	r3, #36	@ 0x24
 8012060:	4618      	mov	r0, r3
 8012062:	f001 f853 	bl	801310c <xTaskRemoveFromEventList>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00e      	beq.n	801208a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00b      	beq.n	801208a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	601a      	str	r2, [r3, #0]
 8012078:	e007      	b.n	801208a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801207a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801207e:	3301      	adds	r3, #1
 8012080:	b2db      	uxtb	r3, r3
 8012082:	b25a      	sxtb	r2, r3
 8012084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801208a:	2301      	movs	r3, #1
 801208c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801208e:	e001      	b.n	8012094 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012090:	2300      	movs	r3, #0
 8012092:	637b      	str	r3, [r7, #52]	@ 0x34
 8012094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012096:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801209e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3738      	adds	r7, #56	@ 0x38
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
	...

080120ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08c      	sub	sp, #48	@ 0x30
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80120b8:	2300      	movs	r3, #0
 80120ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80120c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10d      	bne.n	80120e2 <xQueueReceive+0x36>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ca:	b672      	cpsid	i
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	b662      	cpsie	i
 80120da:	623b      	str	r3, [r7, #32]
}
 80120dc:	bf00      	nop
 80120de:	bf00      	nop
 80120e0:	e7fd      	b.n	80120de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d103      	bne.n	80120f0 <xQueueReceive+0x44>
 80120e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d101      	bne.n	80120f4 <xQueueReceive+0x48>
 80120f0:	2301      	movs	r3, #1
 80120f2:	e000      	b.n	80120f6 <xQueueReceive+0x4a>
 80120f4:	2300      	movs	r3, #0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d10d      	bne.n	8012116 <xQueueReceive+0x6a>
	__asm volatile
 80120fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120fe:	b672      	cpsid	i
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	b662      	cpsie	i
 801210e:	61fb      	str	r3, [r7, #28]
}
 8012110:	bf00      	nop
 8012112:	bf00      	nop
 8012114:	e7fd      	b.n	8012112 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012116:	f001 f9c3 	bl	80134a0 <xTaskGetSchedulerState>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d102      	bne.n	8012126 <xQueueReceive+0x7a>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <xQueueReceive+0x7e>
 8012126:	2301      	movs	r3, #1
 8012128:	e000      	b.n	801212c <xQueueReceive+0x80>
 801212a:	2300      	movs	r3, #0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10d      	bne.n	801214c <xQueueReceive+0xa0>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012134:	b672      	cpsid	i
 8012136:	f383 8811 	msr	BASEPRI, r3
 801213a:	f3bf 8f6f 	isb	sy
 801213e:	f3bf 8f4f 	dsb	sy
 8012142:	b662      	cpsie	i
 8012144:	61bb      	str	r3, [r7, #24]
}
 8012146:	bf00      	nop
 8012148:	bf00      	nop
 801214a:	e7fd      	b.n	8012148 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801214c:	f001 fcfe 	bl	8013b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012154:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012158:	2b00      	cmp	r3, #0
 801215a:	d01f      	beq.n	801219c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801215c:	68b9      	ldr	r1, [r7, #8]
 801215e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012160:	f000 faae 	bl	80126c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012166:	1e5a      	subs	r2, r3, #1
 8012168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801216a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801216e:	691b      	ldr	r3, [r3, #16]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d00f      	beq.n	8012194 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012176:	3310      	adds	r3, #16
 8012178:	4618      	mov	r0, r3
 801217a:	f000 ffc7 	bl	801310c <xTaskRemoveFromEventList>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d007      	beq.n	8012194 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012184:	4b3c      	ldr	r3, [pc, #240]	@ (8012278 <xQueueReceive+0x1cc>)
 8012186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012194:	f001 fd10 	bl	8013bb8 <vPortExitCritical>
				return pdPASS;
 8012198:	2301      	movs	r3, #1
 801219a:	e069      	b.n	8012270 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d103      	bne.n	80121aa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121a2:	f001 fd09 	bl	8013bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121a6:	2300      	movs	r3, #0
 80121a8:	e062      	b.n	8012270 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d106      	bne.n	80121be <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121b0:	f107 0310 	add.w	r3, r7, #16
 80121b4:	4618      	mov	r0, r3
 80121b6:	f001 f80f 	bl	80131d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121ba:	2301      	movs	r3, #1
 80121bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121be:	f001 fcfb 	bl	8013bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121c2:	f000 fd6b 	bl	8012c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121c6:	f001 fcc1 	bl	8013b4c <vPortEnterCritical>
 80121ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80121d0:	b25b      	sxtb	r3, r3
 80121d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d6:	d103      	bne.n	80121e0 <xQueueReceive+0x134>
 80121d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121da:	2200      	movs	r2, #0
 80121dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80121e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80121e6:	b25b      	sxtb	r3, r3
 80121e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ec:	d103      	bne.n	80121f6 <xQueueReceive+0x14a>
 80121ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121f0:	2200      	movs	r2, #0
 80121f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80121f6:	f001 fcdf 	bl	8013bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80121fa:	1d3a      	adds	r2, r7, #4
 80121fc:	f107 0310 	add.w	r3, r7, #16
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f000 fffe 	bl	8013204 <xTaskCheckForTimeOut>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d123      	bne.n	8012256 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801220e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012210:	f000 face 	bl	80127b0 <prvIsQueueEmpty>
 8012214:	4603      	mov	r3, r0
 8012216:	2b00      	cmp	r3, #0
 8012218:	d017      	beq.n	801224a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221c:	3324      	adds	r3, #36	@ 0x24
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f000 ff4a 	bl	80130bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801222a:	f000 fa6f 	bl	801270c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801222e:	f000 fd43 	bl	8012cb8 <xTaskResumeAll>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d189      	bne.n	801214c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8012238:	4b0f      	ldr	r3, [pc, #60]	@ (8012278 <xQueueReceive+0x1cc>)
 801223a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801223e:	601a      	str	r2, [r3, #0]
 8012240:	f3bf 8f4f 	dsb	sy
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	e780      	b.n	801214c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801224a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801224c:	f000 fa5e 	bl	801270c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012250:	f000 fd32 	bl	8012cb8 <xTaskResumeAll>
 8012254:	e77a      	b.n	801214c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012258:	f000 fa58 	bl	801270c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801225c:	f000 fd2c 	bl	8012cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012262:	f000 faa5 	bl	80127b0 <prvIsQueueEmpty>
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	f43f af6f 	beq.w	801214c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801226e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012270:	4618      	mov	r0, r3
 8012272:	3730      	adds	r7, #48	@ 0x30
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	e000ed04 	.word	0xe000ed04

0801227c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08e      	sub	sp, #56	@ 0x38
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012286:	2300      	movs	r3, #0
 8012288:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801228e:	2300      	movs	r3, #0
 8012290:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10d      	bne.n	80122b4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8012298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801229c:	b672      	cpsid	i
 801229e:	f383 8811 	msr	BASEPRI, r3
 80122a2:	f3bf 8f6f 	isb	sy
 80122a6:	f3bf 8f4f 	dsb	sy
 80122aa:	b662      	cpsie	i
 80122ac:	623b      	str	r3, [r7, #32]
}
 80122ae:	bf00      	nop
 80122b0:	bf00      	nop
 80122b2:	e7fd      	b.n	80122b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80122b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d00d      	beq.n	80122d8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c0:	b672      	cpsid	i
 80122c2:	f383 8811 	msr	BASEPRI, r3
 80122c6:	f3bf 8f6f 	isb	sy
 80122ca:	f3bf 8f4f 	dsb	sy
 80122ce:	b662      	cpsie	i
 80122d0:	61fb      	str	r3, [r7, #28]
}
 80122d2:	bf00      	nop
 80122d4:	bf00      	nop
 80122d6:	e7fd      	b.n	80122d4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122d8:	f001 f8e2 	bl	80134a0 <xTaskGetSchedulerState>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d102      	bne.n	80122e8 <xQueueSemaphoreTake+0x6c>
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d101      	bne.n	80122ec <xQueueSemaphoreTake+0x70>
 80122e8:	2301      	movs	r3, #1
 80122ea:	e000      	b.n	80122ee <xQueueSemaphoreTake+0x72>
 80122ec:	2300      	movs	r3, #0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10d      	bne.n	801230e <xQueueSemaphoreTake+0x92>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f6:	b672      	cpsid	i
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	b662      	cpsie	i
 8012306:	61bb      	str	r3, [r7, #24]
}
 8012308:	bf00      	nop
 801230a:	bf00      	nop
 801230c:	e7fd      	b.n	801230a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801230e:	f001 fc1d 	bl	8013b4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012316:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801231a:	2b00      	cmp	r3, #0
 801231c:	d024      	beq.n	8012368 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012320:	1e5a      	subs	r2, r3, #1
 8012322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012324:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d104      	bne.n	8012338 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801232e:	f001 fa81 	bl	8013834 <pvTaskIncrementMutexHeldCount>
 8012332:	4602      	mov	r2, r0
 8012334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012336:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00f      	beq.n	8012360 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012342:	3310      	adds	r3, #16
 8012344:	4618      	mov	r0, r3
 8012346:	f000 fee1 	bl	801310c <xTaskRemoveFromEventList>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	d007      	beq.n	8012360 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012350:	4b55      	ldr	r3, [pc, #340]	@ (80124a8 <xQueueSemaphoreTake+0x22c>)
 8012352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012356:	601a      	str	r2, [r3, #0]
 8012358:	f3bf 8f4f 	dsb	sy
 801235c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012360:	f001 fc2a 	bl	8013bb8 <vPortExitCritical>
				return pdPASS;
 8012364:	2301      	movs	r3, #1
 8012366:	e09a      	b.n	801249e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d114      	bne.n	8012398 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00d      	beq.n	8012390 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012378:	b672      	cpsid	i
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	b662      	cpsie	i
 8012388:	617b      	str	r3, [r7, #20]
}
 801238a:	bf00      	nop
 801238c:	bf00      	nop
 801238e:	e7fd      	b.n	801238c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012390:	f001 fc12 	bl	8013bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012394:	2300      	movs	r3, #0
 8012396:	e082      	b.n	801249e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801239a:	2b00      	cmp	r3, #0
 801239c:	d106      	bne.n	80123ac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801239e:	f107 030c 	add.w	r3, r7, #12
 80123a2:	4618      	mov	r0, r3
 80123a4:	f000 ff18 	bl	80131d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123a8:	2301      	movs	r3, #1
 80123aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123ac:	f001 fc04 	bl	8013bb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123b0:	f000 fc74 	bl	8012c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123b4:	f001 fbca 	bl	8013b4c <vPortEnterCritical>
 80123b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80123be:	b25b      	sxtb	r3, r3
 80123c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123c4:	d103      	bne.n	80123ce <xQueueSemaphoreTake+0x152>
 80123c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c8:	2200      	movs	r2, #0
 80123ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80123ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80123d4:	b25b      	sxtb	r3, r3
 80123d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123da:	d103      	bne.n	80123e4 <xQueueSemaphoreTake+0x168>
 80123dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123de:	2200      	movs	r2, #0
 80123e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80123e4:	f001 fbe8 	bl	8013bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123e8:	463a      	mov	r2, r7
 80123ea:	f107 030c 	add.w	r3, r7, #12
 80123ee:	4611      	mov	r1, r2
 80123f0:	4618      	mov	r0, r3
 80123f2:	f000 ff07 	bl	8013204 <xTaskCheckForTimeOut>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d132      	bne.n	8012462 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80123fe:	f000 f9d7 	bl	80127b0 <prvIsQueueEmpty>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d026      	beq.n	8012456 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d109      	bne.n	8012424 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8012410:	f001 fb9c 	bl	8013b4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	4618      	mov	r0, r3
 801241a:	f001 f85f 	bl	80134dc <xTaskPriorityInherit>
 801241e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012420:	f001 fbca 	bl	8013bb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012426:	3324      	adds	r3, #36	@ 0x24
 8012428:	683a      	ldr	r2, [r7, #0]
 801242a:	4611      	mov	r1, r2
 801242c:	4618      	mov	r0, r3
 801242e:	f000 fe45 	bl	80130bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012432:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012434:	f000 f96a 	bl	801270c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012438:	f000 fc3e 	bl	8012cb8 <xTaskResumeAll>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	f47f af65 	bne.w	801230e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8012444:	4b18      	ldr	r3, [pc, #96]	@ (80124a8 <xQueueSemaphoreTake+0x22c>)
 8012446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801244a:	601a      	str	r2, [r3, #0]
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	f3bf 8f6f 	isb	sy
 8012454:	e75b      	b.n	801230e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012458:	f000 f958 	bl	801270c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801245c:	f000 fc2c 	bl	8012cb8 <xTaskResumeAll>
 8012460:	e755      	b.n	801230e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012464:	f000 f952 	bl	801270c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012468:	f000 fc26 	bl	8012cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801246c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801246e:	f000 f99f 	bl	80127b0 <prvIsQueueEmpty>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	f43f af4a 	beq.w	801230e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00d      	beq.n	801249c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8012480:	f001 fb64 	bl	8013b4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012484:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012486:	f000 f899 	bl	80125bc <prvGetDisinheritPriorityAfterTimeout>
 801248a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012492:	4618      	mov	r0, r3
 8012494:	f001 f92e 	bl	80136f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012498:	f001 fb8e 	bl	8013bb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801249c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3738      	adds	r7, #56	@ 0x38
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	e000ed04 	.word	0xe000ed04

080124ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b08e      	sub	sp, #56	@ 0x38
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80124bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10d      	bne.n	80124de <xQueueReceiveFromISR+0x32>
	__asm volatile
 80124c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c6:	b672      	cpsid	i
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	b662      	cpsie	i
 80124d6:	623b      	str	r3, [r7, #32]
}
 80124d8:	bf00      	nop
 80124da:	bf00      	nop
 80124dc:	e7fd      	b.n	80124da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d103      	bne.n	80124ec <xQueueReceiveFromISR+0x40>
 80124e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <xQueueReceiveFromISR+0x44>
 80124ec:	2301      	movs	r3, #1
 80124ee:	e000      	b.n	80124f2 <xQueueReceiveFromISR+0x46>
 80124f0:	2300      	movs	r3, #0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10d      	bne.n	8012512 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80124f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124fa:	b672      	cpsid	i
 80124fc:	f383 8811 	msr	BASEPRI, r3
 8012500:	f3bf 8f6f 	isb	sy
 8012504:	f3bf 8f4f 	dsb	sy
 8012508:	b662      	cpsie	i
 801250a:	61fb      	str	r3, [r7, #28]
}
 801250c:	bf00      	nop
 801250e:	bf00      	nop
 8012510:	e7fd      	b.n	801250e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012512:	f001 fc03 	bl	8013d1c <vPortValidateInterruptPriority>
	__asm volatile
 8012516:	f3ef 8211 	mrs	r2, BASEPRI
 801251a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251e:	b672      	cpsid	i
 8012520:	f383 8811 	msr	BASEPRI, r3
 8012524:	f3bf 8f6f 	isb	sy
 8012528:	f3bf 8f4f 	dsb	sy
 801252c:	b662      	cpsie	i
 801252e:	61ba      	str	r2, [r7, #24]
 8012530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012534:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801253a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801253e:	2b00      	cmp	r3, #0
 8012540:	d02f      	beq.n	80125a2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801254c:	68b9      	ldr	r1, [r7, #8]
 801254e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012550:	f000 f8b6 	bl	80126c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012556:	1e5a      	subs	r2, r3, #1
 8012558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801255a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801255c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012564:	d112      	bne.n	801258c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012568:	691b      	ldr	r3, [r3, #16]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d016      	beq.n	801259c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012570:	3310      	adds	r3, #16
 8012572:	4618      	mov	r0, r3
 8012574:	f000 fdca 	bl	801310c <xTaskRemoveFromEventList>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00e      	beq.n	801259c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00b      	beq.n	801259c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2201      	movs	r2, #1
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	e007      	b.n	801259c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801258c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012590:	3301      	adds	r3, #1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	b25a      	sxtb	r2, r3
 8012596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801259c:	2301      	movs	r3, #1
 801259e:	637b      	str	r3, [r7, #52]	@ 0x34
 80125a0:	e001      	b.n	80125a6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80125a2:	2300      	movs	r3, #0
 80125a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80125a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	f383 8811 	msr	BASEPRI, r3
}
 80125b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3738      	adds	r7, #56	@ 0x38
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d006      	beq.n	80125da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f1c3 0307 	rsb	r3, r3, #7
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	e001      	b.n	80125de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80125da:	2300      	movs	r3, #0
 80125dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80125de:	68fb      	ldr	r3, [r7, #12]
	}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3714      	adds	r7, #20
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80125f8:	2300      	movs	r3, #0
 80125fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012606:	2b00      	cmp	r3, #0
 8012608:	d10d      	bne.n	8012626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d14d      	bne.n	80126ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	4618      	mov	r0, r3
 8012618:	f000 ffe0 	bl	80135dc <xTaskPriorityDisinherit>
 801261c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	2200      	movs	r2, #0
 8012622:	609a      	str	r2, [r3, #8]
 8012624:	e043      	b.n	80126ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d119      	bne.n	8012660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6858      	ldr	r0, [r3, #4]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012634:	461a      	mov	r2, r3
 8012636:	68b9      	ldr	r1, [r7, #8]
 8012638:	f002 fbdd 	bl	8014df6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012644:	441a      	add	r2, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	429a      	cmp	r2, r3
 8012654:	d32b      	bcc.n	80126ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	605a      	str	r2, [r3, #4]
 801265e:	e026      	b.n	80126ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	68d8      	ldr	r0, [r3, #12]
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012668:	461a      	mov	r2, r3
 801266a:	68b9      	ldr	r1, [r7, #8]
 801266c:	f002 fbc3 	bl	8014df6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	68da      	ldr	r2, [r3, #12]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012678:	425b      	negs	r3, r3
 801267a:	441a      	add	r2, r3
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	68da      	ldr	r2, [r3, #12]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	429a      	cmp	r2, r3
 801268a:	d207      	bcs.n	801269c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	689a      	ldr	r2, [r3, #8]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012694:	425b      	negs	r3, r3
 8012696:	441a      	add	r2, r3
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b02      	cmp	r3, #2
 80126a0:	d105      	bne.n	80126ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	3b01      	subs	r3, #1
 80126ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	1c5a      	adds	r2, r3, #1
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80126b6:	697b      	ldr	r3, [r7, #20]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d018      	beq.n	8012704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	68da      	ldr	r2, [r3, #12]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126da:	441a      	add	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	68da      	ldr	r2, [r3, #12]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d303      	bcc.n	80126f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	68d9      	ldr	r1, [r3, #12]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126fc:	461a      	mov	r2, r3
 80126fe:	6838      	ldr	r0, [r7, #0]
 8012700:	f002 fb79 	bl	8014df6 <memcpy>
	}
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012714:	f001 fa1a 	bl	8013b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801271e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012720:	e011      	b.n	8012746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	d012      	beq.n	8012750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	3324      	adds	r3, #36	@ 0x24
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fcec 	bl	801310c <xTaskRemoveFromEventList>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801273a:	f000 fdcb 	bl	80132d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801273e:	7bfb      	ldrb	r3, [r7, #15]
 8012740:	3b01      	subs	r3, #1
 8012742:	b2db      	uxtb	r3, r3
 8012744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801274a:	2b00      	cmp	r3, #0
 801274c:	dce9      	bgt.n	8012722 <prvUnlockQueue+0x16>
 801274e:	e000      	b.n	8012752 <prvUnlockQueue+0x46>
					break;
 8012750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	22ff      	movs	r2, #255	@ 0xff
 8012756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801275a:	f001 fa2d 	bl	8013bb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801275e:	f001 f9f5 	bl	8013b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801276a:	e011      	b.n	8012790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	691b      	ldr	r3, [r3, #16]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d012      	beq.n	801279a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3310      	adds	r3, #16
 8012778:	4618      	mov	r0, r3
 801277a:	f000 fcc7 	bl	801310c <xTaskRemoveFromEventList>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012784:	f000 fda6 	bl	80132d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012788:	7bbb      	ldrb	r3, [r7, #14]
 801278a:	3b01      	subs	r3, #1
 801278c:	b2db      	uxtb	r3, r3
 801278e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dce9      	bgt.n	801276c <prvUnlockQueue+0x60>
 8012798:	e000      	b.n	801279c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801279a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	22ff      	movs	r2, #255	@ 0xff
 80127a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80127a4:	f001 fa08 	bl	8013bb8 <vPortExitCritical>
}
 80127a8:	bf00      	nop
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80127b8:	f001 f9c8 	bl	8013b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d102      	bne.n	80127ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80127c4:	2301      	movs	r3, #1
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	e001      	b.n	80127ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80127ca:	2300      	movs	r3, #0
 80127cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80127ce:	f001 f9f3 	bl	8013bb8 <vPortExitCritical>

	return xReturn;
 80127d2:	68fb      	ldr	r3, [r7, #12]
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3710      	adds	r7, #16
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80127e4:	f001 f9b2 	bl	8013b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d102      	bne.n	80127fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80127f4:	2301      	movs	r3, #1
 80127f6:	60fb      	str	r3, [r7, #12]
 80127f8:	e001      	b.n	80127fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80127fa:	2300      	movs	r3, #0
 80127fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80127fe:	f001 f9db 	bl	8013bb8 <vPortExitCritical>

	return xReturn;
 8012802:	68fb      	ldr	r3, [r7, #12]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801280c:	b580      	push	{r7, lr}
 801280e:	b08e      	sub	sp, #56	@ 0x38
 8012810:	af04      	add	r7, sp, #16
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801281a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801281c:	2b00      	cmp	r3, #0
 801281e:	d10d      	bne.n	801283c <xTaskCreateStatic+0x30>
	__asm volatile
 8012820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012824:	b672      	cpsid	i
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	b662      	cpsie	i
 8012834:	623b      	str	r3, [r7, #32]
}
 8012836:	bf00      	nop
 8012838:	bf00      	nop
 801283a:	e7fd      	b.n	8012838 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801283e:	2b00      	cmp	r3, #0
 8012840:	d10d      	bne.n	801285e <xTaskCreateStatic+0x52>
	__asm volatile
 8012842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012846:	b672      	cpsid	i
 8012848:	f383 8811 	msr	BASEPRI, r3
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	f3bf 8f4f 	dsb	sy
 8012854:	b662      	cpsie	i
 8012856:	61fb      	str	r3, [r7, #28]
}
 8012858:	bf00      	nop
 801285a:	bf00      	nop
 801285c:	e7fd      	b.n	801285a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801285e:	2358      	movs	r3, #88	@ 0x58
 8012860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	2b58      	cmp	r3, #88	@ 0x58
 8012866:	d00d      	beq.n	8012884 <xTaskCreateStatic+0x78>
	__asm volatile
 8012868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801286c:	b672      	cpsid	i
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	b662      	cpsie	i
 801287c:	61bb      	str	r3, [r7, #24]
}
 801287e:	bf00      	nop
 8012880:	bf00      	nop
 8012882:	e7fd      	b.n	8012880 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012884:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012888:	2b00      	cmp	r3, #0
 801288a:	d01e      	beq.n	80128ca <xTaskCreateStatic+0xbe>
 801288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801288e:	2b00      	cmp	r3, #0
 8012890:	d01b      	beq.n	80128ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012894:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801289a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289e:	2202      	movs	r2, #2
 80128a0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80128a4:	2300      	movs	r3, #0
 80128a6:	9303      	str	r3, [sp, #12]
 80128a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128aa:	9302      	str	r3, [sp, #8]
 80128ac:	f107 0314 	add.w	r3, r7, #20
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	68b9      	ldr	r1, [r7, #8]
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f000 f850 	bl	8012962 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80128c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128c4:	f000 f8e2 	bl	8012a8c <prvAddNewTaskToReadyList>
 80128c8:	e001      	b.n	80128ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80128ca:	2300      	movs	r3, #0
 80128cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80128ce:	697b      	ldr	r3, [r7, #20]
	}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3728      	adds	r7, #40	@ 0x28
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b08c      	sub	sp, #48	@ 0x30
 80128dc:	af04      	add	r7, sp, #16
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	603b      	str	r3, [r7, #0]
 80128e4:	4613      	mov	r3, r2
 80128e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80128e8:	88fb      	ldrh	r3, [r7, #6]
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4618      	mov	r0, r3
 80128ee:	f001 fa5b 	bl	8013da8 <pvPortMalloc>
 80128f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00e      	beq.n	8012918 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80128fa:	2058      	movs	r0, #88	@ 0x58
 80128fc:	f001 fa54 	bl	8013da8 <pvPortMalloc>
 8012900:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d003      	beq.n	8012910 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	697a      	ldr	r2, [r7, #20]
 801290c:	631a      	str	r2, [r3, #48]	@ 0x30
 801290e:	e005      	b.n	801291c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012910:	6978      	ldr	r0, [r7, #20]
 8012912:	f001 fb1b 	bl	8013f4c <vPortFree>
 8012916:	e001      	b.n	801291c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012918:	2300      	movs	r3, #0
 801291a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d017      	beq.n	8012952 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	2200      	movs	r2, #0
 8012926:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801292a:	88fa      	ldrh	r2, [r7, #6]
 801292c:	2300      	movs	r3, #0
 801292e:	9303      	str	r3, [sp, #12]
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012936:	9301      	str	r3, [sp, #4]
 8012938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801293a:	9300      	str	r3, [sp, #0]
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	68b9      	ldr	r1, [r7, #8]
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f000 f80e 	bl	8012962 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012946:	69f8      	ldr	r0, [r7, #28]
 8012948:	f000 f8a0 	bl	8012a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801294c:	2301      	movs	r3, #1
 801294e:	61bb      	str	r3, [r7, #24]
 8012950:	e002      	b.n	8012958 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012952:	f04f 33ff 	mov.w	r3, #4294967295
 8012956:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012958:	69bb      	ldr	r3, [r7, #24]
	}
 801295a:	4618      	mov	r0, r3
 801295c:	3720      	adds	r7, #32
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b088      	sub	sp, #32
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
 801296e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012972:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	461a      	mov	r2, r3
 801297a:	21a5      	movs	r1, #165	@ 0xa5
 801297c:	f002 f9b0 	bl	8014ce0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801298a:	440b      	add	r3, r1
 801298c:	009b      	lsls	r3, r3, #2
 801298e:	4413      	add	r3, r2
 8012990:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	f023 0307 	bic.w	r3, r3, #7
 8012998:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	f003 0307 	and.w	r3, r3, #7
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00d      	beq.n	80129c0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80129a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129a8:	b672      	cpsid	i
 80129aa:	f383 8811 	msr	BASEPRI, r3
 80129ae:	f3bf 8f6f 	isb	sy
 80129b2:	f3bf 8f4f 	dsb	sy
 80129b6:	b662      	cpsie	i
 80129b8:	617b      	str	r3, [r7, #20]
}
 80129ba:	bf00      	nop
 80129bc:	bf00      	nop
 80129be:	e7fd      	b.n	80129bc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d01f      	beq.n	8012a06 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80129c6:	2300      	movs	r3, #0
 80129c8:	61fb      	str	r3, [r7, #28]
 80129ca:	e012      	b.n	80129f2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	4413      	add	r3, r2
 80129d2:	7819      	ldrb	r1, [r3, #0]
 80129d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	4413      	add	r3, r2
 80129da:	3334      	adds	r3, #52	@ 0x34
 80129dc:	460a      	mov	r2, r1
 80129de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80129e0:	68ba      	ldr	r2, [r7, #8]
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	4413      	add	r3, r2
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	3301      	adds	r3, #1
 80129f0:	61fb      	str	r3, [r7, #28]
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	2b0f      	cmp	r3, #15
 80129f6:	d9e9      	bls.n	80129cc <prvInitialiseNewTask+0x6a>
 80129f8:	e000      	b.n	80129fc <prvInitialiseNewTask+0x9a>
			{
				break;
 80129fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80129fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129fe:	2200      	movs	r2, #0
 8012a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012a04:	e003      	b.n	8012a0e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a10:	2b06      	cmp	r3, #6
 8012a12:	d901      	bls.n	8012a18 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012a14:	2306      	movs	r3, #6
 8012a16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a22:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a26:	2200      	movs	r2, #0
 8012a28:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7fe ffa4 	bl	801197c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a36:	3318      	adds	r3, #24
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fe ff9f 	bl	801197c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a46:	f1c3 0207 	rsb	r2, r3, #7
 8012a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a56:	2200      	movs	r2, #0
 8012a58:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012a68:	683a      	ldr	r2, [r7, #0]
 8012a6a:	68f9      	ldr	r1, [r7, #12]
 8012a6c:	69b8      	ldr	r0, [r7, #24]
 8012a6e:	f000 ff5b 	bl	8013928 <pxPortInitialiseStack>
 8012a72:	4602      	mov	r2, r0
 8012a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d002      	beq.n	8012a84 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a84:	bf00      	nop
 8012a86:	3720      	adds	r7, #32
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012a94:	f001 f85a 	bl	8013b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012a98:	4b2a      	ldr	r3, [pc, #168]	@ (8012b44 <prvAddNewTaskToReadyList+0xb8>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	4a29      	ldr	r2, [pc, #164]	@ (8012b44 <prvAddNewTaskToReadyList+0xb8>)
 8012aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012aa2:	4b29      	ldr	r3, [pc, #164]	@ (8012b48 <prvAddNewTaskToReadyList+0xbc>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d109      	bne.n	8012abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012aaa:	4a27      	ldr	r2, [pc, #156]	@ (8012b48 <prvAddNewTaskToReadyList+0xbc>)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ab0:	4b24      	ldr	r3, [pc, #144]	@ (8012b44 <prvAddNewTaskToReadyList+0xb8>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d110      	bne.n	8012ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012ab8:	f000 fc32 	bl	8013320 <prvInitialiseTaskLists>
 8012abc:	e00d      	b.n	8012ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012abe:	4b23      	ldr	r3, [pc, #140]	@ (8012b4c <prvAddNewTaskToReadyList+0xc0>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d109      	bne.n	8012ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012ac6:	4b20      	ldr	r3, [pc, #128]	@ (8012b48 <prvAddNewTaskToReadyList+0xbc>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d802      	bhi.n	8012ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8012b48 <prvAddNewTaskToReadyList+0xbc>)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012ada:	4b1d      	ldr	r3, [pc, #116]	@ (8012b50 <prvAddNewTaskToReadyList+0xc4>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8012b50 <prvAddNewTaskToReadyList+0xc4>)
 8012ae2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ae8:	2201      	movs	r2, #1
 8012aea:	409a      	lsls	r2, r3
 8012aec:	4b19      	ldr	r3, [pc, #100]	@ (8012b54 <prvAddNewTaskToReadyList+0xc8>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4313      	orrs	r3, r2
 8012af2:	4a18      	ldr	r2, [pc, #96]	@ (8012b54 <prvAddNewTaskToReadyList+0xc8>)
 8012af4:	6013      	str	r3, [r2, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012afa:	4613      	mov	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	4413      	add	r3, r2
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	4a15      	ldr	r2, [pc, #84]	@ (8012b58 <prvAddNewTaskToReadyList+0xcc>)
 8012b04:	441a      	add	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	3304      	adds	r3, #4
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	f7fe ff42 	bl	8011996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012b12:	f001 f851 	bl	8013bb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012b16:	4b0d      	ldr	r3, [pc, #52]	@ (8012b4c <prvAddNewTaskToReadyList+0xc0>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00e      	beq.n	8012b3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8012b48 <prvAddNewTaskToReadyList+0xbc>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d207      	bcs.n	8012b3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8012b5c <prvAddNewTaskToReadyList+0xd0>)
 8012b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20000e48 	.word	0x20000e48
 8012b48:	20000d48 	.word	0x20000d48
 8012b4c:	20000e54 	.word	0x20000e54
 8012b50:	20000e64 	.word	0x20000e64
 8012b54:	20000e50 	.word	0x20000e50
 8012b58:	20000d4c 	.word	0x20000d4c
 8012b5c:	e000ed04 	.word	0xe000ed04

08012b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d01a      	beq.n	8012ba8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012b72:	4b15      	ldr	r3, [pc, #84]	@ (8012bc8 <vTaskDelay+0x68>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00d      	beq.n	8012b96 <vTaskDelay+0x36>
	__asm volatile
 8012b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7e:	b672      	cpsid	i
 8012b80:	f383 8811 	msr	BASEPRI, r3
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	f3bf 8f4f 	dsb	sy
 8012b8c:	b662      	cpsie	i
 8012b8e:	60bb      	str	r3, [r7, #8]
}
 8012b90:	bf00      	nop
 8012b92:	bf00      	nop
 8012b94:	e7fd      	b.n	8012b92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012b96:	f000 f881 	bl	8012c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 fe5d 	bl	801385c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ba2:	f000 f889 	bl	8012cb8 <xTaskResumeAll>
 8012ba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d107      	bne.n	8012bbe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8012bae:	4b07      	ldr	r3, [pc, #28]	@ (8012bcc <vTaskDelay+0x6c>)
 8012bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bb4:	601a      	str	r2, [r3, #0]
 8012bb6:	f3bf 8f4f 	dsb	sy
 8012bba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012bbe:	bf00      	nop
 8012bc0:	3710      	adds	r7, #16
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	20000e70 	.word	0x20000e70
 8012bcc:	e000ed04 	.word	0xe000ed04

08012bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b08a      	sub	sp, #40	@ 0x28
 8012bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012bde:	463a      	mov	r2, r7
 8012be0:	1d39      	adds	r1, r7, #4
 8012be2:	f107 0308 	add.w	r3, r7, #8
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ee f892 	bl	8000d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012bec:	6839      	ldr	r1, [r7, #0]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	68ba      	ldr	r2, [r7, #8]
 8012bf2:	9202      	str	r2, [sp, #8]
 8012bf4:	9301      	str	r3, [sp, #4]
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	460a      	mov	r2, r1
 8012bfe:	4921      	ldr	r1, [pc, #132]	@ (8012c84 <vTaskStartScheduler+0xb4>)
 8012c00:	4821      	ldr	r0, [pc, #132]	@ (8012c88 <vTaskStartScheduler+0xb8>)
 8012c02:	f7ff fe03 	bl	801280c <xTaskCreateStatic>
 8012c06:	4603      	mov	r3, r0
 8012c08:	4a20      	ldr	r2, [pc, #128]	@ (8012c8c <vTaskStartScheduler+0xbc>)
 8012c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8012c8c <vTaskStartScheduler+0xbc>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d002      	beq.n	8012c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012c14:	2301      	movs	r3, #1
 8012c16:	617b      	str	r3, [r7, #20]
 8012c18:	e001      	b.n	8012c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d118      	bne.n	8012c56 <vTaskStartScheduler+0x86>
	__asm volatile
 8012c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c28:	b672      	cpsid	i
 8012c2a:	f383 8811 	msr	BASEPRI, r3
 8012c2e:	f3bf 8f6f 	isb	sy
 8012c32:	f3bf 8f4f 	dsb	sy
 8012c36:	b662      	cpsie	i
 8012c38:	613b      	str	r3, [r7, #16]
}
 8012c3a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c3c:	4b14      	ldr	r3, [pc, #80]	@ (8012c90 <vTaskStartScheduler+0xc0>)
 8012c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c44:	4b13      	ldr	r3, [pc, #76]	@ (8012c94 <vTaskStartScheduler+0xc4>)
 8012c46:	2201      	movs	r2, #1
 8012c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012c4a:	4b13      	ldr	r3, [pc, #76]	@ (8012c98 <vTaskStartScheduler+0xc8>)
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c50:	f000 fefe 	bl	8013a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c54:	e011      	b.n	8012c7a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c5c:	d10d      	bne.n	8012c7a <vTaskStartScheduler+0xaa>
	__asm volatile
 8012c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c62:	b672      	cpsid	i
 8012c64:	f383 8811 	msr	BASEPRI, r3
 8012c68:	f3bf 8f6f 	isb	sy
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	b662      	cpsie	i
 8012c72:	60fb      	str	r3, [r7, #12]
}
 8012c74:	bf00      	nop
 8012c76:	bf00      	nop
 8012c78:	e7fd      	b.n	8012c76 <vTaskStartScheduler+0xa6>
}
 8012c7a:	bf00      	nop
 8012c7c:	3718      	adds	r7, #24
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	08015218 	.word	0x08015218
 8012c88:	080132ed 	.word	0x080132ed
 8012c8c:	20000e6c 	.word	0x20000e6c
 8012c90:	20000e68 	.word	0x20000e68
 8012c94:	20000e54 	.word	0x20000e54
 8012c98:	20000e4c 	.word	0x20000e4c

08012c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012ca0:	4b04      	ldr	r3, [pc, #16]	@ (8012cb4 <vTaskSuspendAll+0x18>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	4a03      	ldr	r2, [pc, #12]	@ (8012cb4 <vTaskSuspendAll+0x18>)
 8012ca8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012caa:	bf00      	nop
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr
 8012cb4:	20000e70 	.word	0x20000e70

08012cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012cc6:	4b43      	ldr	r3, [pc, #268]	@ (8012dd4 <xTaskResumeAll+0x11c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d10d      	bne.n	8012cea <xTaskResumeAll+0x32>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd2:	b672      	cpsid	i
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	b662      	cpsie	i
 8012ce2:	603b      	str	r3, [r7, #0]
}
 8012ce4:	bf00      	nop
 8012ce6:	bf00      	nop
 8012ce8:	e7fd      	b.n	8012ce6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012cea:	f000 ff2f 	bl	8013b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012cee:	4b39      	ldr	r3, [pc, #228]	@ (8012dd4 <xTaskResumeAll+0x11c>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	3b01      	subs	r3, #1
 8012cf4:	4a37      	ldr	r2, [pc, #220]	@ (8012dd4 <xTaskResumeAll+0x11c>)
 8012cf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cf8:	4b36      	ldr	r3, [pc, #216]	@ (8012dd4 <xTaskResumeAll+0x11c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d161      	bne.n	8012dc4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d00:	4b35      	ldr	r3, [pc, #212]	@ (8012dd8 <xTaskResumeAll+0x120>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d05d      	beq.n	8012dc4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d08:	e02e      	b.n	8012d68 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d0a:	4b34      	ldr	r3, [pc, #208]	@ (8012ddc <xTaskResumeAll+0x124>)
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	3318      	adds	r3, #24
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe fe9a 	bl	8011a50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	3304      	adds	r3, #4
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7fe fe95 	bl	8011a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	409a      	lsls	r2, r3
 8012d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8012de0 <xTaskResumeAll+0x128>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4313      	orrs	r3, r2
 8012d34:	4a2a      	ldr	r2, [pc, #168]	@ (8012de0 <xTaskResumeAll+0x128>)
 8012d36:	6013      	str	r3, [r2, #0]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	4413      	add	r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4a27      	ldr	r2, [pc, #156]	@ (8012de4 <xTaskResumeAll+0x12c>)
 8012d46:	441a      	add	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	4610      	mov	r0, r2
 8012d50:	f7fe fe21 	bl	8011996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d58:	4b23      	ldr	r3, [pc, #140]	@ (8012de8 <xTaskResumeAll+0x130>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d302      	bcc.n	8012d68 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012d62:	4b22      	ldr	r3, [pc, #136]	@ (8012dec <xTaskResumeAll+0x134>)
 8012d64:	2201      	movs	r2, #1
 8012d66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d68:	4b1c      	ldr	r3, [pc, #112]	@ (8012ddc <xTaskResumeAll+0x124>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d1cc      	bne.n	8012d0a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d76:	f000 fb73 	bl	8013460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8012df0 <xTaskResumeAll+0x138>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d010      	beq.n	8012da8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d86:	f000 f859 	bl	8012e3c <xTaskIncrementTick>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012d90:	4b16      	ldr	r3, [pc, #88]	@ (8012dec <xTaskResumeAll+0x134>)
 8012d92:	2201      	movs	r2, #1
 8012d94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	3b01      	subs	r3, #1
 8012d9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1f1      	bne.n	8012d86 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012da2:	4b13      	ldr	r3, [pc, #76]	@ (8012df0 <xTaskResumeAll+0x138>)
 8012da4:	2200      	movs	r2, #0
 8012da6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012da8:	4b10      	ldr	r3, [pc, #64]	@ (8012dec <xTaskResumeAll+0x134>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d009      	beq.n	8012dc4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012db0:	2301      	movs	r3, #1
 8012db2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012db4:	4b0f      	ldr	r3, [pc, #60]	@ (8012df4 <xTaskResumeAll+0x13c>)
 8012db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dba:	601a      	str	r2, [r3, #0]
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012dc4:	f000 fef8 	bl	8013bb8 <vPortExitCritical>

	return xAlreadyYielded;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20000e70 	.word	0x20000e70
 8012dd8:	20000e48 	.word	0x20000e48
 8012ddc:	20000e08 	.word	0x20000e08
 8012de0:	20000e50 	.word	0x20000e50
 8012de4:	20000d4c 	.word	0x20000d4c
 8012de8:	20000d48 	.word	0x20000d48
 8012dec:	20000e5c 	.word	0x20000e5c
 8012df0:	20000e58 	.word	0x20000e58
 8012df4:	e000ed04 	.word	0xe000ed04

08012df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012dfe:	4b05      	ldr	r3, [pc, #20]	@ (8012e14 <xTaskGetTickCount+0x1c>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012e04:	687b      	ldr	r3, [r7, #4]
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	20000e4c 	.word	0x20000e4c

08012e18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b082      	sub	sp, #8
 8012e1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e1e:	f000 ff7d 	bl	8013d1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012e22:	2300      	movs	r3, #0
 8012e24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012e26:	4b04      	ldr	r3, [pc, #16]	@ (8012e38 <xTaskGetTickCountFromISR+0x20>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e2c:	683b      	ldr	r3, [r7, #0]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20000e4c 	.word	0x20000e4c

08012e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e42:	2300      	movs	r3, #0
 8012e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e46:	4b50      	ldr	r3, [pc, #320]	@ (8012f88 <xTaskIncrementTick+0x14c>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f040 808b 	bne.w	8012f66 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012e50:	4b4e      	ldr	r3, [pc, #312]	@ (8012f8c <xTaskIncrementTick+0x150>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e58:	4a4c      	ldr	r2, [pc, #304]	@ (8012f8c <xTaskIncrementTick+0x150>)
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d123      	bne.n	8012eac <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e64:	4b4a      	ldr	r3, [pc, #296]	@ (8012f90 <xTaskIncrementTick+0x154>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d00d      	beq.n	8012e8a <xTaskIncrementTick+0x4e>
	__asm volatile
 8012e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e72:	b672      	cpsid	i
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	b662      	cpsie	i
 8012e82:	603b      	str	r3, [r7, #0]
}
 8012e84:	bf00      	nop
 8012e86:	bf00      	nop
 8012e88:	e7fd      	b.n	8012e86 <xTaskIncrementTick+0x4a>
 8012e8a:	4b41      	ldr	r3, [pc, #260]	@ (8012f90 <xTaskIncrementTick+0x154>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	60fb      	str	r3, [r7, #12]
 8012e90:	4b40      	ldr	r3, [pc, #256]	@ (8012f94 <xTaskIncrementTick+0x158>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4a3e      	ldr	r2, [pc, #248]	@ (8012f90 <xTaskIncrementTick+0x154>)
 8012e96:	6013      	str	r3, [r2, #0]
 8012e98:	4a3e      	ldr	r2, [pc, #248]	@ (8012f94 <xTaskIncrementTick+0x158>)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	6013      	str	r3, [r2, #0]
 8012e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8012f98 <xTaskIncrementTick+0x15c>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8012f98 <xTaskIncrementTick+0x15c>)
 8012ea6:	6013      	str	r3, [r2, #0]
 8012ea8:	f000 fada 	bl	8013460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012eac:	4b3b      	ldr	r3, [pc, #236]	@ (8012f9c <xTaskIncrementTick+0x160>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	693a      	ldr	r2, [r7, #16]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d348      	bcc.n	8012f48 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eb6:	4b36      	ldr	r3, [pc, #216]	@ (8012f90 <xTaskIncrementTick+0x154>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d104      	bne.n	8012eca <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ec0:	4b36      	ldr	r3, [pc, #216]	@ (8012f9c <xTaskIncrementTick+0x160>)
 8012ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec6:	601a      	str	r2, [r3, #0]
					break;
 8012ec8:	e03e      	b.n	8012f48 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012eca:	4b31      	ldr	r3, [pc, #196]	@ (8012f90 <xTaskIncrementTick+0x154>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012eda:	693a      	ldr	r2, [r7, #16]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d203      	bcs.n	8012eea <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8012f9c <xTaskIncrementTick+0x160>)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ee8:	e02e      	b.n	8012f48 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3304      	adds	r3, #4
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fe fdae 	bl	8011a50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d004      	beq.n	8012f06 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	3318      	adds	r3, #24
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7fe fda5 	bl	8011a50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	409a      	lsls	r2, r3
 8012f0e:	4b24      	ldr	r3, [pc, #144]	@ (8012fa0 <xTaskIncrementTick+0x164>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4313      	orrs	r3, r2
 8012f14:	4a22      	ldr	r2, [pc, #136]	@ (8012fa0 <xTaskIncrementTick+0x164>)
 8012f16:	6013      	str	r3, [r2, #0]
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	4413      	add	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4a1f      	ldr	r2, [pc, #124]	@ (8012fa4 <xTaskIncrementTick+0x168>)
 8012f26:	441a      	add	r2, r3
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	3304      	adds	r3, #4
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	4610      	mov	r0, r2
 8012f30:	f7fe fd31 	bl	8011996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f38:	4b1b      	ldr	r3, [pc, #108]	@ (8012fa8 <xTaskIncrementTick+0x16c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d3b9      	bcc.n	8012eb6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012f42:	2301      	movs	r3, #1
 8012f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f46:	e7b6      	b.n	8012eb6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f48:	4b17      	ldr	r3, [pc, #92]	@ (8012fa8 <xTaskIncrementTick+0x16c>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f4e:	4915      	ldr	r1, [pc, #84]	@ (8012fa4 <xTaskIncrementTick+0x168>)
 8012f50:	4613      	mov	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	4413      	add	r3, r2
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	440b      	add	r3, r1
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d907      	bls.n	8012f70 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012f60:	2301      	movs	r3, #1
 8012f62:	617b      	str	r3, [r7, #20]
 8012f64:	e004      	b.n	8012f70 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012f66:	4b11      	ldr	r3, [pc, #68]	@ (8012fac <xTaskIncrementTick+0x170>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8012fac <xTaskIncrementTick+0x170>)
 8012f6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012f70:	4b0f      	ldr	r3, [pc, #60]	@ (8012fb0 <xTaskIncrementTick+0x174>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d001      	beq.n	8012f7c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012f78:	2301      	movs	r3, #1
 8012f7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012f7c:	697b      	ldr	r3, [r7, #20]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3718      	adds	r7, #24
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	bf00      	nop
 8012f88:	20000e70 	.word	0x20000e70
 8012f8c:	20000e4c 	.word	0x20000e4c
 8012f90:	20000e00 	.word	0x20000e00
 8012f94:	20000e04 	.word	0x20000e04
 8012f98:	20000e60 	.word	0x20000e60
 8012f9c:	20000e68 	.word	0x20000e68
 8012fa0:	20000e50 	.word	0x20000e50
 8012fa4:	20000d4c 	.word	0x20000d4c
 8012fa8:	20000d48 	.word	0x20000d48
 8012fac:	20000e58 	.word	0x20000e58
 8012fb0:	20000e5c 	.word	0x20000e5c

08012fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012fba:	4b3b      	ldr	r3, [pc, #236]	@ (80130a8 <vTaskSwitchContext+0xf4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d003      	beq.n	8012fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80130ac <vTaskSwitchContext+0xf8>)
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012fc8:	e069      	b.n	801309e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8012fca:	4b38      	ldr	r3, [pc, #224]	@ (80130ac <vTaskSwitchContext+0xf8>)
 8012fcc:	2200      	movs	r2, #0
 8012fce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012fd0:	4b37      	ldr	r3, [pc, #220]	@ (80130b0 <vTaskSwitchContext+0xfc>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8012fdc:	61bb      	str	r3, [r7, #24]
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	69ba      	ldr	r2, [r7, #24]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d111      	bne.n	801300c <vTaskSwitchContext+0x58>
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	3304      	adds	r3, #4
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	69ba      	ldr	r2, [r7, #24]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d10b      	bne.n	801300c <vTaskSwitchContext+0x58>
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	3308      	adds	r3, #8
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	69ba      	ldr	r2, [r7, #24]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d105      	bne.n	801300c <vTaskSwitchContext+0x58>
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	330c      	adds	r3, #12
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	429a      	cmp	r2, r3
 801300a:	d008      	beq.n	801301e <vTaskSwitchContext+0x6a>
 801300c:	4b28      	ldr	r3, [pc, #160]	@ (80130b0 <vTaskSwitchContext+0xfc>)
 801300e:	681a      	ldr	r2, [r3, #0]
 8013010:	4b27      	ldr	r3, [pc, #156]	@ (80130b0 <vTaskSwitchContext+0xfc>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	3334      	adds	r3, #52	@ 0x34
 8013016:	4619      	mov	r1, r3
 8013018:	4610      	mov	r0, r2
 801301a:	f7ed fe66 	bl	8000cea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801301e:	4b25      	ldr	r3, [pc, #148]	@ (80130b4 <vTaskSwitchContext+0x100>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	fab3 f383 	clz	r3, r3
 801302a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801302c:	7afb      	ldrb	r3, [r7, #11]
 801302e:	f1c3 031f 	rsb	r3, r3, #31
 8013032:	617b      	str	r3, [r7, #20]
 8013034:	4920      	ldr	r1, [pc, #128]	@ (80130b8 <vTaskSwitchContext+0x104>)
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	4613      	mov	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	4413      	add	r3, r2
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	440b      	add	r3, r1
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10d      	bne.n	8013064 <vTaskSwitchContext+0xb0>
	__asm volatile
 8013048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801304c:	b672      	cpsid	i
 801304e:	f383 8811 	msr	BASEPRI, r3
 8013052:	f3bf 8f6f 	isb	sy
 8013056:	f3bf 8f4f 	dsb	sy
 801305a:	b662      	cpsie	i
 801305c:	607b      	str	r3, [r7, #4]
}
 801305e:	bf00      	nop
 8013060:	bf00      	nop
 8013062:	e7fd      	b.n	8013060 <vTaskSwitchContext+0xac>
 8013064:	697a      	ldr	r2, [r7, #20]
 8013066:	4613      	mov	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	4413      	add	r3, r2
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	4a12      	ldr	r2, [pc, #72]	@ (80130b8 <vTaskSwitchContext+0x104>)
 8013070:	4413      	add	r3, r2
 8013072:	613b      	str	r3, [r7, #16]
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	685a      	ldr	r2, [r3, #4]
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	605a      	str	r2, [r3, #4]
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	685a      	ldr	r2, [r3, #4]
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	3308      	adds	r3, #8
 8013086:	429a      	cmp	r2, r3
 8013088:	d104      	bne.n	8013094 <vTaskSwitchContext+0xe0>
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	685a      	ldr	r2, [r3, #4]
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	605a      	str	r2, [r3, #4]
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	4a05      	ldr	r2, [pc, #20]	@ (80130b0 <vTaskSwitchContext+0xfc>)
 801309c:	6013      	str	r3, [r2, #0]
}
 801309e:	bf00      	nop
 80130a0:	3720      	adds	r7, #32
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	20000e70 	.word	0x20000e70
 80130ac:	20000e5c 	.word	0x20000e5c
 80130b0:	20000d48 	.word	0x20000d48
 80130b4:	20000e50 	.word	0x20000e50
 80130b8:	20000d4c 	.word	0x20000d4c

080130bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d10d      	bne.n	80130e8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80130cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d0:	b672      	cpsid	i
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	b662      	cpsie	i
 80130e0:	60fb      	str	r3, [r7, #12]
}
 80130e2:	bf00      	nop
 80130e4:	bf00      	nop
 80130e6:	e7fd      	b.n	80130e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130e8:	4b07      	ldr	r3, [pc, #28]	@ (8013108 <vTaskPlaceOnEventList+0x4c>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	3318      	adds	r3, #24
 80130ee:	4619      	mov	r1, r3
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f7fe fc74 	bl	80119de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130f6:	2101      	movs	r1, #1
 80130f8:	6838      	ldr	r0, [r7, #0]
 80130fa:	f000 fbaf 	bl	801385c <prvAddCurrentTaskToDelayedList>
}
 80130fe:	bf00      	nop
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	20000d48 	.word	0x20000d48

0801310c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d10d      	bne.n	801313e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8013122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013126:	b672      	cpsid	i
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	b662      	cpsie	i
 8013136:	60fb      	str	r3, [r7, #12]
}
 8013138:	bf00      	nop
 801313a:	bf00      	nop
 801313c:	e7fd      	b.n	801313a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3318      	adds	r3, #24
 8013142:	4618      	mov	r0, r3
 8013144:	f7fe fc84 	bl	8011a50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013148:	4b1d      	ldr	r3, [pc, #116]	@ (80131c0 <xTaskRemoveFromEventList+0xb4>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d11c      	bne.n	801318a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	3304      	adds	r3, #4
 8013154:	4618      	mov	r0, r3
 8013156:	f7fe fc7b 	bl	8011a50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801315e:	2201      	movs	r2, #1
 8013160:	409a      	lsls	r2, r3
 8013162:	4b18      	ldr	r3, [pc, #96]	@ (80131c4 <xTaskRemoveFromEventList+0xb8>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4313      	orrs	r3, r2
 8013168:	4a16      	ldr	r2, [pc, #88]	@ (80131c4 <xTaskRemoveFromEventList+0xb8>)
 801316a:	6013      	str	r3, [r2, #0]
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013170:	4613      	mov	r3, r2
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	4413      	add	r3, r2
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	4a13      	ldr	r2, [pc, #76]	@ (80131c8 <xTaskRemoveFromEventList+0xbc>)
 801317a:	441a      	add	r2, r3
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	3304      	adds	r3, #4
 8013180:	4619      	mov	r1, r3
 8013182:	4610      	mov	r0, r2
 8013184:	f7fe fc07 	bl	8011996 <vListInsertEnd>
 8013188:	e005      	b.n	8013196 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	3318      	adds	r3, #24
 801318e:	4619      	mov	r1, r3
 8013190:	480e      	ldr	r0, [pc, #56]	@ (80131cc <xTaskRemoveFromEventList+0xc0>)
 8013192:	f7fe fc00 	bl	8011996 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801319a:	4b0d      	ldr	r3, [pc, #52]	@ (80131d0 <xTaskRemoveFromEventList+0xc4>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d905      	bls.n	80131b0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131a4:	2301      	movs	r3, #1
 80131a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131a8:	4b0a      	ldr	r3, [pc, #40]	@ (80131d4 <xTaskRemoveFromEventList+0xc8>)
 80131aa:	2201      	movs	r2, #1
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	e001      	b.n	80131b4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80131b0:	2300      	movs	r3, #0
 80131b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131b4:	697b      	ldr	r3, [r7, #20]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3718      	adds	r7, #24
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	20000e70 	.word	0x20000e70
 80131c4:	20000e50 	.word	0x20000e50
 80131c8:	20000d4c 	.word	0x20000d4c
 80131cc:	20000e08 	.word	0x20000e08
 80131d0:	20000d48 	.word	0x20000d48
 80131d4:	20000e5c 	.word	0x20000e5c

080131d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80131e0:	4b06      	ldr	r3, [pc, #24]	@ (80131fc <vTaskInternalSetTimeOutState+0x24>)
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80131e8:	4b05      	ldr	r3, [pc, #20]	@ (8013200 <vTaskInternalSetTimeOutState+0x28>)
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	605a      	str	r2, [r3, #4]
}
 80131f0:	bf00      	nop
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr
 80131fc:	20000e60 	.word	0x20000e60
 8013200:	20000e4c 	.word	0x20000e4c

08013204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b088      	sub	sp, #32
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10d      	bne.n	8013230 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8013214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013218:	b672      	cpsid	i
 801321a:	f383 8811 	msr	BASEPRI, r3
 801321e:	f3bf 8f6f 	isb	sy
 8013222:	f3bf 8f4f 	dsb	sy
 8013226:	b662      	cpsie	i
 8013228:	613b      	str	r3, [r7, #16]
}
 801322a:	bf00      	nop
 801322c:	bf00      	nop
 801322e:	e7fd      	b.n	801322c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d10d      	bne.n	8013252 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8013236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323a:	b672      	cpsid	i
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	b662      	cpsie	i
 801324a:	60fb      	str	r3, [r7, #12]
}
 801324c:	bf00      	nop
 801324e:	bf00      	nop
 8013250:	e7fd      	b.n	801324e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8013252:	f000 fc7b 	bl	8013b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013256:	4b1d      	ldr	r3, [pc, #116]	@ (80132cc <xTaskCheckForTimeOut+0xc8>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	69ba      	ldr	r2, [r7, #24]
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801326e:	d102      	bne.n	8013276 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013270:	2300      	movs	r3, #0
 8013272:	61fb      	str	r3, [r7, #28]
 8013274:	e023      	b.n	80132be <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	4b15      	ldr	r3, [pc, #84]	@ (80132d0 <xTaskCheckForTimeOut+0xcc>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	429a      	cmp	r2, r3
 8013280:	d007      	beq.n	8013292 <xTaskCheckForTimeOut+0x8e>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	69ba      	ldr	r2, [r7, #24]
 8013288:	429a      	cmp	r2, r3
 801328a:	d302      	bcc.n	8013292 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801328c:	2301      	movs	r3, #1
 801328e:	61fb      	str	r3, [r7, #28]
 8013290:	e015      	b.n	80132be <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	429a      	cmp	r2, r3
 801329a:	d20b      	bcs.n	80132b4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	1ad2      	subs	r2, r2, r3
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7ff ff95 	bl	80131d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132ae:	2300      	movs	r3, #0
 80132b0:	61fb      	str	r3, [r7, #28]
 80132b2:	e004      	b.n	80132be <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	2200      	movs	r2, #0
 80132b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132ba:	2301      	movs	r3, #1
 80132bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132be:	f000 fc7b 	bl	8013bb8 <vPortExitCritical>

	return xReturn;
 80132c2:	69fb      	ldr	r3, [r7, #28]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3720      	adds	r7, #32
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	20000e4c 	.word	0x20000e4c
 80132d0:	20000e60 	.word	0x20000e60

080132d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80132d8:	4b03      	ldr	r3, [pc, #12]	@ (80132e8 <vTaskMissedYield+0x14>)
 80132da:	2201      	movs	r2, #1
 80132dc:	601a      	str	r2, [r3, #0]
}
 80132de:	bf00      	nop
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr
 80132e8:	20000e5c 	.word	0x20000e5c

080132ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80132f4:	f000 f854 	bl	80133a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80132f8:	4b07      	ldr	r3, [pc, #28]	@ (8013318 <prvIdleTask+0x2c>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d907      	bls.n	8013310 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013300:	4b06      	ldr	r3, [pc, #24]	@ (801331c <prvIdleTask+0x30>)
 8013302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	f3bf 8f4f 	dsb	sy
 801330c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013310:	f7ed fce4 	bl	8000cdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013314:	e7ee      	b.n	80132f4 <prvIdleTask+0x8>
 8013316:	bf00      	nop
 8013318:	20000d4c 	.word	0x20000d4c
 801331c:	e000ed04 	.word	0xe000ed04

08013320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013326:	2300      	movs	r3, #0
 8013328:	607b      	str	r3, [r7, #4]
 801332a:	e00c      	b.n	8013346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	4613      	mov	r3, r2
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	4413      	add	r3, r2
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	4a12      	ldr	r2, [pc, #72]	@ (8013380 <prvInitialiseTaskLists+0x60>)
 8013338:	4413      	add	r3, r2
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe fafe 	bl	801193c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	3301      	adds	r3, #1
 8013344:	607b      	str	r3, [r7, #4]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b06      	cmp	r3, #6
 801334a:	d9ef      	bls.n	801332c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801334c:	480d      	ldr	r0, [pc, #52]	@ (8013384 <prvInitialiseTaskLists+0x64>)
 801334e:	f7fe faf5 	bl	801193c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013352:	480d      	ldr	r0, [pc, #52]	@ (8013388 <prvInitialiseTaskLists+0x68>)
 8013354:	f7fe faf2 	bl	801193c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013358:	480c      	ldr	r0, [pc, #48]	@ (801338c <prvInitialiseTaskLists+0x6c>)
 801335a:	f7fe faef 	bl	801193c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801335e:	480c      	ldr	r0, [pc, #48]	@ (8013390 <prvInitialiseTaskLists+0x70>)
 8013360:	f7fe faec 	bl	801193c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013364:	480b      	ldr	r0, [pc, #44]	@ (8013394 <prvInitialiseTaskLists+0x74>)
 8013366:	f7fe fae9 	bl	801193c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801336a:	4b0b      	ldr	r3, [pc, #44]	@ (8013398 <prvInitialiseTaskLists+0x78>)
 801336c:	4a05      	ldr	r2, [pc, #20]	@ (8013384 <prvInitialiseTaskLists+0x64>)
 801336e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013370:	4b0a      	ldr	r3, [pc, #40]	@ (801339c <prvInitialiseTaskLists+0x7c>)
 8013372:	4a05      	ldr	r2, [pc, #20]	@ (8013388 <prvInitialiseTaskLists+0x68>)
 8013374:	601a      	str	r2, [r3, #0]
}
 8013376:	bf00      	nop
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	20000d4c 	.word	0x20000d4c
 8013384:	20000dd8 	.word	0x20000dd8
 8013388:	20000dec 	.word	0x20000dec
 801338c:	20000e08 	.word	0x20000e08
 8013390:	20000e1c 	.word	0x20000e1c
 8013394:	20000e34 	.word	0x20000e34
 8013398:	20000e00 	.word	0x20000e00
 801339c:	20000e04 	.word	0x20000e04

080133a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133a6:	e019      	b.n	80133dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133a8:	f000 fbd0 	bl	8013b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133ac:	4b10      	ldr	r3, [pc, #64]	@ (80133f0 <prvCheckTasksWaitingTermination+0x50>)
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3304      	adds	r3, #4
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7fe fb49 	bl	8011a50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133be:	4b0d      	ldr	r3, [pc, #52]	@ (80133f4 <prvCheckTasksWaitingTermination+0x54>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	3b01      	subs	r3, #1
 80133c4:	4a0b      	ldr	r2, [pc, #44]	@ (80133f4 <prvCheckTasksWaitingTermination+0x54>)
 80133c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133c8:	4b0b      	ldr	r3, [pc, #44]	@ (80133f8 <prvCheckTasksWaitingTermination+0x58>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	3b01      	subs	r3, #1
 80133ce:	4a0a      	ldr	r2, [pc, #40]	@ (80133f8 <prvCheckTasksWaitingTermination+0x58>)
 80133d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80133d2:	f000 fbf1 	bl	8013bb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f000 f810 	bl	80133fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133dc:	4b06      	ldr	r3, [pc, #24]	@ (80133f8 <prvCheckTasksWaitingTermination+0x58>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e1      	bne.n	80133a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80133e4:	bf00      	nop
 80133e6:	bf00      	nop
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	bf00      	nop
 80133f0:	20000e1c 	.word	0x20000e1c
 80133f4:	20000e48 	.word	0x20000e48
 80133f8:	20000e30 	.word	0x20000e30

080133fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801340a:	2b00      	cmp	r3, #0
 801340c:	d108      	bne.n	8013420 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013412:	4618      	mov	r0, r3
 8013414:	f000 fd9a 	bl	8013f4c <vPortFree>
				vPortFree( pxTCB );
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 fd97 	bl	8013f4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801341e:	e01b      	b.n	8013458 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8013426:	2b01      	cmp	r3, #1
 8013428:	d103      	bne.n	8013432 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 fd8e 	bl	8013f4c <vPortFree>
	}
 8013430:	e012      	b.n	8013458 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8013438:	2b02      	cmp	r3, #2
 801343a:	d00d      	beq.n	8013458 <prvDeleteTCB+0x5c>
	__asm volatile
 801343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013440:	b672      	cpsid	i
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	b662      	cpsie	i
 8013450:	60fb      	str	r3, [r7, #12]
}
 8013452:	bf00      	nop
 8013454:	bf00      	nop
 8013456:	e7fd      	b.n	8013454 <prvDeleteTCB+0x58>
	}
 8013458:	bf00      	nop
 801345a:	3710      	adds	r7, #16
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013466:	4b0c      	ldr	r3, [pc, #48]	@ (8013498 <prvResetNextTaskUnblockTime+0x38>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d104      	bne.n	801347a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013470:	4b0a      	ldr	r3, [pc, #40]	@ (801349c <prvResetNextTaskUnblockTime+0x3c>)
 8013472:	f04f 32ff 	mov.w	r2, #4294967295
 8013476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013478:	e008      	b.n	801348c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801347a:	4b07      	ldr	r3, [pc, #28]	@ (8013498 <prvResetNextTaskUnblockTime+0x38>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	4a04      	ldr	r2, [pc, #16]	@ (801349c <prvResetNextTaskUnblockTime+0x3c>)
 801348a:	6013      	str	r3, [r2, #0]
}
 801348c:	bf00      	nop
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	20000e00 	.word	0x20000e00
 801349c:	20000e68 	.word	0x20000e68

080134a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134a6:	4b0b      	ldr	r3, [pc, #44]	@ (80134d4 <xTaskGetSchedulerState+0x34>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134ae:	2301      	movs	r3, #1
 80134b0:	607b      	str	r3, [r7, #4]
 80134b2:	e008      	b.n	80134c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134b4:	4b08      	ldr	r3, [pc, #32]	@ (80134d8 <xTaskGetSchedulerState+0x38>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d102      	bne.n	80134c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80134bc:	2302      	movs	r3, #2
 80134be:	607b      	str	r3, [r7, #4]
 80134c0:	e001      	b.n	80134c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80134c2:	2300      	movs	r3, #0
 80134c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134c6:	687b      	ldr	r3, [r7, #4]
	}
 80134c8:	4618      	mov	r0, r3
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	20000e54 	.word	0x20000e54
 80134d8:	20000e70 	.word	0x20000e70

080134dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80134e8:	2300      	movs	r3, #0
 80134ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d069      	beq.n	80135c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134f6:	4b36      	ldr	r3, [pc, #216]	@ (80135d0 <xTaskPriorityInherit+0xf4>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d259      	bcs.n	80135b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	699b      	ldr	r3, [r3, #24]
 8013504:	2b00      	cmp	r3, #0
 8013506:	db06      	blt.n	8013516 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013508:	4b31      	ldr	r3, [pc, #196]	@ (80135d0 <xTaskPriorityInherit+0xf4>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801350e:	f1c3 0207 	rsb	r2, r3, #7
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	6959      	ldr	r1, [r3, #20]
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801351e:	4613      	mov	r3, r2
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	4413      	add	r3, r2
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	4a2b      	ldr	r2, [pc, #172]	@ (80135d4 <xTaskPriorityInherit+0xf8>)
 8013528:	4413      	add	r3, r2
 801352a:	4299      	cmp	r1, r3
 801352c:	d13a      	bne.n	80135a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	3304      	adds	r3, #4
 8013532:	4618      	mov	r0, r3
 8013534:	f7fe fa8c 	bl	8011a50 <uxListRemove>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d115      	bne.n	801356a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013542:	4924      	ldr	r1, [pc, #144]	@ (80135d4 <xTaskPriorityInherit+0xf8>)
 8013544:	4613      	mov	r3, r2
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	4413      	add	r3, r2
 801354a:	009b      	lsls	r3, r3, #2
 801354c:	440b      	add	r3, r1
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d10a      	bne.n	801356a <xTaskPriorityInherit+0x8e>
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013558:	2201      	movs	r2, #1
 801355a:	fa02 f303 	lsl.w	r3, r2, r3
 801355e:	43da      	mvns	r2, r3
 8013560:	4b1d      	ldr	r3, [pc, #116]	@ (80135d8 <xTaskPriorityInherit+0xfc>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	4013      	ands	r3, r2
 8013566:	4a1c      	ldr	r2, [pc, #112]	@ (80135d8 <xTaskPriorityInherit+0xfc>)
 8013568:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801356a:	4b19      	ldr	r3, [pc, #100]	@ (80135d0 <xTaskPriorityInherit+0xf4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013578:	2201      	movs	r2, #1
 801357a:	409a      	lsls	r2, r3
 801357c:	4b16      	ldr	r3, [pc, #88]	@ (80135d8 <xTaskPriorityInherit+0xfc>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4313      	orrs	r3, r2
 8013582:	4a15      	ldr	r2, [pc, #84]	@ (80135d8 <xTaskPriorityInherit+0xfc>)
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	4a10      	ldr	r2, [pc, #64]	@ (80135d4 <xTaskPriorityInherit+0xf8>)
 8013594:	441a      	add	r2, r3
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	3304      	adds	r3, #4
 801359a:	4619      	mov	r1, r3
 801359c:	4610      	mov	r0, r2
 801359e:	f7fe f9fa 	bl	8011996 <vListInsertEnd>
 80135a2:	e004      	b.n	80135ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135a4:	4b0a      	ldr	r3, [pc, #40]	@ (80135d0 <xTaskPriorityInherit+0xf4>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135ae:	2301      	movs	r3, #1
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	e008      	b.n	80135c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135b8:	4b05      	ldr	r3, [pc, #20]	@ (80135d0 <xTaskPriorityInherit+0xf4>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135be:	429a      	cmp	r2, r3
 80135c0:	d201      	bcs.n	80135c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135c2:	2301      	movs	r3, #1
 80135c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135c6:	68fb      	ldr	r3, [r7, #12]
	}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	20000d48 	.word	0x20000d48
 80135d4:	20000d4c 	.word	0x20000d4c
 80135d8:	20000e50 	.word	0x20000e50

080135dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80135e8:	2300      	movs	r3, #0
 80135ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d074      	beq.n	80136dc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80135f2:	4b3d      	ldr	r3, [pc, #244]	@ (80136e8 <xTaskPriorityDisinherit+0x10c>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	693a      	ldr	r2, [r7, #16]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d00d      	beq.n	8013618 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80135fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013600:	b672      	cpsid	i
 8013602:	f383 8811 	msr	BASEPRI, r3
 8013606:	f3bf 8f6f 	isb	sy
 801360a:	f3bf 8f4f 	dsb	sy
 801360e:	b662      	cpsie	i
 8013610:	60fb      	str	r3, [r7, #12]
}
 8013612:	bf00      	nop
 8013614:	bf00      	nop
 8013616:	e7fd      	b.n	8013614 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10d      	bne.n	801363c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8013620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013624:	b672      	cpsid	i
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	b662      	cpsie	i
 8013634:	60bb      	str	r3, [r7, #8]
}
 8013636:	bf00      	nop
 8013638:	bf00      	nop
 801363a:	e7fd      	b.n	8013638 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013640:	1e5a      	subs	r2, r3, #1
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801364e:	429a      	cmp	r2, r3
 8013650:	d044      	beq.n	80136dc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013656:	2b00      	cmp	r3, #0
 8013658:	d140      	bne.n	80136dc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	3304      	adds	r3, #4
 801365e:	4618      	mov	r0, r3
 8013660:	f7fe f9f6 	bl	8011a50 <uxListRemove>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d115      	bne.n	8013696 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801366e:	491f      	ldr	r1, [pc, #124]	@ (80136ec <xTaskPriorityDisinherit+0x110>)
 8013670:	4613      	mov	r3, r2
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	4413      	add	r3, r2
 8013676:	009b      	lsls	r3, r3, #2
 8013678:	440b      	add	r3, r1
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10a      	bne.n	8013696 <xTaskPriorityDisinherit+0xba>
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013684:	2201      	movs	r2, #1
 8013686:	fa02 f303 	lsl.w	r3, r2, r3
 801368a:	43da      	mvns	r2, r3
 801368c:	4b18      	ldr	r3, [pc, #96]	@ (80136f0 <xTaskPriorityDisinherit+0x114>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4013      	ands	r3, r2
 8013692:	4a17      	ldr	r2, [pc, #92]	@ (80136f0 <xTaskPriorityDisinherit+0x114>)
 8013694:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136a2:	f1c3 0207 	rsb	r2, r3, #7
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136ae:	2201      	movs	r2, #1
 80136b0:	409a      	lsls	r2, r3
 80136b2:	4b0f      	ldr	r3, [pc, #60]	@ (80136f0 <xTaskPriorityDisinherit+0x114>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	4313      	orrs	r3, r2
 80136b8:	4a0d      	ldr	r2, [pc, #52]	@ (80136f0 <xTaskPriorityDisinherit+0x114>)
 80136ba:	6013      	str	r3, [r2, #0]
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136c0:	4613      	mov	r3, r2
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	4413      	add	r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	4a08      	ldr	r2, [pc, #32]	@ (80136ec <xTaskPriorityDisinherit+0x110>)
 80136ca:	441a      	add	r2, r3
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	3304      	adds	r3, #4
 80136d0:	4619      	mov	r1, r3
 80136d2:	4610      	mov	r0, r2
 80136d4:	f7fe f95f 	bl	8011996 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136d8:	2301      	movs	r3, #1
 80136da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136dc:	697b      	ldr	r3, [r7, #20]
	}
 80136de:	4618      	mov	r0, r3
 80136e0:	3718      	adds	r7, #24
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20000d48 	.word	0x20000d48
 80136ec:	20000d4c 	.word	0x20000d4c
 80136f0:	20000e50 	.word	0x20000e50

080136f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013702:	2301      	movs	r3, #1
 8013704:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 8089 	beq.w	8013820 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013712:	2b00      	cmp	r3, #0
 8013714:	d10d      	bne.n	8013732 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8013716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801371a:	b672      	cpsid	i
 801371c:	f383 8811 	msr	BASEPRI, r3
 8013720:	f3bf 8f6f 	isb	sy
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	b662      	cpsie	i
 801372a:	60fb      	str	r3, [r7, #12]
}
 801372c:	bf00      	nop
 801372e:	bf00      	nop
 8013730:	e7fd      	b.n	801372e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	429a      	cmp	r2, r3
 801373a:	d902      	bls.n	8013742 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	61fb      	str	r3, [r7, #28]
 8013740:	e002      	b.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013746:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801374c:	69fa      	ldr	r2, [r7, #28]
 801374e:	429a      	cmp	r2, r3
 8013750:	d066      	beq.n	8013820 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013756:	697a      	ldr	r2, [r7, #20]
 8013758:	429a      	cmp	r2, r3
 801375a:	d161      	bne.n	8013820 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801375c:	4b32      	ldr	r3, [pc, #200]	@ (8013828 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	69ba      	ldr	r2, [r7, #24]
 8013762:	429a      	cmp	r2, r3
 8013764:	d10d      	bne.n	8013782 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8013766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801376a:	b672      	cpsid	i
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	b662      	cpsie	i
 801377a:	60bb      	str	r3, [r7, #8]
}
 801377c:	bf00      	nop
 801377e:	bf00      	nop
 8013780:	e7fd      	b.n	801377e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013786:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	69fa      	ldr	r2, [r7, #28]
 801378c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	699b      	ldr	r3, [r3, #24]
 8013792:	2b00      	cmp	r3, #0
 8013794:	db04      	blt.n	80137a0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	f1c3 0207 	rsb	r2, r3, #7
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	6959      	ldr	r1, [r3, #20]
 80137a4:	693a      	ldr	r2, [r7, #16]
 80137a6:	4613      	mov	r3, r2
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	4413      	add	r3, r2
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	4a1f      	ldr	r2, [pc, #124]	@ (801382c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80137b0:	4413      	add	r3, r2
 80137b2:	4299      	cmp	r1, r3
 80137b4:	d134      	bne.n	8013820 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	3304      	adds	r3, #4
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fe f948 	bl	8011a50 <uxListRemove>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d115      	bne.n	80137f2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137ca:	4918      	ldr	r1, [pc, #96]	@ (801382c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80137cc:	4613      	mov	r3, r2
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	4413      	add	r3, r2
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	440b      	add	r3, r1
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10a      	bne.n	80137f2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137e0:	2201      	movs	r2, #1
 80137e2:	fa02 f303 	lsl.w	r3, r2, r3
 80137e6:	43da      	mvns	r2, r3
 80137e8:	4b11      	ldr	r3, [pc, #68]	@ (8013830 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4013      	ands	r3, r2
 80137ee:	4a10      	ldr	r2, [pc, #64]	@ (8013830 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f6:	2201      	movs	r2, #1
 80137f8:	409a      	lsls	r2, r3
 80137fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013830 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	4313      	orrs	r3, r2
 8013800:	4a0b      	ldr	r2, [pc, #44]	@ (8013830 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013802:	6013      	str	r3, [r2, #0]
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013808:	4613      	mov	r3, r2
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4413      	add	r3, r2
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	4a06      	ldr	r2, [pc, #24]	@ (801382c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013812:	441a      	add	r2, r3
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	3304      	adds	r3, #4
 8013818:	4619      	mov	r1, r3
 801381a:	4610      	mov	r0, r2
 801381c:	f7fe f8bb 	bl	8011996 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013820:	bf00      	nop
 8013822:	3720      	adds	r7, #32
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	20000d48 	.word	0x20000d48
 801382c:	20000d4c 	.word	0x20000d4c
 8013830:	20000e50 	.word	0x20000e50

08013834 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013834:	b480      	push	{r7}
 8013836:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013838:	4b07      	ldr	r3, [pc, #28]	@ (8013858 <pvTaskIncrementMutexHeldCount+0x24>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013840:	4b05      	ldr	r3, [pc, #20]	@ (8013858 <pvTaskIncrementMutexHeldCount+0x24>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013846:	3201      	adds	r2, #1
 8013848:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801384a:	4b03      	ldr	r3, [pc, #12]	@ (8013858 <pvTaskIncrementMutexHeldCount+0x24>)
 801384c:	681b      	ldr	r3, [r3, #0]
	}
 801384e:	4618      	mov	r0, r3
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr
 8013858:	20000d48 	.word	0x20000d48

0801385c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013866:	4b29      	ldr	r3, [pc, #164]	@ (801390c <prvAddCurrentTaskToDelayedList+0xb0>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801386c:	4b28      	ldr	r3, [pc, #160]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3304      	adds	r3, #4
 8013872:	4618      	mov	r0, r3
 8013874:	f7fe f8ec 	bl	8011a50 <uxListRemove>
 8013878:	4603      	mov	r3, r0
 801387a:	2b00      	cmp	r3, #0
 801387c:	d10b      	bne.n	8013896 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801387e:	4b24      	ldr	r3, [pc, #144]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013884:	2201      	movs	r2, #1
 8013886:	fa02 f303 	lsl.w	r3, r2, r3
 801388a:	43da      	mvns	r2, r3
 801388c:	4b21      	ldr	r3, [pc, #132]	@ (8013914 <prvAddCurrentTaskToDelayedList+0xb8>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4013      	ands	r3, r2
 8013892:	4a20      	ldr	r2, [pc, #128]	@ (8013914 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013894:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389c:	d10a      	bne.n	80138b4 <prvAddCurrentTaskToDelayedList+0x58>
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d007      	beq.n	80138b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138a4:	4b1a      	ldr	r3, [pc, #104]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	3304      	adds	r3, #4
 80138aa:	4619      	mov	r1, r3
 80138ac:	481a      	ldr	r0, [pc, #104]	@ (8013918 <prvAddCurrentTaskToDelayedList+0xbc>)
 80138ae:	f7fe f872 	bl	8011996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80138b2:	e026      	b.n	8013902 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4413      	add	r3, r2
 80138ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80138bc:	4b14      	ldr	r3, [pc, #80]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d209      	bcs.n	80138e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138cc:	4b13      	ldr	r3, [pc, #76]	@ (801391c <prvAddCurrentTaskToDelayedList+0xc0>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	4b0f      	ldr	r3, [pc, #60]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3304      	adds	r3, #4
 80138d6:	4619      	mov	r1, r3
 80138d8:	4610      	mov	r0, r2
 80138da:	f7fe f880 	bl	80119de <vListInsert>
}
 80138de:	e010      	b.n	8013902 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013920 <prvAddCurrentTaskToDelayedList+0xc4>)
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	3304      	adds	r3, #4
 80138ea:	4619      	mov	r1, r3
 80138ec:	4610      	mov	r0, r2
 80138ee:	f7fe f876 	bl	80119de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80138f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013924 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d202      	bcs.n	8013902 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80138fc:	4a09      	ldr	r2, [pc, #36]	@ (8013924 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	6013      	str	r3, [r2, #0]
}
 8013902:	bf00      	nop
 8013904:	3710      	adds	r7, #16
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
 801390a:	bf00      	nop
 801390c:	20000e4c 	.word	0x20000e4c
 8013910:	20000d48 	.word	0x20000d48
 8013914:	20000e50 	.word	0x20000e50
 8013918:	20000e34 	.word	0x20000e34
 801391c:	20000e04 	.word	0x20000e04
 8013920:	20000e00 	.word	0x20000e00
 8013924:	20000e68 	.word	0x20000e68

08013928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	3b04      	subs	r3, #4
 8013938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	3b04      	subs	r3, #4
 8013946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	f023 0201 	bic.w	r2, r3, #1
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	3b04      	subs	r3, #4
 8013956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013958:	4a0c      	ldr	r2, [pc, #48]	@ (801398c <pxPortInitialiseStack+0x64>)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	3b14      	subs	r3, #20
 8013962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	3b04      	subs	r3, #4
 801396e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f06f 0202 	mvn.w	r2, #2
 8013976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	3b20      	subs	r3, #32
 801397c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801397e:	68fb      	ldr	r3, [r7, #12]
}
 8013980:	4618      	mov	r0, r3
 8013982:	3714      	adds	r7, #20
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	08013991 	.word	0x08013991

08013990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013996:	2300      	movs	r3, #0
 8013998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801399a:	4b15      	ldr	r3, [pc, #84]	@ (80139f0 <prvTaskExitError+0x60>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a2:	d00d      	beq.n	80139c0 <prvTaskExitError+0x30>
	__asm volatile
 80139a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a8:	b672      	cpsid	i
 80139aa:	f383 8811 	msr	BASEPRI, r3
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	f3bf 8f4f 	dsb	sy
 80139b6:	b662      	cpsie	i
 80139b8:	60fb      	str	r3, [r7, #12]
}
 80139ba:	bf00      	nop
 80139bc:	bf00      	nop
 80139be:	e7fd      	b.n	80139bc <prvTaskExitError+0x2c>
	__asm volatile
 80139c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139c4:	b672      	cpsid	i
 80139c6:	f383 8811 	msr	BASEPRI, r3
 80139ca:	f3bf 8f6f 	isb	sy
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	b662      	cpsie	i
 80139d4:	60bb      	str	r3, [r7, #8]
}
 80139d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80139d8:	bf00      	nop
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d0fc      	beq.n	80139da <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80139e0:	bf00      	nop
 80139e2:	bf00      	nop
 80139e4:	3714      	adds	r7, #20
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	2000002c 	.word	0x2000002c
	...

08013a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a00:	4b07      	ldr	r3, [pc, #28]	@ (8013a20 <pxCurrentTCBConst2>)
 8013a02:	6819      	ldr	r1, [r3, #0]
 8013a04:	6808      	ldr	r0, [r1, #0]
 8013a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0a:	f380 8809 	msr	PSP, r0
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f04f 0000 	mov.w	r0, #0
 8013a16:	f380 8811 	msr	BASEPRI, r0
 8013a1a:	4770      	bx	lr
 8013a1c:	f3af 8000 	nop.w

08013a20 <pxCurrentTCBConst2>:
 8013a20:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013a24:	bf00      	nop
 8013a26:	bf00      	nop

08013a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013a28:	4808      	ldr	r0, [pc, #32]	@ (8013a4c <prvPortStartFirstTask+0x24>)
 8013a2a:	6800      	ldr	r0, [r0, #0]
 8013a2c:	6800      	ldr	r0, [r0, #0]
 8013a2e:	f380 8808 	msr	MSP, r0
 8013a32:	f04f 0000 	mov.w	r0, #0
 8013a36:	f380 8814 	msr	CONTROL, r0
 8013a3a:	b662      	cpsie	i
 8013a3c:	b661      	cpsie	f
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	f3bf 8f6f 	isb	sy
 8013a46:	df00      	svc	0
 8013a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013a4a:	bf00      	nop
 8013a4c:	e000ed08 	.word	0xe000ed08

08013a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013a56:	4b37      	ldr	r3, [pc, #220]	@ (8013b34 <xPortStartScheduler+0xe4>)
 8013a58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	22ff      	movs	r2, #255	@ 0xff
 8013a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013a70:	78fb      	ldrb	r3, [r7, #3]
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8013b38 <xPortStartScheduler+0xe8>)
 8013a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013a80:	2207      	movs	r2, #7
 8013a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a84:	e009      	b.n	8013a9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013a86:	4b2d      	ldr	r3, [pc, #180]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013a90:	78fb      	ldrb	r3, [r7, #3]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a9a:	78fb      	ldrb	r3, [r7, #3]
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013aa2:	2b80      	cmp	r3, #128	@ 0x80
 8013aa4:	d0ef      	beq.n	8013a86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013aa6:	4b25      	ldr	r3, [pc, #148]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f1c3 0307 	rsb	r3, r3, #7
 8013aae:	2b04      	cmp	r3, #4
 8013ab0:	d00d      	beq.n	8013ace <xPortStartScheduler+0x7e>
	__asm volatile
 8013ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ab6:	b672      	cpsid	i
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	b662      	cpsie	i
 8013ac6:	60bb      	str	r3, [r7, #8]
}
 8013ac8:	bf00      	nop
 8013aca:	bf00      	nop
 8013acc:	e7fd      	b.n	8013aca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013ace:	4b1b      	ldr	r3, [pc, #108]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	021b      	lsls	r3, r3, #8
 8013ad4:	4a19      	ldr	r2, [pc, #100]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013ad8:	4b18      	ldr	r3, [pc, #96]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013ae0:	4a16      	ldr	r2, [pc, #88]	@ (8013b3c <xPortStartScheduler+0xec>)
 8013ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	b2da      	uxtb	r2, r3
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013aec:	4b14      	ldr	r3, [pc, #80]	@ (8013b40 <xPortStartScheduler+0xf0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a13      	ldr	r2, [pc, #76]	@ (8013b40 <xPortStartScheduler+0xf0>)
 8013af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013af8:	4b11      	ldr	r3, [pc, #68]	@ (8013b40 <xPortStartScheduler+0xf0>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	4a10      	ldr	r2, [pc, #64]	@ (8013b40 <xPortStartScheduler+0xf0>)
 8013afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013b04:	f000 f8dc 	bl	8013cc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013b08:	4b0e      	ldr	r3, [pc, #56]	@ (8013b44 <xPortStartScheduler+0xf4>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013b0e:	f000 f8fb 	bl	8013d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013b12:	4b0d      	ldr	r3, [pc, #52]	@ (8013b48 <xPortStartScheduler+0xf8>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	4a0c      	ldr	r2, [pc, #48]	@ (8013b48 <xPortStartScheduler+0xf8>)
 8013b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013b1e:	f7ff ff83 	bl	8013a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013b22:	f7ff fa47 	bl	8012fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8013b26:	f7ff ff33 	bl	8013990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3710      	adds	r7, #16
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	e000e400 	.word	0xe000e400
 8013b38:	20000e74 	.word	0x20000e74
 8013b3c:	20000e78 	.word	0x20000e78
 8013b40:	e000ed20 	.word	0xe000ed20
 8013b44:	2000002c 	.word	0x2000002c
 8013b48:	e000ef34 	.word	0xe000ef34

08013b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
	__asm volatile
 8013b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b56:	b672      	cpsid	i
 8013b58:	f383 8811 	msr	BASEPRI, r3
 8013b5c:	f3bf 8f6f 	isb	sy
 8013b60:	f3bf 8f4f 	dsb	sy
 8013b64:	b662      	cpsie	i
 8013b66:	607b      	str	r3, [r7, #4]
}
 8013b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013b6a:	4b11      	ldr	r3, [pc, #68]	@ (8013bb0 <vPortEnterCritical+0x64>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	4a0f      	ldr	r2, [pc, #60]	@ (8013bb0 <vPortEnterCritical+0x64>)
 8013b72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013b74:	4b0e      	ldr	r3, [pc, #56]	@ (8013bb0 <vPortEnterCritical+0x64>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d112      	bne.n	8013ba2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb4 <vPortEnterCritical+0x68>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d00d      	beq.n	8013ba2 <vPortEnterCritical+0x56>
	__asm volatile
 8013b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b8a:	b672      	cpsid	i
 8013b8c:	f383 8811 	msr	BASEPRI, r3
 8013b90:	f3bf 8f6f 	isb	sy
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	b662      	cpsie	i
 8013b9a:	603b      	str	r3, [r7, #0]
}
 8013b9c:	bf00      	nop
 8013b9e:	bf00      	nop
 8013ba0:	e7fd      	b.n	8013b9e <vPortEnterCritical+0x52>
	}
}
 8013ba2:	bf00      	nop
 8013ba4:	370c      	adds	r7, #12
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop
 8013bb0:	2000002c 	.word	0x2000002c
 8013bb4:	e000ed04 	.word	0xe000ed04

08013bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013bbe:	4b13      	ldr	r3, [pc, #76]	@ (8013c0c <vPortExitCritical+0x54>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10d      	bne.n	8013be2 <vPortExitCritical+0x2a>
	__asm volatile
 8013bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bca:	b672      	cpsid	i
 8013bcc:	f383 8811 	msr	BASEPRI, r3
 8013bd0:	f3bf 8f6f 	isb	sy
 8013bd4:	f3bf 8f4f 	dsb	sy
 8013bd8:	b662      	cpsie	i
 8013bda:	607b      	str	r3, [r7, #4]
}
 8013bdc:	bf00      	nop
 8013bde:	bf00      	nop
 8013be0:	e7fd      	b.n	8013bde <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013be2:	4b0a      	ldr	r3, [pc, #40]	@ (8013c0c <vPortExitCritical+0x54>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	3b01      	subs	r3, #1
 8013be8:	4a08      	ldr	r2, [pc, #32]	@ (8013c0c <vPortExitCritical+0x54>)
 8013bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013bec:	4b07      	ldr	r3, [pc, #28]	@ (8013c0c <vPortExitCritical+0x54>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d105      	bne.n	8013c00 <vPortExitCritical+0x48>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	f383 8811 	msr	BASEPRI, r3
}
 8013bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013c00:	bf00      	nop
 8013c02:	370c      	adds	r7, #12
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr
 8013c0c:	2000002c 	.word	0x2000002c

08013c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013c10:	f3ef 8009 	mrs	r0, PSP
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	4b15      	ldr	r3, [pc, #84]	@ (8013c70 <pxCurrentTCBConst>)
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	f01e 0f10 	tst.w	lr, #16
 8013c20:	bf08      	it	eq
 8013c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c2a:	6010      	str	r0, [r2, #0]
 8013c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013c34:	b672      	cpsid	i
 8013c36:	f380 8811 	msr	BASEPRI, r0
 8013c3a:	f3bf 8f4f 	dsb	sy
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	b662      	cpsie	i
 8013c44:	f7ff f9b6 	bl	8012fb4 <vTaskSwitchContext>
 8013c48:	f04f 0000 	mov.w	r0, #0
 8013c4c:	f380 8811 	msr	BASEPRI, r0
 8013c50:	bc09      	pop	{r0, r3}
 8013c52:	6819      	ldr	r1, [r3, #0]
 8013c54:	6808      	ldr	r0, [r1, #0]
 8013c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5a:	f01e 0f10 	tst.w	lr, #16
 8013c5e:	bf08      	it	eq
 8013c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013c64:	f380 8809 	msr	PSP, r0
 8013c68:	f3bf 8f6f 	isb	sy
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop

08013c70 <pxCurrentTCBConst>:
 8013c70:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013c74:	bf00      	nop
 8013c76:	bf00      	nop

08013c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8013c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c82:	b672      	cpsid	i
 8013c84:	f383 8811 	msr	BASEPRI, r3
 8013c88:	f3bf 8f6f 	isb	sy
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	b662      	cpsie	i
 8013c92:	607b      	str	r3, [r7, #4]
}
 8013c94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013c96:	f7ff f8d1 	bl	8012e3c <xTaskIncrementTick>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d003      	beq.n	8013ca8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013ca0:	4b06      	ldr	r3, [pc, #24]	@ (8013cbc <SysTick_Handler+0x44>)
 8013ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ca6:	601a      	str	r2, [r3, #0]
 8013ca8:	2300      	movs	r3, #0
 8013caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	f383 8811 	msr	BASEPRI, r3
}
 8013cb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013cb4:	bf00      	nop
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	e000ed04 	.word	0xe000ed04

08013cc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf4 <vPortSetupTimerInterrupt+0x34>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013cca:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf8 <vPortSetupTimerInterrupt+0x38>)
 8013ccc:	2200      	movs	r2, #0
 8013cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8013cfc <vPortSetupTimerInterrupt+0x3c>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8013d00 <vPortSetupTimerInterrupt+0x40>)
 8013cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8013cda:	099b      	lsrs	r3, r3, #6
 8013cdc:	4a09      	ldr	r2, [pc, #36]	@ (8013d04 <vPortSetupTimerInterrupt+0x44>)
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013ce2:	4b04      	ldr	r3, [pc, #16]	@ (8013cf4 <vPortSetupTimerInterrupt+0x34>)
 8013ce4:	2207      	movs	r2, #7
 8013ce6:	601a      	str	r2, [r3, #0]
}
 8013ce8:	bf00      	nop
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	e000e010 	.word	0xe000e010
 8013cf8:	e000e018 	.word	0xe000e018
 8013cfc:	20000000 	.word	0x20000000
 8013d00:	10624dd3 	.word	0x10624dd3
 8013d04:	e000e014 	.word	0xe000e014

08013d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013d08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013d18 <vPortEnableVFP+0x10>
 8013d0c:	6801      	ldr	r1, [r0, #0]
 8013d0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013d12:	6001      	str	r1, [r0, #0]
 8013d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013d16:	bf00      	nop
 8013d18:	e000ed88 	.word	0xe000ed88

08013d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013d22:	f3ef 8305 	mrs	r3, IPSR
 8013d26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2b0f      	cmp	r3, #15
 8013d2c:	d917      	bls.n	8013d5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8013d98 <vPortValidateInterruptPriority+0x7c>)
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	4413      	add	r3, r2
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013d38:	4b18      	ldr	r3, [pc, #96]	@ (8013d9c <vPortValidateInterruptPriority+0x80>)
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	7afa      	ldrb	r2, [r7, #11]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d20d      	bcs.n	8013d5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d46:	b672      	cpsid	i
 8013d48:	f383 8811 	msr	BASEPRI, r3
 8013d4c:	f3bf 8f6f 	isb	sy
 8013d50:	f3bf 8f4f 	dsb	sy
 8013d54:	b662      	cpsie	i
 8013d56:	607b      	str	r3, [r7, #4]
}
 8013d58:	bf00      	nop
 8013d5a:	bf00      	nop
 8013d5c:	e7fd      	b.n	8013d5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013d5e:	4b10      	ldr	r3, [pc, #64]	@ (8013da0 <vPortValidateInterruptPriority+0x84>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013d66:	4b0f      	ldr	r3, [pc, #60]	@ (8013da4 <vPortValidateInterruptPriority+0x88>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d90d      	bls.n	8013d8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8013d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d72:	b672      	cpsid	i
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	b662      	cpsie	i
 8013d82:	603b      	str	r3, [r7, #0]
}
 8013d84:	bf00      	nop
 8013d86:	bf00      	nop
 8013d88:	e7fd      	b.n	8013d86 <vPortValidateInterruptPriority+0x6a>
	}
 8013d8a:	bf00      	nop
 8013d8c:	3714      	adds	r7, #20
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	e000e3f0 	.word	0xe000e3f0
 8013d9c:	20000e74 	.word	0x20000e74
 8013da0:	e000ed0c 	.word	0xe000ed0c
 8013da4:	20000e78 	.word	0x20000e78

08013da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08a      	sub	sp, #40	@ 0x28
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013db0:	2300      	movs	r3, #0
 8013db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013db4:	f7fe ff72 	bl	8012c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013db8:	4b5f      	ldr	r3, [pc, #380]	@ (8013f38 <pvPortMalloc+0x190>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d101      	bne.n	8013dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013dc0:	f000 f924 	bl	801400c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8013f3c <pvPortMalloc+0x194>)
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	4013      	ands	r3, r2
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f040 8094 	bne.w	8013efa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d020      	beq.n	8013e1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013dd8:	2208      	movs	r2, #8
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4413      	add	r3, r2
 8013dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f003 0307 	and.w	r3, r3, #7
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d017      	beq.n	8013e1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f023 0307 	bic.w	r3, r3, #7
 8013df0:	3308      	adds	r3, #8
 8013df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f003 0307 	and.w	r3, r3, #7
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00d      	beq.n	8013e1a <pvPortMalloc+0x72>
	__asm volatile
 8013dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e02:	b672      	cpsid	i
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	b662      	cpsie	i
 8013e12:	617b      	str	r3, [r7, #20]
}
 8013e14:	bf00      	nop
 8013e16:	bf00      	nop
 8013e18:	e7fd      	b.n	8013e16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d06c      	beq.n	8013efa <pvPortMalloc+0x152>
 8013e20:	4b47      	ldr	r3, [pc, #284]	@ (8013f40 <pvPortMalloc+0x198>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d867      	bhi.n	8013efa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013e2a:	4b46      	ldr	r3, [pc, #280]	@ (8013f44 <pvPortMalloc+0x19c>)
 8013e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013e2e:	4b45      	ldr	r3, [pc, #276]	@ (8013f44 <pvPortMalloc+0x19c>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e34:	e004      	b.n	8013e40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	687a      	ldr	r2, [r7, #4]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d903      	bls.n	8013e52 <pvPortMalloc+0xaa>
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d1f1      	bne.n	8013e36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013e52:	4b39      	ldr	r3, [pc, #228]	@ (8013f38 <pvPortMalloc+0x190>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d04e      	beq.n	8013efa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013e5c:	6a3b      	ldr	r3, [r7, #32]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2208      	movs	r2, #8
 8013e62:	4413      	add	r3, r2
 8013e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	6a3b      	ldr	r3, [r7, #32]
 8013e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	1ad2      	subs	r2, r2, r3
 8013e76:	2308      	movs	r3, #8
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d922      	bls.n	8013ec4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	4413      	add	r3, r2
 8013e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e86:	69bb      	ldr	r3, [r7, #24]
 8013e88:	f003 0307 	and.w	r3, r3, #7
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00d      	beq.n	8013eac <pvPortMalloc+0x104>
	__asm volatile
 8013e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e94:	b672      	cpsid	i
 8013e96:	f383 8811 	msr	BASEPRI, r3
 8013e9a:	f3bf 8f6f 	isb	sy
 8013e9e:	f3bf 8f4f 	dsb	sy
 8013ea2:	b662      	cpsie	i
 8013ea4:	613b      	str	r3, [r7, #16]
}
 8013ea6:	bf00      	nop
 8013ea8:	bf00      	nop
 8013eaa:	e7fd      	b.n	8013ea8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	1ad2      	subs	r2, r2, r3
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013ebe:	69b8      	ldr	r0, [r7, #24]
 8013ec0:	f000 f906 	bl	80140d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8013f40 <pvPortMalloc+0x198>)
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	1ad3      	subs	r3, r2, r3
 8013ece:	4a1c      	ldr	r2, [pc, #112]	@ (8013f40 <pvPortMalloc+0x198>)
 8013ed0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8013f40 <pvPortMalloc+0x198>)
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8013f48 <pvPortMalloc+0x1a0>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d203      	bcs.n	8013ee6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013ede:	4b18      	ldr	r3, [pc, #96]	@ (8013f40 <pvPortMalloc+0x198>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4a19      	ldr	r2, [pc, #100]	@ (8013f48 <pvPortMalloc+0x1a0>)
 8013ee4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee8:	685a      	ldr	r2, [r3, #4]
 8013eea:	4b14      	ldr	r3, [pc, #80]	@ (8013f3c <pvPortMalloc+0x194>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	431a      	orrs	r2, r3
 8013ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013efa:	f7fe fedd 	bl	8012cb8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d101      	bne.n	8013f08 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013f04:	f7ec fefc 	bl	8000d00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	f003 0307 	and.w	r3, r3, #7
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d00d      	beq.n	8013f2e <pvPortMalloc+0x186>
	__asm volatile
 8013f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f16:	b672      	cpsid	i
 8013f18:	f383 8811 	msr	BASEPRI, r3
 8013f1c:	f3bf 8f6f 	isb	sy
 8013f20:	f3bf 8f4f 	dsb	sy
 8013f24:	b662      	cpsie	i
 8013f26:	60fb      	str	r3, [r7, #12]
}
 8013f28:	bf00      	nop
 8013f2a:	bf00      	nop
 8013f2c:	e7fd      	b.n	8013f2a <pvPortMalloc+0x182>
	return pvReturn;
 8013f2e:	69fb      	ldr	r3, [r7, #28]
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3728      	adds	r7, #40	@ 0x28
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20008e84 	.word	0x20008e84
 8013f3c:	20008e90 	.word	0x20008e90
 8013f40:	20008e88 	.word	0x20008e88
 8013f44:	20008e7c 	.word	0x20008e7c
 8013f48:	20008e8c 	.word	0x20008e8c

08013f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b086      	sub	sp, #24
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d04e      	beq.n	8013ffc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013f5e:	2308      	movs	r3, #8
 8013f60:	425b      	negs	r3, r3
 8013f62:	697a      	ldr	r2, [r7, #20]
 8013f64:	4413      	add	r3, r2
 8013f66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	685a      	ldr	r2, [r3, #4]
 8013f70:	4b24      	ldr	r3, [pc, #144]	@ (8014004 <vPortFree+0xb8>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4013      	ands	r3, r2
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d10d      	bne.n	8013f96 <vPortFree+0x4a>
	__asm volatile
 8013f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7e:	b672      	cpsid	i
 8013f80:	f383 8811 	msr	BASEPRI, r3
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	f3bf 8f4f 	dsb	sy
 8013f8c:	b662      	cpsie	i
 8013f8e:	60fb      	str	r3, [r7, #12]
}
 8013f90:	bf00      	nop
 8013f92:	bf00      	nop
 8013f94:	e7fd      	b.n	8013f92 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00d      	beq.n	8013fba <vPortFree+0x6e>
	__asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fa2:	b672      	cpsid	i
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	b662      	cpsie	i
 8013fb2:	60bb      	str	r3, [r7, #8]
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop
 8013fb8:	e7fd      	b.n	8013fb6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	685a      	ldr	r2, [r3, #4]
 8013fbe:	4b11      	ldr	r3, [pc, #68]	@ (8014004 <vPortFree+0xb8>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d019      	beq.n	8013ffc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d115      	bne.n	8013ffc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	685a      	ldr	r2, [r3, #4]
 8013fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8014004 <vPortFree+0xb8>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	43db      	mvns	r3, r3
 8013fda:	401a      	ands	r2, r3
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013fe0:	f7fe fe5c 	bl	8012c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	685a      	ldr	r2, [r3, #4]
 8013fe8:	4b07      	ldr	r3, [pc, #28]	@ (8014008 <vPortFree+0xbc>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4413      	add	r3, r2
 8013fee:	4a06      	ldr	r2, [pc, #24]	@ (8014008 <vPortFree+0xbc>)
 8013ff0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013ff2:	6938      	ldr	r0, [r7, #16]
 8013ff4:	f000 f86c 	bl	80140d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013ff8:	f7fe fe5e 	bl	8012cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013ffc:	bf00      	nop
 8013ffe:	3718      	adds	r7, #24
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20008e90 	.word	0x20008e90
 8014008:	20008e88 	.word	0x20008e88

0801400c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801400c:	b480      	push	{r7}
 801400e:	b085      	sub	sp, #20
 8014010:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014016:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014018:	4b27      	ldr	r3, [pc, #156]	@ (80140b8 <prvHeapInit+0xac>)
 801401a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f003 0307 	and.w	r3, r3, #7
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00c      	beq.n	8014040 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	3307      	adds	r3, #7
 801402a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f023 0307 	bic.w	r3, r3, #7
 8014032:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014034:	68ba      	ldr	r2, [r7, #8]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	1ad3      	subs	r3, r2, r3
 801403a:	4a1f      	ldr	r2, [pc, #124]	@ (80140b8 <prvHeapInit+0xac>)
 801403c:	4413      	add	r3, r2
 801403e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014044:	4a1d      	ldr	r2, [pc, #116]	@ (80140bc <prvHeapInit+0xb0>)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801404a:	4b1c      	ldr	r3, [pc, #112]	@ (80140bc <prvHeapInit+0xb0>)
 801404c:	2200      	movs	r2, #0
 801404e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	68ba      	ldr	r2, [r7, #8]
 8014054:	4413      	add	r3, r2
 8014056:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014058:	2208      	movs	r2, #8
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	1a9b      	subs	r3, r3, r2
 801405e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f023 0307 	bic.w	r3, r3, #7
 8014066:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	4a15      	ldr	r2, [pc, #84]	@ (80140c0 <prvHeapInit+0xb4>)
 801406c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801406e:	4b14      	ldr	r3, [pc, #80]	@ (80140c0 <prvHeapInit+0xb4>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	2200      	movs	r2, #0
 8014074:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014076:	4b12      	ldr	r3, [pc, #72]	@ (80140c0 <prvHeapInit+0xb4>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	2200      	movs	r2, #0
 801407c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	1ad2      	subs	r2, r2, r3
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801408c:	4b0c      	ldr	r3, [pc, #48]	@ (80140c0 <prvHeapInit+0xb4>)
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	4a0a      	ldr	r2, [pc, #40]	@ (80140c4 <prvHeapInit+0xb8>)
 801409a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	4a09      	ldr	r2, [pc, #36]	@ (80140c8 <prvHeapInit+0xbc>)
 80140a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80140a4:	4b09      	ldr	r3, [pc, #36]	@ (80140cc <prvHeapInit+0xc0>)
 80140a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80140aa:	601a      	str	r2, [r3, #0]
}
 80140ac:	bf00      	nop
 80140ae:	3714      	adds	r7, #20
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr
 80140b8:	20000e7c 	.word	0x20000e7c
 80140bc:	20008e7c 	.word	0x20008e7c
 80140c0:	20008e84 	.word	0x20008e84
 80140c4:	20008e8c 	.word	0x20008e8c
 80140c8:	20008e88 	.word	0x20008e88
 80140cc:	20008e90 	.word	0x20008e90

080140d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80140d0:	b480      	push	{r7}
 80140d2:	b085      	sub	sp, #20
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80140d8:	4b28      	ldr	r3, [pc, #160]	@ (801417c <prvInsertBlockIntoFreeList+0xac>)
 80140da:	60fb      	str	r3, [r7, #12]
 80140dc:	e002      	b.n	80140e4 <prvInsertBlockIntoFreeList+0x14>
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	60fb      	str	r3, [r7, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d8f7      	bhi.n	80140de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	68ba      	ldr	r2, [r7, #8]
 80140f8:	4413      	add	r3, r2
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d108      	bne.n	8014112 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	685a      	ldr	r2, [r3, #4]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	441a      	add	r2, r3
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	441a      	add	r2, r3
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	429a      	cmp	r2, r3
 8014124:	d118      	bne.n	8014158 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	681a      	ldr	r2, [r3, #0]
 801412a:	4b15      	ldr	r3, [pc, #84]	@ (8014180 <prvInsertBlockIntoFreeList+0xb0>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	429a      	cmp	r2, r3
 8014130:	d00d      	beq.n	801414e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	685a      	ldr	r2, [r3, #4]
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	441a      	add	r2, r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	601a      	str	r2, [r3, #0]
 801414c:	e008      	b.n	8014160 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801414e:	4b0c      	ldr	r3, [pc, #48]	@ (8014180 <prvInsertBlockIntoFreeList+0xb0>)
 8014150:	681a      	ldr	r2, [r3, #0]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	601a      	str	r2, [r3, #0]
 8014156:	e003      	b.n	8014160 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014160:	68fa      	ldr	r2, [r7, #12]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	429a      	cmp	r2, r3
 8014166:	d002      	beq.n	801416e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801416e:	bf00      	nop
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop
 801417c:	20008e7c 	.word	0x20008e7c
 8014180:	20008e84 	.word	0x20008e84

08014184 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014188:	2201      	movs	r2, #1
 801418a:	490e      	ldr	r1, [pc, #56]	@ (80141c4 <MX_USB_HOST_Init+0x40>)
 801418c:	480e      	ldr	r0, [pc, #56]	@ (80141c8 <MX_USB_HOST_Init+0x44>)
 801418e:	f7fb fad9 	bl	800f744 <USBH_Init>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d001      	beq.n	801419c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014198:	f7ed fc28 	bl	80019ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801419c:	490b      	ldr	r1, [pc, #44]	@ (80141cc <MX_USB_HOST_Init+0x48>)
 801419e:	480a      	ldr	r0, [pc, #40]	@ (80141c8 <MX_USB_HOST_Init+0x44>)
 80141a0:	f7fb fba5 	bl	800f8ee <USBH_RegisterClass>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80141aa:	f7ed fc1f 	bl	80019ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80141ae:	4806      	ldr	r0, [pc, #24]	@ (80141c8 <MX_USB_HOST_Init+0x44>)
 80141b0:	f7fb fc29 	bl	800fa06 <USBH_Start>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80141ba:	f7ed fc17 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80141be:	bf00      	nop
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	080141d1 	.word	0x080141d1
 80141c8:	20008e94 	.word	0x20008e94
 80141cc:	2000000c 	.word	0x2000000c

080141d0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	460b      	mov	r3, r1
 80141da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80141dc:	78fb      	ldrb	r3, [r7, #3]
 80141de:	3b01      	subs	r3, #1
 80141e0:	2b04      	cmp	r3, #4
 80141e2:	d819      	bhi.n	8014218 <USBH_UserProcess+0x48>
 80141e4:	a201      	add	r2, pc, #4	@ (adr r2, 80141ec <USBH_UserProcess+0x1c>)
 80141e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ea:	bf00      	nop
 80141ec:	08014219 	.word	0x08014219
 80141f0:	08014209 	.word	0x08014209
 80141f4:	08014219 	.word	0x08014219
 80141f8:	08014211 	.word	0x08014211
 80141fc:	08014201 	.word	0x08014201
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014200:	4b09      	ldr	r3, [pc, #36]	@ (8014228 <USBH_UserProcess+0x58>)
 8014202:	2203      	movs	r2, #3
 8014204:	701a      	strb	r2, [r3, #0]
  break;
 8014206:	e008      	b.n	801421a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014208:	4b07      	ldr	r3, [pc, #28]	@ (8014228 <USBH_UserProcess+0x58>)
 801420a:	2202      	movs	r2, #2
 801420c:	701a      	strb	r2, [r3, #0]
  break;
 801420e:	e004      	b.n	801421a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014210:	4b05      	ldr	r3, [pc, #20]	@ (8014228 <USBH_UserProcess+0x58>)
 8014212:	2201      	movs	r2, #1
 8014214:	701a      	strb	r2, [r3, #0]
  break;
 8014216:	e000      	b.n	801421a <USBH_UserProcess+0x4a>

  default:
  break;
 8014218:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801421a:	bf00      	nop
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr
 8014226:	bf00      	nop
 8014228:	20009278 	.word	0x20009278

0801422c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b08a      	sub	sp, #40	@ 0x28
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014234:	f107 0314 	add.w	r3, r7, #20
 8014238:	2200      	movs	r2, #0
 801423a:	601a      	str	r2, [r3, #0]
 801423c:	605a      	str	r2, [r3, #4]
 801423e:	609a      	str	r2, [r3, #8]
 8014240:	60da      	str	r2, [r3, #12]
 8014242:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801424c:	d13c      	bne.n	80142c8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801424e:	4b20      	ldr	r3, [pc, #128]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 8014250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014252:	4a1f      	ldr	r2, [pc, #124]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 8014254:	f043 0301 	orr.w	r3, r3, #1
 8014258:	6313      	str	r3, [r2, #48]	@ 0x30
 801425a:	4b1d      	ldr	r3, [pc, #116]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 801425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801425e:	f003 0301 	and.w	r3, r3, #1
 8014262:	613b      	str	r3, [r7, #16]
 8014264:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014266:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801426a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801426c:	2302      	movs	r3, #2
 801426e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014270:	2300      	movs	r3, #0
 8014272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014274:	2303      	movs	r3, #3
 8014276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014278:	230a      	movs	r3, #10
 801427a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801427c:	f107 0314 	add.w	r3, r7, #20
 8014280:	4619      	mov	r1, r3
 8014282:	4814      	ldr	r0, [pc, #80]	@ (80142d4 <HAL_HCD_MspInit+0xa8>)
 8014284:	f7f0 fa10 	bl	80046a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014288:	4b11      	ldr	r3, [pc, #68]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 801428a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801428c:	4a10      	ldr	r2, [pc, #64]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 801428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014292:	6353      	str	r3, [r2, #52]	@ 0x34
 8014294:	4b0e      	ldr	r3, [pc, #56]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 8014296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801429c:	60fb      	str	r3, [r7, #12]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	4b0b      	ldr	r3, [pc, #44]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 80142a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142a4:	4a0a      	ldr	r2, [pc, #40]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 80142a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80142aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80142ac:	4b08      	ldr	r3, [pc, #32]	@ (80142d0 <HAL_HCD_MspInit+0xa4>)
 80142ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80142b4:	60bb      	str	r3, [r7, #8]
 80142b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80142b8:	2200      	movs	r2, #0
 80142ba:	2105      	movs	r1, #5
 80142bc:	2043      	movs	r0, #67	@ 0x43
 80142be:	f7ef f9f7 	bl	80036b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80142c2:	2043      	movs	r0, #67	@ 0x43
 80142c4:	f7ef fa10 	bl	80036e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80142c8:	bf00      	nop
 80142ca:	3728      	adds	r7, #40	@ 0x28
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	40023800 	.word	0x40023800
 80142d4:	40020000 	.word	0x40020000

080142d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7fc f83f 	bl	801036a <USBH_LL_IncTimer>
}
 80142ec:	bf00      	nop
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014302:	4618      	mov	r0, r3
 8014304:	f7fc f883 	bl	801040e <USBH_LL_Connect>
}
 8014308:	bf00      	nop
 801430a:	3708      	adds	r7, #8
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801431e:	4618      	mov	r0, r3
 8014320:	f7fc f898 	bl	8010454 <USBH_LL_Disconnect>
}
 8014324:	bf00      	nop
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	460b      	mov	r3, r1
 8014336:	70fb      	strb	r3, [r7, #3]
 8014338:	4613      	mov	r3, r2
 801433a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014342:	4618      	mov	r0, r3
 8014344:	f7fc f8cd 	bl	80104e2 <USBH_LL_NotifyURBChange>
#endif
}
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801435e:	4618      	mov	r0, r3
 8014360:	f7fc f82d 	bl	80103be <USBH_LL_PortEnabled>
}
 8014364:	bf00      	nop
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801437a:	4618      	mov	r0, r3
 801437c:	f7fc f839 	bl	80103f2 <USBH_LL_PortDisabled>
}
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014396:	2b01      	cmp	r3, #1
 8014398:	d12a      	bne.n	80143f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801439a:	4a18      	ldr	r2, [pc, #96]	@ (80143fc <USBH_LL_Init+0x74>)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	4a15      	ldr	r2, [pc, #84]	@ (80143fc <USBH_LL_Init+0x74>)
 80143a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80143aa:	4b14      	ldr	r3, [pc, #80]	@ (80143fc <USBH_LL_Init+0x74>)
 80143ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80143b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80143b2:	4b12      	ldr	r3, [pc, #72]	@ (80143fc <USBH_LL_Init+0x74>)
 80143b4:	2208      	movs	r2, #8
 80143b6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80143b8:	4b10      	ldr	r3, [pc, #64]	@ (80143fc <USBH_LL_Init+0x74>)
 80143ba:	2201      	movs	r2, #1
 80143bc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80143be:	4b0f      	ldr	r3, [pc, #60]	@ (80143fc <USBH_LL_Init+0x74>)
 80143c0:	2200      	movs	r2, #0
 80143c2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80143c4:	4b0d      	ldr	r3, [pc, #52]	@ (80143fc <USBH_LL_Init+0x74>)
 80143c6:	2202      	movs	r2, #2
 80143c8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80143ca:	4b0c      	ldr	r3, [pc, #48]	@ (80143fc <USBH_LL_Init+0x74>)
 80143cc:	2200      	movs	r2, #0
 80143ce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80143d0:	480a      	ldr	r0, [pc, #40]	@ (80143fc <USBH_LL_Init+0x74>)
 80143d2:	f7f0 fb60 	bl	8004a96 <HAL_HCD_Init>
 80143d6:	4603      	mov	r3, r0
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d001      	beq.n	80143e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80143dc:	f7ed fb06 	bl	80019ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80143e0:	4806      	ldr	r0, [pc, #24]	@ (80143fc <USBH_LL_Init+0x74>)
 80143e2:	f7f0 ffc1 	bl	8005368 <HAL_HCD_GetCurrentFrame>
 80143e6:	4603      	mov	r3, r0
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7fb ffae 	bl	801034c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	2000927c 	.word	0x2000927c

08014400 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014408:	2300      	movs	r3, #0
 801440a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014416:	4618      	mov	r0, r3
 8014418:	f7f0 ff2e 	bl	8005278 <HAL_HCD_Start>
 801441c:	4603      	mov	r3, r0
 801441e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014420:	7bfb      	ldrb	r3, [r7, #15]
 8014422:	4618      	mov	r0, r3
 8014424:	f000 f95e 	bl	80146e4 <USBH_Get_USB_Status>
 8014428:	4603      	mov	r3, r0
 801442a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801442c:	7bbb      	ldrb	r3, [r7, #14]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014436:	b580      	push	{r7, lr}
 8014438:	b084      	sub	sp, #16
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801443e:	2300      	movs	r3, #0
 8014440:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014442:	2300      	movs	r3, #0
 8014444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801444c:	4618      	mov	r0, r3
 801444e:	f7f0 ff36 	bl	80052be <HAL_HCD_Stop>
 8014452:	4603      	mov	r3, r0
 8014454:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014456:	7bfb      	ldrb	r3, [r7, #15]
 8014458:	4618      	mov	r0, r3
 801445a:	f000 f943 	bl	80146e4 <USBH_Get_USB_Status>
 801445e:	4603      	mov	r3, r0
 8014460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014462:	7bbb      	ldrb	r3, [r7, #14]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014474:	2301      	movs	r3, #1
 8014476:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801447e:	4618      	mov	r0, r3
 8014480:	f7f0 ff80 	bl	8005384 <HAL_HCD_GetCurrentSpeed>
 8014484:	4603      	mov	r3, r0
 8014486:	2b02      	cmp	r3, #2
 8014488:	d00c      	beq.n	80144a4 <USBH_LL_GetSpeed+0x38>
 801448a:	2b02      	cmp	r3, #2
 801448c:	d80d      	bhi.n	80144aa <USBH_LL_GetSpeed+0x3e>
 801448e:	2b00      	cmp	r3, #0
 8014490:	d002      	beq.n	8014498 <USBH_LL_GetSpeed+0x2c>
 8014492:	2b01      	cmp	r3, #1
 8014494:	d003      	beq.n	801449e <USBH_LL_GetSpeed+0x32>
 8014496:	e008      	b.n	80144aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014498:	2300      	movs	r3, #0
 801449a:	73fb      	strb	r3, [r7, #15]
    break;
 801449c:	e008      	b.n	80144b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801449e:	2301      	movs	r3, #1
 80144a0:	73fb      	strb	r3, [r7, #15]
    break;
 80144a2:	e005      	b.n	80144b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80144a4:	2302      	movs	r3, #2
 80144a6:	73fb      	strb	r3, [r7, #15]
    break;
 80144a8:	e002      	b.n	80144b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80144aa:	2301      	movs	r3, #1
 80144ac:	73fb      	strb	r3, [r7, #15]
    break;
 80144ae:	bf00      	nop
  }
  return  speed;
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b084      	sub	sp, #16
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144c2:	2300      	movs	r3, #0
 80144c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144c6:	2300      	movs	r3, #0
 80144c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f0 ff11 	bl	80052f8 <HAL_HCD_ResetPort>
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80144da:	7bfb      	ldrb	r3, [r7, #15]
 80144dc:	4618      	mov	r0, r3
 80144de:	f000 f901 	bl	80146e4 <USBH_Get_USB_Status>
 80144e2:	4603      	mov	r3, r0
 80144e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	460b      	mov	r3, r1
 80144fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014502:	78fa      	ldrb	r2, [r7, #3]
 8014504:	4611      	mov	r1, r2
 8014506:	4618      	mov	r0, r3
 8014508:	f7f0 ff19 	bl	800533e <HAL_HCD_HC_GetXferCount>
 801450c:	4603      	mov	r3, r0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014516:	b590      	push	{r4, r7, lr}
 8014518:	b089      	sub	sp, #36	@ 0x24
 801451a:	af04      	add	r7, sp, #16
 801451c:	6078      	str	r0, [r7, #4]
 801451e:	4608      	mov	r0, r1
 8014520:	4611      	mov	r1, r2
 8014522:	461a      	mov	r2, r3
 8014524:	4603      	mov	r3, r0
 8014526:	70fb      	strb	r3, [r7, #3]
 8014528:	460b      	mov	r3, r1
 801452a:	70bb      	strb	r3, [r7, #2]
 801452c:	4613      	mov	r3, r2
 801452e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014530:	2300      	movs	r3, #0
 8014532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014534:	2300      	movs	r3, #0
 8014536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801453e:	787c      	ldrb	r4, [r7, #1]
 8014540:	78ba      	ldrb	r2, [r7, #2]
 8014542:	78f9      	ldrb	r1, [r7, #3]
 8014544:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014546:	9302      	str	r3, [sp, #8]
 8014548:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801454c:	9301      	str	r3, [sp, #4]
 801454e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	4623      	mov	r3, r4
 8014556:	f7f0 fb05 	bl	8004b64 <HAL_HCD_HC_Init>
 801455a:	4603      	mov	r3, r0
 801455c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801455e:	7bfb      	ldrb	r3, [r7, #15]
 8014560:	4618      	mov	r0, r3
 8014562:	f000 f8bf 	bl	80146e4 <USBH_Get_USB_Status>
 8014566:	4603      	mov	r3, r0
 8014568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801456a:	7bbb      	ldrb	r3, [r7, #14]
}
 801456c:	4618      	mov	r0, r3
 801456e:	3714      	adds	r7, #20
 8014570:	46bd      	mov	sp, r7
 8014572:	bd90      	pop	{r4, r7, pc}

08014574 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	460b      	mov	r3, r1
 801457e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014580:	2300      	movs	r3, #0
 8014582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014584:	2300      	movs	r3, #0
 8014586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801458e:	78fa      	ldrb	r2, [r7, #3]
 8014590:	4611      	mov	r1, r2
 8014592:	4618      	mov	r0, r3
 8014594:	f7f0 fb9e 	bl	8004cd4 <HAL_HCD_HC_Halt>
 8014598:	4603      	mov	r3, r0
 801459a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801459c:	7bfb      	ldrb	r3, [r7, #15]
 801459e:	4618      	mov	r0, r3
 80145a0:	f000 f8a0 	bl	80146e4 <USBH_Get_USB_Status>
 80145a4:	4603      	mov	r3, r0
 80145a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80145b2:	b590      	push	{r4, r7, lr}
 80145b4:	b089      	sub	sp, #36	@ 0x24
 80145b6:	af04      	add	r7, sp, #16
 80145b8:	6078      	str	r0, [r7, #4]
 80145ba:	4608      	mov	r0, r1
 80145bc:	4611      	mov	r1, r2
 80145be:	461a      	mov	r2, r3
 80145c0:	4603      	mov	r3, r0
 80145c2:	70fb      	strb	r3, [r7, #3]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70bb      	strb	r3, [r7, #2]
 80145c8:	4613      	mov	r3, r2
 80145ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80145d0:	2300      	movs	r3, #0
 80145d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80145da:	787c      	ldrb	r4, [r7, #1]
 80145dc:	78ba      	ldrb	r2, [r7, #2]
 80145de:	78f9      	ldrb	r1, [r7, #3]
 80145e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80145e4:	9303      	str	r3, [sp, #12]
 80145e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80145e8:	9302      	str	r3, [sp, #8]
 80145ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ec:	9301      	str	r3, [sp, #4]
 80145ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	4623      	mov	r3, r4
 80145f6:	f7f0 fb91 	bl	8004d1c <HAL_HCD_HC_SubmitRequest>
 80145fa:	4603      	mov	r3, r0
 80145fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80145fe:	7bfb      	ldrb	r3, [r7, #15]
 8014600:	4618      	mov	r0, r3
 8014602:	f000 f86f 	bl	80146e4 <USBH_Get_USB_Status>
 8014606:	4603      	mov	r3, r0
 8014608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801460a:	7bbb      	ldrb	r3, [r7, #14]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3714      	adds	r7, #20
 8014610:	46bd      	mov	sp, r7
 8014612:	bd90      	pop	{r4, r7, pc}

08014614 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b082      	sub	sp, #8
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	460b      	mov	r3, r1
 801461e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014626:	78fa      	ldrb	r2, [r7, #3]
 8014628:	4611      	mov	r1, r2
 801462a:	4618      	mov	r0, r3
 801462c:	f7f0 fe72 	bl	8005314 <HAL_HCD_HC_GetURBState>
 8014630:	4603      	mov	r3, r0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3708      	adds	r7, #8
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}

0801463a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801463a:	b580      	push	{r7, lr}
 801463c:	b082      	sub	sp, #8
 801463e:	af00      	add	r7, sp, #0
 8014640:	6078      	str	r0, [r7, #4]
 8014642:	460b      	mov	r3, r1
 8014644:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801464c:	2b01      	cmp	r3, #1
 801464e:	d103      	bne.n	8014658 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014650:	78fb      	ldrb	r3, [r7, #3]
 8014652:	4618      	mov	r0, r3
 8014654:	f000 f872 	bl	801473c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014658:	20c8      	movs	r0, #200	@ 0xc8
 801465a:	f7ee fcb9 	bl	8002fd0 <HAL_Delay>
  return USBH_OK;
 801465e:	2300      	movs	r3, #0
}
 8014660:	4618      	mov	r0, r3
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014668:	b480      	push	{r7}
 801466a:	b085      	sub	sp, #20
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	460b      	mov	r3, r1
 8014672:	70fb      	strb	r3, [r7, #3]
 8014674:	4613      	mov	r3, r2
 8014676:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801467e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014680:	78fa      	ldrb	r2, [r7, #3]
 8014682:	68f9      	ldr	r1, [r7, #12]
 8014684:	4613      	mov	r3, r2
 8014686:	011b      	lsls	r3, r3, #4
 8014688:	1a9b      	subs	r3, r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	440b      	add	r3, r1
 801468e:	3317      	adds	r3, #23
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014696:	78fa      	ldrb	r2, [r7, #3]
 8014698:	68f9      	ldr	r1, [r7, #12]
 801469a:	4613      	mov	r3, r2
 801469c:	011b      	lsls	r3, r3, #4
 801469e:	1a9b      	subs	r3, r3, r2
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	440b      	add	r3, r1
 80146a4:	333c      	adds	r3, #60	@ 0x3c
 80146a6:	78ba      	ldrb	r2, [r7, #2]
 80146a8:	701a      	strb	r2, [r3, #0]
 80146aa:	e009      	b.n	80146c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80146ac:	78fa      	ldrb	r2, [r7, #3]
 80146ae:	68f9      	ldr	r1, [r7, #12]
 80146b0:	4613      	mov	r3, r2
 80146b2:	011b      	lsls	r3, r3, #4
 80146b4:	1a9b      	subs	r3, r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	440b      	add	r3, r1
 80146ba:	333d      	adds	r3, #61	@ 0x3d
 80146bc:	78ba      	ldrb	r2, [r7, #2]
 80146be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80146c0:	2300      	movs	r3, #0
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3714      	adds	r7, #20
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80146ce:	b580      	push	{r7, lr}
 80146d0:	b082      	sub	sp, #8
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f7ee fc7a 	bl	8002fd0 <HAL_Delay>
}
 80146dc:	bf00      	nop
 80146de:	3708      	adds	r7, #8
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146ee:	2300      	movs	r3, #0
 80146f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80146f2:	79fb      	ldrb	r3, [r7, #7]
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d817      	bhi.n	8014728 <USBH_Get_USB_Status+0x44>
 80146f8:	a201      	add	r2, pc, #4	@ (adr r2, 8014700 <USBH_Get_USB_Status+0x1c>)
 80146fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146fe:	bf00      	nop
 8014700:	08014711 	.word	0x08014711
 8014704:	08014717 	.word	0x08014717
 8014708:	0801471d 	.word	0x0801471d
 801470c:	08014723 	.word	0x08014723
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014710:	2300      	movs	r3, #0
 8014712:	73fb      	strb	r3, [r7, #15]
    break;
 8014714:	e00b      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014716:	2302      	movs	r3, #2
 8014718:	73fb      	strb	r3, [r7, #15]
    break;
 801471a:	e008      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801471c:	2301      	movs	r3, #1
 801471e:	73fb      	strb	r3, [r7, #15]
    break;
 8014720:	e005      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014722:	2302      	movs	r3, #2
 8014724:	73fb      	strb	r3, [r7, #15]
    break;
 8014726:	e002      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014728:	2302      	movs	r3, #2
 801472a:	73fb      	strb	r3, [r7, #15]
    break;
 801472c:	bf00      	nop
  }
  return usb_status;
 801472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3714      	adds	r7, #20
 8014734:	46bd      	mov	sp, r7
 8014736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473a:	4770      	bx	lr

0801473c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801474a:	79fb      	ldrb	r3, [r7, #7]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d102      	bne.n	8014756 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8014750:	2300      	movs	r3, #0
 8014752:	73fb      	strb	r3, [r7, #15]
 8014754:	e001      	b.n	801475a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8014756:	2301      	movs	r3, #1
 8014758:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801475a:	7bfb      	ldrb	r3, [r7, #15]
 801475c:	461a      	mov	r2, r3
 801475e:	2120      	movs	r1, #32
 8014760:	4803      	ldr	r0, [pc, #12]	@ (8014770 <MX_DriverVbusFS+0x34>)
 8014762:	f7f0 f965 	bl	8004a30 <HAL_GPIO_WritePin>
}
 8014766:	bf00      	nop
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	40020c00 	.word	0x40020c00

08014774 <malloc>:
 8014774:	4b02      	ldr	r3, [pc, #8]	@ (8014780 <malloc+0xc>)
 8014776:	4601      	mov	r1, r0
 8014778:	6818      	ldr	r0, [r3, #0]
 801477a:	f000 b82d 	b.w	80147d8 <_malloc_r>
 801477e:	bf00      	nop
 8014780:	2000003c 	.word	0x2000003c

08014784 <free>:
 8014784:	4b02      	ldr	r3, [pc, #8]	@ (8014790 <free+0xc>)
 8014786:	4601      	mov	r1, r0
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	f000 bb43 	b.w	8014e14 <_free_r>
 801478e:	bf00      	nop
 8014790:	2000003c 	.word	0x2000003c

08014794 <sbrk_aligned>:
 8014794:	b570      	push	{r4, r5, r6, lr}
 8014796:	4e0f      	ldr	r6, [pc, #60]	@ (80147d4 <sbrk_aligned+0x40>)
 8014798:	460c      	mov	r4, r1
 801479a:	6831      	ldr	r1, [r6, #0]
 801479c:	4605      	mov	r5, r0
 801479e:	b911      	cbnz	r1, 80147a6 <sbrk_aligned+0x12>
 80147a0:	f000 fada 	bl	8014d58 <_sbrk_r>
 80147a4:	6030      	str	r0, [r6, #0]
 80147a6:	4621      	mov	r1, r4
 80147a8:	4628      	mov	r0, r5
 80147aa:	f000 fad5 	bl	8014d58 <_sbrk_r>
 80147ae:	1c43      	adds	r3, r0, #1
 80147b0:	d103      	bne.n	80147ba <sbrk_aligned+0x26>
 80147b2:	f04f 34ff 	mov.w	r4, #4294967295
 80147b6:	4620      	mov	r0, r4
 80147b8:	bd70      	pop	{r4, r5, r6, pc}
 80147ba:	1cc4      	adds	r4, r0, #3
 80147bc:	f024 0403 	bic.w	r4, r4, #3
 80147c0:	42a0      	cmp	r0, r4
 80147c2:	d0f8      	beq.n	80147b6 <sbrk_aligned+0x22>
 80147c4:	1a21      	subs	r1, r4, r0
 80147c6:	4628      	mov	r0, r5
 80147c8:	f000 fac6 	bl	8014d58 <_sbrk_r>
 80147cc:	3001      	adds	r0, #1
 80147ce:	d1f2      	bne.n	80147b6 <sbrk_aligned+0x22>
 80147d0:	e7ef      	b.n	80147b2 <sbrk_aligned+0x1e>
 80147d2:	bf00      	nop
 80147d4:	2000965c 	.word	0x2000965c

080147d8 <_malloc_r>:
 80147d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147dc:	1ccd      	adds	r5, r1, #3
 80147de:	f025 0503 	bic.w	r5, r5, #3
 80147e2:	3508      	adds	r5, #8
 80147e4:	2d0c      	cmp	r5, #12
 80147e6:	bf38      	it	cc
 80147e8:	250c      	movcc	r5, #12
 80147ea:	2d00      	cmp	r5, #0
 80147ec:	4606      	mov	r6, r0
 80147ee:	db01      	blt.n	80147f4 <_malloc_r+0x1c>
 80147f0:	42a9      	cmp	r1, r5
 80147f2:	d904      	bls.n	80147fe <_malloc_r+0x26>
 80147f4:	230c      	movs	r3, #12
 80147f6:	6033      	str	r3, [r6, #0]
 80147f8:	2000      	movs	r0, #0
 80147fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80148d4 <_malloc_r+0xfc>
 8014802:	f000 f869 	bl	80148d8 <__malloc_lock>
 8014806:	f8d8 3000 	ldr.w	r3, [r8]
 801480a:	461c      	mov	r4, r3
 801480c:	bb44      	cbnz	r4, 8014860 <_malloc_r+0x88>
 801480e:	4629      	mov	r1, r5
 8014810:	4630      	mov	r0, r6
 8014812:	f7ff ffbf 	bl	8014794 <sbrk_aligned>
 8014816:	1c43      	adds	r3, r0, #1
 8014818:	4604      	mov	r4, r0
 801481a:	d158      	bne.n	80148ce <_malloc_r+0xf6>
 801481c:	f8d8 4000 	ldr.w	r4, [r8]
 8014820:	4627      	mov	r7, r4
 8014822:	2f00      	cmp	r7, #0
 8014824:	d143      	bne.n	80148ae <_malloc_r+0xd6>
 8014826:	2c00      	cmp	r4, #0
 8014828:	d04b      	beq.n	80148c2 <_malloc_r+0xea>
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	4639      	mov	r1, r7
 801482e:	4630      	mov	r0, r6
 8014830:	eb04 0903 	add.w	r9, r4, r3
 8014834:	f000 fa90 	bl	8014d58 <_sbrk_r>
 8014838:	4581      	cmp	r9, r0
 801483a:	d142      	bne.n	80148c2 <_malloc_r+0xea>
 801483c:	6821      	ldr	r1, [r4, #0]
 801483e:	1a6d      	subs	r5, r5, r1
 8014840:	4629      	mov	r1, r5
 8014842:	4630      	mov	r0, r6
 8014844:	f7ff ffa6 	bl	8014794 <sbrk_aligned>
 8014848:	3001      	adds	r0, #1
 801484a:	d03a      	beq.n	80148c2 <_malloc_r+0xea>
 801484c:	6823      	ldr	r3, [r4, #0]
 801484e:	442b      	add	r3, r5
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	f8d8 3000 	ldr.w	r3, [r8]
 8014856:	685a      	ldr	r2, [r3, #4]
 8014858:	bb62      	cbnz	r2, 80148b4 <_malloc_r+0xdc>
 801485a:	f8c8 7000 	str.w	r7, [r8]
 801485e:	e00f      	b.n	8014880 <_malloc_r+0xa8>
 8014860:	6822      	ldr	r2, [r4, #0]
 8014862:	1b52      	subs	r2, r2, r5
 8014864:	d420      	bmi.n	80148a8 <_malloc_r+0xd0>
 8014866:	2a0b      	cmp	r2, #11
 8014868:	d917      	bls.n	801489a <_malloc_r+0xc2>
 801486a:	1961      	adds	r1, r4, r5
 801486c:	42a3      	cmp	r3, r4
 801486e:	6025      	str	r5, [r4, #0]
 8014870:	bf18      	it	ne
 8014872:	6059      	strne	r1, [r3, #4]
 8014874:	6863      	ldr	r3, [r4, #4]
 8014876:	bf08      	it	eq
 8014878:	f8c8 1000 	streq.w	r1, [r8]
 801487c:	5162      	str	r2, [r4, r5]
 801487e:	604b      	str	r3, [r1, #4]
 8014880:	4630      	mov	r0, r6
 8014882:	f000 f82f 	bl	80148e4 <__malloc_unlock>
 8014886:	f104 000b 	add.w	r0, r4, #11
 801488a:	1d23      	adds	r3, r4, #4
 801488c:	f020 0007 	bic.w	r0, r0, #7
 8014890:	1ac2      	subs	r2, r0, r3
 8014892:	bf1c      	itt	ne
 8014894:	1a1b      	subne	r3, r3, r0
 8014896:	50a3      	strne	r3, [r4, r2]
 8014898:	e7af      	b.n	80147fa <_malloc_r+0x22>
 801489a:	6862      	ldr	r2, [r4, #4]
 801489c:	42a3      	cmp	r3, r4
 801489e:	bf0c      	ite	eq
 80148a0:	f8c8 2000 	streq.w	r2, [r8]
 80148a4:	605a      	strne	r2, [r3, #4]
 80148a6:	e7eb      	b.n	8014880 <_malloc_r+0xa8>
 80148a8:	4623      	mov	r3, r4
 80148aa:	6864      	ldr	r4, [r4, #4]
 80148ac:	e7ae      	b.n	801480c <_malloc_r+0x34>
 80148ae:	463c      	mov	r4, r7
 80148b0:	687f      	ldr	r7, [r7, #4]
 80148b2:	e7b6      	b.n	8014822 <_malloc_r+0x4a>
 80148b4:	461a      	mov	r2, r3
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	d1fb      	bne.n	80148b4 <_malloc_r+0xdc>
 80148bc:	2300      	movs	r3, #0
 80148be:	6053      	str	r3, [r2, #4]
 80148c0:	e7de      	b.n	8014880 <_malloc_r+0xa8>
 80148c2:	230c      	movs	r3, #12
 80148c4:	6033      	str	r3, [r6, #0]
 80148c6:	4630      	mov	r0, r6
 80148c8:	f000 f80c 	bl	80148e4 <__malloc_unlock>
 80148cc:	e794      	b.n	80147f8 <_malloc_r+0x20>
 80148ce:	6005      	str	r5, [r0, #0]
 80148d0:	e7d6      	b.n	8014880 <_malloc_r+0xa8>
 80148d2:	bf00      	nop
 80148d4:	20009660 	.word	0x20009660

080148d8 <__malloc_lock>:
 80148d8:	4801      	ldr	r0, [pc, #4]	@ (80148e0 <__malloc_lock+0x8>)
 80148da:	f000 ba8a 	b.w	8014df2 <__retarget_lock_acquire_recursive>
 80148de:	bf00      	nop
 80148e0:	200097a4 	.word	0x200097a4

080148e4 <__malloc_unlock>:
 80148e4:	4801      	ldr	r0, [pc, #4]	@ (80148ec <__malloc_unlock+0x8>)
 80148e6:	f000 ba85 	b.w	8014df4 <__retarget_lock_release_recursive>
 80148ea:	bf00      	nop
 80148ec:	200097a4 	.word	0x200097a4

080148f0 <std>:
 80148f0:	2300      	movs	r3, #0
 80148f2:	b510      	push	{r4, lr}
 80148f4:	4604      	mov	r4, r0
 80148f6:	e9c0 3300 	strd	r3, r3, [r0]
 80148fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148fe:	6083      	str	r3, [r0, #8]
 8014900:	8181      	strh	r1, [r0, #12]
 8014902:	6643      	str	r3, [r0, #100]	@ 0x64
 8014904:	81c2      	strh	r2, [r0, #14]
 8014906:	6183      	str	r3, [r0, #24]
 8014908:	4619      	mov	r1, r3
 801490a:	2208      	movs	r2, #8
 801490c:	305c      	adds	r0, #92	@ 0x5c
 801490e:	f000 f9e7 	bl	8014ce0 <memset>
 8014912:	4b0d      	ldr	r3, [pc, #52]	@ (8014948 <std+0x58>)
 8014914:	6263      	str	r3, [r4, #36]	@ 0x24
 8014916:	4b0d      	ldr	r3, [pc, #52]	@ (801494c <std+0x5c>)
 8014918:	62a3      	str	r3, [r4, #40]	@ 0x28
 801491a:	4b0d      	ldr	r3, [pc, #52]	@ (8014950 <std+0x60>)
 801491c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801491e:	4b0d      	ldr	r3, [pc, #52]	@ (8014954 <std+0x64>)
 8014920:	6323      	str	r3, [r4, #48]	@ 0x30
 8014922:	4b0d      	ldr	r3, [pc, #52]	@ (8014958 <std+0x68>)
 8014924:	6224      	str	r4, [r4, #32]
 8014926:	429c      	cmp	r4, r3
 8014928:	d006      	beq.n	8014938 <std+0x48>
 801492a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801492e:	4294      	cmp	r4, r2
 8014930:	d002      	beq.n	8014938 <std+0x48>
 8014932:	33d0      	adds	r3, #208	@ 0xd0
 8014934:	429c      	cmp	r4, r3
 8014936:	d105      	bne.n	8014944 <std+0x54>
 8014938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014940:	f000 ba56 	b.w	8014df0 <__retarget_lock_init_recursive>
 8014944:	bd10      	pop	{r4, pc}
 8014946:	bf00      	nop
 8014948:	08014b31 	.word	0x08014b31
 801494c:	08014b53 	.word	0x08014b53
 8014950:	08014b8b 	.word	0x08014b8b
 8014954:	08014baf 	.word	0x08014baf
 8014958:	20009664 	.word	0x20009664

0801495c <stdio_exit_handler>:
 801495c:	4a02      	ldr	r2, [pc, #8]	@ (8014968 <stdio_exit_handler+0xc>)
 801495e:	4903      	ldr	r1, [pc, #12]	@ (801496c <stdio_exit_handler+0x10>)
 8014960:	4803      	ldr	r0, [pc, #12]	@ (8014970 <stdio_exit_handler+0x14>)
 8014962:	f000 b869 	b.w	8014a38 <_fwalk_sglue>
 8014966:	bf00      	nop
 8014968:	20000030 	.word	0x20000030
 801496c:	08014fb1 	.word	0x08014fb1
 8014970:	20000040 	.word	0x20000040

08014974 <cleanup_stdio>:
 8014974:	6841      	ldr	r1, [r0, #4]
 8014976:	4b0c      	ldr	r3, [pc, #48]	@ (80149a8 <cleanup_stdio+0x34>)
 8014978:	4299      	cmp	r1, r3
 801497a:	b510      	push	{r4, lr}
 801497c:	4604      	mov	r4, r0
 801497e:	d001      	beq.n	8014984 <cleanup_stdio+0x10>
 8014980:	f000 fb16 	bl	8014fb0 <_fflush_r>
 8014984:	68a1      	ldr	r1, [r4, #8]
 8014986:	4b09      	ldr	r3, [pc, #36]	@ (80149ac <cleanup_stdio+0x38>)
 8014988:	4299      	cmp	r1, r3
 801498a:	d002      	beq.n	8014992 <cleanup_stdio+0x1e>
 801498c:	4620      	mov	r0, r4
 801498e:	f000 fb0f 	bl	8014fb0 <_fflush_r>
 8014992:	68e1      	ldr	r1, [r4, #12]
 8014994:	4b06      	ldr	r3, [pc, #24]	@ (80149b0 <cleanup_stdio+0x3c>)
 8014996:	4299      	cmp	r1, r3
 8014998:	d004      	beq.n	80149a4 <cleanup_stdio+0x30>
 801499a:	4620      	mov	r0, r4
 801499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149a0:	f000 bb06 	b.w	8014fb0 <_fflush_r>
 80149a4:	bd10      	pop	{r4, pc}
 80149a6:	bf00      	nop
 80149a8:	20009664 	.word	0x20009664
 80149ac:	200096cc 	.word	0x200096cc
 80149b0:	20009734 	.word	0x20009734

080149b4 <global_stdio_init.part.0>:
 80149b4:	b510      	push	{r4, lr}
 80149b6:	4b0b      	ldr	r3, [pc, #44]	@ (80149e4 <global_stdio_init.part.0+0x30>)
 80149b8:	4c0b      	ldr	r4, [pc, #44]	@ (80149e8 <global_stdio_init.part.0+0x34>)
 80149ba:	4a0c      	ldr	r2, [pc, #48]	@ (80149ec <global_stdio_init.part.0+0x38>)
 80149bc:	601a      	str	r2, [r3, #0]
 80149be:	4620      	mov	r0, r4
 80149c0:	2200      	movs	r2, #0
 80149c2:	2104      	movs	r1, #4
 80149c4:	f7ff ff94 	bl	80148f0 <std>
 80149c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80149cc:	2201      	movs	r2, #1
 80149ce:	2109      	movs	r1, #9
 80149d0:	f7ff ff8e 	bl	80148f0 <std>
 80149d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80149d8:	2202      	movs	r2, #2
 80149da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149de:	2112      	movs	r1, #18
 80149e0:	f7ff bf86 	b.w	80148f0 <std>
 80149e4:	2000979c 	.word	0x2000979c
 80149e8:	20009664 	.word	0x20009664
 80149ec:	0801495d 	.word	0x0801495d

080149f0 <__sfp_lock_acquire>:
 80149f0:	4801      	ldr	r0, [pc, #4]	@ (80149f8 <__sfp_lock_acquire+0x8>)
 80149f2:	f000 b9fe 	b.w	8014df2 <__retarget_lock_acquire_recursive>
 80149f6:	bf00      	nop
 80149f8:	200097a5 	.word	0x200097a5

080149fc <__sfp_lock_release>:
 80149fc:	4801      	ldr	r0, [pc, #4]	@ (8014a04 <__sfp_lock_release+0x8>)
 80149fe:	f000 b9f9 	b.w	8014df4 <__retarget_lock_release_recursive>
 8014a02:	bf00      	nop
 8014a04:	200097a5 	.word	0x200097a5

08014a08 <__sinit>:
 8014a08:	b510      	push	{r4, lr}
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	f7ff fff0 	bl	80149f0 <__sfp_lock_acquire>
 8014a10:	6a23      	ldr	r3, [r4, #32]
 8014a12:	b11b      	cbz	r3, 8014a1c <__sinit+0x14>
 8014a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a18:	f7ff bff0 	b.w	80149fc <__sfp_lock_release>
 8014a1c:	4b04      	ldr	r3, [pc, #16]	@ (8014a30 <__sinit+0x28>)
 8014a1e:	6223      	str	r3, [r4, #32]
 8014a20:	4b04      	ldr	r3, [pc, #16]	@ (8014a34 <__sinit+0x2c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d1f5      	bne.n	8014a14 <__sinit+0xc>
 8014a28:	f7ff ffc4 	bl	80149b4 <global_stdio_init.part.0>
 8014a2c:	e7f2      	b.n	8014a14 <__sinit+0xc>
 8014a2e:	bf00      	nop
 8014a30:	08014975 	.word	0x08014975
 8014a34:	2000979c 	.word	0x2000979c

08014a38 <_fwalk_sglue>:
 8014a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a3c:	4607      	mov	r7, r0
 8014a3e:	4688      	mov	r8, r1
 8014a40:	4614      	mov	r4, r2
 8014a42:	2600      	movs	r6, #0
 8014a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a48:	f1b9 0901 	subs.w	r9, r9, #1
 8014a4c:	d505      	bpl.n	8014a5a <_fwalk_sglue+0x22>
 8014a4e:	6824      	ldr	r4, [r4, #0]
 8014a50:	2c00      	cmp	r4, #0
 8014a52:	d1f7      	bne.n	8014a44 <_fwalk_sglue+0xc>
 8014a54:	4630      	mov	r0, r6
 8014a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a5a:	89ab      	ldrh	r3, [r5, #12]
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d907      	bls.n	8014a70 <_fwalk_sglue+0x38>
 8014a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a64:	3301      	adds	r3, #1
 8014a66:	d003      	beq.n	8014a70 <_fwalk_sglue+0x38>
 8014a68:	4629      	mov	r1, r5
 8014a6a:	4638      	mov	r0, r7
 8014a6c:	47c0      	blx	r8
 8014a6e:	4306      	orrs	r6, r0
 8014a70:	3568      	adds	r5, #104	@ 0x68
 8014a72:	e7e9      	b.n	8014a48 <_fwalk_sglue+0x10>

08014a74 <_puts_r>:
 8014a74:	6a03      	ldr	r3, [r0, #32]
 8014a76:	b570      	push	{r4, r5, r6, lr}
 8014a78:	6884      	ldr	r4, [r0, #8]
 8014a7a:	4605      	mov	r5, r0
 8014a7c:	460e      	mov	r6, r1
 8014a7e:	b90b      	cbnz	r3, 8014a84 <_puts_r+0x10>
 8014a80:	f7ff ffc2 	bl	8014a08 <__sinit>
 8014a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a86:	07db      	lsls	r3, r3, #31
 8014a88:	d405      	bmi.n	8014a96 <_puts_r+0x22>
 8014a8a:	89a3      	ldrh	r3, [r4, #12]
 8014a8c:	0598      	lsls	r0, r3, #22
 8014a8e:	d402      	bmi.n	8014a96 <_puts_r+0x22>
 8014a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a92:	f000 f9ae 	bl	8014df2 <__retarget_lock_acquire_recursive>
 8014a96:	89a3      	ldrh	r3, [r4, #12]
 8014a98:	0719      	lsls	r1, r3, #28
 8014a9a:	d502      	bpl.n	8014aa2 <_puts_r+0x2e>
 8014a9c:	6923      	ldr	r3, [r4, #16]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d135      	bne.n	8014b0e <_puts_r+0x9a>
 8014aa2:	4621      	mov	r1, r4
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f000 f8c5 	bl	8014c34 <__swsetup_r>
 8014aaa:	b380      	cbz	r0, 8014b0e <_puts_r+0x9a>
 8014aac:	f04f 35ff 	mov.w	r5, #4294967295
 8014ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ab2:	07da      	lsls	r2, r3, #31
 8014ab4:	d405      	bmi.n	8014ac2 <_puts_r+0x4e>
 8014ab6:	89a3      	ldrh	r3, [r4, #12]
 8014ab8:	059b      	lsls	r3, r3, #22
 8014aba:	d402      	bmi.n	8014ac2 <_puts_r+0x4e>
 8014abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014abe:	f000 f999 	bl	8014df4 <__retarget_lock_release_recursive>
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	bd70      	pop	{r4, r5, r6, pc}
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	da04      	bge.n	8014ad4 <_puts_r+0x60>
 8014aca:	69a2      	ldr	r2, [r4, #24]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	dc17      	bgt.n	8014b00 <_puts_r+0x8c>
 8014ad0:	290a      	cmp	r1, #10
 8014ad2:	d015      	beq.n	8014b00 <_puts_r+0x8c>
 8014ad4:	6823      	ldr	r3, [r4, #0]
 8014ad6:	1c5a      	adds	r2, r3, #1
 8014ad8:	6022      	str	r2, [r4, #0]
 8014ada:	7019      	strb	r1, [r3, #0]
 8014adc:	68a3      	ldr	r3, [r4, #8]
 8014ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ae2:	3b01      	subs	r3, #1
 8014ae4:	60a3      	str	r3, [r4, #8]
 8014ae6:	2900      	cmp	r1, #0
 8014ae8:	d1ed      	bne.n	8014ac6 <_puts_r+0x52>
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	da11      	bge.n	8014b12 <_puts_r+0x9e>
 8014aee:	4622      	mov	r2, r4
 8014af0:	210a      	movs	r1, #10
 8014af2:	4628      	mov	r0, r5
 8014af4:	f000 f85f 	bl	8014bb6 <__swbuf_r>
 8014af8:	3001      	adds	r0, #1
 8014afa:	d0d7      	beq.n	8014aac <_puts_r+0x38>
 8014afc:	250a      	movs	r5, #10
 8014afe:	e7d7      	b.n	8014ab0 <_puts_r+0x3c>
 8014b00:	4622      	mov	r2, r4
 8014b02:	4628      	mov	r0, r5
 8014b04:	f000 f857 	bl	8014bb6 <__swbuf_r>
 8014b08:	3001      	adds	r0, #1
 8014b0a:	d1e7      	bne.n	8014adc <_puts_r+0x68>
 8014b0c:	e7ce      	b.n	8014aac <_puts_r+0x38>
 8014b0e:	3e01      	subs	r6, #1
 8014b10:	e7e4      	b.n	8014adc <_puts_r+0x68>
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	1c5a      	adds	r2, r3, #1
 8014b16:	6022      	str	r2, [r4, #0]
 8014b18:	220a      	movs	r2, #10
 8014b1a:	701a      	strb	r2, [r3, #0]
 8014b1c:	e7ee      	b.n	8014afc <_puts_r+0x88>
	...

08014b20 <puts>:
 8014b20:	4b02      	ldr	r3, [pc, #8]	@ (8014b2c <puts+0xc>)
 8014b22:	4601      	mov	r1, r0
 8014b24:	6818      	ldr	r0, [r3, #0]
 8014b26:	f7ff bfa5 	b.w	8014a74 <_puts_r>
 8014b2a:	bf00      	nop
 8014b2c:	2000003c 	.word	0x2000003c

08014b30 <__sread>:
 8014b30:	b510      	push	{r4, lr}
 8014b32:	460c      	mov	r4, r1
 8014b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b38:	f000 f8fc 	bl	8014d34 <_read_r>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	bfab      	itete	ge
 8014b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014b42:	89a3      	ldrhlt	r3, [r4, #12]
 8014b44:	181b      	addge	r3, r3, r0
 8014b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014b4a:	bfac      	ite	ge
 8014b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014b4e:	81a3      	strhlt	r3, [r4, #12]
 8014b50:	bd10      	pop	{r4, pc}

08014b52 <__swrite>:
 8014b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b56:	461f      	mov	r7, r3
 8014b58:	898b      	ldrh	r3, [r1, #12]
 8014b5a:	05db      	lsls	r3, r3, #23
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	460c      	mov	r4, r1
 8014b60:	4616      	mov	r6, r2
 8014b62:	d505      	bpl.n	8014b70 <__swrite+0x1e>
 8014b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b68:	2302      	movs	r3, #2
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f000 f8d0 	bl	8014d10 <_lseek_r>
 8014b70:	89a3      	ldrh	r3, [r4, #12]
 8014b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014b7a:	81a3      	strh	r3, [r4, #12]
 8014b7c:	4632      	mov	r2, r6
 8014b7e:	463b      	mov	r3, r7
 8014b80:	4628      	mov	r0, r5
 8014b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b86:	f000 b8f7 	b.w	8014d78 <_write_r>

08014b8a <__sseek>:
 8014b8a:	b510      	push	{r4, lr}
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b92:	f000 f8bd 	bl	8014d10 <_lseek_r>
 8014b96:	1c43      	adds	r3, r0, #1
 8014b98:	89a3      	ldrh	r3, [r4, #12]
 8014b9a:	bf15      	itete	ne
 8014b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014ba6:	81a3      	strheq	r3, [r4, #12]
 8014ba8:	bf18      	it	ne
 8014baa:	81a3      	strhne	r3, [r4, #12]
 8014bac:	bd10      	pop	{r4, pc}

08014bae <__sclose>:
 8014bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb2:	f000 b89d 	b.w	8014cf0 <_close_r>

08014bb6 <__swbuf_r>:
 8014bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb8:	460e      	mov	r6, r1
 8014bba:	4614      	mov	r4, r2
 8014bbc:	4605      	mov	r5, r0
 8014bbe:	b118      	cbz	r0, 8014bc8 <__swbuf_r+0x12>
 8014bc0:	6a03      	ldr	r3, [r0, #32]
 8014bc2:	b90b      	cbnz	r3, 8014bc8 <__swbuf_r+0x12>
 8014bc4:	f7ff ff20 	bl	8014a08 <__sinit>
 8014bc8:	69a3      	ldr	r3, [r4, #24]
 8014bca:	60a3      	str	r3, [r4, #8]
 8014bcc:	89a3      	ldrh	r3, [r4, #12]
 8014bce:	071a      	lsls	r2, r3, #28
 8014bd0:	d501      	bpl.n	8014bd6 <__swbuf_r+0x20>
 8014bd2:	6923      	ldr	r3, [r4, #16]
 8014bd4:	b943      	cbnz	r3, 8014be8 <__swbuf_r+0x32>
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	4628      	mov	r0, r5
 8014bda:	f000 f82b 	bl	8014c34 <__swsetup_r>
 8014bde:	b118      	cbz	r0, 8014be8 <__swbuf_r+0x32>
 8014be0:	f04f 37ff 	mov.w	r7, #4294967295
 8014be4:	4638      	mov	r0, r7
 8014be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014be8:	6823      	ldr	r3, [r4, #0]
 8014bea:	6922      	ldr	r2, [r4, #16]
 8014bec:	1a98      	subs	r0, r3, r2
 8014bee:	6963      	ldr	r3, [r4, #20]
 8014bf0:	b2f6      	uxtb	r6, r6
 8014bf2:	4283      	cmp	r3, r0
 8014bf4:	4637      	mov	r7, r6
 8014bf6:	dc05      	bgt.n	8014c04 <__swbuf_r+0x4e>
 8014bf8:	4621      	mov	r1, r4
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f000 f9d8 	bl	8014fb0 <_fflush_r>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d1ed      	bne.n	8014be0 <__swbuf_r+0x2a>
 8014c04:	68a3      	ldr	r3, [r4, #8]
 8014c06:	3b01      	subs	r3, #1
 8014c08:	60a3      	str	r3, [r4, #8]
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	1c5a      	adds	r2, r3, #1
 8014c0e:	6022      	str	r2, [r4, #0]
 8014c10:	701e      	strb	r6, [r3, #0]
 8014c12:	6962      	ldr	r2, [r4, #20]
 8014c14:	1c43      	adds	r3, r0, #1
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d004      	beq.n	8014c24 <__swbuf_r+0x6e>
 8014c1a:	89a3      	ldrh	r3, [r4, #12]
 8014c1c:	07db      	lsls	r3, r3, #31
 8014c1e:	d5e1      	bpl.n	8014be4 <__swbuf_r+0x2e>
 8014c20:	2e0a      	cmp	r6, #10
 8014c22:	d1df      	bne.n	8014be4 <__swbuf_r+0x2e>
 8014c24:	4621      	mov	r1, r4
 8014c26:	4628      	mov	r0, r5
 8014c28:	f000 f9c2 	bl	8014fb0 <_fflush_r>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d0d9      	beq.n	8014be4 <__swbuf_r+0x2e>
 8014c30:	e7d6      	b.n	8014be0 <__swbuf_r+0x2a>
	...

08014c34 <__swsetup_r>:
 8014c34:	b538      	push	{r3, r4, r5, lr}
 8014c36:	4b29      	ldr	r3, [pc, #164]	@ (8014cdc <__swsetup_r+0xa8>)
 8014c38:	4605      	mov	r5, r0
 8014c3a:	6818      	ldr	r0, [r3, #0]
 8014c3c:	460c      	mov	r4, r1
 8014c3e:	b118      	cbz	r0, 8014c48 <__swsetup_r+0x14>
 8014c40:	6a03      	ldr	r3, [r0, #32]
 8014c42:	b90b      	cbnz	r3, 8014c48 <__swsetup_r+0x14>
 8014c44:	f7ff fee0 	bl	8014a08 <__sinit>
 8014c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c4c:	0719      	lsls	r1, r3, #28
 8014c4e:	d422      	bmi.n	8014c96 <__swsetup_r+0x62>
 8014c50:	06da      	lsls	r2, r3, #27
 8014c52:	d407      	bmi.n	8014c64 <__swsetup_r+0x30>
 8014c54:	2209      	movs	r2, #9
 8014c56:	602a      	str	r2, [r5, #0]
 8014c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c5c:	81a3      	strh	r3, [r4, #12]
 8014c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c62:	e033      	b.n	8014ccc <__swsetup_r+0x98>
 8014c64:	0758      	lsls	r0, r3, #29
 8014c66:	d512      	bpl.n	8014c8e <__swsetup_r+0x5a>
 8014c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c6a:	b141      	cbz	r1, 8014c7e <__swsetup_r+0x4a>
 8014c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c70:	4299      	cmp	r1, r3
 8014c72:	d002      	beq.n	8014c7a <__swsetup_r+0x46>
 8014c74:	4628      	mov	r0, r5
 8014c76:	f000 f8cd 	bl	8014e14 <_free_r>
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c7e:	89a3      	ldrh	r3, [r4, #12]
 8014c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c84:	81a3      	strh	r3, [r4, #12]
 8014c86:	2300      	movs	r3, #0
 8014c88:	6063      	str	r3, [r4, #4]
 8014c8a:	6923      	ldr	r3, [r4, #16]
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	89a3      	ldrh	r3, [r4, #12]
 8014c90:	f043 0308 	orr.w	r3, r3, #8
 8014c94:	81a3      	strh	r3, [r4, #12]
 8014c96:	6923      	ldr	r3, [r4, #16]
 8014c98:	b94b      	cbnz	r3, 8014cae <__swsetup_r+0x7a>
 8014c9a:	89a3      	ldrh	r3, [r4, #12]
 8014c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ca4:	d003      	beq.n	8014cae <__swsetup_r+0x7a>
 8014ca6:	4621      	mov	r1, r4
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f000 f9cf 	bl	801504c <__smakebuf_r>
 8014cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cb2:	f013 0201 	ands.w	r2, r3, #1
 8014cb6:	d00a      	beq.n	8014cce <__swsetup_r+0x9a>
 8014cb8:	2200      	movs	r2, #0
 8014cba:	60a2      	str	r2, [r4, #8]
 8014cbc:	6962      	ldr	r2, [r4, #20]
 8014cbe:	4252      	negs	r2, r2
 8014cc0:	61a2      	str	r2, [r4, #24]
 8014cc2:	6922      	ldr	r2, [r4, #16]
 8014cc4:	b942      	cbnz	r2, 8014cd8 <__swsetup_r+0xa4>
 8014cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014cca:	d1c5      	bne.n	8014c58 <__swsetup_r+0x24>
 8014ccc:	bd38      	pop	{r3, r4, r5, pc}
 8014cce:	0799      	lsls	r1, r3, #30
 8014cd0:	bf58      	it	pl
 8014cd2:	6962      	ldrpl	r2, [r4, #20]
 8014cd4:	60a2      	str	r2, [r4, #8]
 8014cd6:	e7f4      	b.n	8014cc2 <__swsetup_r+0x8e>
 8014cd8:	2000      	movs	r0, #0
 8014cda:	e7f7      	b.n	8014ccc <__swsetup_r+0x98>
 8014cdc:	2000003c 	.word	0x2000003c

08014ce0 <memset>:
 8014ce0:	4402      	add	r2, r0
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d100      	bne.n	8014cea <memset+0xa>
 8014ce8:	4770      	bx	lr
 8014cea:	f803 1b01 	strb.w	r1, [r3], #1
 8014cee:	e7f9      	b.n	8014ce4 <memset+0x4>

08014cf0 <_close_r>:
 8014cf0:	b538      	push	{r3, r4, r5, lr}
 8014cf2:	4d06      	ldr	r5, [pc, #24]	@ (8014d0c <_close_r+0x1c>)
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	4604      	mov	r4, r0
 8014cf8:	4608      	mov	r0, r1
 8014cfa:	602b      	str	r3, [r5, #0]
 8014cfc:	f7ed fb5d 	bl	80023ba <_close>
 8014d00:	1c43      	adds	r3, r0, #1
 8014d02:	d102      	bne.n	8014d0a <_close_r+0x1a>
 8014d04:	682b      	ldr	r3, [r5, #0]
 8014d06:	b103      	cbz	r3, 8014d0a <_close_r+0x1a>
 8014d08:	6023      	str	r3, [r4, #0]
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}
 8014d0c:	200097a0 	.word	0x200097a0

08014d10 <_lseek_r>:
 8014d10:	b538      	push	{r3, r4, r5, lr}
 8014d12:	4d07      	ldr	r5, [pc, #28]	@ (8014d30 <_lseek_r+0x20>)
 8014d14:	4604      	mov	r4, r0
 8014d16:	4608      	mov	r0, r1
 8014d18:	4611      	mov	r1, r2
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	602a      	str	r2, [r5, #0]
 8014d1e:	461a      	mov	r2, r3
 8014d20:	f7ed fb72 	bl	8002408 <_lseek>
 8014d24:	1c43      	adds	r3, r0, #1
 8014d26:	d102      	bne.n	8014d2e <_lseek_r+0x1e>
 8014d28:	682b      	ldr	r3, [r5, #0]
 8014d2a:	b103      	cbz	r3, 8014d2e <_lseek_r+0x1e>
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	bd38      	pop	{r3, r4, r5, pc}
 8014d30:	200097a0 	.word	0x200097a0

08014d34 <_read_r>:
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	4d07      	ldr	r5, [pc, #28]	@ (8014d54 <_read_r+0x20>)
 8014d38:	4604      	mov	r4, r0
 8014d3a:	4608      	mov	r0, r1
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	2200      	movs	r2, #0
 8014d40:	602a      	str	r2, [r5, #0]
 8014d42:	461a      	mov	r2, r3
 8014d44:	f7ed fb00 	bl	8002348 <_read>
 8014d48:	1c43      	adds	r3, r0, #1
 8014d4a:	d102      	bne.n	8014d52 <_read_r+0x1e>
 8014d4c:	682b      	ldr	r3, [r5, #0]
 8014d4e:	b103      	cbz	r3, 8014d52 <_read_r+0x1e>
 8014d50:	6023      	str	r3, [r4, #0]
 8014d52:	bd38      	pop	{r3, r4, r5, pc}
 8014d54:	200097a0 	.word	0x200097a0

08014d58 <_sbrk_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4d06      	ldr	r5, [pc, #24]	@ (8014d74 <_sbrk_r+0x1c>)
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4604      	mov	r4, r0
 8014d60:	4608      	mov	r0, r1
 8014d62:	602b      	str	r3, [r5, #0]
 8014d64:	f7ed fb5e 	bl	8002424 <_sbrk>
 8014d68:	1c43      	adds	r3, r0, #1
 8014d6a:	d102      	bne.n	8014d72 <_sbrk_r+0x1a>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	b103      	cbz	r3, 8014d72 <_sbrk_r+0x1a>
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	bd38      	pop	{r3, r4, r5, pc}
 8014d74:	200097a0 	.word	0x200097a0

08014d78 <_write_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d07      	ldr	r5, [pc, #28]	@ (8014d98 <_write_r+0x20>)
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	4608      	mov	r0, r1
 8014d80:	4611      	mov	r1, r2
 8014d82:	2200      	movs	r2, #0
 8014d84:	602a      	str	r2, [r5, #0]
 8014d86:	461a      	mov	r2, r3
 8014d88:	f7ed fafb 	bl	8002382 <_write>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_write_r+0x1e>
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_write_r+0x1e>
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	200097a0 	.word	0x200097a0

08014d9c <__errno>:
 8014d9c:	4b01      	ldr	r3, [pc, #4]	@ (8014da4 <__errno+0x8>)
 8014d9e:	6818      	ldr	r0, [r3, #0]
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop
 8014da4:	2000003c 	.word	0x2000003c

08014da8 <__libc_init_array>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	4d0d      	ldr	r5, [pc, #52]	@ (8014de0 <__libc_init_array+0x38>)
 8014dac:	4c0d      	ldr	r4, [pc, #52]	@ (8014de4 <__libc_init_array+0x3c>)
 8014dae:	1b64      	subs	r4, r4, r5
 8014db0:	10a4      	asrs	r4, r4, #2
 8014db2:	2600      	movs	r6, #0
 8014db4:	42a6      	cmp	r6, r4
 8014db6:	d109      	bne.n	8014dcc <__libc_init_array+0x24>
 8014db8:	4d0b      	ldr	r5, [pc, #44]	@ (8014de8 <__libc_init_array+0x40>)
 8014dba:	4c0c      	ldr	r4, [pc, #48]	@ (8014dec <__libc_init_array+0x44>)
 8014dbc:	f000 f9a4 	bl	8015108 <_init>
 8014dc0:	1b64      	subs	r4, r4, r5
 8014dc2:	10a4      	asrs	r4, r4, #2
 8014dc4:	2600      	movs	r6, #0
 8014dc6:	42a6      	cmp	r6, r4
 8014dc8:	d105      	bne.n	8014dd6 <__libc_init_array+0x2e>
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
 8014dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dd0:	4798      	blx	r3
 8014dd2:	3601      	adds	r6, #1
 8014dd4:	e7ee      	b.n	8014db4 <__libc_init_array+0xc>
 8014dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dda:	4798      	blx	r3
 8014ddc:	3601      	adds	r6, #1
 8014dde:	e7f2      	b.n	8014dc6 <__libc_init_array+0x1e>
 8014de0:	08015254 	.word	0x08015254
 8014de4:	08015254 	.word	0x08015254
 8014de8:	08015254 	.word	0x08015254
 8014dec:	08015258 	.word	0x08015258

08014df0 <__retarget_lock_init_recursive>:
 8014df0:	4770      	bx	lr

08014df2 <__retarget_lock_acquire_recursive>:
 8014df2:	4770      	bx	lr

08014df4 <__retarget_lock_release_recursive>:
 8014df4:	4770      	bx	lr

08014df6 <memcpy>:
 8014df6:	440a      	add	r2, r1
 8014df8:	4291      	cmp	r1, r2
 8014dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8014dfe:	d100      	bne.n	8014e02 <memcpy+0xc>
 8014e00:	4770      	bx	lr
 8014e02:	b510      	push	{r4, lr}
 8014e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e0c:	4291      	cmp	r1, r2
 8014e0e:	d1f9      	bne.n	8014e04 <memcpy+0xe>
 8014e10:	bd10      	pop	{r4, pc}
	...

08014e14 <_free_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4605      	mov	r5, r0
 8014e18:	2900      	cmp	r1, #0
 8014e1a:	d041      	beq.n	8014ea0 <_free_r+0x8c>
 8014e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e20:	1f0c      	subs	r4, r1, #4
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	bfb8      	it	lt
 8014e26:	18e4      	addlt	r4, r4, r3
 8014e28:	f7ff fd56 	bl	80148d8 <__malloc_lock>
 8014e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8014ea4 <_free_r+0x90>)
 8014e2e:	6813      	ldr	r3, [r2, #0]
 8014e30:	b933      	cbnz	r3, 8014e40 <_free_r+0x2c>
 8014e32:	6063      	str	r3, [r4, #4]
 8014e34:	6014      	str	r4, [r2, #0]
 8014e36:	4628      	mov	r0, r5
 8014e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e3c:	f7ff bd52 	b.w	80148e4 <__malloc_unlock>
 8014e40:	42a3      	cmp	r3, r4
 8014e42:	d908      	bls.n	8014e56 <_free_r+0x42>
 8014e44:	6820      	ldr	r0, [r4, #0]
 8014e46:	1821      	adds	r1, r4, r0
 8014e48:	428b      	cmp	r3, r1
 8014e4a:	bf01      	itttt	eq
 8014e4c:	6819      	ldreq	r1, [r3, #0]
 8014e4e:	685b      	ldreq	r3, [r3, #4]
 8014e50:	1809      	addeq	r1, r1, r0
 8014e52:	6021      	streq	r1, [r4, #0]
 8014e54:	e7ed      	b.n	8014e32 <_free_r+0x1e>
 8014e56:	461a      	mov	r2, r3
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	b10b      	cbz	r3, 8014e60 <_free_r+0x4c>
 8014e5c:	42a3      	cmp	r3, r4
 8014e5e:	d9fa      	bls.n	8014e56 <_free_r+0x42>
 8014e60:	6811      	ldr	r1, [r2, #0]
 8014e62:	1850      	adds	r0, r2, r1
 8014e64:	42a0      	cmp	r0, r4
 8014e66:	d10b      	bne.n	8014e80 <_free_r+0x6c>
 8014e68:	6820      	ldr	r0, [r4, #0]
 8014e6a:	4401      	add	r1, r0
 8014e6c:	1850      	adds	r0, r2, r1
 8014e6e:	4283      	cmp	r3, r0
 8014e70:	6011      	str	r1, [r2, #0]
 8014e72:	d1e0      	bne.n	8014e36 <_free_r+0x22>
 8014e74:	6818      	ldr	r0, [r3, #0]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	6053      	str	r3, [r2, #4]
 8014e7a:	4408      	add	r0, r1
 8014e7c:	6010      	str	r0, [r2, #0]
 8014e7e:	e7da      	b.n	8014e36 <_free_r+0x22>
 8014e80:	d902      	bls.n	8014e88 <_free_r+0x74>
 8014e82:	230c      	movs	r3, #12
 8014e84:	602b      	str	r3, [r5, #0]
 8014e86:	e7d6      	b.n	8014e36 <_free_r+0x22>
 8014e88:	6820      	ldr	r0, [r4, #0]
 8014e8a:	1821      	adds	r1, r4, r0
 8014e8c:	428b      	cmp	r3, r1
 8014e8e:	bf04      	itt	eq
 8014e90:	6819      	ldreq	r1, [r3, #0]
 8014e92:	685b      	ldreq	r3, [r3, #4]
 8014e94:	6063      	str	r3, [r4, #4]
 8014e96:	bf04      	itt	eq
 8014e98:	1809      	addeq	r1, r1, r0
 8014e9a:	6021      	streq	r1, [r4, #0]
 8014e9c:	6054      	str	r4, [r2, #4]
 8014e9e:	e7ca      	b.n	8014e36 <_free_r+0x22>
 8014ea0:	bd38      	pop	{r3, r4, r5, pc}
 8014ea2:	bf00      	nop
 8014ea4:	20009660 	.word	0x20009660

08014ea8 <__sflush_r>:
 8014ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb0:	0716      	lsls	r6, r2, #28
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	460c      	mov	r4, r1
 8014eb6:	d454      	bmi.n	8014f62 <__sflush_r+0xba>
 8014eb8:	684b      	ldr	r3, [r1, #4]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	dc02      	bgt.n	8014ec4 <__sflush_r+0x1c>
 8014ebe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	dd48      	ble.n	8014f56 <__sflush_r+0xae>
 8014ec4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014ec6:	2e00      	cmp	r6, #0
 8014ec8:	d045      	beq.n	8014f56 <__sflush_r+0xae>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014ed0:	682f      	ldr	r7, [r5, #0]
 8014ed2:	6a21      	ldr	r1, [r4, #32]
 8014ed4:	602b      	str	r3, [r5, #0]
 8014ed6:	d030      	beq.n	8014f3a <__sflush_r+0x92>
 8014ed8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	0759      	lsls	r1, r3, #29
 8014ede:	d505      	bpl.n	8014eec <__sflush_r+0x44>
 8014ee0:	6863      	ldr	r3, [r4, #4]
 8014ee2:	1ad2      	subs	r2, r2, r3
 8014ee4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014ee6:	b10b      	cbz	r3, 8014eec <__sflush_r+0x44>
 8014ee8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014eea:	1ad2      	subs	r2, r2, r3
 8014eec:	2300      	movs	r3, #0
 8014eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014ef0:	6a21      	ldr	r1, [r4, #32]
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	47b0      	blx	r6
 8014ef6:	1c43      	adds	r3, r0, #1
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	d106      	bne.n	8014f0a <__sflush_r+0x62>
 8014efc:	6829      	ldr	r1, [r5, #0]
 8014efe:	291d      	cmp	r1, #29
 8014f00:	d82b      	bhi.n	8014f5a <__sflush_r+0xb2>
 8014f02:	4a2a      	ldr	r2, [pc, #168]	@ (8014fac <__sflush_r+0x104>)
 8014f04:	410a      	asrs	r2, r1
 8014f06:	07d6      	lsls	r6, r2, #31
 8014f08:	d427      	bmi.n	8014f5a <__sflush_r+0xb2>
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	6062      	str	r2, [r4, #4]
 8014f0e:	04d9      	lsls	r1, r3, #19
 8014f10:	6922      	ldr	r2, [r4, #16]
 8014f12:	6022      	str	r2, [r4, #0]
 8014f14:	d504      	bpl.n	8014f20 <__sflush_r+0x78>
 8014f16:	1c42      	adds	r2, r0, #1
 8014f18:	d101      	bne.n	8014f1e <__sflush_r+0x76>
 8014f1a:	682b      	ldr	r3, [r5, #0]
 8014f1c:	b903      	cbnz	r3, 8014f20 <__sflush_r+0x78>
 8014f1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014f22:	602f      	str	r7, [r5, #0]
 8014f24:	b1b9      	cbz	r1, 8014f56 <__sflush_r+0xae>
 8014f26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f2a:	4299      	cmp	r1, r3
 8014f2c:	d002      	beq.n	8014f34 <__sflush_r+0x8c>
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f7ff ff70 	bl	8014e14 <_free_r>
 8014f34:	2300      	movs	r3, #0
 8014f36:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f38:	e00d      	b.n	8014f56 <__sflush_r+0xae>
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	47b0      	blx	r6
 8014f40:	4602      	mov	r2, r0
 8014f42:	1c50      	adds	r0, r2, #1
 8014f44:	d1c9      	bne.n	8014eda <__sflush_r+0x32>
 8014f46:	682b      	ldr	r3, [r5, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d0c6      	beq.n	8014eda <__sflush_r+0x32>
 8014f4c:	2b1d      	cmp	r3, #29
 8014f4e:	d001      	beq.n	8014f54 <__sflush_r+0xac>
 8014f50:	2b16      	cmp	r3, #22
 8014f52:	d11e      	bne.n	8014f92 <__sflush_r+0xea>
 8014f54:	602f      	str	r7, [r5, #0]
 8014f56:	2000      	movs	r0, #0
 8014f58:	e022      	b.n	8014fa0 <__sflush_r+0xf8>
 8014f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f5e:	b21b      	sxth	r3, r3
 8014f60:	e01b      	b.n	8014f9a <__sflush_r+0xf2>
 8014f62:	690f      	ldr	r7, [r1, #16]
 8014f64:	2f00      	cmp	r7, #0
 8014f66:	d0f6      	beq.n	8014f56 <__sflush_r+0xae>
 8014f68:	0793      	lsls	r3, r2, #30
 8014f6a:	680e      	ldr	r6, [r1, #0]
 8014f6c:	bf08      	it	eq
 8014f6e:	694b      	ldreq	r3, [r1, #20]
 8014f70:	600f      	str	r7, [r1, #0]
 8014f72:	bf18      	it	ne
 8014f74:	2300      	movne	r3, #0
 8014f76:	eba6 0807 	sub.w	r8, r6, r7
 8014f7a:	608b      	str	r3, [r1, #8]
 8014f7c:	f1b8 0f00 	cmp.w	r8, #0
 8014f80:	dde9      	ble.n	8014f56 <__sflush_r+0xae>
 8014f82:	6a21      	ldr	r1, [r4, #32]
 8014f84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014f86:	4643      	mov	r3, r8
 8014f88:	463a      	mov	r2, r7
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	47b0      	blx	r6
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	dc08      	bgt.n	8014fa4 <__sflush_r+0xfc>
 8014f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f9a:	81a3      	strh	r3, [r4, #12]
 8014f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fa4:	4407      	add	r7, r0
 8014fa6:	eba8 0800 	sub.w	r8, r8, r0
 8014faa:	e7e7      	b.n	8014f7c <__sflush_r+0xd4>
 8014fac:	dfbffffe 	.word	0xdfbffffe

08014fb0 <_fflush_r>:
 8014fb0:	b538      	push	{r3, r4, r5, lr}
 8014fb2:	690b      	ldr	r3, [r1, #16]
 8014fb4:	4605      	mov	r5, r0
 8014fb6:	460c      	mov	r4, r1
 8014fb8:	b913      	cbnz	r3, 8014fc0 <_fflush_r+0x10>
 8014fba:	2500      	movs	r5, #0
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	bd38      	pop	{r3, r4, r5, pc}
 8014fc0:	b118      	cbz	r0, 8014fca <_fflush_r+0x1a>
 8014fc2:	6a03      	ldr	r3, [r0, #32]
 8014fc4:	b90b      	cbnz	r3, 8014fca <_fflush_r+0x1a>
 8014fc6:	f7ff fd1f 	bl	8014a08 <__sinit>
 8014fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d0f3      	beq.n	8014fba <_fflush_r+0xa>
 8014fd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014fd4:	07d0      	lsls	r0, r2, #31
 8014fd6:	d404      	bmi.n	8014fe2 <_fflush_r+0x32>
 8014fd8:	0599      	lsls	r1, r3, #22
 8014fda:	d402      	bmi.n	8014fe2 <_fflush_r+0x32>
 8014fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fde:	f7ff ff08 	bl	8014df2 <__retarget_lock_acquire_recursive>
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	4621      	mov	r1, r4
 8014fe6:	f7ff ff5f 	bl	8014ea8 <__sflush_r>
 8014fea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fec:	07da      	lsls	r2, r3, #31
 8014fee:	4605      	mov	r5, r0
 8014ff0:	d4e4      	bmi.n	8014fbc <_fflush_r+0xc>
 8014ff2:	89a3      	ldrh	r3, [r4, #12]
 8014ff4:	059b      	lsls	r3, r3, #22
 8014ff6:	d4e1      	bmi.n	8014fbc <_fflush_r+0xc>
 8014ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ffa:	f7ff fefb 	bl	8014df4 <__retarget_lock_release_recursive>
 8014ffe:	e7dd      	b.n	8014fbc <_fflush_r+0xc>

08015000 <__swhatbuf_r>:
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	460c      	mov	r4, r1
 8015004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015008:	2900      	cmp	r1, #0
 801500a:	b096      	sub	sp, #88	@ 0x58
 801500c:	4615      	mov	r5, r2
 801500e:	461e      	mov	r6, r3
 8015010:	da0d      	bge.n	801502e <__swhatbuf_r+0x2e>
 8015012:	89a3      	ldrh	r3, [r4, #12]
 8015014:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015018:	f04f 0100 	mov.w	r1, #0
 801501c:	bf14      	ite	ne
 801501e:	2340      	movne	r3, #64	@ 0x40
 8015020:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015024:	2000      	movs	r0, #0
 8015026:	6031      	str	r1, [r6, #0]
 8015028:	602b      	str	r3, [r5, #0]
 801502a:	b016      	add	sp, #88	@ 0x58
 801502c:	bd70      	pop	{r4, r5, r6, pc}
 801502e:	466a      	mov	r2, sp
 8015030:	f000 f848 	bl	80150c4 <_fstat_r>
 8015034:	2800      	cmp	r0, #0
 8015036:	dbec      	blt.n	8015012 <__swhatbuf_r+0x12>
 8015038:	9901      	ldr	r1, [sp, #4]
 801503a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801503e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015042:	4259      	negs	r1, r3
 8015044:	4159      	adcs	r1, r3
 8015046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801504a:	e7eb      	b.n	8015024 <__swhatbuf_r+0x24>

0801504c <__smakebuf_r>:
 801504c:	898b      	ldrh	r3, [r1, #12]
 801504e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015050:	079d      	lsls	r5, r3, #30
 8015052:	4606      	mov	r6, r0
 8015054:	460c      	mov	r4, r1
 8015056:	d507      	bpl.n	8015068 <__smakebuf_r+0x1c>
 8015058:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801505c:	6023      	str	r3, [r4, #0]
 801505e:	6123      	str	r3, [r4, #16]
 8015060:	2301      	movs	r3, #1
 8015062:	6163      	str	r3, [r4, #20]
 8015064:	b003      	add	sp, #12
 8015066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015068:	ab01      	add	r3, sp, #4
 801506a:	466a      	mov	r2, sp
 801506c:	f7ff ffc8 	bl	8015000 <__swhatbuf_r>
 8015070:	9f00      	ldr	r7, [sp, #0]
 8015072:	4605      	mov	r5, r0
 8015074:	4639      	mov	r1, r7
 8015076:	4630      	mov	r0, r6
 8015078:	f7ff fbae 	bl	80147d8 <_malloc_r>
 801507c:	b948      	cbnz	r0, 8015092 <__smakebuf_r+0x46>
 801507e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015082:	059a      	lsls	r2, r3, #22
 8015084:	d4ee      	bmi.n	8015064 <__smakebuf_r+0x18>
 8015086:	f023 0303 	bic.w	r3, r3, #3
 801508a:	f043 0302 	orr.w	r3, r3, #2
 801508e:	81a3      	strh	r3, [r4, #12]
 8015090:	e7e2      	b.n	8015058 <__smakebuf_r+0xc>
 8015092:	89a3      	ldrh	r3, [r4, #12]
 8015094:	6020      	str	r0, [r4, #0]
 8015096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801509a:	81a3      	strh	r3, [r4, #12]
 801509c:	9b01      	ldr	r3, [sp, #4]
 801509e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80150a2:	b15b      	cbz	r3, 80150bc <__smakebuf_r+0x70>
 80150a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150a8:	4630      	mov	r0, r6
 80150aa:	f000 f81d 	bl	80150e8 <_isatty_r>
 80150ae:	b128      	cbz	r0, 80150bc <__smakebuf_r+0x70>
 80150b0:	89a3      	ldrh	r3, [r4, #12]
 80150b2:	f023 0303 	bic.w	r3, r3, #3
 80150b6:	f043 0301 	orr.w	r3, r3, #1
 80150ba:	81a3      	strh	r3, [r4, #12]
 80150bc:	89a3      	ldrh	r3, [r4, #12]
 80150be:	431d      	orrs	r5, r3
 80150c0:	81a5      	strh	r5, [r4, #12]
 80150c2:	e7cf      	b.n	8015064 <__smakebuf_r+0x18>

080150c4 <_fstat_r>:
 80150c4:	b538      	push	{r3, r4, r5, lr}
 80150c6:	4d07      	ldr	r5, [pc, #28]	@ (80150e4 <_fstat_r+0x20>)
 80150c8:	2300      	movs	r3, #0
 80150ca:	4604      	mov	r4, r0
 80150cc:	4608      	mov	r0, r1
 80150ce:	4611      	mov	r1, r2
 80150d0:	602b      	str	r3, [r5, #0]
 80150d2:	f7ed f97e 	bl	80023d2 <_fstat>
 80150d6:	1c43      	adds	r3, r0, #1
 80150d8:	d102      	bne.n	80150e0 <_fstat_r+0x1c>
 80150da:	682b      	ldr	r3, [r5, #0]
 80150dc:	b103      	cbz	r3, 80150e0 <_fstat_r+0x1c>
 80150de:	6023      	str	r3, [r4, #0]
 80150e0:	bd38      	pop	{r3, r4, r5, pc}
 80150e2:	bf00      	nop
 80150e4:	200097a0 	.word	0x200097a0

080150e8 <_isatty_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4d06      	ldr	r5, [pc, #24]	@ (8015104 <_isatty_r+0x1c>)
 80150ec:	2300      	movs	r3, #0
 80150ee:	4604      	mov	r4, r0
 80150f0:	4608      	mov	r0, r1
 80150f2:	602b      	str	r3, [r5, #0]
 80150f4:	f7ed f97d 	bl	80023f2 <_isatty>
 80150f8:	1c43      	adds	r3, r0, #1
 80150fa:	d102      	bne.n	8015102 <_isatty_r+0x1a>
 80150fc:	682b      	ldr	r3, [r5, #0]
 80150fe:	b103      	cbz	r3, 8015102 <_isatty_r+0x1a>
 8015100:	6023      	str	r3, [r4, #0]
 8015102:	bd38      	pop	{r3, r4, r5, pc}
 8015104:	200097a0 	.word	0x200097a0

08015108 <_init>:
 8015108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510a:	bf00      	nop
 801510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801510e:	bc08      	pop	{r3}
 8015110:	469e      	mov	lr, r3
 8015112:	4770      	bx	lr

08015114 <_fini>:
 8015114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015116:	bf00      	nop
 8015118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801511a:	bc08      	pop	{r3}
 801511c:	469e      	mov	lr, r3
 801511e:	4770      	bx	lr
